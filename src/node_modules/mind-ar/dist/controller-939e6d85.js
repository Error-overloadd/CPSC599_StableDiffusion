import { c as Qs, g as yw, O as ww } from "./ui-56ede774.js";
function Iw(n, t) {
  for (var e = 0; e < t.length; e++) {
    const s = t[e];
    if (typeof s != "string" && !Array.isArray(s)) {
      for (const o in s)
        if (o !== "default" && !(o in n)) {
          const r = Object.getOwnPropertyDescriptor(s, o);
          r && Object.defineProperty(n, o, r.get ? r : {
            enumerable: !0,
            get: () => s[o]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cw = 1e-7, vw = 1e-4;
class Zg {
  constructor(t, e) {
    this.backend = t, this.dataMover = e, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(t) {
    return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);
  }
  set(t, e) {
    this.dataIdsCount++, this.data.set(t, e);
  }
  has(t) {
    return this.data.has(t);
  }
  delete(t) {
    return this.dataIdsCount--, this.data.delete(t);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
}
class Zh {
  refCount(t) {
    return yn("refCount");
  }
  incRef(t) {
    return yn("incRef");
  }
  timerAvailable() {
    return !0;
  }
  time(t) {
    return yn("time");
  }
  read(t) {
    return yn("read");
  }
  readSync(t) {
    return yn("readSync");
  }
  readToGPU(t, e) {
    return yn("readToGPU");
  }
  numDataIds() {
    return yn("numDataIds");
  }
  disposeData(t, e) {
    return yn("disposeData");
  }
  write(t, e, s) {
    return yn("write");
  }
  move(t, e, s, o, r) {
    return yn("move");
  }
  memory() {
    return yn("memory");
  }
  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
  floatPrecision() {
    return yn("floatPrecision");
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? Cw : vw;
  }
  dispose() {
    return yn("dispose");
  }
}
function yn(n) {
  throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kh(n) {
  let t = n.length, e = 0;
  for (; t > 0; )
    e = Math.random() * t | 0, t--, cn(n, t, e);
}
function Sw(n, t) {
  if (n.length !== t.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);
  let e = n.length, s = 0;
  for (; e > 0; )
    s = Math.random() * e | 0, e--, cn(n, e, s), cn(t, e, s);
}
function Ks(n, t, e) {
  return Math.max(n, Math.min(t, e));
}
function Ml(n) {
  return n % 2 === 0 ? n : n + 1;
}
function cn(n, t, e) {
  const s = n[t];
  n[t] = n[e], n[e] = s;
}
function Kg(n) {
  let t = 0;
  for (let e = 0; e < n.length; e++)
    t += n[e];
  return t;
}
function kw(n, t) {
  const e = Math.random();
  return t * e + (1 - e) * n;
}
function Tw(n, t) {
  let e = 0;
  for (let s = 0; s < n.length; s++) {
    const o = Number(n[s]) - Number(t[s]);
    e += o * o;
  }
  return e;
}
function S(n, t) {
  if (!n)
    throw new Error(typeof t == "string" ? t : t());
}
function Qe(n, t, e = "") {
  S(At(n, t), () => e + ` Shapes ${n} and ${t} must match`);
}
function Dl(n) {
  S(n != null, () => "The input to the tensor constructor must be a non-null value.");
}
function vo(n, t = [], e = !1) {
  if (t == null && (t = []), Array.isArray(n) || Zn(n) && !e)
    for (let s = 0; s < n.length; ++s)
      vo(n[s], t, e);
  else
    t.push(n);
  return t;
}
function H(n) {
  if (n.length === 0)
    return 1;
  let t = n[0];
  for (let e = 1; e < n.length; e++)
    t *= n[e];
  return t;
}
function Nw(n) {
  return n.length === 0;
}
function At(n, t) {
  if (n === t)
    return !0;
  if (n == null || t == null || n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function So(n) {
  return n % 1 === 0;
}
function $w(n) {
  if (Math.tanh != null)
    return Math.tanh(n);
  if (n === 1 / 0)
    return 1;
  if (n === -1 / 0)
    return -1;
  {
    const t = Math.exp(2 * n);
    return (t - 1) / (t + 1);
  }
}
function qa(n) {
  const t = Math.ceil(Math.sqrt(n));
  return [t, Math.ceil(n / t)];
}
function Rw(n) {
  const t = new Uint32Array(n);
  for (let e = 0; e < n; ++e)
    t[e] = e;
  return Kh(t), t;
}
function xo(n, t) {
  return t <= n.length ? n : n + " ".repeat(t - n.length);
}
function Yu(n, t = (o) => 0, e, s = setTimeout) {
  return new Promise((o, r) => {
    let i = 0;
    const a = () => {
      if (n()) {
        o();
        return;
      }
      i++;
      const l = t(i);
      if (e != null && i >= e) {
        r();
        return;
      }
      s(a, l);
    };
    a();
  });
}
function Bh(n, t) {
  let e = 1, s = -1;
  for (let r = 0; r < n.length; ++r)
    if (n[r] >= 0)
      e *= n[r];
    else if (n[r] === -1) {
      if (s !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${r}`);
      s = r;
    } else if (n[r] < 0)
      throw Error(`Shapes can not be < 0. Found ${n[r]} at dim ${r}`);
  if (s === -1) {
    if (t > 0 && t !== e)
      throw Error(`Size(${t}) must match the product of shape ${n}`);
    return n;
  }
  if (e === 0)
    throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);
  if (t % e !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);
  const o = n.slice();
  return o[s] = t / e, o;
}
function Dt(n, t) {
  const e = t.length;
  return n = n == null ? t.map((s, o) => o) : [].concat(n), S(n.every((s) => s >= -e && s < e), () => `All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`), S(n.every((s) => So(s)), () => `All values in axis param must be integers but got axis ${n}`), n.map((s) => s < 0 ? e + s : s);
}
function Gs(n, t) {
  const e = [], s = [], o = t != null && Array.isArray(t) && t.length === 0, r = t == null || o ? null : Dt(t, n).sort();
  let i = 0;
  for (let a = 0; a < n.length; ++a) {
    if (r != null) {
      if (r[i] === a && n[a] !== 1)
        throw new Error(`Can't squeeze axis ${a} since its dim '${n[a]}' is not 1`);
      (r[i] == null || r[i] > a) && n[a] === 1 && (e.push(n[a]), s.push(a)), r[i] <= a && i++;
    }
    n[a] !== 1 && (e.push(n[a]), s.push(a));
  }
  return { newShape: e, keptDims: s };
}
function he(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function Ot(n, t) {
  let e = null;
  if (n == null || n === "float32")
    e = new Float32Array(t);
  else if (n === "int32")
    e = new Int32Array(t);
  else if (n === "bool")
    e = new Uint8Array(t);
  else if (n === "string")
    e = new Array(t);
  else
    throw new Error(`Unknown data type ${n}`);
  return e;
}
function Bg(n, t) {
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    if (isNaN(s) || !isFinite(s))
      throw Error(`A tensor of type ${t} being uploaded contains ${s}.`);
  }
}
function Hg(n) {
  return n === "bool" || n === "complex64" || n === "float32" || n === "int32" || n === "string";
}
function Hh(n, t) {
  return !(t === "complex64" || t === "float32" && n !== "complex64" || t === "int32" && n !== "float32" && n !== "complex64" || t === "bool" && n === "bool");
}
function Zn(n) {
  return n instanceof Float32Array || n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray;
}
function tl(n) {
  if (n === "float32" || n === "int32")
    return 4;
  if (n === "complex64")
    return 8;
  if (n === "bool")
    return 1;
  throw new Error(`Unknown dtype ${n}`);
}
function _g(n) {
  if (n == null)
    return 0;
  let t = 0;
  return n.forEach((e) => t += e.length), t;
}
function br(n) {
  return typeof n == "string" || n instanceof String;
}
function Ug(n) {
  return typeof n == "boolean";
}
function el(n) {
  return typeof n == "number";
}
function xr(n) {
  return Array.isArray(n) ? xr(n[0]) : n instanceof Float32Array ? "float32" : n instanceof Int32Array || n instanceof Uint8Array || n instanceof Uint8ClampedArray ? "int32" : el(n) ? "float32" : br(n) ? "string" : Ug(n) ? "bool" : "float32";
}
function Bs(n) {
  return !!(n && n.constructor && n.call && n.apply);
}
function nl(n, t) {
  for (let e = t; e < n; ++e)
    if (n % e === 0)
      return e;
  return n;
}
function gt(n) {
  const t = n.length;
  if (t < 2)
    return [];
  const e = new Array(t - 1);
  e[t - 2] = n[t - 1];
  for (let s = t - 3; s >= 0; --s)
    e[s] = e[s + 1] * n[s + 1];
  return e;
}
function Yg(n, t, e, s = !1) {
  const o = new Array();
  if (t.length === 1) {
    const r = t[0] * (s ? 2 : 1);
    for (let i = 0; i < r; i++)
      o[i] = e[n + i];
  } else {
    const r = t[0], i = t.slice(1), a = i.reduce((l, c) => l * c) * (s ? 2 : 1);
    for (let l = 0; l < r; l++)
      o[l] = Yg(n + l * a, i, e, s);
  }
  return o;
}
function On(n, t, e = !1) {
  if (n.length === 0)
    return t[0];
  const s = n.reduce((o, r) => o * r) * (e ? 2 : 1);
  if (s === 0)
    return [];
  if (s !== t.length)
    throw new Error(`[${n}] does not match the input size ${t.length}${e ? " for a complex tensor" : ""}.`);
  return Yg(0, n, t, e);
}
function Fl(n, t) {
  const e = be(n, t);
  for (let s = 0; s < e.length; s++)
    e[s] = 1;
  return e;
}
function be(n, t) {
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool")
    return new Uint8Array(n);
  throw new Error(`Unknown data type ${t}`);
}
function _h(n, t) {
  const e = n.reduce((s, o) => s * o, 1);
  if (t == null || t === "float32")
    return On(n, new Float32Array(e));
  if (t === "int32")
    return On(n, new Int32Array(e));
  if (t === "bool")
    return On(n, new Uint8Array(e));
  throw new Error(`Unknown data type ${t}`);
}
function Uh(n) {
  n.forEach((t) => {
    S(Number.isInteger(t) && t >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${n}].`);
  });
}
function pn(n, t, e) {
  if (t === 0)
    return 0;
  if (t === 1)
    return n[0];
  let s = n[n.length - 1];
  for (let o = 0; o < n.length - 1; ++o)
    s += e[o] * n[o];
  return s;
}
function ys(n, t, e) {
  if (t === 0)
    return [];
  if (t === 1)
    return [n];
  const s = new Array(t);
  for (let o = 0; o < s.length - 1; ++o)
    s[o] = Math.floor(n / e[o]), n -= s[o] * e[o];
  return s[s.length - 1] = n, s;
}
function zl(n) {
  return n && n.then && typeof n.then == "function";
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rm = "tfjsflags";
class Gw {
  // tslint:disable-next-line: no-any
  constructor(t) {
    this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = Lw, this.populateURLFlags();
  }
  setPlatform(t, e) {
    this.platform != null && (B().getBool("IS_TEST") || B().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)), this.platformName = t, this.platform = e;
  }
  registerFlag(t, e, s) {
    if (this.flagRegistry[t] = { evaluationFn: e, setHook: s }, this.urlFlags[t] != null) {
      const o = this.urlFlags[t];
      B().getBool("IS_TEST") || B().getBool("PROD") || console.warn(`Setting feature override from URL ${t}: ${o}.`), this.set(t, o);
    }
  }
  async getAsync(t) {
    return t in this.flags ? this.flags[t] : (this.flags[t] = await this.evaluateFlag(t), this.flags[t]);
  }
  get(t) {
    if (t in this.flags)
      return this.flags[t];
    const e = this.evaluateFlag(t);
    if (zl(e))
      throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[t] = e, this.flags[t];
  }
  getNumber(t) {
    return this.get(t);
  }
  getBool(t) {
    return this.get(t);
  }
  getFlags() {
    return this.flags;
  }
  // For backwards compatibility.
  get features() {
    return this.flags;
  }
  set(t, e) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot set flag ${t} as it has not been registered.`);
    this.flags[t] = e, this.flagRegistry[t].setHook != null && this.flagRegistry[t].setHook(e);
  }
  evaluateFlag(t) {
    if (this.flagRegistry[t] == null)
      throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);
    return this.flagRegistry[t].evaluationFn();
  }
  setFlags(t) {
    this.flags = Object.assign({}, t);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global > "u" || typeof this.global.location > "u" || typeof this.global.location.search > "u")
      return;
    const t = this.getQueryParams(this.global.location.search);
    rm in t && t[rm].split(",").forEach((s) => {
      const [o, r] = s.split(":");
      this.urlFlags[o] = Ww(o, r);
    });
  }
}
function Lw(n) {
  const t = {};
  return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (e, ...s) => (Ew(t, s[0], s[1]), s.join("="))), t;
}
function Ew(n, t, e) {
  n[decodeURIComponent(t)] = decodeURIComponent(e || "");
}
function Ww(n, t) {
  if (t = t.toLowerCase(), t === "true" || t === "false")
    return t === "true";
  if (`${+t}` === t)
    return +t;
  throw new Error(`Could not parse value flag value ${t} for flag ${n}.`);
}
function B() {
  return jg;
}
let jg = null;
function Mw(n) {
  jg = n;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let wu;
function Qg() {
  if (wu == null) {
    let n;
    if (typeof window < "u")
      n = window;
    else if (typeof global < "u")
      n = global;
    else if (typeof process < "u")
      n = process;
    else if (typeof self < "u")
      n = self;
    else
      throw new Error("Could not find a global object");
    wu = n;
  }
  return wu;
}
function Dw() {
  const n = Qg();
  return n._tfGlobals == null && (n._tfGlobals = /* @__PURE__ */ new Map()), n._tfGlobals;
}
function Yh(n, t) {
  const e = Dw();
  if (e.has(n))
    return e.get(n);
  {
    const s = t();
    return e.set(n, s), e.get(n);
  }
}
const Vl = "Abs", ci = "Acos", ui = "Acosh", yr = "Add", jh = "AddN", Qh = "All", Jh = "Any", Pl = "ArgMax", Xl = "ArgMin", hi = "Asin", di = "Asinh", pi = "Atan", fi = "Atanh", mi = "Atan2", Ol = "AvgPool", qh = "AvgPoolGrad", Al = "AvgPool3D", td = "AvgPool3DGrad", Zl = "BatchMatMul", Kl = "BatchToSpaceND", ed = "Bincount", Fw = "BroadcastTo", Jg = "BroadcastArgs", gi = "Cast", bi = "Ceil", xi = "ClipByValue", nd = "Complex", Bl = "ComplexAbs", Hl = "Concat", _l = "Conv2D", sd = "Conv2DBackpropFilter", Ul = "Conv2DBackpropInput", Yl = "Conv3D", od = "Conv3DBackpropFilterV2", rd = "Conv3DBackpropInputV2", yi = "Cos", wi = "Cosh", id = "Cumprod", jl = "Cumsum", ad = "CropAndResize", qg = "DenseBincount", ld = "DepthToSpace", Ql = "DepthwiseConv2dNative", cd = "DepthwiseConv2dNativeBackpropFilter", ud = "DepthwiseConv2dNativeBackpropInput", tb = "Diag", Jl = "Dilation2D", ju = "Dilation2DBackpropInput", Qu = "Dilation2DBackpropFilter", Ii = "RealDiv", eb = "Einsum", Ci = "Elu", hd = "EluGrad", vi = "Erf", ql = "Equal", Si = "Exp", tc = "ExpandDims", ki = "Expm1", dd = "FFT", pd = "Fill", fd = "FlipLeftRight", Ti = "Floor", Ni = "FloorDiv", ec = "FusedBatchNorm", nc = "GatherV2", nb = "GatherNd", sc = "Greater", $i = "GreaterEqual", Ri = "Identity", md = "IFFT", gd = "Imag", Gi = "IsFinite", Li = "IsInf", Ei = "IsNan", oc = "LeakyRelu", rc = "Less", ic = "LessEqual", sb = "LinSpace", Wi = "Log", Mi = "Log1p", ac = "LogicalAnd", lc = "LogicalNot", cc = "LogicalOr", h4 = "LogicalXor", zw = "LogSoftmax", d4 = "LowerBound", uc = "LRN", bd = "LRNGrad", hc = "Max", Di = "Maximum", dc = "MaxPool", xd = "MaxPoolGrad", pc = "MaxPool3D", yd = "MaxPool3DGrad", ob = "MaxPoolWithArgmax", fc = "Mean", mc = "Min", Fi = "Minimum", gc = "MirrorPad", zi = "Mod", rb = "Multinomial", Vi = "Multiply", bc = "Neg", xc = "NotEqual", wd = "NonMaxSuppressionV3", Id = "NonMaxSuppressionV4", Cd = "NonMaxSuppressionV5", yc = "OnesLike", wc = "OneHot", Ic = "Pack", Cc = "PadV2", p4 = "Pool", Pi = "Pow", vc = "Prelu", Sc = "Prod", ib = "RaggedGather", ab = "RaggedTensorToTensor", vd = "Range", Sd = "Real", Xi = "Reciprocal", Oi = "Relu", kc = "Reshape", Tc = "ResizeNearestNeighbor", kd = "ResizeNearestNeighborGrad", Nc = "ResizeBilinear", Td = "ResizeBilinearGrad", Ai = "Relu6", $c = "Reverse", Zi = "Round", Ki = "Rsqrt", lb = "ScatterNd", cb = "SearchSorted", Rc = "Select", Bi = "Selu", Gc = "Slice", Hi = "Sin", _i = "Sinh", Ui = "Sign", Yi = "Sigmoid", ji = "Softplus", Qi = "Sqrt", Lc = "Sum", Ec = "SpaceToBatchND", Wc = "SplitV", Mc = "Softmax", Nd = "SparseFillEmptyRows", $d = "SparseReshape", Rd = "SparseSegmentMean", Gd = "SparseSegmentSum", ub = "SparseToDense", Ji = "SquaredDifference", Ld = "Square", Ed = "StridedSlice", Wd = "StringNGrams", Md = "StringSplit", Dd = "StringToHashBucketFast", qi = "Sub", ta = "Tan", ea = "Tanh", na = "Tile", Fd = "TopK", zd = "Transform", Jo = "Transpose", Vd = "Unique", Dc = "Unpack", Fc = "UnsortedSegmentSum", f4 = "UpperBound", zc = "ZerosLike", sa = "Step", Ju = "FromPixels", Pd = "RotateWithOffset", sl = "_FusedMatMul", ol = "FusedConv2D", hb = "FusedDepthwiseConv2D";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wn(...n) {
  B().getBool("IS_TEST") || B().getBool("PROD") || console.warn(...n);
}
function Vw(...n) {
  B().getBool("IS_TEST") || B().getBool("PROD") || console.log(...n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const or = Yh("kernelRegistry", () => /* @__PURE__ */ new Map()), jr = Yh("gradRegistry", () => /* @__PURE__ */ new Map());
function qu(n, t) {
  const e = Xd(n, t);
  return or.get(e);
}
function im(n) {
  return jr.get(n);
}
function th(n) {
  const t = or.entries(), e = [];
  for (; ; ) {
    const { done: s, value: o } = t.next();
    if (s)
      break;
    const [r, i] = o, [a] = r.split("_");
    a === n && e.push(i);
  }
  return e;
}
function bn(n) {
  const { kernelName: t, backendName: e } = n, s = Xd(t, e);
  or.has(s) && wn(`The kernel '${t}' for backend '${e}' is already registered`), or.set(s, n);
}
function Pw(n) {
  const { kernelName: t } = n;
  jr.has(t) && B().getBool("DEBUG") && wn(`Overriding the gradient for '${t}'`), jr.set(t, n);
}
function m4(n, t) {
  const e = Xd(n, t);
  if (!or.has(e))
    throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);
  or.delete(e);
}
function g4(n) {
  if (!jr.has(n))
    throw new Error(`The gradient '${n}' for backend is not registered`);
  jr.delete(n);
}
function b4(n, t) {
  th(n).forEach((s) => {
    const o = Object.assign({}, s, { backendName: t });
    bn(o);
  });
}
function Xd(n, t) {
  return `${t}_${n}`;
}
var eh = re, Fn = null;
try {
  Fn = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    13,
    2,
    96,
    0,
    1,
    127,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    3,
    7,
    6,
    0,
    1,
    1,
    1,
    1,
    1,
    6,
    6,
    1,
    127,
    1,
    65,
    0,
    11,
    7,
    50,
    6,
    3,
    109,
    117,
    108,
    0,
    1,
    5,
    100,
    105,
    118,
    95,
    115,
    0,
    2,
    5,
    100,
    105,
    118,
    95,
    117,
    0,
    3,
    5,
    114,
    101,
    109,
    95,
    115,
    0,
    4,
    5,
    114,
    101,
    109,
    95,
    117,
    0,
    5,
    8,
    103,
    101,
    116,
    95,
    104,
    105,
    103,
    104,
    0,
    0,
    10,
    191,
    1,
    6,
    4,
    0,
    35,
    0,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    126,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    127,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    128,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    129,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11,
    36,
    1,
    1,
    126,
    32,
    0,
    173,
    32,
    1,
    173,
    66,
    32,
    134,
    132,
    32,
    2,
    173,
    32,
    3,
    173,
    66,
    32,
    134,
    132,
    130,
    34,
    4,
    66,
    32,
    135,
    167,
    36,
    0,
    32,
    4,
    167,
    11
  ])), {}).exports;
} catch {
}
function re(n, t, e) {
  this.low = n | 0, this.high = t | 0, this.unsigned = !!e;
}
re.prototype.__isLong__;
Object.defineProperty(re.prototype, "__isLong__", { value: !0 });
function xn(n) {
  return (n && n.__isLong__) === !0;
}
re.isLong = xn;
var am = {}, lm = {};
function Fo(n, t) {
  var e, s, o;
  return t ? (n >>>= 0, (o = 0 <= n && n < 256) && (s = lm[n], s) ? s : (e = ie(n, (n | 0) < 0 ? -1 : 0, !0), o && (lm[n] = e), e)) : (n |= 0, (o = -128 <= n && n < 128) && (s = am[n], s) ? s : (e = ie(n, n < 0 ? -1 : 0, !1), o && (am[n] = e), e));
}
re.fromInt = Fo;
function zn(n, t) {
  if (isNaN(n))
    return t ? mo : Vn;
  if (t) {
    if (n < 0)
      return mo;
    if (n >= db)
      return mb;
  } else {
    if (n <= -um)
      return hn;
    if (n + 1 >= um)
      return fb;
  }
  return n < 0 ? zn(-n, t).neg() : ie(n % rr | 0, n / rr | 0, t);
}
re.fromNumber = zn;
function ie(n, t, e) {
  return new re(n, t, e);
}
re.fromBits = ie;
var rl = Math.pow;
function Od(n, t, e) {
  if (n.length === 0)
    throw Error("empty string");
  if (n === "NaN" || n === "Infinity" || n === "+Infinity" || n === "-Infinity")
    return Vn;
  if (typeof t == "number" ? (e = t, t = !1) : t = !!t, e = e || 10, e < 2 || 36 < e)
    throw RangeError("radix");
  var s;
  if ((s = n.indexOf("-")) > 0)
    throw Error("interior hyphen");
  if (s === 0)
    return Od(n.substring(1), t, e).neg();
  for (var o = zn(rl(e, 8)), r = Vn, i = 0; i < n.length; i += 8) {
    var a = Math.min(8, n.length - i), l = parseInt(n.substring(i, i + a), e);
    if (a < 8) {
      var c = zn(rl(e, a));
      r = r.mul(c).add(zn(l));
    } else
      r = r.mul(o), r = r.add(zn(l));
  }
  return r.unsigned = t, r;
}
re.fromString = Od;
function as(n, t) {
  return typeof n == "number" ? zn(n, t) : typeof n == "string" ? Od(n, t) : ie(n.low, n.high, typeof t == "boolean" ? t : n.unsigned);
}
re.fromValue = as;
var cm = 1 << 16, Xw = 1 << 24, rr = cm * cm, db = rr * rr, um = db / 2, hm = Fo(Xw), Vn = Fo(0);
re.ZERO = Vn;
var mo = Fo(0, !0);
re.UZERO = mo;
var Qo = Fo(1);
re.ONE = Qo;
var pb = Fo(1, !0);
re.UONE = pb;
var nh = Fo(-1);
re.NEG_ONE = nh;
var fb = ie(-1, 2147483647, !1);
re.MAX_VALUE = fb;
var mb = ie(-1, -1, !0);
re.MAX_UNSIGNED_VALUE = mb;
var hn = ie(0, -2147483648, !1);
re.MIN_VALUE = hn;
var ut = re.prototype;
ut.toInt = function() {
  return this.unsigned ? this.low >>> 0 : this.low;
};
ut.toNumber = function() {
  return this.unsigned ? (this.high >>> 0) * rr + (this.low >>> 0) : this.high * rr + (this.low >>> 0);
};
ut.toString = function(t) {
  if (t = t || 10, t < 2 || 36 < t)
    throw RangeError("radix");
  if (this.isZero())
    return "0";
  if (this.isNegative())
    if (this.eq(hn)) {
      var e = zn(t), s = this.div(e), o = s.mul(e).sub(this);
      return s.toString(t) + o.toInt().toString(t);
    } else
      return "-" + this.neg().toString(t);
  for (var r = zn(rl(t, 6), this.unsigned), i = this, a = ""; ; ) {
    var l = i.div(r), c = i.sub(l.mul(r)).toInt() >>> 0, u = c.toString(t);
    if (i = l, i.isZero())
      return u + a;
    for (; u.length < 6; )
      u = "0" + u;
    a = "" + u + a;
  }
};
ut.getHighBits = function() {
  return this.high;
};
ut.getHighBitsUnsigned = function() {
  return this.high >>> 0;
};
ut.getLowBits = function() {
  return this.low;
};
ut.getLowBitsUnsigned = function() {
  return this.low >>> 0;
};
ut.getNumBitsAbs = function() {
  if (this.isNegative())
    return this.eq(hn) ? 64 : this.neg().getNumBitsAbs();
  for (var t = this.high != 0 ? this.high : this.low, e = 31; e > 0 && !(t & 1 << e); e--)
    ;
  return this.high != 0 ? e + 33 : e + 1;
};
ut.isZero = function() {
  return this.high === 0 && this.low === 0;
};
ut.eqz = ut.isZero;
ut.isNegative = function() {
  return !this.unsigned && this.high < 0;
};
ut.isPositive = function() {
  return this.unsigned || this.high >= 0;
};
ut.isOdd = function() {
  return (this.low & 1) === 1;
};
ut.isEven = function() {
  return (this.low & 1) === 0;
};
ut.equals = function(t) {
  return xn(t) || (t = as(t)), this.unsigned !== t.unsigned && this.high >>> 31 === 1 && t.high >>> 31 === 1 ? !1 : this.high === t.high && this.low === t.low;
};
ut.eq = ut.equals;
ut.notEquals = function(t) {
  return !this.eq(
    /* validates */
    t
  );
};
ut.neq = ut.notEquals;
ut.ne = ut.notEquals;
ut.lessThan = function(t) {
  return this.comp(
    /* validates */
    t
  ) < 0;
};
ut.lt = ut.lessThan;
ut.lessThanOrEqual = function(t) {
  return this.comp(
    /* validates */
    t
  ) <= 0;
};
ut.lte = ut.lessThanOrEqual;
ut.le = ut.lessThanOrEqual;
ut.greaterThan = function(t) {
  return this.comp(
    /* validates */
    t
  ) > 0;
};
ut.gt = ut.greaterThan;
ut.greaterThanOrEqual = function(t) {
  return this.comp(
    /* validates */
    t
  ) >= 0;
};
ut.gte = ut.greaterThanOrEqual;
ut.ge = ut.greaterThanOrEqual;
ut.compare = function(t) {
  if (xn(t) || (t = as(t)), this.eq(t))
    return 0;
  var e = this.isNegative(), s = t.isNegative();
  return e && !s ? -1 : !e && s ? 1 : this.unsigned ? t.high >>> 0 > this.high >>> 0 || t.high === this.high && t.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t).isNegative() ? -1 : 1;
};
ut.comp = ut.compare;
ut.negate = function() {
  return !this.unsigned && this.eq(hn) ? hn : this.not().add(Qo);
};
ut.neg = ut.negate;
ut.add = function(t) {
  xn(t) || (t = as(t));
  var e = this.high >>> 16, s = this.high & 65535, o = this.low >>> 16, r = this.low & 65535, i = t.high >>> 16, a = t.high & 65535, l = t.low >>> 16, c = t.low & 65535, u = 0, h = 0, d = 0, p = 0;
  return p += r + c, d += p >>> 16, p &= 65535, d += o + l, h += d >>> 16, d &= 65535, h += s + a, u += h >>> 16, h &= 65535, u += e + i, u &= 65535, ie(d << 16 | p, u << 16 | h, this.unsigned);
};
ut.subtract = function(t) {
  return xn(t) || (t = as(t)), this.add(t.neg());
};
ut.sub = ut.subtract;
ut.multiply = function(t) {
  if (this.isZero())
    return Vn;
  if (xn(t) || (t = as(t)), Fn) {
    var e = Fn.mul(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return ie(e, Fn.get_high(), this.unsigned);
  }
  if (t.isZero())
    return Vn;
  if (this.eq(hn))
    return t.isOdd() ? hn : Vn;
  if (t.eq(hn))
    return this.isOdd() ? hn : Vn;
  if (this.isNegative())
    return t.isNegative() ? this.neg().mul(t.neg()) : this.neg().mul(t).neg();
  if (t.isNegative())
    return this.mul(t.neg()).neg();
  if (this.lt(hm) && t.lt(hm))
    return zn(this.toNumber() * t.toNumber(), this.unsigned);
  var s = this.high >>> 16, o = this.high & 65535, r = this.low >>> 16, i = this.low & 65535, a = t.high >>> 16, l = t.high & 65535, c = t.low >>> 16, u = t.low & 65535, h = 0, d = 0, p = 0, f = 0;
  return f += i * u, p += f >>> 16, f &= 65535, p += r * u, d += p >>> 16, p &= 65535, p += i * c, d += p >>> 16, p &= 65535, d += o * u, h += d >>> 16, d &= 65535, d += r * c, h += d >>> 16, d &= 65535, d += i * l, h += d >>> 16, d &= 65535, h += s * u + o * c + r * l + i * a, h &= 65535, ie(p << 16 | f, h << 16 | d, this.unsigned);
};
ut.mul = ut.multiply;
ut.divide = function(t) {
  if (xn(t) || (t = as(t)), t.isZero())
    throw Error("division by zero");
  if (Fn) {
    if (!this.unsigned && this.high === -2147483648 && t.low === -1 && t.high === -1)
      return this;
    var e = (this.unsigned ? Fn.div_u : Fn.div_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return ie(e, Fn.get_high(), this.unsigned);
  }
  if (this.isZero())
    return this.unsigned ? mo : Vn;
  var s, o, r;
  if (this.unsigned) {
    if (t.unsigned || (t = t.toUnsigned()), t.gt(this))
      return mo;
    if (t.gt(this.shru(1)))
      return pb;
    r = mo;
  } else {
    if (this.eq(hn)) {
      if (t.eq(Qo) || t.eq(nh))
        return hn;
      if (t.eq(hn))
        return Qo;
      var i = this.shr(1);
      return s = i.div(t).shl(1), s.eq(Vn) ? t.isNegative() ? Qo : nh : (o = this.sub(t.mul(s)), r = s.add(o.div(t)), r);
    } else if (t.eq(hn))
      return this.unsigned ? mo : Vn;
    if (this.isNegative())
      return t.isNegative() ? this.neg().div(t.neg()) : this.neg().div(t).neg();
    if (t.isNegative())
      return this.div(t.neg()).neg();
    r = Vn;
  }
  for (o = this; o.gte(t); ) {
    s = Math.max(1, Math.floor(o.toNumber() / t.toNumber()));
    for (var a = Math.ceil(Math.log(s) / Math.LN2), l = a <= 48 ? 1 : rl(2, a - 48), c = zn(s), u = c.mul(t); u.isNegative() || u.gt(o); )
      s -= l, c = zn(s, this.unsigned), u = c.mul(t);
    c.isZero() && (c = Qo), r = r.add(c), o = o.sub(u);
  }
  return r;
};
ut.div = ut.divide;
ut.modulo = function(t) {
  if (xn(t) || (t = as(t)), Fn) {
    var e = (this.unsigned ? Fn.rem_u : Fn.rem_s)(
      this.low,
      this.high,
      t.low,
      t.high
    );
    return ie(e, Fn.get_high(), this.unsigned);
  }
  return this.sub(this.div(t).mul(t));
};
ut.mod = ut.modulo;
ut.rem = ut.modulo;
ut.not = function() {
  return ie(~this.low, ~this.high, this.unsigned);
};
ut.and = function(t) {
  return xn(t) || (t = as(t)), ie(this.low & t.low, this.high & t.high, this.unsigned);
};
ut.or = function(t) {
  return xn(t) || (t = as(t)), ie(this.low | t.low, this.high | t.high, this.unsigned);
};
ut.xor = function(t) {
  return xn(t) || (t = as(t)), ie(this.low ^ t.low, this.high ^ t.high, this.unsigned);
};
ut.shiftLeft = function(t) {
  return xn(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? ie(this.low << t, this.high << t | this.low >>> 32 - t, this.unsigned) : ie(0, this.low << t - 32, this.unsigned);
};
ut.shl = ut.shiftLeft;
ut.shiftRight = function(t) {
  return xn(t) && (t = t.toInt()), (t &= 63) === 0 ? this : t < 32 ? ie(this.low >>> t | this.high << 32 - t, this.high >> t, this.unsigned) : ie(this.high >> t - 32, this.high >= 0 ? 0 : -1, this.unsigned);
};
ut.shr = ut.shiftRight;
ut.shiftRightUnsigned = function(t) {
  if (xn(t) && (t = t.toInt()), t &= 63, t === 0)
    return this;
  var e = this.high;
  if (t < 32) {
    var s = this.low;
    return ie(s >>> t | e << 32 - t, e >>> t, this.unsigned);
  } else
    return t === 32 ? ie(e, 0, this.unsigned) : ie(e >>> t - 32, 0, this.unsigned);
};
ut.shru = ut.shiftRightUnsigned;
ut.shr_u = ut.shiftRightUnsigned;
ut.toSigned = function() {
  return this.unsigned ? ie(this.low, this.high, !1) : this;
};
ut.toUnsigned = function() {
  return this.unsigned ? this : ie(this.low, this.high, !0);
};
ut.toBytes = function(t) {
  return t ? this.toBytesLE() : this.toBytesBE();
};
ut.toBytesLE = function() {
  var t = this.high, e = this.low;
  return [
    e & 255,
    e >>> 8 & 255,
    e >>> 16 & 255,
    e >>> 24,
    t & 255,
    t >>> 8 & 255,
    t >>> 16 & 255,
    t >>> 24
  ];
};
ut.toBytesBE = function() {
  var t = this.high, e = this.low;
  return [
    t >>> 24,
    t >>> 16 & 255,
    t >>> 8 & 255,
    t & 255,
    e >>> 24,
    e >>> 16 & 255,
    e >>> 8 & 255,
    e & 255
  ];
};
re.fromBytes = function(t, e, s) {
  return s ? re.fromBytesLE(t, e) : re.fromBytesBE(t, e);
};
re.fromBytesLE = function(t, e) {
  return new re(
    t[0] | t[1] << 8 | t[2] << 16 | t[3] << 24,
    t[4] | t[5] << 8 | t[6] << 16 | t[7] << 24,
    e
  );
};
re.fromBytesBE = function(t, e) {
  return new re(
    t[4] << 24 | t[5] << 16 | t[6] << 8 | t[7],
    t[0] << 24 | t[1] << 16 | t[2] << 8 | t[3],
    e
  );
};
const Ow = /* @__PURE__ */ Iw({
  __proto__: null,
  default: eh
}, [eh]);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ho = (
  // tslint:disable-next-line
  eh || Ow
);
function oa(n) {
  return ho.fromString(n, !0, 16);
}
const gb = oa("c3a5c85c97cb3127"), uo = oa("b492b66fbe98f273"), He = oa("9ae16a3b2f90404f");
function sh(n) {
  return n.xor(n.shru(47));
}
function bb(n, t, e) {
  const s = n.slice(t, t + e);
  return ho.fromBytes(Array.from(s), !0, !0);
}
function te(n, t) {
  return bb(n, t, 8);
}
function dm(n, t) {
  return bb(n, t, 4);
}
function We(n, t) {
  return t === 0 ? n : n.shru(t).or(n.shl(64 - t));
}
function Os(n, t, e = oa("9ddfea08eb382d69")) {
  let s = n.xor(t).mul(e);
  s = s.xor(s.shru(47));
  let o = t.xor(s).mul(e);
  return o = o.xor(o.shru(47)), o = o.mul(e), o;
}
function Aw(n, t, e, s, o, r) {
  o = o.add(n), r = We(r.add(o).add(s), 21);
  const i = o;
  return o = o.add(t), o = o.add(e), r = r.add(We(o, 44)), [o.add(s), r.add(i)];
}
function Wa(n, t, e, s) {
  return Aw(te(n, t), te(n, t + 8), te(n, t + 16), te(n, t + 24), e, s);
}
function Zw(n, t = n.length) {
  if (t >= 8) {
    const e = He.add(t * 2), s = te(n, 0).add(He), o = te(n, t - 8), r = We(o, 37).mul(e).add(s), i = We(s, 25).add(o).mul(e);
    return Os(r, i, e);
  }
  if (t >= 4) {
    const e = He.add(t * 2), s = dm(n, 0);
    return Os(s.shl(3).add(t), dm(n, t - 4), e);
  }
  if (t > 0) {
    const e = n[0], s = n[t >> 1], o = n[t - 1], r = e + (s << 8), i = t + (o << 2);
    return sh(He.mul(r).xor(gb.mul(i))).mul(He);
  }
  return He;
}
function Kw(n, t = n.length) {
  const e = He.add(t * 2), s = te(n, 0).mul(uo), o = te(n, 8), r = te(n, t - 8).mul(e), i = te(n, t - 16).mul(He);
  return Os(We(s.add(o), 43).add(We(r, 30)).add(i), s.add(We(o.add(He), 18)).add(r), e);
}
function Bw(n, t = n.length) {
  const e = He.add(t * 2), s = te(n, 0).mul(He), o = te(n, 8), r = te(n, t - 8).mul(e), i = te(n, t - 16).mul(He), a = We(s.add(o), 43).add(We(r, 30)).add(i), l = Os(a, s.add(We(o.add(He), 18)).add(r), e), c = te(n, 16).mul(e), u = te(n, 24), h = a.add(te(n, t - 32)).mul(e), d = l.add(te(n, t - 24)).mul(e);
  return Os(We(c.add(u), 43).add(We(h, 30)).add(d), c.add(We(u.add(s), 18)).add(h), e);
}
function Ad(n, t = n.length) {
  const e = ho.fromNumber(81, !0);
  if (t <= 32)
    return t <= 16 ? Zw(n, t) : Kw(n, t);
  if (t <= 64)
    return Bw(n, t);
  let s = e, o = e.mul(uo).add(113), r = sh(o.mul(He).add(113)).mul(He), i = [ho.UZERO, ho.UZERO], a = [ho.UZERO, ho.UZERO];
  s = s.mul(He).add(te(n, 0));
  let l = 0;
  const c = (t - 1 >> 6) * 64, u = c + (t - 1 & 63) - 63;
  do
    s = We(s.add(o).add(i[0]).add(te(n, l + 8)), 37).mul(uo), o = We(o.add(i[1]).add(te(n, l + 48)), 42).mul(uo), s = s.xor(a[1]), o = o.add(i[0]).add(te(n, l + 40)), r = We(r.add(a[0]), 33).mul(uo), i = Wa(n, l, i[1].mul(uo), s.add(a[0])), a = Wa(n, l + 32, r.add(a[1]), o.add(te(n, l + 16))), [r, s] = [s, r], l += 64;
  while (l !== c);
  const h = uo.add(r.and(255).shl(1));
  return l = u, a[0] = a[0].add(t - 1 & 63), i[0] = i[0].add(a[0]), a[0] = a[0].add(i[0]), s = We(s.add(o).add(i[0]).add(te(n, l + 8)), 37).mul(h), o = We(o.add(i[1]).add(te(n, l + 48)), 42).mul(h), s = s.xor(a[1].mul(9)), o = o.add(i[0].mul(9).add(te(n, l + 40))), r = We(r.add(a[0]), 33).mul(h), i = Wa(n, l, i[1].mul(h), s.add(a[0])), a = Wa(n, l + 32, r.add(a[1]), o.add(te(n, l + 16))), [r, s] = [s, r], Os(Os(i[0], a[0], h).add(sh(o).mul(gb)).add(r), Os(i[1], a[1], h).add(s), h);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ws(n, t) {
  return t === "string" ? An(n) : Ls([n], t);
}
function Hw(n, t) {
  return n instanceof Float32Array && t === "float32" || n instanceof Int32Array && t === "int32" || n instanceof Uint8Array && t === "bool";
}
function Ls(n, t) {
  if (t === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(n) && (n = vo(n)), B().getBool("DEBUG") && Bg(n, t), Hw(n, t))
    return n;
  if (t == null || t === "float32" || t === "complex64")
    return new Float32Array(n);
  if (t === "int32")
    return new Int32Array(n);
  if (t === "bool") {
    const e = new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      Math.round(n[s]) !== 0 && (e[s] = 1);
    return e;
  } else
    throw new Error(`Unknown data type ${t}`);
}
function Ve() {
  return B().platform.now();
}
function _w(n, t) {
  return B().platform.fetch(n, t);
}
function An(n, t = "utf-8") {
  return t = t || "utf-8", B().platform.encode(n, t);
}
function Ss(n, t = "utf-8") {
  return t = t || "utf-8", B().platform.decode(n, t);
}
const x4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  arraysEqual: At,
  assert: S,
  assertNonNegativeIntegerDimensions: Uh,
  assertNonNull: Dl,
  assertShapesMatch: Qe,
  bytesFromStringArray: _g,
  bytesPerElement: tl,
  checkConversionForErrors: Bg,
  clamp: Ks,
  computeStrides: gt,
  createScalarValue: ws,
  createShuffledIndices: Rw,
  decodeString: Ss,
  distSquared: Tw,
  encodeString: An,
  fetch: _w,
  fingerPrint64: Ad,
  flatten: vo,
  getArrayFromDType: Ot,
  getTypedArrayFromDType: he,
  hasEncodingLoss: Hh,
  hexToLong: oa,
  indexToLoc: ys,
  inferDtype: xr,
  inferFromImplicitShape: Bh,
  isBoolean: Ug,
  isFunction: Bs,
  isInt: So,
  isNumber: el,
  isPromise: zl,
  isScalarShape: Nw,
  isString: br,
  isTypedArray: Zn,
  isValidDtype: Hg,
  locToIndex: pn,
  makeOnesTypedArray: Fl,
  makeZerosNestedTypedArray: _h,
  makeZerosTypedArray: be,
  nearestDivisor: nl,
  nearestLargerEven: Ml,
  now: Ve,
  parseAxisParam: Dt,
  randUniform: kw,
  repeatedTry: Yu,
  rightPad: xo,
  shuffle: Kh,
  shuffleCombo: Sw,
  sizeFromShape: H,
  sizeToSquarishShape: qa,
  squeezeShape: Gs,
  sum: Kg,
  swap: cn,
  tanh: $w,
  toNestedArray: On,
  toTypedArray: Ls
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Uw {
  constructor(t, e) {
    this.backendTimer = t, this.logger = e, e == null && (this.logger = new jw());
  }
  profileKernel(t, e, s) {
    let o;
    const r = () => {
      o = s();
    };
    let i;
    const a = Ve();
    if (this.backendTimer.timerAvailable())
      i = this.backendTimer.time(r);
    else {
      r();
      for (const c of o)
        c.dataSync();
      i = Promise.resolve({ kernelMs: Ve() - a });
    }
    if (B().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let c = 0; c < o.length; c++) {
        const u = o[c];
        u.data().then((h) => {
          Yw(h, u.dtype, t);
        });
      }
    return {
      kernelName: t,
      outputs: o,
      inputs: e,
      timeMs: i.then((c) => c.kernelMs),
      extraInfo: i.then((c) => c.getExtraProfileInfo != null ? c.getExtraProfileInfo() : "")
    };
  }
  logKernelProfile(t) {
    const { kernelName: e, outputs: s, timeMs: o, inputs: r, extraInfo: i } = t;
    s.forEach((a) => {
      Promise.all([a.data(), o, i]).then((l) => {
        this.logger.logKernelProfile(e, a, l[0], l[1], r, l[2]);
      });
    });
  }
}
function Yw(n, t, e) {
  if (t !== "float32")
    return !1;
  for (let s = 0; s < n.length; s++) {
    const o = n[s];
    if (isNaN(o) || !isFinite(o))
      return console.warn(`Found ${o} in the result of '${e}'`), !0;
  }
  return !1;
}
class jw {
  logKernelProfile(t, e, s, o, r, i) {
    const a = typeof o == "number" ? xo(`${o}ms`, 9) : o.error, l = xo(t, 25), c = e.rank, u = e.size, h = xo(e.shape.toString(), 14);
    let d = "";
    for (const p in r) {
      const f = r[p];
      if (f != null) {
        const g = f.shape || e.shape, m = g.length;
        d += `${p}: ${m}D ${m > 0 ? g : ""} `;
      }
    }
    console.log(`%c${l}	%c${a}	%c${c}D ${h}	%c${u}	%c${d}	%c${i}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qw(n, t, e) {
  const s = {}, o = {};
  for (let l = 0; l < t.length; l++)
    s[t[l].id] = !0;
  for (let l = 0; l < n.length; l++) {
    const c = n[l], u = c.inputs;
    for (const h in u) {
      const d = u[h];
      let p = !1;
      for (let f = 0; f < t.length; f++)
        if (s[d.id]) {
          c.outputs.forEach((g) => s[g.id] = !0), p = !0, o[c.id] = !0;
          break;
        }
      if (p)
        break;
    }
  }
  const r = {};
  r[e.id] = !0;
  const i = {};
  for (let l = n.length - 1; l >= 0; l--) {
    const c = n[l], u = c.inputs;
    for (let h = 0; h < c.outputs.length; h++)
      if (r[c.outputs[h].id]) {
        for (const d in u)
          r[u[d].id] = !0, i[c.id] = !0;
        break;
      }
  }
  const a = [];
  for (let l = 0; l < n.length; l++) {
    const c = n[l];
    if (o[c.id] && i[c.id]) {
      const u = {};
      for (const d in c.inputs) {
        const p = c.inputs[d];
        s[p.id] && (u[d] = p);
      }
      const h = Object.assign({}, c);
      h.inputs = u, h.outputs = c.outputs, a.push(h);
    }
  }
  return a;
}
function Jw(n, t, e, s) {
  for (let o = t.length - 1; o >= 0; o--) {
    const r = t[o], i = [];
    if (r.outputs.forEach((l) => {
      const c = n[l.id];
      c != null ? i.push(c) : i.push(null);
    }), r.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);
    const a = r.gradient(i);
    for (const l in r.inputs) {
      if (!(l in a))
        throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(a)}.`);
      const c = e(() => a[l]());
      if (c.dtype !== "float32")
        throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${c.dtype}'`);
      const u = r.inputs[l];
      if (!At(c.shape, u.shape))
        throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${l}' has shape '${c.shape}', which does not match the shape of the input '${u.shape}'`);
      if (n[u.id] == null)
        n[u.id] = c;
      else {
        const h = n[u.id];
        n[u.id] = s(h, c), h.dispose();
      }
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pm = 20, Fr = 3, Iu = 7;
function qw(n, t, e, s) {
  const o = gt(t), r = tI(n, t, e, o), i = t.length, a = Ya(n, t, e, o, r), l = ["Tensor"];
  return s && (l.push(`  dtype: ${e}`), l.push(`  rank: ${i}`), l.push(`  shape: [${t}]`), l.push("  values:")), l.push(a.map((c) => "    " + c).join(`
`)), l.join(`
`);
}
function tI(n, t, e, s) {
  const o = H(t), r = s[s.length - 1], i = new Array(r).fill(0), a = t.length, l = e === "complex64" ? Or(n) : n;
  if (a > 1)
    for (let c = 0; c < o / r; c++) {
      const u = c * r;
      for (let h = 0; h < r; h++)
        i[h] = Math.max(i[h], Xr(l[u + h], 0, e).length);
    }
  return i;
}
function Xr(n, t, e) {
  let s;
  return Array.isArray(n) ? s = `${parseFloat(n[0].toFixed(Iu))} + ${parseFloat(n[1].toFixed(Iu))}j` : br(n) ? s = `'${n}'` : e === "bool" ? s = xb(n) : s = parseFloat(n.toFixed(Iu)).toString(), xo(s, t);
}
function xb(n) {
  return n === 0 ? "false" : "true";
}
function Ya(n, t, e, s, o, r = !0) {
  const i = e === "complex64" ? 2 : 1, a = t[0], l = t.length;
  if (l === 0) {
    if (e === "complex64") {
      const g = Or(n);
      return [Xr(g[0], 0, e)];
    }
    return e === "bool" ? [xb(n[0])] : [n[0].toString()];
  }
  if (l === 1) {
    if (a > pm) {
      const m = Fr * i;
      let b = Array.from(n.slice(0, m)), x = Array.from(n.slice((a - Fr) * i, a * i));
      return e === "complex64" && (b = Or(b), x = Or(x)), [
        "[" + b.map((w, y) => Xr(w, o[y], e)).join(", ") + ", ..., " + x.map((w, y) => Xr(w, o[a - Fr + y], e)).join(", ") + "]"
      ];
    }
    return [
      "[" + (e === "complex64" ? Or(n) : Array.from(n)).map((m, b) => Xr(m, o[b], e)).join(", ") + "]"
    ];
  }
  const c = t.slice(1), u = s.slice(1), h = s[0] * i, d = [];
  if (a > pm) {
    for (let g = 0; g < Fr; g++) {
      const m = g * h, b = m + h;
      d.push(...Ya(
        n.slice(m, b),
        c,
        e,
        u,
        o,
        !1
        /* isLast */
      ));
    }
    d.push("...");
    for (let g = a - Fr; g < a; g++) {
      const m = g * h, b = m + h;
      d.push(...Ya(
        n.slice(m, b),
        c,
        e,
        u,
        o,
        g === a - 1
        /* isLast */
      ));
    }
  } else
    for (let g = 0; g < a; g++) {
      const m = g * h, b = m + h;
      d.push(...Ya(
        n.slice(m, b),
        c,
        e,
        u,
        o,
        g === a - 1
        /* isLast */
      ));
    }
  const p = l === 2 ? "," : "";
  d[0] = "[" + d[0] + p;
  for (let g = 1; g < d.length - 1; g++)
    d[g] = " " + d[g] + p;
  let f = `,
`;
  for (let g = 2; g < l; g++)
    f += `
`;
  return d[d.length - 1] = " " + d[d.length - 1] + "]" + (r ? "" : f), d;
}
function Or(n) {
  const t = [];
  for (let e = 0; e < n.length; e += 2)
    t.push([n[e], n[e + 1]]);
  return t;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Fe {
  constructor(t, e, s) {
    if (this.dtype = e, this.shape = t.slice(), this.size = H(t), s != null) {
      const o = s.length;
      S(o === this.size, () => `Length of values '${o}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (e === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = s || Ot(e, this.size), this.strides = gt(t);
  }
  /**
   * Sets a value in the buffer at a given location.
   *
   * @param value The value to set.
   * @param locs  The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  set(t, ...e) {
    e.length === 0 && (e = [0]), S(e.length === this.rank, () => `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);
    const s = this.locToIndex(e);
    this.values[s] = t;
  }
  /**
   * Returns the value in the buffer at the provided location.
   *
   * @param locs The location indices.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  get(...t) {
    t.length === 0 && (t = [0]);
    let e = 0;
    for (const o of t) {
      if (o < 0 || o >= this.shape[e]) {
        const r = `Requested out of range element at ${t}.   Buffer shape=${this.shape}`;
        throw new Error(r);
      }
      e++;
    }
    let s = t[t.length - 1];
    for (let o = 0; o < t.length - 1; ++o)
      s += this.strides[o] * t[o];
    return this.values[s];
  }
  locToIndex(t) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return t[0];
    let e = t[t.length - 1];
    for (let s = 0; s < t.length - 1; ++s)
      e += this.strides[s] * t[s];
    return e;
  }
  indexToLoc(t) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [t];
    const e = new Array(this.shape.length);
    for (let s = 0; s < e.length - 1; ++s)
      e[s] = Math.floor(t / this.strides[s]), t -= e[s] * this.strides[s];
    return e[e.length - 1] = t, e;
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Creates an immutable `tf.Tensor` object from the buffer.
   *
   * @doc {heading: 'Tensors', subheading: 'Creation'}
   */
  toTensor() {
    return qn().makeTensor(this.values, this.shape, this.dtype);
  }
}
let qn = null, Yo = null;
function eI(n) {
  qn = n;
}
function nI(n) {
  Yo = n;
}
class _t {
  constructor(t, e, s, o) {
    this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || "float32", this.size = H(t), this.strides = gt(t), this.dataId = s, this.id = o, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  /**
   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async buffer() {
    const t = await this.data();
    return Yo.buffer(this.shape, this.dtype, t);
  }
  /**
   * Returns a `tf.TensorBuffer` that holds the underlying data.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  bufferSync() {
    return Yo.buffer(this.shape, this.dtype, this.dataSync());
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * asynchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async array() {
    const t = await this.data();
    return On(this.shape, t, this.dtype === "complex64");
  }
  /**
   * Returns the tensor data as a nested array. The transfer of data is done
   * synchronously.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  arraySync() {
    return On(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  /**
   * Asynchronously downloads the values from the `tf.Tensor`. Returns a
   * promise of `TypedArray` that resolves when the computation has finished.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  async data() {
    this.throwIfDisposed();
    const t = qn().read(this.dataId);
    if (this.dtype === "string") {
      const e = await t;
      try {
        return e.map((s) => Ss(s));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return t;
  }
  /**
   * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
   * and `data()`, this method prevents data from being downloaded to CPU.
   *
   * For WebGL backend, the data will be stored on a densely packed texture.
   * This means that the texture will use the RGBA channels to store value.
   *
   * For WebGPU backend, the data will be stored on a buffer. There is no
   * parameter, so can not use a user-defined size to create the buffer.
   *
   * @param options:
   *     For WebGL,
   *         - customTexShape: Optional. If set, will use the user defined
   *     texture shape to create the texture.
   *
   * @returns For WebGL backend, a GPUData contains the new texture and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this texture,
   *        texture: WebGLTexture,
   *        texShape: [number, number] // [height, width]
   *     }
   *
   *     For WebGPU backend, a GPUData contains the new buffer and
   *     its information.
   *     {
   *        tensorRef: The tensor that is associated with this buffer,
   *        buffer: GPUBuffer,
   *        bufSize: number
   *     }
   *
   *     Remember to dispose the GPUData after it is used by
   *     `res.tensorRef.dispose()`.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataToGPU(t) {
    return this.throwIfDisposed(), qn().readToGPU(this.dataId, t);
  }
  /**
   * Synchronously downloads the values from the `tf.Tensor`. This blocks the
   * UI thread until the values are ready, which can cause performance issues.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dataSync() {
    this.throwIfDisposed();
    const t = qn().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return t.map((e) => Ss(e));
      } catch {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return t;
  }
  /** Returns the underlying bytes of the tensor's data. */
  async bytes() {
    this.throwIfDisposed();
    const t = await qn().read(this.dataId);
    return this.dtype === "string" ? t : new Uint8Array(t.buffer);
  }
  /**
   * Disposes `tf.Tensor` from memory.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  dispose() {
    this.isDisposed || (qn().disposeTensor(this), this.isDisposedInternal = !0);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  /**
   * Prints the `tf.Tensor`. See `tf.print` for details.
   *
   * @param verbose Whether to print verbose information about the tensor,
   *    including dtype and size.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  print(t = !1) {
    return Yo.print(this, t);
  }
  /**
   * Returns a copy of the tensor. See `tf.clone` for details.
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  clone() {
    return this.throwIfDisposed(), Yo.clone(this);
  }
  /**
   * Returns a human-readable description of the tensor. Useful for logging.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  toString(t = !1) {
    const e = this.dataSync();
    return qw(e, this.shape, this.dtype, t);
  }
  cast(t) {
    return this.throwIfDisposed(), Yo.cast(this, t);
  }
  variable(t = !0, e, s) {
    return this.throwIfDisposed(), qn().makeVariable(this, t, e, s);
  }
}
Object.defineProperty(_t, Symbol.hasInstance, {
  value: (n) => !!n && n.data != null && n.dataSync != null && n.throwIfDisposed != null
});
function J() {
  return Yh("Tensor", () => _t);
}
J();
class il extends _t {
  constructor(t, e, s, o) {
    super(t.shape, t.dtype, t.dataId, o), this.trainable = e, this.name = s;
  }
  /**
   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
   * the same shape and dtype as the old `tf.Tensor`.
   *
   * @param newValue New tensor to be assigned to this variable.
   *
   * @doc {heading: 'Tensors', subheading: 'Classes'}
   */
  assign(t) {
    if (t.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);
    if (!At(t.shape, this.shape))
      throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);
    qn().disposeTensor(this), this.dataId = t.dataId, qn().incRef(
      this,
      null
      /* backend */
    );
  }
  dispose() {
    qn().disposeVariable(this), this.isDisposedInternal = !0;
  }
}
Object.defineProperty(il, Symbol.hasInstance, {
  value: (n) => n instanceof _t && n.assign != null && n.assign instanceof Function
});
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var fm;
(function(n) {
  n.R0 = "R0", n.R1 = "R1", n.R2 = "R2", n.R3 = "R3", n.R4 = "R4", n.R5 = "R5", n.R6 = "R6";
})(fm || (fm = {}));
var oh;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "int32", n.complex64 = "complex64";
})(oh || (oh = {}));
var rh;
(function(n) {
  n.float32 = "float32", n.int32 = "int32", n.bool = "bool", n.complex64 = "complex64";
})(rh || (rh = {}));
var ih;
(function(n) {
  n.float32 = "float32", n.int32 = "float32", n.bool = "float32", n.complex64 = "complex64";
})(ih || (ih = {}));
var ah;
(function(n) {
  n.float32 = "complex64", n.int32 = "complex64", n.bool = "complex64", n.complex64 = "complex64";
})(ah || (ah = {}));
const sI = {
  float32: ih,
  int32: oh,
  bool: rh,
  complex64: ah
};
function nn(n, t) {
  if (n === "string" || t === "string") {
    if (n === "string" && t === "string")
      return "string";
    throw new Error(`Can not upcast ${n} with ${t}`);
  }
  return sI[n][t];
}
function Zd(n) {
  return nn(n, "int32");
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xe(n, t) {
  if (n.dtype === t.dtype)
    return [n, t];
  const e = nn(n.dtype, t.dtype);
  return [n.cast(e), t.cast(e)];
}
function oI(n, t) {
  S(n.dtype === t.dtype, () => `The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`);
}
function Vc(n, t) {
  return t.some((e) => e.id === n.id);
}
function ks(n) {
  const t = [];
  return yb(n, t, /* @__PURE__ */ new Set()), t;
}
function yb(n, t, e) {
  if (n == null)
    return;
  if (n instanceof _t) {
    t.push(n);
    return;
  }
  if (!rI(n))
    return;
  const s = n;
  for (const o in s) {
    const r = s[o];
    e.has(r) || (e.add(r), yb(r, t, e));
  }
}
function rI(n) {
  return Array.isArray(n) || typeof n == "object";
}
const y4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertTypesMatch: oI,
  getTensorsInContainer: ks,
  isTensorInList: Vc,
  makeTypesMatch: xe
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cu(n) {
  return n.kernelName != null;
}
class mm {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = !1, this.activeProfile = {
      newBytes: 0,
      newTensors: 0,
      peakBytes: 0,
      kernels: [],
      result: null,
      get kernelNames() {
        return Array.from(new Set(this.kernels.map((t) => t.name)));
      }
    };
  }
  dispose() {
    for (const t in this.registeredVariables)
      this.registeredVariables[t].dispose();
  }
}
class ir {
  constructor(t) {
    this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new mm();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e];
      if (await this.initializeBackend(s).success) {
        await this.setBackend(s);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      const { name: t, asyncInit: e } = this.initializeBackendsAndReturnBest();
      if (e)
        throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t) {
    if (!(t in this.registry))
      if (t in this.registryFactory) {
        const { asyncInit: e } = this.initializeBackend(t);
        if (e)
          return null;
      } else
        return null;
    return this.registry[t];
  }
  findBackendFactory(t) {
    return t in this.registryFactory ? this.registryFactory[t].factory : null;
  }
  registerBackend(t, e, s = 1) {
    return t in this.registryFactory ? (wn(`${t} backend was already registered. Reusing existing backend factory.`), !1) : (this.registryFactory[t] = { factory: e, priority: s }, !0);
  }
  async setBackend(t) {
    if (this.registryFactory[t] == null)
      throw new Error(`Backend name '${t}' not found in registry`);
    if (this.backendName = t, this.registry[t] == null) {
      this.backendInstance = null;
      const { success: e, asyncInit: s } = this.initializeBackend(t);
      if (!(s ? await e : e))
        return !1;
    }
    return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new Uw(this.backendInstance), !0;
  }
  setupRegisteredKernels() {
    th(this.backendName).forEach((e) => {
      e.setupFunc != null && e.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t) {
    th(t).forEach((s) => {
      s.disposeFunc != null && s.disposeFunc(this.registry[t]);
    });
  }
  /**
   * Initializes a backend by looking up the backend name in the factory
   * registry and calling the factory method. Returns a boolean representing
   * whether the initialization of the backend suceeded. Throws an error if
   * there is no backend in the factory registry.
   */
  initializeBackend(t) {
    const e = this.registryFactory[t];
    if (e == null)
      throw new Error(`Cannot initialize backend ${t}, no registration found.`);
    try {
      const s = e.factory();
      if (s && !(s instanceof Zh) && typeof s.then == "function") {
        const o = ++this.pendingBackendInitId, r = s.then((i) => o < this.pendingBackendInitId ? !1 : (this.registry[t] = i, this.pendingBackendInit = null, !0)).catch((i) => (o < this.pendingBackendInitId || (this.pendingBackendInit = null, wn(`Initialization of backend ${t} failed`), wn(i.stack || i.message)), !1));
        return this.pendingBackendInit = r, { success: r, asyncInit: !0 };
      } else
        return this.registry[t] = s, { success: !0, asyncInit: !1 };
    } catch (s) {
      return wn(`Initialization of backend ${t} failed`), wn(s.stack || s.message), { success: !1, asyncInit: !1 };
    }
  }
  removeBackend(t) {
    if (!(t in this.registryFactory))
      throw new Error(`${t} backend not found in registry`);
    this.backendName === t && this.pendingBackendInit != null && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t, e) => this.registryFactory[e].priority - this.registryFactory[t].priority);
  }
  initializeBackendsAndReturnBest() {
    const t = this.getSortedBackends();
    for (let e = 0; e < t.length; e++) {
      const s = t[e], { success: o, asyncInit: r } = this.initializeBackend(s);
      if (r || o)
        return { name: s, asyncInit: r };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t, e) {
    const s = this.state.tensorInfo.get(e), o = s.backend, r = this.readSync(e), i = o.refCount(e);
    o.disposeData(e, !0), s.backend = t, t.move(e, r, s.shape, s.dtype, i), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t, e) {
    let s = null;
    if (e == null) {
      if (typeof t != "function")
        throw new Error("Please provide a function to tidy()");
      e = t;
    } else {
      if (typeof t != "string" && !(t instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof e != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      s = t;
    }
    let o;
    return this.scopedRun(() => this.startScope(s), () => this.endScope(o), () => (o = e(), o instanceof Promise && console.error("Cannot return a Promise inside of tidy."), o));
  }
  scopedRun(t, e, s) {
    t();
    try {
      const o = s();
      return e(), o;
    } catch (o) {
      throw e(), o;
    }
  }
  nextTensorId() {
    return ir.nextTensorId++;
  }
  nextVariableId() {
    return ir.nextVariableId++;
  }
  /**
   * This method is called instead of the public-facing tensor.clone() when
   * saving a tensor for backwards pass. It makes sure to add the clone
   * operation to the tape regardless of being called inside a kernel
   * execution.
   */
  clone(t) {
    const e = W.runKernel(Ri, { x: t }), s = { x: t }, o = (i) => ({
      x: () => {
        const a = "float32", l = { x: i }, c = { dtype: a };
        return W.runKernel(
          gi,
          l,
          // tslint:disable-next-line: no-unnecessary-type-assertion
          c
        );
      }
    }), r = [];
    return this.addTapeNode(this.state.activeScope.name, s, [e], o, r, {}), e;
  }
  /**
   * Execute a kernel with the given name and return the output tensor.
   *
   * @param kernelName The name of the kernel to execute.
   * @param inputs A map of input names to tensors.
   * @param attrs A map of attribute names to their values. An attribute is a
   *     primitive (non-tensor) input to the kernel.
   * @param inputsToSave A list of tensors, inputs to save for the backprop
   *     computation.
   * @param outputsToSave A list of booleans, specifying which output to save
   *     for the backprop computation. These are booleans since the output
   * tensors are not visible to the user.
   */
  runKernel(t, e, s) {
    if (this.backendName == null && this.backend, !(qu(t, this.backendName) != null))
      throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t, inputs: e, attrs: s });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t, e, s) {
    const o = this.backend.numDataIds();
    let r = 0;
    s.forEach((l) => {
      r += l.dtype === "complex64" ? 3 : 1;
    });
    const i = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], a = o - e - r - i;
    if (a > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`);
  }
  /**
   * Internal helper method to execute a kernel Func
   *
   * Use `runKernel` to execute kernels from outside of engine.
   */
  runKernelFunc(t) {
    let e, s = [];
    const o = this.isTapeOn(), r = this.state.numBytes, i = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let a;
    this.backendName == null && this.backend;
    let l;
    const c = Cu(t) ? t.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Cu(t)) {
      const { kernelName: f, inputs: g, attrs: m } = t;
      this.backendName == null && this.backend;
      const b = qu(f, this.backendName);
      S(b != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), a = () => {
        const x = this.backend.numDataIds();
        l = b.kernelFunc({ inputs: g, attrs: m, backend: this.backend });
        const w = Array.isArray(l) ? l : [l];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, x, w);
        const y = w.map((I) => I.rank != null ? I : this.makeTensorFromTensorInfo(I));
        if (o) {
          const I = this.getTensorsForGradient(f, g, y);
          s = this.saveTensorsForBackwardMode(I);
        }
        return y;
      };
    } else {
      const { forwardFunc: f } = t, g = (m) => {
        o && (s = m.map((b) => this.keep(this.clone(b))));
      };
      a = () => {
        const m = this.backend.numDataIds();
        l = this.tidy(() => f(this.backend, g));
        const b = Array.isArray(l) ? l : [l];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(c, m, b), b;
      };
    }
    const { inputs: u, attrs: h } = t, d = Cu(t) ? null : t.backwardsFunc;
    let p;
    return this.scopedRun(
      // Stop recording to a tape when running a kernel.
      () => this.state.kernelDepth++,
      () => this.state.kernelDepth--,
      () => {
        !this.ENV.getBool("DEBUG") && !this.state.profiling ? e = a() : (p = this.profiler.profileKernel(c, u, () => a()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(p), e = p.outputs);
      }
    ), o && this.addTapeNode(c, u, e, d, s, h), this.state.profiling && this.state.activeProfile.kernels.push({
      name: c,
      bytesAdded: this.state.numBytes - r,
      totalBytesSnapshot: this.state.numBytes,
      tensorsAdded: this.state.numTensors - i,
      totalTensorsSnapshot: this.state.numTensors,
      inputShapes: Object.keys(u).map((f) => u[f] != null ? u[f].shape : null),
      outputShapes: e.map((f) => f.shape),
      kernelTimeMs: p.timeMs,
      extraInfo: p.extraInfo
    }), Array.isArray(l) ? e : e[0];
  }
  /**
   * Saves tensors used in forward mode for use in backward mode.
   *
   * @param tensors the list of tensors to save.
   */
  saveTensorsForBackwardMode(t) {
    return t.map((s) => this.keep(this.clone(s)));
  }
  /**
   * Returns a list of tensors to save for a given gradient calculation.
   *
   * @param kernelName name of kernel to look up gradient for.
   * @param inputs a map of input tensors.
   * @param outputs an array of output tensors from forward mode of kernel.
   */
  getTensorsForGradient(t, e, s) {
    const o = im(t);
    if (o != null) {
      const r = o.inputsToSave || [], i = o.outputsToSave || [];
      let a;
      o.saveAllInputs ? (S(Array.isArray(e), () => "saveAllInputs is true, expected inputs to be an array."), a = Object.keys(e).map((c) => e[c])) : a = r.map((c) => e[c]);
      const l = s.filter((c, u) => i[u]);
      return a.concat(l);
    }
    return [];
  }
  /**
   * Internal method used by public APIs for tensor creation. Makes a new
   * tensor with the provided shape, dtype and values. It always
   * creates a new data id and writes the values to the underlying backend.
   */
  makeTensor(t, e, s, o) {
    if (t == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    s = s || "float32", o = o || this.backend;
    let r = t;
    s === "string" && br(t[0]) && (r = t.map((l) => An(l)));
    const i = o.write(r, e, s), a = new _t(e, s, i, this.nextTensorId());
    if (this.trackTensor(a, o), s === "string") {
      const l = this.state.tensorInfo.get(i), c = _g(r);
      this.state.numBytes += c - l.bytes, l.bytes = c;
    }
    return a;
  }
  /**
   * Internal method used by backends. Makes a new tensor
   * that is a wrapper around an existing data id. It doesn't create
   * a new data id, only increments the ref count used in memory tracking.
   * @deprecated
   */
  makeTensorFromDataId(t, e, s, o) {
    s = s || "float32";
    const r = { dataId: t, shape: e, dtype: s };
    return this.makeTensorFromTensorInfo(r, o);
  }
  /**
   * Internal method used by backends. Makes a new tensor that is a wrapper
   * around an existing data id in TensorInfo. It doesn't create a new data id,
   * only increments the ref count used in memory tracking.
   */
  makeTensorFromTensorInfo(t, e) {
    const { dataId: s, shape: o, dtype: r } = t, i = new _t(o, r, s, this.nextTensorId());
    return this.trackTensor(i, e), i;
  }
  makeVariable(t, e = !0, s, o) {
    s = s || this.nextVariableId().toString(), o != null && o !== t.dtype && (t = t.cast(o));
    const r = new il(t, e, s, this.nextTensorId());
    if (this.state.registeredVariables[r.name] != null)
      throw new Error(`Variable with name ${r.name} was already registered`);
    return this.state.registeredVariables[r.name] = r, this.incRef(r, this.backend), r;
  }
  trackTensor(t, e) {
    this.state.numTensors++, t.dtype === "string" && this.state.numStringTensors++;
    let s = 0;
    t.dtype !== "complex64" && t.dtype !== "string" && (s = t.size * tl(t.dtype)), this.state.numBytes += s, this.state.tensorInfo.has(t.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t.dataId, {
      backend: e || this.backend,
      dtype: t.dtype,
      shape: t.shape,
      bytes: s
    })), t instanceof il || this.track(t);
  }
  // Track the tensor by dataId and increase the refCount for the dataId in the
  // backend.
  // TODO(pyu10055): This is currently used by makeVariable method, to increase
  // refCount on the backend for the dataId. It can potentially be replaced with
  // Identity op indead of calling backend directly.
  incRef(t, e) {
    this.trackTensor(t, e), this.backend.incRef(t.dataId);
  }
  removeDataId(t, e) {
    this.state.tensorInfo.has(t) && this.state.tensorInfo.get(t).backend === e && (this.state.tensorInfo.delete(t), this.state.numDataBuffers--);
  }
  disposeTensor(t) {
    if (!this.state.tensorInfo.has(t.dataId))
      return;
    const e = this.state.tensorInfo.get(t.dataId);
    if (this.state.numTensors--, t.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= e.bytes), t.dtype !== "complex64" && t.dtype !== "string") {
      const s = t.size * tl(t.dtype);
      this.state.numBytes -= s;
    }
    e.backend.disposeData(t.dataId) && this.removeDataId(t.dataId, e.backend);
  }
  disposeVariables() {
    for (const t in this.state.registeredVariables) {
      const e = this.state.registeredVariables[t];
      this.disposeVariable(e);
    }
  }
  disposeVariable(t) {
    this.disposeTensor(t), this.state.registeredVariables[t.name] != null && delete this.state.registeredVariables[t.name];
  }
  memory() {
    const t = this.backend.memory();
    return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, t.reasons == null && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t;
  }
  async profile(t) {
    this.state.profiling = !0;
    const e = this.state.numBytes, s = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((o) => o.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - s;
    for (const o of this.state.activeProfile.kernels)
      o.kernelTimeMs = await o.kernelTimeMs, o.extraInfo = await o.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t, e, s, o, r, i) {
    const a = { id: this.state.nextTapeNodeId++, kernelName: t, inputs: e, outputs: s, saved: r }, l = im(t);
    l != null && (o = l.gradFunc), o != null && (a.gradient = (c) => (c = c.map((u, h) => {
      if (u == null) {
        const d = s[h], p = be(d.size, d.dtype);
        return this.makeTensor(p, d.shape, d.dtype);
      }
      return u;
    }), o(c.length > 1 ? c : c[0], r, i))), this.state.activeTape.push(a);
  }
  keep(t) {
    return t.kept = !0, t;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  /**
   * Start a scope. Use this with endScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  startScope(t) {
    const e = {
      track: [],
      name: "unnamed scope",
      id: this.state.nextScopeId++
    };
    t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;
  }
  /**
   * End a scope. Use this with startScope() to achieve the same functionality
   * as scope() without the need for a function closure.
   */
  endScope(t) {
    const e = ks(t), s = new Set(e.map((r) => r.id));
    for (let r = 0; r < this.state.activeScope.track.length; r++) {
      const i = this.state.activeScope.track[r];
      !i.kept && !s.has(i.id) && i.dispose();
    }
    const o = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], e.forEach((r) => {
      !r.kept && r.scopeId === o.id && this.track(r);
    });
  }
  /**
   * Returns gradients of `f` with respect to each of the `xs`. The gradients
   * returned are of the same length as `xs`, but some might be null if `f`
   * was not a function of that `x`. It also takes optional dy to multiply the
   * gradient, which defaults to `1`.
   */
  gradients(t, e, s, o = !1) {
    if (S(e.length > 0, () => "gradients() received an empty list of xs."), s != null && s.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${s.dtype}'`);
    const r = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t));
    S(r instanceof _t, () => "The result y returned by f() must be a tensor.");
    const i = Qw(this.state.activeTape, e, r);
    if (!o && i.length === 0 && e.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      const a = {};
      a[r.id] = s ?? iI(r.shape), Jw(
        a,
        i,
        // Pass the tidy function to avoid circular dep with `tape.ts`.
        (c) => this.tidy(c),
        // Pass an add function to avoide a circular dep with `tape.ts`.
        aI
      );
      const l = e.map((c) => a[c.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((c) => {
        for (const u of c.saved)
          u.dispose();
      }), this.state.activeTape = null), { value: r, grads: l };
    });
  }
  customGrad(t) {
    return S(Bs(t), () => "The f passed in customGrad(f) must be a function."), (...e) => {
      S(e.every((a) => a instanceof _t), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let s;
      const o = {};
      e.forEach((a, l) => {
        o[l] = a;
      });
      const r = (a, l) => (s = t(...e, l), S(s.value instanceof _t, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), S(Bs(s.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), s.value), i = (a, l) => {
        const c = s.gradFunc(a, l), u = Array.isArray(c) ? c : [c];
        S(u.length === e.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), S(u.every((d) => d instanceof _t), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        const h = {};
        return u.forEach((d, p) => {
          h[p] = () => d;
        }), h;
      };
      return this.runKernelFunc({
        forwardFunc: r,
        backwardsFunc: i,
        inputs: o
      });
    };
  }
  readSync(t) {
    return this.state.tensorInfo.get(t).backend.readSync(t);
  }
  read(t) {
    return this.state.tensorInfo.get(t).backend.read(t);
  }
  readToGPU(t, e) {
    return this.state.tensorInfo.get(t).backend.readToGPU(t, e);
  }
  async time(t) {
    const e = Ve(), s = await this.backend.time(t);
    return s.wallMs = Ve() - e, s;
  }
  /**
   * Tracks a Tensor in the current scope to be automatically cleaned up
   * when the current scope ends, and returns the value.
   *
   * @param result The Tensor to track in the current scope.
   */
  track(t) {
    return this.state.activeScope != null && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  /**
   * Resets the engine state. Removes all backends but does not remove
   * registered backend factories.
   */
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new mm();
    for (const t in this.registry)
      this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
}
ir.nextTensorId = 0;
ir.nextVariableId = 0;
function iI(n) {
  const t = Fl(H(n), "float32");
  return W.makeTensor(t, n, "float32");
}
function wb() {
  const n = Qg();
  if (n._tfengine == null) {
    const t = new Gw(n);
    n._tfengine = new ir(t);
  }
  return Mw(n._tfengine.ENV), eI(() => n._tfengine), n._tfengine;
}
const W = wb();
function aI(n, t) {
  const e = { a: n, b: t };
  return W.runKernel(yr, e);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lI() {
  return typeof navigator < "u" && navigator != null;
}
let lh;
function cI(n) {
  lh = n;
}
function Kd(n) {
  if (lh !== void 0)
    return lh;
  if (n || lI()) {
    if (n || (n = navigator), n.product === "ReactNative")
      return !0;
    const t = n.userAgent || n.vendor || // tslint:disable-next-line:no-any
    (typeof window < "u" ? window.opera : "");
    if (!t) {
      const e = n;
      return e.userAgentData && e.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || // tslint:disable-next-line:max-line-length
    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4));
  }
  return !1;
}
function Bd() {
  return typeof window < "u" && window.document != null || //@ts-ignore
  typeof WorkerGlobalScope < "u";
}
const w4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  isBrowser: Bd,
  isMobile: Kd,
  mockIsMobile: cI
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fn = B();
fn.registerFlag("DEBUG", () => !1, (n) => {
  n && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
fn.registerFlag("IS_BROWSER", () => Bd());
fn.registerFlag("IS_NODE", () => typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u");
fn.registerFlag("IS_CHROME", () => typeof navigator < "u" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
fn.registerFlag("PROD", () => !1);
fn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => fn.getBool("DEBUG"));
fn.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => !0);
fn.registerFlag("IS_TEST", () => !1);
fn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => !0);
fn.registerFlag("WRAP_TO_IMAGEBITMAP", () => !1);
fn.registerFlag("ENGINE_COMPILE_ONLY", () => !1);
fn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => !1);
fn.registerFlag("USE_SETTIMEOUTCUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ra(n, t) {
  let e = n;
  if (Zn(n))
    return t === "string" ? [] : [n.length];
  if (!Array.isArray(n))
    return [];
  const s = [];
  for (; Array.isArray(e) || Zn(e) && t !== "string"; )
    s.push(e.length), e = e[0];
  return Array.isArray(n) && B().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && Ib(n, s, []), s;
}
function Ib(n, t, e) {
  if (e = e || [], !Array.isArray(n) && !Zn(n)) {
    S(t.length === 0, () => `Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);
    return;
  }
  S(t.length > 0, () => `Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`), S(n.length === t[0], () => `Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);
  const s = t.slice(1);
  for (let o = 0; o < n.length; ++o)
    Ib(n[o], s, e.concat(o));
}
function gm(n, t, e, s) {
  if (n !== "string_or_numeric") {
    if (n == null)
      throw new Error("Expected dtype cannot be null.");
    if (n !== "numeric" && n !== t || n === "numeric" && t === "string")
      throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`);
  }
}
function N(n, t, e, s = "numeric") {
  if (n instanceof _t)
    return gm(s, n.dtype, t, e), n;
  let o = xr(n);
  if (o !== "string" && ["bool", "int32", "float32"].indexOf(s) >= 0 && (o = s), gm(s, o, t, e), n == null || !Zn(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string") {
    const l = n == null ? "null" : n.constructor.name;
    throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${l}'`);
  }
  const r = ra(n, o);
  !Zn(n) && !Array.isArray(n) && (n = [n]);
  const a = o !== "string" ? Ls(n, o) : vo(n, [], !0);
  return W.makeTensor(a, r, o);
}
function Hd(n, t, e, s = "numeric") {
  if (!Array.isArray(n))
    throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return n.map((r, i) => N(r, `${t}[${i}]`, e, s));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uI = "__op";
function V(n) {
  const t = Object.keys(n);
  if (t.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);
  let e = t[0];
  const s = n[e];
  e.endsWith("_") && (e = e.substring(0, e.length - 1)), e = e + uI;
  const o = (...r) => {
    W.startScope(e);
    try {
      const i = s(...r);
      return zl(i) && console.error("Cannot return a Promise inside of tidy."), W.endScope(i), i;
    } catch (i) {
      throw W.endScope(null), i;
    }
  };
  return Object.defineProperty(o, "name", { value: e, configurable: !0 }), o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hI(n, t) {
  const e = N(n, "real", "complex"), s = N(t, "imag", "complex");
  Qe(e.shape, s.shape, `real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`);
  const o = { real: e, imag: s };
  return W.runKernel(nd, o);
}
const ko = V({ complex_: hI });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ia(n, t, e, s) {
  if (s == null && (s = xr(n)), s === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (!Zn(n) && !Array.isArray(n) && typeof n != "number" && typeof n != "boolean" && typeof n != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t != null) {
    Uh(t);
    const o = H(t), r = H(e);
    S(o === r, () => `Based on the provided shape, [${t}], the tensor should have ${o} values but has ${r}`);
    for (let i = 0; i < e.length; ++i) {
      const a = e[i], l = i === e.length - 1 ? a !== H(t.slice(i)) : !0;
      S(e[i] === t[i] || !l, () => `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `);
    }
  }
  return !Zn(n) && !Array.isArray(n) && (n = [n]), t = t || e, n = s !== "string" ? Ls(n, s) : vo(n, [], !0), W.makeTensor(n, t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _e(n, t, e) {
  const s = ra(n, e);
  return ia(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ch = {
  float32: 4,
  float16: 2,
  int32: 4,
  uint16: 2,
  uint8: 1,
  bool: 1,
  complex64: 8
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const al = 4;
async function bm(n, t) {
  const e = [], s = [], o = Array.isArray(n) ? n.map((i) => i.name) : Object.keys(n);
  for (let i = 0; i < o.length; ++i) {
    const a = o[i], l = Array.isArray(n) ? n[i].tensor : n[a];
    if (l.dtype !== "float32" && l.dtype !== "int32" && l.dtype !== "bool" && l.dtype !== "string" && l.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${a}': ${l.dtype}`);
    const c = { name: a, shape: l.shape, dtype: l.dtype };
    if (l.dtype === "string") {
      const u = new Promise(async (h) => {
        const d = await l.bytes(), p = d.reduce((m, b) => m + b.length, 0) + al * d.length, f = new Uint8Array(p);
        let g = 0;
        for (let m = 0; m < d.length; m++) {
          const b = d[m], x = new Uint8Array(new Uint32Array([b.length]).buffer);
          f.set(x, g), g += al, f.set(b, g), g += b.length;
        }
        h(f);
      });
      s.push(u);
    } else
      s.push(l.data());
    t != null && (c.group = t), e.push(c);
  }
  const r = await Promise.all(s);
  return { data: dI(r), specs: e };
}
function Cb(n, t) {
  const e = {};
  let s, o = 0;
  for (const r of t) {
    const i = r.name, a = r.dtype, l = r.shape, c = H(l);
    let u;
    if ("quantization" in r) {
      const h = r.quantization;
      if (h.dtype === "uint8" || h.dtype === "uint16") {
        if (!("min" in h && "scale" in h))
          throw new Error(`Weight ${r.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (h.dtype === "float16") {
        if (a !== "float32")
          throw new Error(`Weight ${r.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${a}.`);
      } else
        throw new Error(`Weight ${r.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      const d = ch[h.dtype], p = n.slice(o, o + c * d), f = h.dtype === "uint8" ? new Uint8Array(p) : new Uint16Array(p);
      if (a === "float32")
        if (h.dtype === "uint8" || h.dtype === "uint16") {
          u = new Float32Array(f.length);
          for (let g = 0; g < f.length; g++) {
            const m = f[g];
            u[g] = m * h.scale + h.min;
          }
        } else if (h.dtype === "float16")
          s === void 0 && (s = CI()), u = s(f);
        else
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);
      else if (a === "int32") {
        if (h.dtype !== "uint8" && h.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);
        u = new Int32Array(f.length);
        for (let g = 0; g < f.length; g++) {
          const m = f[g];
          u[g] = Math.round(m * h.scale + h.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      o += c * d;
    } else if (a === "string") {
      const h = H(r.shape);
      u = [];
      for (let d = 0; d < h; d++) {
        const p = new Uint32Array(n.slice(o, o + al))[0];
        o += al;
        const f = new Uint8Array(n.slice(o, o + p));
        u.push(f), o += p;
      }
    } else {
      const h = ch[a], d = n.slice(o, o + c * h);
      if (a === "float32")
        u = new Float32Array(d);
      else if (a === "int32")
        u = new Int32Array(d);
      else if (a === "bool")
        u = new Uint8Array(d);
      else if (a === "complex64") {
        u = new Float32Array(d);
        const p = new Float32Array(u.length / 2), f = new Float32Array(u.length / 2);
        for (let b = 0; b < p.length; b++)
          p[b] = u[b * 2], f[b] = u[b * 2 + 1];
        const g = _e(p, l, "float32"), m = _e(f, l, "float32");
        e[i] = ko(g, m), g.dispose(), m.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${a}`);
      o += c * h;
    }
    a !== "complex64" && (e[i] = _e(u, l, a));
  }
  return e;
}
function dI(n) {
  if (n === null)
    throw new Error(`Invalid input value: ${JSON.stringify(n)}`);
  let t = 0;
  const e = [];
  n.forEach((r) => {
    if (t += r.byteLength, e.push(r.byteLength === r.buffer.byteLength ? r : new r.constructor(r)), !(r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${r.constructor.name}`);
  });
  const s = new Uint8Array(t);
  let o = 0;
  return e.forEach((r) => {
    s.set(new Uint8Array(r.buffer), o), o += r.byteLength;
  }), s.buffer;
}
const _d = typeof Buffer < "u" && (typeof Blob > "u" || typeof atob > "u" || typeof btoa > "u");
function xm(n) {
  return _d ? Buffer.byteLength(n) : new Blob([n]).size;
}
function pI(n) {
  if (_d)
    return Buffer.from(n).toString("base64");
  const t = new Uint8Array(n);
  let e = "";
  for (let s = 0, o = t.length; s < o; s++)
    e += String.fromCharCode(t[s]);
  return btoa(e);
}
function fI(n) {
  if (_d) {
    const s = Buffer.from(n, "base64");
    return s.buffer.slice(s.byteOffset, s.byteOffset + s.byteLength);
  }
  const t = atob(n), e = new Uint8Array(t.length);
  for (let s = 0; s < t.length; ++s)
    e.set([t.charCodeAt(s)], s);
  return e.buffer;
}
function vb(n) {
  if (n.length === 1)
    return n[0];
  let t = 0;
  n.forEach((o) => {
    t += o.byteLength;
  });
  const e = new Uint8Array(t);
  let s = 0;
  return n.forEach((o) => {
    e.set(new Uint8Array(o), s), s += o.byteLength;
  }), e.buffer;
}
function I4(n) {
  const t = "/";
  for (n = n.trim(); n.endsWith(t); )
    n = n.slice(0, n.length - 1);
  const e = n.split(t);
  return e[e.length - 1];
}
function mI(n, t) {
  const e = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy,
    weightsManifest: t
  };
  return n.signature != null && (e.signature = n.signature), n.userDefinedMetadata != null && (e.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (e.modelInitializer = n.modelInitializer), n.trainingConfig != null && (e.trainingConfig = n.trainingConfig), e;
}
function gI(n, t, e) {
  const s = {
    modelTopology: n.modelTopology,
    format: n.format,
    generatedBy: n.generatedBy,
    convertedBy: n.convertedBy
  };
  if (n.trainingConfig != null && (s.trainingConfig = n.trainingConfig), n.weightsManifest != null) {
    if (!t)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    s.weightSpecs = t, s.weightData = e;
  }
  return n.signature != null && (s.signature = n.signature), n.userDefinedMetadata != null && (s.userDefinedMetadata = n.userDefinedMetadata), n.modelInitializer != null && (s.modelInitializer = n.modelInitializer), s;
}
async function bI(n, t) {
  let e, s;
  return n.weightsManifest != null && ([e, s] = await t(n.weightsManifest)), gI(n, e, s);
}
function Ud(n) {
  if (n.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return {
    dateSaved: new Date(),
    modelTopologyType: "JSON",
    modelTopologyBytes: n.modelTopology == null ? 0 : xm(JSON.stringify(n.modelTopology)),
    weightSpecsBytes: n.weightSpecs == null ? 0 : xm(JSON.stringify(n.weightSpecs)),
    weightDataBytes: n.weightData == null ? 0 : n.weightData.byteLength
  };
}
function xI(n) {
  const t = [];
  for (const e of n)
    t.push(...e.weights);
  return t;
}
function yI() {
  const n = (e) => {
    let s = e << 13, o = 0;
    for (; !(s & 8388608); )
      o -= 8388608, s <<= 1;
    return s &= -8388609, o += 947912704, s | o;
  }, t = new Uint32Array(2048);
  t[0] = 0;
  for (let e = 1; e < 1024; e++)
    t[e] = n(e);
  for (let e = 1024; e < 2048; e++)
    t[e] = 939524096 + (e - 1024 << 13);
  return t;
}
function wI() {
  const n = new Uint32Array(64);
  n[0] = 0, n[31] = 1199570944, n[32] = 2147483648, n[63] = 3347054592;
  for (let t = 1; t < 31; t++)
    n[t] = t << 23;
  for (let t = 33; t < 63; t++)
    n[t] = 2147483648 + (t - 32 << 23);
  return n;
}
function II() {
  const n = new Uint32Array(64);
  for (let t = 0; t < 64; t++)
    n[t] = 1024;
  return n[0] = n[32] = 0, n;
}
function CI() {
  const n = yI(), t = wI(), e = II();
  return (s) => {
    const o = new ArrayBuffer(4 * s.length), r = new Uint32Array(o);
    for (let i = 0; i < s.length; i++) {
      const a = s[i], l = n[e[a >> 10] + (a & 1023)] + t[a >> 10];
      r[i] = l;
    }
    return new Float32Array(o);
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ge {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return ge.instance == null && (ge.instance = new ge()), ge.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerSaveRouter(t) {
    ge.getInstance().saveRouters.push(t);
  }
  /**
   * Register a load-handler router.
   *
   * @param loadRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `load` method defined or `null`.
   */
  static registerLoadRouter(t) {
    ge.getInstance().loadRouters.push(t);
  }
  /**
   * Look up IOHandler for saving, given a URL-like string.
   *
   * @param url
   * @returns If only one match is found, an instance of IOHandler with the
   * `save` method defined. If no match is found, `null`.
   * @throws Error, if more than one match is found.
   */
  static getSaveHandlers(t) {
    return ge.getHandlers(t, "save");
  }
  /**
   * Look up IOHandler for loading, given a URL-like string.
   *
   * @param url
   * @param loadOptions Optional, custom load options.
   * @returns All valid handlers for `url`, given the currently registered
   *   handler routers.
   */
  static getLoadHandlers(t, e) {
    return ge.getHandlers(t, "load", e);
  }
  static getHandlers(t, e, s) {
    const o = [];
    return (e === "load" ? ge.getInstance().loadRouters : ge.getInstance().saveRouters).forEach((i) => {
      const a = i(t, s);
      a !== null && o.push(a);
    }), o;
  }
}
const C4 = (n) => ge.registerSaveRouter(n), v4 = (n) => ge.registerLoadRouter(n), vI = (n) => ge.getSaveHandlers(n), SI = (n, t) => ge.getLoadHandlers(n, t);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uh = "tensorflowjs", hh = 1, go = "models_store", zs = "model_info_store";
function Sb() {
  if (!B().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  const n = typeof window > "u" ? self : window, t = n.indexedDB || n.mozIndexedDB || n.webkitIndexedDB || n.msIndexedDB || n.shimIndexedDB;
  if (t == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t;
}
function dh(n) {
  const t = n.result;
  t.createObjectStore(go, { keyPath: "modelPath" }), t.createObjectStore(zs, { keyPath: "modelPath" });
}
class To {
  constructor(t) {
    if (this.indexedDB = Sb(), t == null || !t)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t;
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, t);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  /**
   * Perform database action to put model artifacts into or read model artifacts
   * from IndexedDB object store.
   *
   * Whether the action is put or get depends on whether `modelArtifacts` is
   * specified. If it is specified, the action will be put; otherwise the action
   * will be get.
   *
   * @param modelPath A unique string path for the model.
   * @param modelArtifacts If specified, it will be the model artifacts to be
   *   stored in IndexedDB.
   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`
   *   of `ModelArtifacts`, if the action is get.
   */
  databaseAction(t, e) {
    return new Promise((s, o) => {
      const r = this.indexedDB.open(uh, hh);
      r.onupgradeneeded = () => dh(r), r.onsuccess = () => {
        const i = r.result;
        if (e == null) {
          const a = i.transaction(go, "readonly"), c = a.objectStore(go).get(this.modelPath);
          c.onsuccess = () => {
            if (c.result == null)
              return i.close(), o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            s(c.result.modelArtifacts);
          }, c.onerror = (u) => (i.close(), o(c.error)), a.oncomplete = () => i.close();
        } else {
          const a = Ud(e), l = i.transaction(zs, "readwrite");
          let c = l.objectStore(zs);
          const u = c.put({ modelPath: this.modelPath, modelArtifactsInfo: a });
          let h;
          u.onsuccess = () => {
            h = i.transaction(go, "readwrite");
            const p = h.objectStore(go).put({
              modelPath: this.modelPath,
              modelArtifacts: e,
              modelArtifactsInfo: a
            });
            p.onsuccess = () => s({ modelArtifactsInfo: a }), p.onerror = (f) => {
              c = l.objectStore(zs);
              const g = c.delete(this.modelPath);
              g.onsuccess = () => (i.close(), o(p.error)), g.onerror = (m) => (i.close(), o(p.error));
            };
          }, u.onerror = (d) => (i.close(), o(u.error)), l.oncomplete = () => {
            h == null ? i.close() : h.oncomplete = () => i.close();
          };
        }
      }, r.onerror = (i) => o(r.error);
    });
  }
}
To.URL_SCHEME = "indexeddb://";
const kb = (n) => B().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(To.URL_SCHEME) ? kI(n.slice(To.URL_SCHEME.length)) : null;
ge.registerSaveRouter(kb);
ge.registerLoadRouter(kb);
function kI(n) {
  return new To(n);
}
function TI(n) {
  return n.startsWith(To.URL_SCHEME) ? n.slice(To.URL_SCHEME.length) : n;
}
class NI {
  constructor() {
    this.indexedDB = Sb();
  }
  async listModels() {
    return new Promise((t, e) => {
      const s = this.indexedDB.open(uh, hh);
      s.onupgradeneeded = () => dh(s), s.onsuccess = () => {
        const o = s.result, r = o.transaction(zs, "readonly"), a = r.objectStore(zs).getAll();
        a.onsuccess = () => {
          const l = {};
          for (const c of a.result)
            l[c.modelPath] = c.modelArtifactsInfo;
          t(l);
        }, a.onerror = (l) => (o.close(), e(a.error)), r.oncomplete = () => o.close();
      }, s.onerror = (o) => e(s.error);
    });
  }
  async removeModel(t) {
    return t = TI(t), new Promise((e, s) => {
      const o = this.indexedDB.open(uh, hh);
      o.onupgradeneeded = () => dh(o), o.onsuccess = () => {
        const r = o.result, i = r.transaction(zs, "readwrite"), a = i.objectStore(zs), l = a.get(t);
        let c;
        l.onsuccess = () => {
          if (l.result == null)
            return r.close(), s(new Error(`Cannot find model with path '${t}' in IndexedDB.`));
          {
            const u = a.delete(t), h = () => {
              c = r.transaction(go, "readwrite");
              const p = c.objectStore(go).delete(t);
              p.onsuccess = () => e(l.result.modelArtifactsInfo), p.onerror = (f) => s(l.error);
            };
            u.onsuccess = h, u.onerror = (d) => (h(), r.close(), s(l.error));
          }
        }, l.onerror = (u) => (r.close(), s(l.error)), i.oncomplete = () => {
          c == null ? r.close() : c.oncomplete = () => r.close();
        };
      }, o.onerror = (r) => s(o.error);
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cs = "/", jo = "tensorflowjs_models", Tb = "info", $I = "model_topology", RI = "weight_specs", GI = "weight_data", LI = "model_metadata";
function Nb(n) {
  return {
    info: [jo, n, Tb].join(Cs),
    topology: [jo, n, $I].join(Cs),
    weightSpecs: [jo, n, RI].join(Cs),
    weightData: [jo, n, GI].join(Cs),
    modelMetadata: [jo, n, LI].join(Cs)
  };
}
function $b(n) {
  for (const t of Object.values(n))
    window.localStorage.removeItem(t);
}
function EI(n) {
  const t = n.split(Cs);
  if (t.length < 3)
    throw new Error(`Invalid key format: ${n}`);
  return t.slice(1, t.length - 1).join(Cs);
}
function WI(n) {
  return n.startsWith(No.URL_SCHEME) ? n.slice(No.URL_SCHEME.length) : n;
}
class No {
  constructor(t) {
    if (!B().getBool("IS_BROWSER") || typeof window > "u" || typeof window.localStorage > "u")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, t == null || !t)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t, this.keys = Nb(this.modelPath);
  }
  /**
   * Save model artifacts to browser local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @param modelArtifacts The model artifacts to be stored.
   * @returns An instance of SaveResult.
   */
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      const e = JSON.stringify(t.modelTopology), s = JSON.stringify(t.weightSpecs), o = Ud(t);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(o)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, s), this.LS.setItem(this.keys.weightData, pI(t.weightData));
        const r = {
          format: t.format,
          generatedBy: t.generatedBy,
          convertedBy: t.convertedBy,
          signature: t.signature != null ? t.signature : void 0,
          userDefinedMetadata: t.userDefinedMetadata != null ? t.userDefinedMetadata : void 0,
          modelInitializer: t.modelInitializer != null ? t.modelInitializer : void 0,
          trainingConfig: t.trainingConfig != null ? t.trainingConfig : void 0
        };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(r)), { modelArtifactsInfo: o };
      } catch {
        throw $b(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${o.modelTopologyBytes}, weightSpecsBytes=${o.weightSpecsBytes}, weightDataBytes=${o.weightDataBytes}.`);
      }
    }
  }
  /**
   * Load a model from local storage.
   *
   * See the documentation to `browserLocalStorage` for details on the saved
   * artifacts.
   *
   * @returns The loaded model (if loading succeeds).
   */
  async load() {
    const t = JSON.parse(this.LS.getItem(this.keys.info));
    if (t == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (t.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    const e = {}, s = JSON.parse(this.LS.getItem(this.keys.topology));
    if (s == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    e.modelTopology = s;
    const o = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (o == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    e.weightSpecs = o;
    const r = this.LS.getItem(this.keys.modelMetadata);
    if (r != null) {
      const a = JSON.parse(r);
      e.format = a.format, e.generatedBy = a.generatedBy, e.convertedBy = a.convertedBy, a.signature != null && (e.signature = a.signature), a.userDefinedMetadata != null && (e.userDefinedMetadata = a.userDefinedMetadata), a.modelInitializer != null && (e.modelInitializer = a.modelInitializer), a.trainingConfig != null && (e.trainingConfig = a.trainingConfig);
    }
    const i = this.LS.getItem(this.keys.weightData);
    if (i == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return e.weightData = fI(i), e;
  }
}
No.URL_SCHEME = "localstorage://";
const Rb = (n) => B().getBool("IS_BROWSER") && !Array.isArray(n) && n.startsWith(No.URL_SCHEME) ? MI(n.slice(No.URL_SCHEME.length)) : null;
ge.registerSaveRouter(Rb);
ge.registerLoadRouter(Rb);
function MI(n) {
  return new No(n);
}
class DI {
  constructor() {
    S(B().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), S(typeof window > "u" || typeof window.localStorage < "u", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    const t = {}, e = jo + Cs, s = Cs + Tb;
    for (let o = 0; o < this.LS.length; ++o) {
      const r = this.LS.key(o);
      if (r.startsWith(e) && r.endsWith(s)) {
        const i = EI(r);
        t[i] = JSON.parse(this.LS.getItem(r));
      }
    }
    return t;
  }
  async removeModel(t) {
    t = WI(t);
    const e = Nb(t);
    if (this.LS.getItem(e.info) == null)
      throw new Error(`Cannot find model at path '${t}'`);
    const s = JSON.parse(this.LS.getItem(e.info));
    return $b(e), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qo = "://";
class Be {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Be.instance == null && (Be.instance = new Be()), Be.instance;
  }
  /**
   * Register a save-handler router.
   *
   * @param saveRouter A function that maps a URL-like string onto an instance
   * of `IOHandler` with the `save` method defined or `null`.
   */
  static registerManager(t, e) {
    S(t != null, () => "scheme must not be undefined or null."), t.endsWith(qo) && (t = t.slice(0, t.indexOf(qo))), S(t.length > 0, () => "scheme must not be an empty string.");
    const s = Be.getInstance();
    S(s.managers[t] == null, () => `A model store manager is already registered for scheme '${t}'.`), s.managers[t] = e;
  }
  static getManager(t) {
    const e = Be.getInstance().managers[t];
    if (e == null)
      throw new Error(`Cannot find model manager for scheme '${t}'`);
    return e;
  }
  static getSchemes() {
    return Object.keys(Be.getInstance().managers);
  }
}
function ja(n) {
  if (n.indexOf(qo) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Be.getSchemes().join(",")}`);
  return {
    scheme: n.split(qo)[0],
    path: n.split(qo)[1]
  };
}
async function Gb(n, t, e = !1) {
  S(n !== t, () => `Old path and new path are the same: '${n}'`);
  const s = ge.getLoadHandlers(n);
  S(s.length > 0, () => `Copying failed because no load handler is found for source URL ${n}.`), S(s.length < 2, () => `Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);
  const o = s[0], r = ge.getSaveHandlers(t);
  S(r.length > 0, () => `Copying failed because no save handler is found for destination URL ${t}.`), S(r.length < 2, () => `Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);
  const i = r[0], a = ja(n).scheme, l = ja(n).path, c = a === ja(n).scheme, u = await o.load();
  e && c && await Be.getManager(a).removeModel(l);
  const h = await i.save(u);
  return e && !c && await Be.getManager(a).removeModel(l), h.modelArtifactsInfo;
}
async function S4() {
  const n = Be.getSchemes(), t = {};
  for (const e of n) {
    const s = await Be.getManager(e).listModels();
    for (const o in s) {
      const r = e + qo + o;
      t[r] = s[o];
    }
  }
  return t;
}
async function k4(n) {
  const t = ja(n);
  return Be.getManager(t.scheme).removeModel(t.path);
}
async function T4(n, t) {
  return Gb(n, t, !1);
}
async function N4(n, t) {
  return Gb(n, t, !0);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class FI {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = !1;
  }
  fetch(t, e) {
    return fetch(t, e);
  }
  now() {
    return performance.now();
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t);
  }
  decode(t, e) {
    return new TextDecoder(e).decode(t);
  }
  // If the setTimeout nesting level is greater than 5 and timeout is less
  // than 4ms, timeout will be clamped to 4ms, which hurts the perf.
  // Interleaving window.postMessage and setTimeout will trick the browser and
  // avoid the clamp.
  setTimeoutCustom(t, e) {
    if (!window || !B().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(t, e);
      return;
    }
    this.functionRefs.push(t), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, e), this.hasEventListener || (this.hasEventListener = !0, window.addEventListener("message", (s) => {
      if (s.source === window && s.data.name === this.messageName) {
        s.stopPropagation();
        const o = this.functionRefs[s.data.index];
        o(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, !0));
  }
}
if (B().get("IS_BROWSER")) {
  B().setPlatform("browser", new FI());
  try {
    Be.registerManager(No.URL_SCHEME, new DI());
  } catch {
  }
  try {
    Be.registerManager(To.URL_SCHEME, new NI());
  } catch {
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zI = {
  // tslint:disable-next-line:no-require-imports
  importFetch: () => require("node-fetch")
};
let vu;
class VI {
  constructor() {
    this.util = require("util"), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(t, e) {
    return B().global.fetch != null ? B().global.fetch(t, e) : (vu == null && (vu = zI.importFetch()), vu(t, e));
  }
  now() {
    const t = process.hrtime();
    return t[0] * 1e3 + t[1] / 1e6;
  }
  encode(t, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);
    return this.textEncoder.encode(t);
  }
  decode(t, e) {
    return t.length === 0 ? "" : new this.util.TextDecoder(e).decode(t);
  }
}
B().get("IS_NODE") && !B().get("IS_BROWSER") && B().setPlatform("node", new VI());
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nt(n, t = "float32", e) {
  return t = t || "float32", Uh(n), new Fe(n, t, e);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PI(n, t) {
  const e = N(n, "x", "cast");
  if (!Hg(t))
    throw new Error(`Failed to cast to unknown dtype ${t}`);
  if (t === "string" && e.dtype !== "string" || t !== "string" && e.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  const s = { x: e }, o = { dtype: t };
  return W.runKernel(gi, s, o);
}
const ht = V({ cast_: PI });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XI(n) {
  const e = { x: N(n, "x", "clone", "string_or_numeric") };
  return W.runKernel(Ri, e);
}
const yo = V({ clone_: XI });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OI(n, t = !1) {
  console.log(n.toString(t));
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
wb();
const AI = {
  buffer: Nt,
  cast: ht,
  clone: yo,
  print: OI
};
nI(AI);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ym(n, t, e, s) {
  i(n), e = e ?? 0, s = s ?? 1, a(e, s);
  let o = 0;
  const r = (l) => (l.then((c) => {
    const u = e + ++o / n.length * (s - e);
    return t(u), c;
  }), l);
  function i(l) {
    S(l != null && Array.isArray(l) && l.length > 0, () => "promises must be a none empty array");
  }
  function a(l, c) {
    S(l >= 0 && l <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${l}`), S(c >= 0 && c <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${c}`), S(c >= l, () => `startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${c}`);
  }
  return Promise.all(n.map(r));
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function Lb(n, t) {
  t == null && (t = {});
  const e = t.fetchFunc == null ? B().platform.fetch : t.fetchFunc, s = n.map((h) => e(h, t.requestInit, { isBinary: !0 })), o = 0, r = 0.5, a = (t.onProgress == null ? await Promise.all(s) : await ym(s, t.onProgress, o, r)).map((h) => h.arrayBuffer()), l = 0.5, c = 1;
  return t.onProgress == null ? await Promise.all(a) : await ym(a, t.onProgress, l, c);
}
async function ZI(n, t = "", e, s) {
  return KI((i) => Lb(i, { requestInit: s }))(n, t, e);
}
function KI(n) {
  return async (t, e = "", s) => {
    const o = t.map(() => !1), r = {}, i = s != null ? s.map(() => !1) : [], a = [];
    if (t.forEach((p, f) => {
      let g = 0;
      p.weights.forEach((m) => {
        const b = "quantization" in m ? m.quantization.dtype : m.dtype, x = ch[b] * H(m.shape), w = () => {
          o[f] = !0, r[f] == null && (r[f] = []), r[f].push({
            manifestEntry: m,
            groupOffset: g,
            sizeBytes: x
          });
        };
        s != null ? s.forEach((y, I) => {
          y === m.name && (w(), i[I] = !0);
        }) : w(), a.push(m.name), g += x;
      });
    }), !i.every((p) => p)) {
      const p = s.filter((f, g) => !i[g]);
      throw new Error(`Could not find weights in manifest with names: ${p.join(", ")}. 
Manifest JSON has weights with names: ${a.join(", ")}.`);
    }
    const l = o.reduce((p, f, g) => (f && p.push(g), p), []), c = [];
    l.forEach((p) => {
      t[p].paths.forEach((f) => {
        const g = e + (e.endsWith("/") ? "" : "/") + f;
        c.push(g);
      });
    });
    const u = await n(c), h = {};
    let d = 0;
    return l.forEach((p) => {
      const f = t[p].paths.length;
      let g = 0;
      for (let y = 0; y < f; y++)
        g += u[d + y].byteLength;
      const m = new ArrayBuffer(g), b = new Uint8Array(m);
      let x = 0;
      for (let y = 0; y < f; y++) {
        const I = new Uint8Array(u[d + y]);
        b.set(I, x), x += I.byteLength;
      }
      r[p].forEach((y) => {
        const I = m.slice(y.groupOffset, y.groupOffset + y.sizeBytes), v = Cb(I, [y.manifestEntry]);
        for (const T in v)
          h[T] = v[T];
      }), d += f;
    }), h;
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BI = "application/octet-stream", HI = "application/json";
class Yd {
  constructor(t, e) {
    if (this.DEFAULT_METHOD = "POST", e == null && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, this.weightUrlConverter = e.weightUrlConverter, e.fetchFunc != null ? (S(typeof e.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = e.fetchFunc) : this.fetch = B().platform.fetch, S(t != null && t.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(t) && S(t.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${t.length}).`), this.path = t, e.requestInit != null && e.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e.requestInit || {};
  }
  async save(t) {
    if (t.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    const e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    e.body = new FormData();
    const s = [{
      paths: ["./model.weights.bin"],
      weights: t.weightSpecs
    }], o = mI(t, s);
    e.body.append("model.json", new Blob([JSON.stringify(o)], { type: HI }), "model.json"), t.weightData != null && e.body.append("model.weights.bin", new Blob([t.weightData], { type: BI }), "model.weights.bin");
    const r = await this.fetch(this.path, e);
    if (r.ok)
      return {
        modelArtifactsInfo: Ud(t),
        responses: [r]
      };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`);
  }
  /**
   * Load model artifacts via HTTP request(s).
   *
   * See the documentation to `tf.io.http` for details on the saved
   * artifacts.
   *
   * @returns The loaded model artifacts (if loading succeeds).
   */
  async load() {
    const t = await this.fetch(this.path, this.requestInit);
    if (!t.ok)
      throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);
    let e;
    try {
      e = await t.json();
    } catch {
      let i = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? i += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : i += " Please make sure the server is serving valid JSON for this request.", new Error(i);
    }
    const s = e.modelTopology, o = e.weightsManifest;
    if (s == null && o == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return bI(e, (r) => this.loadWeights(r));
  }
  async loadWeights(t) {
    const e = Array.isArray(this.path) ? this.path[1] : this.path, [s, o] = _I(e), r = this.weightPathPrefix || s, i = xI(t), a = [], l = [];
    for (const u of t)
      for (const h of u.paths)
        this.weightUrlConverter != null ? l.push(this.weightUrlConverter(h)) : a.push(r + h + o);
    this.weightUrlConverter && a.push(...await Promise.all(l));
    const c = await Lb(a, {
      requestInit: this.requestInit,
      fetchFunc: this.fetch,
      onProgress: this.onProgress
    });
    return [i, vb(c)];
  }
}
Yd.URL_SCHEME_REGEX = /^https?:\/\//;
function _I(n) {
  const t = n.lastIndexOf("/"), e = n.lastIndexOf("?"), s = n.substring(0, t), o = e > t ? n.substring(e) : "";
  return [s + "/", o];
}
function wm(n) {
  return n.match(Yd.URL_SCHEME_REGEX) != null;
}
const Eb = (n, t) => {
  if (typeof fetch > "u" && (t == null || t.fetchFunc == null))
    return null;
  {
    let e = !0;
    if (Array.isArray(n) ? e = n.every((s) => wm(s)) : e = wm(n), e)
      return Wb(n, t);
  }
  return null;
};
ge.registerSaveRouter(Eb);
ge.registerLoadRouter(Eb);
function Wb(n, t) {
  return new Yd(n, t);
}
function UI(n, t) {
  return Wb(n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YI(n, t, e = !1, s = !1) {
  let o = N(n, "a", "matMul"), r = N(t, "b", "matMul");
  [o, r] = xe(o, r);
  const i = { a: o, b: r }, a = { transposeA: e, transposeB: s };
  return W.runKernel(Zl, i, a);
}
const Kt = V({ matMul_: YI });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jI(n, t, e = 1, s = 0, o = "int32") {
  if (t < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);
  const i = { indices: N(n, "indices", "oneHot", "int32") }, a = { dtype: o, depth: t, onValue: e, offValue: s };
  return W.runKernel(wc, i, a);
}
const Mb = V({ oneHot_: jI });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $4() {
  B().set("PROD", !0);
}
function R4() {
  B().set("DEBUG", !0);
}
function G4() {
  B().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function L4(n) {
  B().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(n + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
function E4() {
  W.disposeVariables();
}
function le() {
  return W;
}
function ll() {
  return W.memory();
}
function W4(n) {
  return W.profile(n);
}
function X(n, t) {
  return W.tidy(n, t);
}
function Et(n) {
  ks(n).forEach((e) => e.dispose());
}
function vn(n) {
  return W.keep(n);
}
function M4(n) {
  return W.time(n);
}
function D4(n) {
  return W.setBackend(n);
}
function F4() {
  return W.ready();
}
function z4() {
  return W.backendName;
}
function V4(n) {
  W.removeBackend(n);
}
function P4(n) {
  return W.findBackend(n);
}
function X4(n) {
  return W.findBackendFactory(n);
}
function Db(n, t, e = 1) {
  return W.registerBackend(n, t, e);
}
function Vs() {
  return W.backend;
}
function O4(n, t) {
  B().setPlatform(n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QI(n) {
  const e = { input: N(n, "input", "imag") };
  return W.runKernel(gd, e);
}
const jd = V({ imag_: QI });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JI(n) {
  const e = { x: N(n, "x", "neg") };
  return W.runKernel(bc, e);
}
const fe = V({ neg_: JI });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qI(n) {
  const e = { input: N(n, "input", "real") };
  return W.runKernel(Sd, e);
}
const cl = V({ real_: qI });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t2(n, t, e) {
  const s = N(n, "x", "transpose");
  if (t == null && (t = s.shape.map((i, a) => a).reverse()), S(s.rank === t.length, () => `Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`), t.forEach((i) => {
    S(i >= 0 && i < s.rank, () => `All entries in 'perm' must be between 0 and ${s.rank - 1} but got ${t}`);
  }), s.rank <= 1)
    return s.clone();
  const o = { x: s }, r = { perm: t };
  return s.dtype === "complex64" ? X(() => {
    let i = cl(s), a = jd(s);
    return i = W.runKernel(Jo, { x: i }, r), a = W.runKernel(Jo, { x: a }, r), e && (a = fe(a)), ko(i, a);
  }) : W.runKernel(Jo, o, r);
}
const zt = V({ transpose_: t2 });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ts(n, t) {
  const e = n.length, s = [];
  for (let o = 0; o < e; o++) {
    const r = e - 1 - o, i = n[r] || 1;
    (t[t.length - 1 - o] || 1) > 1 && i === 1 && s.unshift(r);
  }
  return s;
}
function ve(n, t) {
  const e = [];
  for (let s = 0; s < t.length; s++) {
    const o = n[n.length - s - 1], r = t.length - s - 1, i = t[r];
    (o == null || o === 1 && i > 1) && e.unshift(r);
  }
  return e;
}
function Rt(n, t) {
  const e = [], s = Math.max(n.length, t.length);
  for (let o = 0; o < s; o++) {
    let r = n[n.length - o - 1];
    r == null && (r = 1);
    let i = t[t.length - o - 1];
    if (i == null && (i = 1), r === 1)
      e.unshift(i);
    else if (i === 1)
      e.unshift(r);
    else if (r !== i) {
      const a = `Operands could not be broadcast together with shapes ${n} and ${t}.`;
      throw Error(a);
    } else
      e.unshift(r);
  }
  return e;
}
const A4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertAndGetBroadcastShape: Rt,
  getBroadcastDims: Ts,
  getReductionAxes: ve
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e2(n, t, e) {
  if (Dl(n), t != null && t.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  const s = ra(n, e);
  if (s.length !== 3 && s.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return ia(n, t, s, e);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let io;
function Fb(n, t = 3) {
  if (t > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let e = !1, s = !1, o = !1, r = !1, i = !1, a = !1;
  if (n.data instanceof Uint8Array)
    e = !0;
  else if (typeof ImageData < "u" && n instanceof ImageData)
    s = !0;
  else if (typeof HTMLVideoElement < "u" && n instanceof HTMLVideoElement)
    o = !0;
  else if (typeof HTMLImageElement < "u" && n instanceof HTMLImageElement)
    r = !0;
  else if (n.getContext != null)
    i = !0;
  else if (typeof ImageBitmap < "u" && n instanceof ImageBitmap)
    a = !0;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);
  if (qu(Ju, W.backendName) != null) {
    const f = { pixels: n }, g = { numChannels: t };
    return W.runKernel(Ju, f, g);
  }
  const [c, u] = o ? [
    n.videoWidth,
    n.videoHeight
  ] : [n.width, n.height];
  let h;
  if (i)
    h = // tslint:disable-next-line:no-any
    n.getContext("2d").getImageData(0, 0, c, u).data;
  else if (s || e)
    h = n.data;
  else if (r || o || a) {
    if (io == null)
      if (typeof document > "u")
        if (typeof OffscreenCanvas < "u" && typeof OffscreenCanvasRenderingContext2D < "u")
          io = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        io = document.createElement("canvas").getContext("2d", { willReadFrequently: !0 });
    io.canvas.width = c, io.canvas.height = u, io.drawImage(n, 0, 0, c, u), h = io.getImageData(0, 0, c, u).data;
  }
  let d;
  if (t === 4)
    d = new Int32Array(h);
  else {
    const f = c * u;
    d = new Int32Array(f * t);
    for (let g = 0; g < f; g++)
      for (let m = 0; m < t; ++m)
        d[g * t + m] = h[g * 4 + m];
  }
  return e2(d, [u, c, t], "int32");
}
function n2(n) {
  return n != null && n.data instanceof Uint8Array;
}
function s2() {
  return typeof window < "u" && typeof ImageBitmap < "u" && window.hasOwnProperty("createImageBitmap");
}
function o2(n) {
  return n != null && n.width !== 0 && n.height !== 0;
}
function r2(n) {
  return s2() && !(n instanceof ImageBitmap) && o2(n) && !n2(n);
}
async function i2(n, t = 3) {
  let e = null;
  if (B().getBool("WRAP_TO_IMAGEBITMAP") && r2(n)) {
    let s;
    try {
      s = await createImageBitmap(n, { premultiplyAlpha: "none" });
    } catch {
      s = null;
    }
    s != null && s.width === n.width && s.height === n.height ? e = s : e = n;
  } else
    e = n;
  return Fb(e, t);
}
async function a2(n, t) {
  let e = N(n, "img", "toPixels");
  if (!(n instanceof _t)) {
    const c = e;
    e = ht(c, "int32"), c.dispose();
  }
  if (e.rank !== 2 && e.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${e.rank}.`);
  const [s, o] = e.shape.slice(0, 2), r = e.rank === 2 ? 1 : e.shape[2];
  if (r > 4 || r === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${r}`);
  if (e.dtype !== "float32" && e.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${e.dtype}. Please use float32 or int32 tensors.`);
  const i = await e.data(), a = e.dtype === "float32" ? 255 : 1, l = new Uint8ClampedArray(o * s * 4);
  for (let c = 0; c < s * o; ++c) {
    const u = [0, 0, 0, 255];
    for (let d = 0; d < r; d++) {
      const p = i[c * r + d];
      if (e.dtype === "float32") {
        if (p < 0 || p > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`);
      } else if (e.dtype === "int32" && (p < 0 || p > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);
      r === 1 ? (u[0] = p * a, u[1] = p * a, u[2] = p * a) : u[d] = p * a;
    }
    const h = c * 4;
    l[h + 0] = Math.round(u[0]), l[h + 1] = Math.round(u[1]), l[h + 2] = Math.round(u[2]), l[h + 3] = Math.round(u[3]);
  }
  if (t != null) {
    t.width = o, t.height = s;
    const c = t.getContext("2d"), u = new ImageData(l, o, s);
    c.putImageData(u, 0, 0);
  }
  return e !== n && e.dispose(), l;
}
const zb = V({ fromPixels_: Fb }), Z4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  fromPixels: zb,
  fromPixelsAsync: i2,
  toPixels: a2
}, Symbol.toStringTag, { value: "Module" }));
function Pc(n, t) {
  const e = n.shape.length, s = t.shape.length;
  if (e < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);
  if (s < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);
  if (t.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);
  if (t.shape[s - 1] > e)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s - 1]} vs. ${e}`);
  if (H(n.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);
  const o = t.shape, r = o[o.length - 1];
  let i = 1;
  for (let h = 0; h < o.length - 1; ++h)
    i *= o[h];
  const a = n.shape, l = o.slice();
  l.pop();
  let c = 1;
  for (let h = r; h < e; ++h)
    c *= a[h], l.push(a[h]);
  const u = [
    ...gt(n.shape).map((h) => h / c),
    1
  ].slice(0, r);
  return [l, i, c, u];
}
const K4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  prepareAndValidate: Pc
}, Symbol.toStringTag, { value: "Module" }));
function Qd(n, t, e) {
  const s = t.rank > 1 ? t.shape[t.rank - 1] : 1, o = t.rank > 1 ? t.rank - 1 : 1, r = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${o}.`;
  if (e.rank < o)
    throw new Error(r + ` update.rank < ${o}. `);
  if (n.length < s + (e.rank - o))
    throw new Error(r + ` Output shape length < ${s + (e.rank - o)}`);
  if (e.rank !== o + n.length - s)
    throw new Error(r + ` update.rank != ${o + n.length - s}`);
  for (let i = 0; i < o; ++i)
    if (e.shape[i] !== t.shape[i])
      throw new Error(r + ` updates.shape[${i}] (${e.shape[i]}) != indices.shape[${i}] (${t.shape[i]}).`);
  for (let i = 0; i < e.rank - o; ++i)
    if (e.shape[i + o] !== n[i + s])
      throw new Error(r + ` updates.shape[${i + o}] (${e.shape[i + o]}) != shape[${i + o}] (${n[i + o]})`);
}
function Vb(n, t, e) {
  if (t.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);
  if (n.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);
  if (t.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);
  if (e.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);
  if (e.length === 0) {
    if (t.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);
    if (n.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`);
  }
  Qd(e, t, n);
}
function wr(n, t, e) {
  const s = t.shape.length, o = s > 1 ? t.shape[s - 1] : 1, r = e.length;
  let i = 1;
  for (let h = o; h < r; ++h)
    i *= e[h];
  const a = o < 1 ? 1 : o, l = H(t.shape) / a, c = [...gt(e.slice(0, o)), 1], u = H(e);
  return { sliceRank: o, numUpdates: l, sliceSize: i, strides: c, outputSize: u };
}
const B4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  calculateShapes: wr,
  validateInput: Vb,
  validateUpdateShape: Qd
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ph = -2, l2 = -1;
function Jd(n, t, e) {
  const s = n.shape.length;
  S(s === t.length, () => `Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`), S(s === e.length, () => `Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);
  for (let o = 0; o < s; ++o)
    S(t[o] + e[o] <= n.shape[o], () => `Error in slice${s}D: begin[${o}] + size[${o}] (${t[o] + e[o]}) would overflow input.shape[${o}] (${n.shape[o]})`);
}
function c2(n) {
  const t = [];
  let e = 0;
  for (; n > 0; )
    n & 1 && t.push(e), n /= 2, e++;
  return t;
}
function qd(n, t, e) {
  const s = [];
  for (let o = 0; o < n.length; o++)
    s[o] = Math.ceil((t[o] - n[o]) / e[o]);
  return s;
}
function Pb(n, t, e, s) {
  const o = [...n];
  for (let r = o.length; r < s.length; r++)
    o.push(1);
  for (let r = 0; r < e; r++)
    r === 0 ? o[t] = 1 : (o.splice(
      t,
      0,
      1
      /* element to add */
    ), o.pop());
  return o;
}
function Xb(n, t, e) {
  return e <= n ? e : e - (t - 1);
}
function Ob(n, t) {
  const e = [];
  for (let s = 0; s < n; s++)
    e.push(t + s);
  return e;
}
function u2(n, t, e, s, o, r, i, a, l) {
  const c = n.length;
  let u = new Array(c), h = new Array(c), d = new Array(c);
  if (t.length && e > 0) {
    const p = t[0], f = e + 1;
    u = Ab(i, p, f, s, n), h = Zb(a, p, f, o, n), d = Pb(r, p, f, n);
  } else
    for (let p = 0; p < c; p++)
      u[p] = Bb(i, s, r, n, p, l), h[p] = Hb(a, o, r, n, p, l), d[p] = Kb(r, p, l);
  return {
    begin: u,
    end: h,
    strides: d
  };
}
function Ab(n, t, e, s, o) {
  const r = [...o], i = Ob(e, t);
  for (let a = 0; a < r.length; a++)
    if (i.indexOf(a) > -1)
      r[a] = 0;
    else {
      const l = Xb(t, e, a);
      let c = s[l];
      n & 1 << l && (c = 0), r[a] = c;
    }
  return r;
}
function Zb(n, t, e, s, o) {
  const r = [...o], i = Ob(e, t);
  for (let a = 0; a < r.length; a++)
    if (i.indexOf(a) > -1)
      r[a] = Number.MAX_SAFE_INTEGER;
    else {
      const l = Xb(t, e, a);
      let c = s[l];
      n & 1 << l && (c = Number.MAX_SAFE_INTEGER), r[a] = c;
    }
  for (let a = 0; a < r.length; a++) {
    const l = o[a];
    r[a] < 0 && (r[a] += l), r[a] = Ks(0, r[a], o[a]);
  }
  return r;
}
function Kb(n, t, e) {
  let s = n[t];
  return (e & 1 << t || s == null) && (s = 1), s;
}
function Bb(n, t, e, s, o, r) {
  let i = t[o];
  const a = e[o] || 1;
  (n & 1 << o || r & 1 << o || i == null) && (a > 0 ? i = Number.MIN_SAFE_INTEGER : i = Number.MAX_SAFE_INTEGER);
  const l = s[o];
  return i < 0 && (i += l), i = Ks(0, i, l - 1), i;
}
function Hb(n, t, e, s, o, r) {
  let i = t[o];
  const a = e[o] || 1;
  (n & 1 << o || r & 1 << o || i == null) && (a > 0 ? i = Number.MAX_SAFE_INTEGER : i = Number.MIN_SAFE_INTEGER);
  const l = s[o];
  return i < 0 && (i += l), a > 0 ? i = Ks(0, i, l) : i = Ks(-1, i, l - 1), i;
}
function Xc(n, t, e) {
  let s = e.length;
  for (let o = 0; o < e.length; o++)
    if (e[o] > 1) {
      s = o;
      break;
    }
  for (let o = s + 1; o < e.length; o++)
    if (t[o] > 0 || e[o] !== n[o])
      return !1;
  return !0;
}
function Oc(n, t) {
  let e = n.length > 0 ? n[n.length - 1] : 1;
  for (let s = 0; s < n.length - 1; s++)
    e += n[s] * t[s];
  return e;
}
function Ac(n, t, e) {
  let s;
  const o = n.shape.length;
  typeof t == "number" ? s = [t, ...new Array(o - 1).fill(0)] : t.length < o ? s = t.concat(new Array(o - t.length).fill(0)) : s = t.slice(), s.forEach((i) => {
    S(i !== -1, () => "slice() does not support negative begin indexing.");
  });
  let r;
  return e == null ? r = new Array(o).fill(-1) : typeof e == "number" ? r = [e, ...new Array(o - 1).fill(-1)] : e.length < o ? r = e.concat(new Array(o - e.length).fill(-1)) : r = e, r = r.map((i, a) => i >= 0 ? i : (S(i === -1, () => `Negative size values should be exactly -1 but got ${i} for the slice() size at index ${a}.`), n.shape[a] - s[a])), [s, r];
}
function tp(n, t, e, s, o, r, i, a, l) {
  let c;
  if (s == null ? (c = new Array(t.length), c.fill(1)) : c = s, i != null && i & i - 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let u = !1;
  const h = {
    dims: c.length,
    numAddAxisAfterEllipsis: 0,
    begin: t.slice(),
    end: e.slice(),
    strides: c.slice(),
    beginMask: o,
    endMask: r,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  for (let w = 0; w < h.dims; w++)
    u && 1 << w & a && h.numAddAxisAfterEllipsis++, 1 << w & i && (u = !0);
  u || (h.ellipsisMask |= 1 << h.dims, h.dims++);
  const d = {
    dims: n.length,
    beginMask: 0,
    endMask: 0,
    beginValid: !1,
    endValid: !1
  };
  h2(h, d);
  let p = !0, f = !0, g = !0;
  const m = [], b = [];
  for (let w = 0; w < n.length; ++w) {
    if (d.strides[w] === 0)
      throw Error(`strides[${w}] must be non-zero`);
    const y = !!(d.shrinkAxisMask & 1 << w), I = n[w];
    if (I === -1) {
      m.push(y ? 1 : -1);
      continue;
    }
    const v = [d.beginMask & 1 << w, d.endMask & 1 << w], T = [
      d.strides[w] > 0 ? 0 : -1,
      d.strides[w] > 0 ? I : I - 1
    ];
    if (y && d.strides[w] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    g = g && d.strides[w] === 1;
    const k = !!(d.beginMask & 1 << w && d.endMask & 1 << w);
    if (d.beginValid && d.endValid) {
      if (y) {
        const A = d.begin[w] < 0 ? I + d.begin[w] : d.begin[w];
        if (d.begin[w] = A, d.end[w] = d.begin[w] + 1, A < 0 || A >= I)
          throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`);
      } else
        d.begin[w] = Im(d.begin[w], 0, d.strides[w], I, v, T), d.end[w] = Im(d.end[w], 1, d.strides[w], I, v, T);
      const z = d.strides[w] === 1 && d.begin[w] === 0 && d.end[w] === I;
      p = p && z, f = f && (w === 0 && d.strides[w] === 1 || z);
    } else
      p = p && d.strides[w] === 1 && k, f = f && (w === 0 && d.strides[w] === 1 || k);
    let $, G = !1;
    if (d.beginValid && d.endValid ? ($ = d.end[w] - d.begin[w], G = !0) : y ? ($ = 1, G = !0) : k && I >= 0 && (d.strides[w] < 0 ? $ = -I : $ = I, G = !0), G) {
      let z;
      $ === 0 || $ < 0 != d.strides[w] < 0 ? z = 0 : z = Math.trunc($ / d.strides[w]) + ($ % d.strides[w] !== 0 ? 1 : 0), m.push(z);
    } else
      m.push(-1);
  }
  for (let w = 0; w < d.finalShapeGatherIndices.length; ++w) {
    const y = d.finalShapeGatherIndices[w];
    y >= 0 ? b.push(m[y]) : y === ph && b.push(1);
  }
  return {
    finalShapeSparse: b.filter((w, y) => d.finalShapeGatherIndices[y] !== ph),
    finalShape: b,
    isIdentity: p,
    sliceDim0: f,
    isSimpleSlice: g,
    begin: d.begin,
    end: d.end,
    strides: d.strides
  };
}
function h2(n, t) {
  t.beginMask = 0, t.endMask = 0, t.shrinkAxisMask = 0;
  let e = 0;
  t.beginValid = n.begin != null, t.endValid = n.end != null, t.begin = new Array(t.dims), t.end = new Array(t.dims), t.strides = new Array(t.dims), t.finalShapeGatherIndices = [], t.finalShapeGatherIndicesSparse = [], t.inputShapeGatherIndicesSparse = new Array(t.dims);
  for (let s = 0; s < n.dims; s++)
    if (1 << s & n.ellipsisMask) {
      const o = Math.min(t.dims - (n.dims - s) + 1 + n.numAddAxisAfterEllipsis, t.dims);
      for (; e < o; e++)
        t.begin[e] = 0, t.end[e] = 0, t.strides[e] = 1, t.beginMask |= 1 << e, t.endMask |= 1 << e, t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(-1), t.inputShapeGatherIndicesSparse[e] = s;
    } else if (1 << s & n.newAxisMask)
      t.finalShapeGatherIndices.push(ph), t.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (e === t.begin.length)
        throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);
      n.begin != null && (t.begin[e] = n.begin[s]), n.end != null && (t.end[e] = n.end[s]), t.strides[e] = n.strides[s], n.beginMask & 1 << s && (t.beginMask |= 1 << e), n.endMask & 1 << s && (t.endMask |= 1 << e), n.shrinkAxisMask & 1 << s ? (t.finalShapeGatherIndices.push(l2), t.finalShapeGatherIndicesSparse.push(-1), t.shrinkAxisMask |= 1 << e) : (t.finalShapeGatherIndices.push(e), t.finalShapeGatherIndicesSparse.push(s)), t.inputShapeGatherIndicesSparse[e] = s, e++;
    }
}
function Im(n, t, e, s, o, r) {
  if (o[t])
    return e > 0 ? r[t] : r[t + 1 & 1];
  {
    const i = n < 0 ? s + n : n;
    return i < r[0] ? r[0] : i > r[1] ? r[1] : i;
  }
}
const d2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  assertParamsValid: Jd,
  computeFlatOffset: Oc,
  computeOutShape: qd,
  getNormalizedAxes: u2,
  isSliceContinous: Xc,
  maskToAxes: c2,
  parseSliceParams: Ac,
  sliceInfo: tp,
  startForAxis: Bb,
  startIndicesWithElidedDims: Ab,
  stopForAxis: Hb,
  stopIndicesWithElidedDims: Zb,
  stridesForAxis: Kb,
  stridesWithElidedDims: Pb
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zo {
  /**
   * Return the class name for this class to use in serialization contexts.
   *
   * Generally speaking this will be the same thing that constructor.name
   * would have returned.  However, the class name needs to be robust
   * against minification for serialization/deserialization to work properly.
   *
   * There's also places such as initializers.VarianceScaling, where
   * implementation details between different languages led to different
   * class hierarchies and a non-leaf node is used for serialization purposes.
   */
  getClassName() {
    return this.constructor.className;
  }
  /**
   * Creates an instance of T from a ConfigDict.
   *
   * This works for most descendants of serializable.  A few need to
   * provide special handling.
   * @param cls A Constructor for the class to instantiate.
   * @param config The Configuration for the object.
   */
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
class In {
  constructor() {
    this.classNameMap = {};
  }
  /**
   * Returns the singleton instance of the map.
   */
  static getMap() {
    return In.instance == null && (In.instance = new In()), In.instance;
  }
  /**
   * Registers the class as serializable.
   */
  static register(t) {
    In.getMap().classNameMap[t.className] = [t, t.fromConfig];
  }
}
function et(n) {
  S(n.className != null, () => "Class being registered does not have the static className property defined."), S(typeof n.className == "string", () => "className is required to be a string, but got type " + typeof n.className), S(n.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), In.register(n);
}
const H4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Serializable: zo,
  SerializationMap: In,
  registerClass: et
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p2(n, t) {
  let e = N(n, "a", "add"), s = N(t, "b", "add");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(yr, o);
}
const ot = V({ add_: p2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f2(n, t) {
  let e = N(n, "a", "floorDiv"), s = N(t, "b", "floorDiv");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(Ni, o);
}
const _b = V({ floorDiv_: f2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m2(n, t) {
  let e = N(n, "a", "div"), s = N(t, "b", "div");
  if ([e, s] = xe(e, s), e.dtype === "int32" && s.dtype === "int32")
    return _b(e, s);
  const o = { a: e, b: s }, r = {};
  return W.runKernel(Ii, o, r);
}
const St = V({ div_: m2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g2(n, t) {
  let e = N(n, "a", "mul"), s = N(t, "b", "mul");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(Vi, o);
}
const D = V({ mul_: g2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b2(n) {
  const t = N(n, "x", "abs");
  if (t.dtype === "complex64") {
    const e = { x: t };
    return W.runKernel(Bl, e);
  } else {
    const e = { x: t };
    return W.runKernel(Vl, e);
  }
}
const Ee = V({ abs_: b2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x2(n) {
  const e = { x: N(n, "x", "acos") };
  return W.runKernel(ci, e);
}
const y2 = V({ acos_: x2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w2(n) {
  const e = { x: N(n, "x", "acosh") };
  return W.runKernel(ui, e);
}
const I2 = V({ acosh_: w2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C2(n, t = null, e = !1) {
  const o = { x: N(n, "x", "all", "bool") }, r = { axis: t, keepDims: e };
  return W.runKernel(Qh, o, r);
}
const Ub = V({ all_: C2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v2(n, t = null, e = !1) {
  const o = { x: N(n, "x", "any", "bool") }, r = { axis: t, keepDims: e };
  return W.runKernel(Jh, o, r);
}
const fh = V({ any_: v2 });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S2(n, t = 0) {
  const s = { x: N(n, "x", "argMax") }, o = { axis: t };
  return W.runKernel(Pl, s, o);
}
const Qr = V({ argMax_: S2 });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function k2(n, t = 0) {
  const s = { x: N(n, "x", "argMin") }, o = { axis: t };
  return W.runKernel(Xl, s, o);
}
const T2 = V({ argMin_: k2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N2(n) {
  const e = { x: N(n, "x", "asin") };
  return W.runKernel(hi, e);
}
const $2 = V({ asin_: N2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R2(n) {
  const e = { x: N(n, "x", "asinh") };
  return W.runKernel(di, e);
}
const G2 = V({ asinh_: R2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L2(n) {
  const e = { x: N(n, "x", "atan") };
  return W.runKernel(pi, e);
}
const E2 = V({ atan_: L2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function W2(n, t) {
  let e = N(n, "a", "atan2"), s = N(t, "b", "atan2");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(mi, o);
}
const M2 = V({ atan2_: W2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D2(n) {
  const e = { x: N(n, "x", "atanh") };
  return W.runKernel(fi, e);
}
const F2 = V({ atanh_: D2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aa(n, t, e, s, o = "NHWC", r) {
  const i = n[3], a = [...t, i], l = Ws(o);
  return Xe(n, a, e, r, s, null, null, l);
}
function Un(n, t, e, s, o, r, i = "channelsLast") {
  const [a, l] = ul(t);
  let c;
  if (i === "channelsLast")
    c = [a, l, n[3], n[3]];
  else if (i === "channelsFirst")
    c = [a, l, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Xe(n, c, e, s, o, r, !1, i);
}
function Es(n, t, e, s, o, r, i = "NDHWC") {
  const [a, l, c] = mh(t);
  let u, h;
  if (i === "NDHWC")
    h = "channelsLast", u = [a, l, c, n[4], n[4]];
  else if (i === "NCDHW")
    h = "channelsFirst", u = [a, l, c, n[1], n[1]];
  else
    throw new Error(`Unknown dataFormat ${i}`);
  return Js(n, u, e, s, o, !1, h, r);
}
function Xe(n, t, e, s, o, r, i = !1, a = "channelsLast") {
  let [l, c, u, h] = [-1, -1, -1, -1];
  if (a === "channelsLast")
    [l, c, u, h] = n;
  else if (a === "channelsFirst")
    [l, h, c, u] = n;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  const [d, p, , f] = t, [g, m] = ul(e), [b, x] = ul(s), w = tr(d, b), y = tr(p, x), { padInfo: I, outHeight: v, outWidth: T } = P2(o, c, u, g, m, w, y, r, a), k = i ? f * h : f;
  let $;
  return a === "channelsFirst" ? $ = [l, k, v, T] : a === "channelsLast" && ($ = [l, v, T, k]), {
    batchSize: l,
    dataFormat: a,
    inHeight: c,
    inWidth: u,
    inChannels: h,
    outHeight: v,
    outWidth: T,
    outChannels: k,
    padInfo: I,
    strideHeight: g,
    strideWidth: m,
    filterHeight: d,
    filterWidth: p,
    effectiveFilterHeight: w,
    effectiveFilterWidth: y,
    dilationHeight: b,
    dilationWidth: x,
    inShape: n,
    outShape: $,
    filterShape: t
  };
}
function Js(n, t, e, s, o, r = !1, i = "channelsLast", a) {
  let [l, c, u, h, d] = [-1, -1, -1, -1, -1];
  if (i === "channelsLast")
    [l, c, u, h, d] = n;
  else if (i === "channelsFirst")
    [l, d, c, u, h] = n;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  const [p, f, g, , m] = t, [b, x, w] = mh(e), [y, I, v] = mh(s), T = tr(p, y), k = tr(f, I), $ = tr(g, v), { padInfo: G, outDepth: z, outHeight: A, outWidth: Z } = X2(o, c, u, h, b, x, w, T, k, $, a), _ = r ? m * d : m;
  let K;
  return i === "channelsFirst" ? K = [l, _, z, A, Z] : i === "channelsLast" && (K = [l, z, A, Z, _]), {
    batchSize: l,
    dataFormat: i,
    inDepth: c,
    inHeight: u,
    inWidth: h,
    inChannels: d,
    outDepth: z,
    outHeight: A,
    outWidth: Z,
    outChannels: _,
    padInfo: G,
    strideDepth: b,
    strideHeight: x,
    strideWidth: w,
    filterDepth: p,
    filterHeight: f,
    filterWidth: g,
    effectiveFilterDepth: T,
    effectiveFilterHeight: k,
    effectiveFilterWidth: $,
    dilationDepth: y,
    dilationHeight: I,
    dilationWidth: v,
    inShape: n,
    outShape: K,
    filterShape: t
  };
}
function z2(n, t, e, s, o) {
  s == null && (s = ep(n, t, e));
  const r = n[0], i = n[1], a = wo((r - t + 2 * s) / e + 1, o), l = wo((i - t + 2 * s) / e + 1, o);
  return [a, l];
}
function V2(n, t, e, s, o, r) {
  o == null && (o = ep(n, t, s));
  const i = n[0], a = n[1], l = n[2], c = wo((i - t + 2 * o) / s + 1, r), u = wo((a - t + 2 * o) / s + 1, r), h = wo((l - t + 2 * o) / s + 1, r);
  return [c, u, h, e];
}
function ep(n, t, e, s = 1) {
  const o = tr(t, s);
  return Math.floor((n[0] * (e - 1) - e + o) / 2);
}
function ul(n) {
  return typeof n == "number" ? [n, n, n] : n.length === 2 ? [n[0], n[1], 1] : n;
}
function mh(n) {
  return typeof n == "number" ? [n, n, n] : n;
}
function tr(n, t) {
  return t <= 1 ? n : n + (n - 1) * (t - 1);
}
function P2(n, t, e, s, o, r, i, a, l) {
  let c, u, h;
  if (typeof n == "number") {
    c = { top: n, bottom: n, left: n, right: n, type: n === 0 ? "VALID" : "NUMBER" };
    const p = z2([t, e], r, s, n, a);
    u = p[0], h = p[1];
  } else if (n === "same") {
    u = Math.ceil(t / s), h = Math.ceil(e / o);
    const d = Math.max(0, (u - 1) * s + r - t), p = Math.max(0, (h - 1) * o + i - e), f = Math.floor(d / 2), g = d - f, m = Math.floor(p / 2), b = p - m;
    c = { top: f, bottom: g, left: m, right: b, type: "SAME" };
  } else if (n === "valid")
    c = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, u = Math.ceil((t - r + 1) / s), h = Math.ceil((e - i + 1) / o);
  else if (typeof n == "object") {
    const d = l === "channelsLast" ? n[1][0] : n[2][0], p = l === "channelsLast" ? n[1][1] : n[2][1], f = l === "channelsLast" ? n[2][0] : n[3][0], g = l === "channelsLast" ? n[2][1] : n[3][1];
    c = { top: d, bottom: p, left: f, right: g, type: d === 0 && p === 0 && f === 0 && g === 0 ? "VALID" : "EXPLICIT" }, u = wo((t - r + d + p) / s + 1, a), h = wo((e - i + f + g) / o + 1, a);
  } else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: c, outHeight: u, outWidth: h };
}
function X2(n, t, e, s, o, r, i, a, l, c, u) {
  let h, d, p, f;
  if (typeof n == "number") {
    h = {
      top: n,
      bottom: n,
      left: n,
      right: n,
      front: n,
      back: n,
      type: n === 0 ? "VALID" : "NUMBER"
    };
    const m = V2([t, e, s, 1], a, 1, o, n, u);
    d = m[0], p = m[1], f = m[2];
  } else if (n === "same") {
    d = Math.ceil(t / o), p = Math.ceil(e / r), f = Math.ceil(s / i);
    const g = (d - 1) * o + a - t, m = (p - 1) * r + l - e, b = (f - 1) * i + c - s, x = Math.floor(g / 2), w = g - x, y = Math.floor(m / 2), I = m - y, v = Math.floor(b / 2), T = b - v;
    h = { top: y, bottom: I, left: v, right: T, front: x, back: w, type: "SAME" };
  } else if (n === "valid")
    h = {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      front: 0,
      back: 0,
      type: "VALID"
    }, d = Math.ceil((t - a + 1) / o), p = Math.ceil((e - l + 1) / r), f = Math.ceil((s - c + 1) / i);
  else
    throw Error(`Unknown padding parameter: ${n}`);
  return { padInfo: h, outDepth: d, outHeight: p, outWidth: f };
}
function wo(n, t) {
  if (!t)
    return Math.trunc(n);
  switch (t) {
    case "round":
      return Math.round(n);
    case "ceil":
      return Math.ceil(n);
    case "floor":
      return Math.floor(n);
    default:
      throw new Error(`Unknown roundingMode ${t}`);
  }
}
function $o(n) {
  const [t, e, s] = ul(n);
  return t === 1 && e === 1 && s === 1;
}
function Ke(n, t) {
  return $o(n) || $o(t);
}
function Ws(n) {
  if (n === "NHWC")
    return "channelsLast";
  if (n === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${n}`);
}
function an(n, t, e) {
  if (e != null) {
    if (typeof t == "string")
      throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    if (typeof t == "number")
      S(So(t), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);
    else if (typeof t == "object")
      t.forEach((s) => {
        s.forEach((o) => {
          S(So(o), () => `Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${o}.`);
        });
      });
    else
      throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function O2(n, t) {
  const s = { x: N(n, "x", "reshape", "string_or_numeric") }, o = { shape: t };
  return W.runKernel(kc, s, o);
}
const P = V({ reshape_: O2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A2(n, t, e, s, o) {
  const r = N(n, "x", "avgPool", "float32"), i = 1;
  S(Ke(e, i), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`);
  let a = r, l = !1;
  r.rank === 3 && (l = !0, a = P(r, [1, r.shape[0], r.shape[1], r.shape[2]])), S(a.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${a.rank}.`), an("avgPool", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o };
  let h = W.runKernel(Ol, c, u);
  return h = ht(h, r.dtype), l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const np = V({ avgPool_: A2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z2(n, t, e, s, o, r = "NDHWC") {
  const i = N(n, "x", "avgPool3d", "float32");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = P(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), S(a.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${a.rank}.`), S(r === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`), an("avgPool3d", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o, dataFormat: r };
  let h = W.runKernel(Al, c, u);
  return h = ht(h, a.dtype), l ? P(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const K2 = V({ avgPool3d_: Z2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function B2(n, t = 0) {
  S(n.length >= 1, () => "Pass at least one tensor to concat");
  const e = Hd(n, "tensors", "concat", "string_or_numeric");
  if (e[0].dtype === "complex64" && e.forEach((r) => {
    if (r.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${r.dtype}. `);
  }), e.length === 1)
    return yo(e[0]);
  const s = e, o = { axis: t };
  return W.runKernel(Hl, s, o);
}
const Ze = V({ concat_: B2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H2(n) {
  const e = { x: N(n, "x", "sigmoid", "float32") };
  return W.runKernel(Yi, e);
}
const Ir = V({ sigmoid_: H2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _2(n, t, e) {
  const s = N(n, "x", "slice", "string_or_numeric");
  if (s.rank === 0)
    throw new Error("Slicing scalar is not possible");
  const o = { x: s }, r = { begin: t, size: e };
  return W.runKernel(Gc, o, r);
}
const Qt = V({ slice_: _2 });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U2(n) {
  const e = { x: N(n, "x", "tanh", "float32") };
  return W.runKernel(ea, e);
}
const sp = V({ tanh_: U2 });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Y2(n, t, e) {
  const s = N(n, "x", "batchToSpaceND"), o = t.reduce((a, l) => a * l);
  S(s.rank >= 1 + t.length, () => `input rank is ${s.rank} but should be > than blockShape.length ${t.length}`), S(e.length === t.length, () => `crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`), S(s.shape[0] % o === 0, () => `input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${o}`);
  const r = { x: s }, i = { blockShape: t, crops: e };
  return W.runKernel(Kl, r, i);
}
const op = V({ batchToSpaceND_: Y2 });
function j2(n) {
  let t;
  return n.rank === 0 || n.rank === 1 ? t = P(n, [1, 1, 1, n.size]) : n.rank === 2 ? t = P(n, [1, 1, n.shape[0], n.shape[1]]) : n.rank === 3 ? t = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]) : t = n, t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Q2(n, t, e, s, o, r) {
  r == null && (r = 1e-3);
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  o != null && (c = N(o, "scale", "batchNorm"));
  let u;
  s != null && (u = N(s, "offset", "batchNorm")), S(a.rank === l.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), S(u == null || a.rank === u.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), S(c == null || a.rank === c.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  const d = {
    x: j2(i),
    scale: c,
    offset: u,
    mean: a,
    variance: l
  }, p = { varianceEpsilon: r }, f = W.runKernel(ec, d, p);
  return P(f, i.shape);
}
const Zc = V({ batchNorm_: Q2 });
function J2(n, t, e, s, o, r) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  o != null && (c = N(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), S(i.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`), S(a.rank === 2 || a.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${a.rank}.`), S(l.rank === 2 || l.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`), c != null && S(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`), u != null && S(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${u.rank}.`), Zc(i, a, l, u, c, r);
}
const q2 = V({ batchNorm2d_: J2 });
function tC(n, t, e, s, o, r) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  o != null && (c = N(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), S(i.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`), S(a.rank === 3 || a.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${a.rank}.`), S(l.rank === 3 || l.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`), c != null && S(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`), u != null && S(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${u.rank}.`), Zc(i, a, l, u, c, r);
}
const eC = V({ batchNorm3d_: tC });
function nC(n, t, e, s, o, r) {
  const i = N(n, "x", "batchNorm"), a = N(t, "mean", "batchNorm"), l = N(e, "variance", "batchNorm");
  let c;
  o != null && (c = N(o, "scale", "batchNorm"));
  let u;
  return s != null && (u = N(s, "offset", "batchNorm")), S(i.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`), S(a.rank === 4 || a.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${a.rank}.`), S(l.rank === 4 || l.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`), c != null && S(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`), u != null && S(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${u.rank}.`), Zc(i, a, l, u, c, r);
}
const sC = V({ batchNorm4d_: nC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oC(n, t, e) {
  const s = N(n, "x", "bincount"), o = N(t, "weights", "bincount");
  S(s.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${s.dtype}`), S(e >= 0, () => `size must be non-negative, but got ${e}.`), S(o.size === s.size || o.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${o.shape}.`);
  const r = { x: s, weights: o }, i = { size: e };
  return W.runKernel(ed, r, i);
}
const rC = V({ bincount_: oC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iC(n, t) {
  let e = N(n, "broadcastTo", "x");
  const s = e.shape;
  if (t.some((c) => !(c > 0) || c % 1 !== 0))
    throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);
  if (t.length < e.rank)
    throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);
  if (t.length > e.rank) {
    const c = e.shape.slice();
    for (; c.length < t.length; )
      c.unshift(1);
    e = P(e, c);
  }
  const o = e.shape, r = Array.from(t);
  for (let c = t.length - 1; c >= 0; c--)
    if (o[c] === t[c])
      r[c] = 1;
    else if (e.shape[c] !== 1)
      throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);
  if (r.map((c, u) => c > 1 ? u : -1).filter((c) => c >= 0).length === 0)
    return yo(e);
  const a = { x: e }, l = { reps: r };
  return W.runKernel(na, a, l);
}
const er = V({ broadcastTo_: iC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aC(n) {
  const e = { x: N(n, "x", "ceil", "float32") };
  return W.runKernel(bi, e);
}
const lC = V({ ceil_: aC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function la(n, t, e) {
  const s = { shape: n, value: t, dtype: e };
  return W.runKernel(pd, {}, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cC(n, t, e) {
  const s = N(n, "x", "clipByValue");
  if (S(t <= e, () => `Error in clip: min (${t}) must be less than or equal to max (${e}).`), t === e)
    return la(s.shape, t, s.dtype);
  const o = { x: s }, r = { clipValueMin: t, clipValueMax: e };
  return W.runKernel(xi, o, r);
}
const kn = V({ clipByValue_: cC });
function uC(n) {
  return Ze(
    n,
    0
    /* axis */
  );
}
const hC = V({ concat1d_: uC });
function dC(n, t) {
  return Ze(n, t);
}
const pC = V({ concat2d_: dC });
function fC(n, t) {
  return Ze(n, t);
}
const mC = V({ concat3d_: fC });
function gC(n, t) {
  return Ze(n, t);
}
const bC = V({ concat4d_: gC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xC(n, t, e, s, o = "NHWC", r = [1, 1], i) {
  const a = N(n, "x", "conv2d", "float32"), l = N(t, "filter", "conv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = P(a, [1, a.shape[0], a.shape[1], a.shape[2]])), S(c.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${c.rank}.`), S(l.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`), an("conv2d", s, i);
  const h = o === "NHWC" ? c.shape[3] : c.shape[1];
  S(h === l.shape[2], () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`), S(Ke(e, r), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: o, dilations: r, dimRoundingMode: i }, f = W.runKernel(_l, d, p);
  return u ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const Ro = V({ conv2d_: xC });
function yC(n, t, e, s, o = "NWC", r = 1, i) {
  const a = N(n, "x", "conv1d"), l = N(t, "filter", "conv1d");
  let c = a, u = !1;
  a.rank === 2 && (u = !0, c = P(a, [1, a.shape[0], a.shape[1]])), S(c.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${c.rank}.`), S(l.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`), an("conv1d", s, i), S(c.shape[2] === l.shape[1], () => `Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`), S(Ke(e, r), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${r}'`), S(o === "NWC", () => `Error in conv1d: got dataFormat of ${o} but only NWC is currently supported.`);
  const h = P(l, [1, l.shape[0], l.shape[1], l.shape[2]]), d = P(c, [c.shape[0], 1, c.shape[1], c.shape[2]]), m = Ro(d, h, [1, e], s, "NHWC", [1, r], i);
  return u ? P(m, [m.shape[2], m.shape[3]]) : P(m, [m.shape[0], m.shape[2], m.shape[3]]);
}
const Yb = V({ conv1d_: yC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wC(n, t, e, s, o, r = "NHWC", i) {
  S(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let a = n, l = t, c = !1;
  t.rank === 3 && (c = !0, l = P(t, [1, t.shape[0], t.shape[1], t.shape[2]]), a = [1, n[0], n[1], n[2]]), S(a.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${a.length}.`), S(l.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`), S(e.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);
  const u = r === "NHWC" ? a[3] : a[1], h = r === "NHWC" ? l.shape[3] : l.shape[1];
  S(u === e.shape[2], () => `Error in conv2dDerInput: depth of input (${u}) must match input depth for filter ${e.shape[2]}.`), S(h === e.shape[3], () => `Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`), an("conv2dDerInput", o, i);
  const d = { dy: l, filter: e }, p = { strides: s, pad: o, dataFormat: r, dimRoundingMode: i, inputShape: a }, f = W.runKernel(Ul, d, p);
  return c ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const rp = V({ conv2DBackpropInput_: wC });
function IC(n, t, e, s, o, r) {
  const i = N(n, "x", "conv2dTranspose"), a = N(t, "filter", "conv2dTranspose");
  return rp(e, i, a, s, o, "NHWC", r);
}
const jb = V({ conv2dTranspose_: IC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CC(n, t, e, s, o = "NDHWC", r = [1, 1, 1]) {
  const i = N(n, "x", "conv3d"), a = N(t, "filter", "conv3d");
  let l = i, c = !1;
  i.rank === 4 && (c = !0, l = P(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), S(l.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${l.rank}.`), S(a.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${a.rank}.`), S(l.shape[4] === a.shape[3], () => `Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${a.shape[3]}.`), S(Ke(e, r), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`), S(o === "NDHWC", () => `Error in conv3d: got dataFormat of ${o} but only NDHWC is currently supported.`);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dataFormat: o, dilations: r }, d = W.runKernel(Yl, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const vC = V({ conv3d_: CC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SC(n, t, e, s, o) {
  S(n.length === t.rank, () => `Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);
  let r = n, i = t, a = !1;
  t.rank === 4 && (a = !0, i = P(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]]), r = [1, n[0], n[1], n[2], n[3]]);
  const l = r[4], c = i.shape[4];
  S(r.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`), S(i.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`), S(e.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`), S(l === e.shape[3], () => `Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`), S(c === e.shape[4], () => `Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${e.shape[4]}.`);
  const u = { dy: i, filter: e }, h = { pad: o, strides: s, inputShape: r }, d = W.runKernel(rd, u, h);
  return a ? P(d, [d.shape[1], d.shape[2], d.shape[3], d.shape[4]]) : d;
}
const Qb = V({ conv3DBackpropInput_: SC });
function kC(n, t, e, s, o) {
  const r = N(n, "x", "conv3dTranspose"), i = N(t, "filter", "conv3dTranspose");
  return Qb(e, r, i, s, o);
}
const TC = V({ conv3dTranspose_: kC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NC(n) {
  const e = { x: N(n, "x", "cos", "float32") };
  return W.runKernel(yi, e);
}
const ip = V({ cos_: NC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $C(n) {
  const e = { x: N(n, "x", "cosh", "float32") };
  return W.runKernel(wi, e);
}
const Jb = V({ cosh_: $C });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RC(n, t = 0, e = !1, s = !1) {
  const r = { x: N(n, "x", "cumprod") }, i = { axis: t, exclusive: e, reverse: s };
  return W.runKernel(id, r, i);
}
const gh = V({ cumprod_: RC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GC(n, t = 0, e = !1, s = !1) {
  const r = { x: N(n, "x", "cumsum") }, i = { axis: t, exclusive: e, reverse: s };
  return W.runKernel(jl, r, i);
}
const qb = V({ cumsum_: GC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LC(n, t, e = "NHWC") {
  const s = N(n, "x", "depthToSpace", "float32"), o = e === "NHWC" ? s.shape[1] : s.shape[2], r = e === "NHWC" ? s.shape[2] : s.shape[3], i = e === "NHWC" ? s.shape[3] : s.shape[1];
  S(t > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t}`), S(o * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${o} and ${t}  for depthToSpace with input shape
    ${s.shape}`), S(r * t >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${r} and ${t} for depthToSpace with input shape
        ${s.shape}`), S(i % (t * t) === 0, () => `Dimension size must be evenly divisible by ${t * t} but is ${i} for depthToSpace with input shape ${s.shape}`);
  const a = { x: s }, l = { blockSize: t, dataFormat: e };
  return W.runKernel(ld, a, l);
}
const EC = V({ depthToSpace_: LC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WC(n, t, e, s, o = "NHWC", r = [1, 1], i) {
  const a = N(n, "x", "depthwiseConv2d", "float32"), l = N(t, "filter", "depthwiseConv2d", "float32");
  let c = a, u = !1;
  a.rank === 3 && (u = !0, c = P(a, [1, a.shape[0], a.shape[1], a.shape[2]])), S(c.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`), S(l.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);
  const h = o === "NHWC" ? c.shape[3] : c.shape[1];
  S(h === l.shape[2], () => `Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`), an("depthwiseConv2d", s, i);
  const d = { x: c, filter: l }, p = { strides: e, pad: s, dataFormat: o, dilations: r, dimRoundingMode: i }, f = W.runKernel(Ql, d, p);
  return u ? P(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
const ap = V({ depthwiseConv2d_: WC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MC(n, t, e, s, o = [1, 1], r = "NHWC") {
  const i = N(n, "x", "dilation2d"), a = N(t, "filter", "dilation2d");
  S(i.rank === 3 || i.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`), S(a.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${a.rank}.`), S(r === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`);
  let l = i, c = !1;
  i.rank === 3 && (l = P(i, [1, i.shape[0], i.shape[1], i.shape[2]]), c = !0);
  const u = { x: l, filter: a }, h = { strides: e, pad: s, dilations: o }, d = W.runKernel(Jl, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const DC = V({ dilation2d_: MC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FC(n, t) {
  let e = N(n, "a", "equal", "string_or_numeric"), s = N(t, "b", "equal", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(ql, o);
}
const Kn = V({ equal_: FC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zC(n, t, e) {
  const s = N(t, "a", "where"), o = N(e, "b", "where"), r = N(n, "condition", "where", "bool"), i = Rt(Rt(r.shape, s.shape), o.shape), a = er(r, i), l = er(s, i), c = er(o, i), u = {
    condition: a,
    t: l,
    e: c
  };
  return W.runKernel(Rc, u);
}
const sn = V({ where_: zC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VC(n) {
  const e = { x: N(n, "x", "zerosLike") };
  return W.runKernel(zc, e);
}
const Pt = V({ zerosLike_: VC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PC(n, t) {
  let e = N(n, "a", "div"), s = N(t, "b", "div");
  [e, s] = xe(e, s);
  const o = St(e, s), r = Pt(o), i = Kn(s, r);
  return sn(i, r, o);
}
const XC = V({ divNoNan_: PC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OC(n, t) {
  const e = N(n, "t1", "dot"), s = N(t, "t2", "dot");
  S((e.rank === 1 || e.rank === 2) && (s.rank === 1 || s.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);
  const o = e.rank === 1 ? e.size : e.shape[1], r = s.rank === 1 ? s.size : s.shape[0];
  if (S(o === r, () => `Error in dot: inner dimensions of inputs must match, but got ${o} and ${r}.`), e.rank === 1 && s.rank === 1) {
    const i = P(e, [1, -1]), a = P(s, [-1, 1]), l = Kt(i, a);
    return P(l, []);
  } else if (e.rank === 1 && s.rank === 2) {
    const i = P(e, [1, -1]), a = P(s, [s.shape[0], s.shape[1]]), l = Kt(i, a);
    return P(l, [l.size]);
  } else if (e.rank === 2 && s.rank === 1) {
    const i = P(s, [-1, 1]), a = Kt(e, i);
    return P(a, [a.size]);
  } else {
    const i = P(s, [s.shape[0], s.shape[1]]);
    return Kt(e, i);
  }
}
const AC = V({ dot_: OC });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZC(n) {
  const e = { x: N(n, "x", "elu", "float32") };
  return W.runKernel(Ci, e);
}
const Kc = V({ elu_: ZC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KC(n) {
  let t = N(n, "x", "erf");
  S(t.dtype === "int32" || t.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t.dtype === "int32" && (t = ht(t, "float32"));
  const e = { x: t };
  return W.runKernel(vi, e);
}
const BC = V({ erf_: KC });
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lp(n, t) {
  for (let e = 0; e < n.length; ++e)
    if (n[n.length - e - 1] !== t - 1 - e)
      return !1;
  return !0;
}
function t0(n, t, e) {
  const s = n.length + t.length, o = [];
  let r = 0, i = 0;
  for (let a = 0; a < s; a++)
    e.indexOf(a) === -1 ? o.push(n[r++]) : o.push(t[i++]);
  return o;
}
function Ge(n, t) {
  const e = [], s = n.length;
  for (let r = 0; r < s; r++)
    t.indexOf(r) === -1 && e.push(n[r]);
  const o = t.map((r) => n[r]);
  return [e, o];
}
function we(n, t) {
  const e = t.map((s) => 1);
  return t0(n, e, t);
}
function Oe(n, t, e) {
  S(lp(t, e), () => `${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`);
}
function me(n, t) {
  if (lp(n, t))
    return null;
  const e = [];
  for (let s = 0; s < t; ++s)
    n.indexOf(s) === -1 && e.push(s);
  return n.forEach((s) => e.push(s)), e;
}
function qs(n) {
  return n.map((t, e) => [e, t]).sort((t, e) => t[1] - e[1]).map((t) => t[0]);
}
function Ie(n, t) {
  const e = [];
  for (let s = t - n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HC(n, t = null, e = !1) {
  const o = { x: N(n, "x", "max") }, r = { reductionIndices: t, keepDims: e };
  return W.runKernel(hc, o, r);
}
const fs = V({ max_: HC });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _C(n, t = null, e = !1) {
  const o = { x: N(n, "x", "min") }, r = { axis: t, keepDims: e };
  return W.runKernel(mc, o, r);
}
const bh = V({ min_: _C });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UC(n, t) {
  let e = N(n, "base", "pow"), s = N(t, "exp", "pow");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(Pi, o);
}
const ar = V({ pow_: UC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $t(n, t) {
  if ((Zn(n) && t !== "string" || Array.isArray(n)) && t !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t === "string" && Zn(n) && !(n instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return ia(n, [], [], t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YC(n) {
  const e = { x: N(n, "x", "sqrt", "float32") };
  return W.runKernel(Qi, e);
}
const Ye = V({ sqrt_: YC });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jC(n) {
  const t = N(n, "x", "square"), e = {};
  return W.runKernel("Square", { x: t }, e);
}
const ee = V({ square_: jC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QC(n, t = null, e = !1) {
  let s = N(n, "x", "sum");
  s.dtype === "bool" && (s = ht(s, "int32"));
  const o = { x: s }, r = { axis: t, keepDims: e };
  return W.runKernel(Lc, o, r);
}
const yt = V({ sum_: QC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JC(n, t = "euclidean", e = null, s = !1) {
  n = N(n, "x", "norm");
  const o = e0(n, t, e);
  let r = o.shape;
  if (s) {
    const i = Dt(e, n.shape);
    r = we(o.shape, i);
  }
  return P(o, r);
}
function e0(n, t, e = null) {
  if (n.rank === 0)
    return Ee(n);
  if (n.rank !== 1 && e === null)
    return e0(P(n, [-1]), t, e);
  if (n.rank === 1 || typeof e == "number" || Array.isArray(e) && e.length === 1) {
    if (t === 1)
      return yt(Ee(n), e);
    if (t === 1 / 0)
      return fs(Ee(n), e);
    if (t === -1 / 0)
      return bh(Ee(n), e);
    if (t === "euclidean" || t === 2)
      return Ye(yt(ar(Ee(n), $t(2, "int32")), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  if (Array.isArray(e) && e.length === 2) {
    if (t === 1)
      return fs(yt(Ee(n), e[0]), e[1] - 1);
    if (t === 1 / 0)
      return fs(yt(Ee(n), e[1]), e[0]);
    if (t === -1 / 0)
      return bh(yt(Ee(n), e[1]), e[0]);
    if (t === "fro" || t === "euclidean")
      return Ye(yt(ee(n), e));
    throw new Error(`Error in norm: invalid ord value: ${t}`);
  }
  throw new Error(`Error in norm: invalid axis: ${e}`);
}
const Bc = V({ norm_: JC });
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qC(n, t = null, e = !1) {
  return Bc(n, "euclidean", t, e);
}
const tv = V({ euclideanNorm_: qC });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ev(n) {
  const e = { x: N(n, "x", "exp") };
  return W.runKernel(Si, e);
}
const Bn = V({ exp_: ev });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nv(n, t = 0) {
  const e = N(n, "x", "expandDims", "string_or_numeric");
  S(t <= e.rank, () => "Axis must be <= rank of the tensor");
  const s = { input: e }, o = { dim: t };
  return W.runKernel(tc, s, o);
}
const Mn = V({ expandDims_: nv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sv(n) {
  const e = { x: N(n, "x", "expm1") };
  return W.runKernel(ki, e);
}
const ov = V({ expm1_: sv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rv(n, t) {
  const e = N(n, "x", "tile", "string_or_numeric");
  S(e.rank === t.length, () => `Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);
  const s = { x: e }, o = { reps: t };
  return W.runKernel(na, s, o);
}
const es = V({ tile_: rv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iv(n, t, e, s = "float32") {
  t == null && (t = n);
  const o = Nt([n, t], s), r = n <= t ? n : t;
  for (let a = 0; a < r; ++a)
    o.set(1, a, a);
  const i = P(o.toTensor(), [n, t]);
  if (e == null)
    return i;
  if (e.length === 1)
    return es(Mn(i, 0), [e[0], 1, 1]);
  if (e.length === 2)
    return es(Mn(Mn(i, 0), 0), [e[0], e[1], 1, 1]);
  if (e.length === 3)
    return es(Mn(Mn(Mn(i, 0), 0), 0), [
      e[0],
      e[1],
      e[2],
      1,
      1
    ]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`);
}
const n0 = V({ eye_: iv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function av(n) {
  const e = { x: N(n, "x", "floor", "float32") };
  return W.runKernel(Ti, e);
}
const Hc = V({ floor_: av });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lv(n, t, e = 0, s = 0) {
  const o = N(n, "x", "gather"), r = N(t, "indices", "gather", "int32"), i = { x: o, indices: r }, a = { axis: e, batchDims: s };
  return W.runKernel(nc, i, a);
}
const cp = V({ gather_: lv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cv(n, t) {
  let e = N(n, "a", "greater", "string_or_numeric"), s = N(t, "b", "greater", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(sc, o);
}
const Tn = V({ greater_: cv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uv(n, t) {
  let e = N(n, "a", "greaterEqual", "string_or_numeric"), s = N(t, "b", "greaterEqual", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel($i, o);
}
const Cr = V({ greaterEqual_: uv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hv(n) {
  const e = { x: N(n, "x", "isFinite") };
  return W.runKernel(Gi, e);
}
const dv = V({ isFinite_: hv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pv(n) {
  const e = { x: N(n, "x", "isInf") };
  return W.runKernel(Li, e);
}
const fv = V({ isInf_: pv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mv(n) {
  const e = { x: N(n, "x", "isNaN") };
  return W.runKernel(Ei, e);
}
const gv = V({ isNaN_: mv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bv(n, t = 0.2) {
  const s = { x: N(n, "x", "leakyRelu") }, o = { alpha: t };
  return W.runKernel(oc, s, o);
}
const up = V({ leakyRelu_: bv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xv(n, t) {
  let e = N(n, "a", "less", "string_or_numeric"), s = N(t, "b", "less", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(rc, o);
}
const s0 = V({ less_: xv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yv(n, t) {
  let e = N(n, "a", "lessEqual", "string_or_numeric"), s = N(t, "b", "lessEqual", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(ic, o);
}
const vr = V({ lessEqual_: yv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wv(n, t = 5, e = 1, s = 1, o = 0.5) {
  const r = N(n, "x", "localResponseNormalization");
  S(r.rank === 4 || r.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${r.rank}.`), S(So(t), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);
  let i = r, a = !1;
  r.rank === 3 && (a = !0, i = P(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  const l = { x: i }, c = { depthRadius: t, bias: e, alpha: s, beta: o }, u = W.runKernel(uc, l, c);
  return a ? P(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
const Iv = V({ localResponseNormalization_: wv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Cv(n) {
  const e = { x: N(n, "x", "log", "float32") };
  return W.runKernel(Wi, e);
}
const Hn = V({ log_: Cv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vv(n) {
  const e = { x: N(n, "x", "log1p") };
  return W.runKernel(Mi, e);
}
const hp = V({ log1p_: vv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _4(n) {
  return S(Bs(n), () => "The f passed in grad(f) must be a function"), (t, e) => {
    const s = N(t, "x", "tf.grad", "string_or_numeric"), o = e != null ? N(e, "dy", "tf.grad") : null;
    return W.tidy(() => {
      const { value: r, grads: i } = W.gradients(() => n(s), [s], o);
      return o != null && Qe(r.shape, o.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), _c(i), i[0];
    });
  };
}
function U4(n) {
  return S(Bs(n), () => "The f passed in grads(f) must be a function"), (t, e) => {
    S(Array.isArray(t), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    const s = Hd(t, "args", "tf.grads", "string_or_numeric"), o = e != null ? N(e, "dy", "tf.grads") : null;
    return W.tidy(() => {
      const { value: r, grads: i } = W.gradients(() => n(...s), s, o);
      return o != null && Qe(r.shape, o.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), _c(i), i;
    });
  };
}
function Y4(n) {
  return S(Bs(n), () => "The f passed in valueAndGrad(f) must be a function"), (t, e) => {
    S(t instanceof _t, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), S(e == null || e instanceof _t, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    const { grads: s, value: o } = W.gradients(() => n(t), [t], e);
    return _c(s), { grad: s[0], value: o };
  };
}
function j4(n) {
  return S(Bs(n), () => "The f passed in valueAndGrads(f) must be a function"), (t, e) => {
    S(Array.isArray(t) && t.every((o) => o instanceof _t), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), S(e == null || e instanceof _t, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    const s = W.gradients(() => n(...t), t, e);
    return e != null && Qe(s.value.shape, e.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), _c(s.grads), s;
  };
}
function Sv(n, t) {
  S(Bs(n), () => "The f passed in variableGrads(f) must be a function"), S(t == null || Array.isArray(t) && t.every((c) => c instanceof il), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  const e = t != null;
  if (!e) {
    t = [];
    for (const c in W.registeredVariables)
      t.push(W.registeredVariables[c]);
  }
  const s = e ? t.filter((c) => !c.trainable) : null, o = t.length;
  t = t.filter((c) => c.trainable), S(t.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${o} variables is trainable.`);
  const r = !0, { value: i, grads: a } = W.gradients(n, t, null, r);
  S(a.some((c) => c != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), S(i.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`);
  const l = {};
  return t.forEach((c, u) => {
    a[u] != null && (l[c.name] = a[u]);
  }), s != null && s.forEach((c) => l[c.name] = null), { value: i, grads: l };
}
function Go(n) {
  return W.customGrad(n);
}
function _c(n) {
  if (n.filter((e) => e == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kv(n) {
  const e = { x: N(n, "x", "softplus") };
  return W.runKernel(ji, e);
}
const ca = V({ softplus_: kv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tv(n) {
  const t = N(n, "x", "logSigmoid");
  return Go((s) => ({ value: fe(ca(fe(s))), gradFunc: (i) => D(i, Ir(fe(s))) }))(t);
}
const Nv = V({ logSigmoid_: Tv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $v(n, t) {
  let e = N(n, "a", "sub"), s = N(t, "b", "sub");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(qi, o);
}
const wt = V({ sub_: $v });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rv(n, t = -1) {
  const e = N(n, "logits", "logSoftmax");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);
  return Go((o, r) => {
    const a = fs(o, t, !0), l = wt(o, a), c = wt(ht(l, "float32"), Hn(yt(Bn(l), t, !0)));
    return r([c]), { value: c, gradFunc: (h, d) => {
      const [p] = d, f = !0, g = Bn(p);
      return wt(h, D(yt(h, t, f), g));
    } };
  })(e);
}
const o0 = V({ logSoftmax_: Rv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Gv(n, t = null, e = !1) {
  const s = N(n, "x", "logSumExp"), o = Dt(t, s.shape), r = fs(
    s,
    o,
    !0
    /* keepDims */
  ), i = wt(s, r), a = Bn(i), l = yt(a, o), c = Hn(l), u = ot(P(r, c.shape), c);
  if (e) {
    const h = we(u.shape, o);
    return P(u, h);
  }
  return u;
}
const r0 = V({ logSumExp_: Gv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lv(n, t) {
  const e = N(n, "a", "logicalAnd", "bool"), s = N(t, "b", "logicalAnd", "bool");
  Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(ac, o);
}
const bs = V({ logicalAnd_: Lv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ev(n) {
  const e = { x: N(n, "x", "logicalNot", "bool") };
  return W.runKernel(lc, e);
}
const dp = V({ logicalNot_: Ev });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wv(n, t) {
  const e = N(n, "a", "logicalOr", "bool"), s = N(t, "b", "logicalOr", "bool");
  Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(cc, o);
}
const i0 = V({ logicalOr_: Wv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Mv(n, t) {
  const e = N(n, "a", "logicalXor", "bool"), s = N(t, "b", "logicalXor", "bool");
  return Rt(e.shape, s.shape), bs(i0(n, t), dp(bs(n, t)));
}
const Dv = V({ logicalXor_: Mv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Fv(n, t, e, s, o) {
  const r = N(n, "x", "maxPool"), i = 1;
  let a = r, l = !1;
  r.rank === 3 && (l = !0, a = P(r, [1, r.shape[0], r.shape[1], r.shape[2]])), S(a.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${a.rank}.`), S(Ke(e, i), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${i}'`), an("maxPool", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o }, h = W.runKernel(dc, c, u);
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const pp = V({ maxPool_: Fv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zv(n, t = [1, 1, 1], e, s, o, r = "NDHWC") {
  const i = N(n, "x", "maxPool3d");
  let a = i, l = !1;
  i.rank === 4 && (l = !0, a = P(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]])), S(a.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${a.rank}.`), S(r === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`), an("maxPool3d", s, o);
  const c = { x: a }, u = { filterSize: t, strides: e, pad: s, dimRoundingMode: o, dataFormat: r }, h = W.runKernel(pc, c, u);
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3], h.shape[4]]) : h;
}
const Vv = V({ maxPool3d_: zv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pv(n, t) {
  let e = N(n, "a", "maximum"), s = N(t, "b", "maximum");
  [e, s] = xe(e, s), e.dtype === "bool" && (e = ht(e, "int32"), s = ht(s, "int32")), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(Di, o);
}
const to = V({ maximum_: Pv });
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xv(n, t = null, e = !1) {
  const o = { x: N(n, "x", "mean") }, r = { axis: t, keepDims: e };
  return W.runKernel(fc, o, r);
}
const ye = V({ mean_: Xv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Me(n, t = "float32") {
  if (t === "complex64") {
    const s = Me(n, "float32"), o = Me(n, "float32");
    return ko(s, o);
  }
  const e = be(H(n), t);
  return W.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eo(n, t = "float32") {
  if (t === "complex64") {
    const s = eo(n, "float32"), o = Me(n, "float32");
    return ko(s, o);
  }
  const e = Fl(H(n), t);
  return W.makeTensor(e, n, t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ov(n, t) {
  let e = N(n, "a", "minimum"), s = N(t, "b", "minimum");
  [e, s] = xe(e, s), e.dtype === "bool" && (e = ht(e, "int32"), s = ht(s, "int32")), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(Fi, o);
}
const Uc = V({ minimum_: Ov });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Av(n, t, e) {
  S(e === "reflect" || e === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);
  const s = N(n, "x", "mirrorPad");
  if (s.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  S(t.length === s.rank, () => `Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);
  const o = e === "reflect" ? 1 : 0;
  for (let a = 0; a < s.rank; a++)
    S(t[a].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), S(t[a][0] >= 0 && t[a][0] <= s.shape[a] - o && t[a][1] >= 0 && t[a][1] <= s.shape[a] - o, () => `Padding in dimension ${a} cannot be greater than or equal to ${s.shape[a] - o} or less than 0 for input of shape ${s.shape}`);
  const r = { paddings: t, mode: e }, i = { x: s };
  return W.runKernel(gc, i, r);
}
const Zv = V({ mirrorPad_: Av });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kv(n, t) {
  let e = N(n, "a", "mod"), s = N(t, "b", "mod");
  [e, s] = xe(e, s);
  const o = { a: e, b: s };
  return W.runKernel(zi, o);
}
const Bv = V({ mod_: Kv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Hv(n, t = null, e = !1) {
  n = N(n, "x", "moments");
  const s = Dt(t, n.shape), o = ye(n, s, e);
  let r = o.shape;
  e || (r = we(o.shape, s));
  const i = ee(wt(ht(n, "float32"), P(o, r))), a = ye(i, s, e);
  return { mean: o, variance: a };
}
const fp = V({ moments_: Hv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _v(n, t) {
  let e = N(n, "a", "notEqual", "string_or_numeric"), s = N(t, "b", "notEqual", "string_or_numeric");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s };
  return W.runKernel(xc, o);
}
const Jr = V({ notEqual_: _v });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uv(n) {
  const e = { x: N(n, "x", "onesLike") };
  return W.runKernel(yc, e);
}
const _n = V({ onesLike_: Uv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yv(n, t, e = 0) {
  const s = N(n, "x", "pad");
  if (s.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  const o = { paddings: t, constantValue: e }, r = { x: s };
  return W.runKernel(Cc, r, o);
}
const mp = V({ pad_: Yv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jv(n, t, e) {
  const s = N(n, "x", "spaceToBatchND");
  S(s.rank >= 1 + t.length, () => `input rank ${s.rank} should be > than [blockShape] ${t.length}`), S(e.length === t.length, () => `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`), S(s.shape.reduce((i, a, l) => l > 0 && l <= t.length ? i && (a + e[l - 1][0] + e[l - 1][1]) % t[l - 1] === 0 : i, !0), () => `input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);
  const o = { x: s }, r = { blockShape: t, paddings: e };
  return W.runKernel(Ec, o, r);
}
const gp = V({ spaceToBatchND_: jv });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qv(n, t, e, s, o, r, i) {
  o == null && (o = [1, 1]), r == null && (r = 1), s === 0 && (s = "valid");
  const a = N(n, "x", "maxPool");
  let l = a, c = !1;
  a.rank === 3 && (c = !0, l = P(a, [1, a.shape[0], a.shape[1], a.shape[2]])), S(Ke(r, o), () => `Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`);
  const u = Un(l.shape, t, r, o, s), h = [u.dilationHeight, u.dilationWidth];
  let d;
  s === "same" ? d = qv([u.filterHeight, u.filterWidth], h) : d = [[0, 0], [0, 0]];
  const p = h[0] === 1 && h[1] === 1, [f, g] = Jv([u.inHeight, u.inWidth], h, d), m = p ? s : "valid", b = p ? l : gp(l, h, f), w = (e === "avg" ? () => np(b, t, r, m, i) : () => pp(b, t, r, m, i))(), y = p ? w : op(w, h, g);
  return c ? P(y, [y.shape[1], y.shape[2], y.shape[3]]) : y;
}
function Jv(n, t, e) {
  const s = e.map((u) => u[0]), o = e.map((u) => u[1]), r = n.concat(s, o), i = t.map((u, h) => (u - r[h] % u) % u), a = o.map((u, h) => u + i[h]), l = t.map((u, h) => [s[h], a[h]]), c = t.map((u, h) => [0, i[h]]);
  return [l, c];
}
function qv(n, t) {
  const s = n.map((i, a) => i + (i - 1) * (t[a] - 1)).map((i) => i - 1), o = s.map((i) => Math.floor(i / 2)), r = s.map((i, a) => i - o[a]);
  return s.map((i, a) => [o[a], r[a]]);
}
const tS = V({ pool_: Qv });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eS(n, t) {
  const e = N(n, "x", "prelu"), s = N(t, "alpha", "prelu"), o = { x: e, alpha: s };
  return W.runKernel(vc, o);
}
const bp = V({ prelu_: eS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nS(n, t = null, e = !1) {
  let s = N(n, "x", "prod");
  s.dtype === "bool" && (s = ht(s, "int32"));
  const o = { x: s }, r = { axis: t, keepDims: e };
  return W.runKernel(Sc, o, r);
}
const sS = V({ prod_: nS });
var xh = {}, oS = {
  get exports() {
    return xh;
  },
  set exports(n) {
    xh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(l) {
      var c = this, u = a();
      c.next = function() {
        var h = 2091639 * c.s0 + c.c * 23283064365386963e-26;
        return c.s0 = c.s1, c.s1 = c.s2, c.s2 = h - (c.c = h | 0);
      }, c.c = 1, c.s0 = u(" "), c.s1 = u(" "), c.s2 = u(" "), c.s0 -= u(l), c.s0 < 0 && (c.s0 += 1), c.s1 -= u(l), c.s1 < 0 && (c.s1 += 1), c.s2 -= u(l), c.s2 < 0 && (c.s2 += 1), u = null;
    }
    function r(l, c) {
      return c.c = l.c, c.s0 = l.s0, c.s1 = l.s1, c.s2 = l.s2, c;
    }
    function i(l, c) {
      var u = new o(l), h = c && c.state, d = u.next;
      return d.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, d.double = function() {
        return d() + (d() * 2097152 | 0) * 11102230246251565e-32;
      }, d.quick = d, h && (typeof h == "object" && r(h, u), d.state = function() {
        return r(u, {});
      }), d;
    }
    function a() {
      var l = 4022871197, c = function(u) {
        u = String(u);
        for (var h = 0; h < u.length; h++) {
          l += u.charCodeAt(h);
          var d = 0.02519603282416938 * l;
          l = d >>> 0, d -= l, d *= l, l = d >>> 0, d -= l, l += d * 4294967296;
        }
        return (l >>> 0) * 23283064365386963e-26;
      };
      return c;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.alea = i;
  })(
    Qs,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(oS);
var yh = {}, rS = {
  get exports() {
    return yh;
  },
  set exports(n) {
    yh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.next = function() {
        var h = l.x ^ l.x << 11;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w ^= l.w >>> 19 ^ h ^ h >>> 8;
      }, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, l.next();
    }
    function r(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && r(u, c), h.state = function() {
        return r(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor128 = i;
  })(
    Qs,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(rS);
var wh = {}, iS = {
  get exports() {
    return wh;
  },
  set exports(n) {
    wh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.x ^ l.x >>> 2;
        return l.x = l.y, l.y = l.z, l.z = l.w, l.w = l.v, (l.d = l.d + 362437 | 0) + (l.v = l.v ^ l.v << 4 ^ (h ^ h << 1)) | 0;
      }, l.x = 0, l.y = 0, l.z = 0, l.w = 0, l.v = 0, a === (a | 0) ? l.x = a : c += a;
      for (var u = 0; u < c.length + 64; u++)
        l.x ^= c.charCodeAt(u) | 0, u == c.length && (l.d = l.x << 10 ^ l.x >>> 4), l.next();
    }
    function r(a, l) {
      return l.x = a.x, l.y = a.y, l.z = a.z, l.w = a.w, l.v = a.v, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && r(u, c), h.state = function() {
        return r(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorwow = i;
  })(
    Qs,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(iS);
var Ih = {}, aS = {
  get exports() {
    return Ih;
  },
  set exports(n) {
    Ih = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this;
      l.next = function() {
        var u = l.x, h = l.i, d, p;
        return d = u[h], d ^= d >>> 7, p = d ^ d << 24, d = u[h + 1 & 7], p ^= d ^ d >>> 10, d = u[h + 3 & 7], p ^= d ^ d >>> 3, d = u[h + 4 & 7], p ^= d ^ d << 7, d = u[h + 7 & 7], d = d ^ d << 13, p ^= d ^ d << 9, u[h] = p, l.i = h + 1 & 7, p;
      };
      function c(u, h) {
        var d, p = [];
        if (h === (h | 0))
          p[0] = h;
        else
          for (h = "" + h, d = 0; d < h.length; ++d)
            p[d & 7] = p[d & 7] << 15 ^ h.charCodeAt(d) + p[d + 1 & 7] << 13;
        for (; p.length < 8; )
          p.push(0);
        for (d = 0; d < 8 && p[d] === 0; ++d)
          ;
        for (d == 8 ? p[7] = -1 : p[d], u.x = p, u.i = 0, d = 256; d > 0; --d)
          u.next();
      }
      c(l, a);
    }
    function r(a, l) {
      return l.x = a.x.slice(), l.i = a.i, l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new o(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.x && r(u, c), h.state = function() {
        return r(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xorshift7 = i;
  })(
    Qs,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(aS);
var Ch = {}, lS = {
  get exports() {
    return Ch;
  },
  set exports(n) {
    Ch = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this;
      l.next = function() {
        var u = l.w, h = l.X, d = l.i, p, f;
        return l.w = u = u + 1640531527 | 0, f = h[d + 34 & 127], p = h[d = d + 1 & 127], f ^= f << 13, p ^= p << 17, f ^= f >>> 15, p ^= p >>> 12, f = h[d] = f ^ p, l.i = d, f + (u ^ u >>> 16) | 0;
      };
      function c(u, h) {
        var d, p, f, g, m, b = [], x = 128;
        for (h === (h | 0) ? (p = h, h = null) : (h = h + "\0", p = 0, x = Math.max(x, h.length)), f = 0, g = -32; g < x; ++g)
          h && (p ^= h.charCodeAt((g + 32) % h.length)), g === 0 && (m = p), p ^= p << 10, p ^= p >>> 15, p ^= p << 4, p ^= p >>> 13, g >= 0 && (m = m + 1640531527 | 0, d = b[g & 127] ^= p + m, f = d == 0 ? f + 1 : 0);
        for (f >= 128 && (b[(h && h.length || 0) & 127] = -1), f = 127, g = 4 * 128; g > 0; --g)
          p = b[f + 34 & 127], d = b[f = f + 1 & 127], p ^= p << 13, d ^= d << 17, p ^= p >>> 15, d ^= d >>> 12, b[f] = p ^ d;
        u.w = m, u.X = b, u.i = f;
      }
      c(l, a);
    }
    function r(a, l) {
      return l.i = a.i, l.w = a.w, l.X = a.X.slice(), l;
    }
    function i(a, l) {
      a == null && (a = +new Date());
      var c = new o(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (u.X && r(u, c), h.state = function() {
        return r(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.xor4096 = i;
  })(
    Qs,
    // window object or global
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(lS);
var vh = {}, cS = {
  get exports() {
    return vh;
  },
  set exports(n) {
    vh = n;
  }
};
(function(n) {
  (function(t, e, s) {
    function o(a) {
      var l = this, c = "";
      l.next = function() {
        var h = l.b, d = l.c, p = l.d, f = l.a;
        return h = h << 25 ^ h >>> 7 ^ d, d = d - p | 0, p = p << 24 ^ p >>> 8 ^ f, f = f - h | 0, l.b = h = h << 20 ^ h >>> 12 ^ d, l.c = d = d - p | 0, l.d = p << 16 ^ d >>> 16 ^ f, l.a = f - h | 0;
      }, l.a = 0, l.b = 0, l.c = -1640531527, l.d = 1367130551, a === Math.floor(a) ? (l.a = a / 4294967296 | 0, l.b = a | 0) : c += a;
      for (var u = 0; u < c.length + 20; u++)
        l.b ^= c.charCodeAt(u) | 0, l.next();
    }
    function r(a, l) {
      return l.a = a.a, l.b = a.b, l.c = a.c, l.d = a.d, l;
    }
    function i(a, l) {
      var c = new o(a), u = l && l.state, h = function() {
        return (c.next() >>> 0) / 4294967296;
      };
      return h.double = function() {
        do
          var d = c.next() >>> 11, p = (c.next() >>> 0) / 4294967296, f = (d + p) / (1 << 21);
        while (f === 0);
        return f;
      }, h.int32 = c.next, h.quick = h, u && (typeof u == "object" && r(u, c), h.state = function() {
        return r(c, {});
      }), h;
    }
    e && e.exports ? e.exports = i : s && s.amd ? s(function() {
      return i;
    }) : this.tychei = i;
  })(
    Qs,
    n,
    // present in node.js
    !1
    // present with an AMD loader
  );
})(cS);
var Sh = {}, uS = {
  get exports() {
    return Sh;
  },
  set exports(n) {
    Sh = n;
  }
};
const hS = {}, dS = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: hS
}, Symbol.toStringTag, { value: "Module" })), pS = /* @__PURE__ */ yw(dS);
(function(n) {
  (function(t, e, s) {
    var o = 256, r = 6, i = 52, a = "random", l = s.pow(o, r), c = s.pow(2, i), u = c * 2, h = o - 1, d;
    function p(y, I, v) {
      var T = [];
      I = I == !0 ? { entropy: !0 } : I || {};
      var k = b(m(
        I.entropy ? [y, w(e)] : y ?? x(),
        3
      ), T), $ = new f(T), G = function() {
        for (var z = $.g(r), A = l, Z = 0; z < c; )
          z = (z + Z) * o, A *= o, Z = $.g(1);
        for (; z >= u; )
          z /= 2, A /= 2, Z >>>= 1;
        return (z + Z) / A;
      };
      return G.int32 = function() {
        return $.g(4) | 0;
      }, G.quick = function() {
        return $.g(4) / 4294967296;
      }, G.double = G, b(w($.S), e), (I.pass || v || function(z, A, Z, _) {
        return _ && (_.S && g(_, $), z.state = function() {
          return g($, {});
        }), Z ? (s[a] = z, A) : z;
      })(
        G,
        k,
        "global" in I ? I.global : this == s,
        I.state
      );
    }
    function f(y) {
      var I, v = y.length, T = this, k = 0, $ = T.i = T.j = 0, G = T.S = [];
      for (v || (y = [v++]); k < o; )
        G[k] = k++;
      for (k = 0; k < o; k++)
        G[k] = G[$ = h & $ + y[k % v] + (I = G[k])], G[$] = I;
      (T.g = function(z) {
        for (var A, Z = 0, _ = T.i, K = T.j, U = T.S; z--; )
          A = U[_ = h & _ + 1], Z = Z * o + U[h & (U[_] = U[K = h & K + A]) + (U[K] = A)];
        return T.i = _, T.j = K, Z;
      })(o);
    }
    function g(y, I) {
      return I.i = y.i, I.j = y.j, I.S = y.S.slice(), I;
    }
    function m(y, I) {
      var v = [], T = typeof y, k;
      if (I && T == "object")
        for (k in y)
          try {
            v.push(m(y[k], I - 1));
          } catch {
          }
      return v.length ? v : T == "string" ? y : y + "\0";
    }
    function b(y, I) {
      for (var v = y + "", T, k = 0; k < v.length; )
        I[h & k] = h & (T ^= I[h & k] * 19) + v.charCodeAt(k++);
      return w(I);
    }
    function x() {
      try {
        var y;
        return d && (y = d.randomBytes) ? y = y(o) : (y = new Uint8Array(o), (t.crypto || t.msCrypto).getRandomValues(y)), w(y);
      } catch {
        var I = t.navigator, v = I && I.plugins;
        return [+new Date(), t, v, t.screen, w(e)];
      }
    }
    function w(y) {
      return String.fromCharCode.apply(0, y);
    }
    if (b(s.random(), e), n.exports) {
      n.exports = p;
      try {
        d = pS;
      } catch {
      }
    } else
      s["seed" + a] = p;
  })(
    // global: `self` in browsers (including strict mode and web workers),
    // otherwise `this` in Node and other environments
    typeof self < "u" ? self : Qs,
    [],
    // pool: entropy pool starts empty
    Math
    // math: package containing random, pow, and seedrandom
  );
})(uS);
var fS = xh, mS = yh, gS = wh, bS = Ih, xS = Ch, yS = vh, Vo = Sh;
Vo.alea = fS;
Vo.xor128 = mS;
Vo.xorwow = gS;
Vo.xorshift7 = bS;
Vo.xor4096 = xS;
Vo.tychei = yS;
var Sr = Vo;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class xp {
  constructor(t, e, s, o, r) {
    this.mean = t, this.stdDev = e, this.dtype = s, this.nextVal = NaN, this.truncated = o, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    const i = r || Math.random();
    this.random = Sr.alea(i.toString());
  }
  /** Returns next sample from a Gaussian distribution. */
  nextValue() {
    if (!isNaN(this.nextVal)) {
      const o = this.nextVal;
      return this.nextVal = NaN, o;
    }
    let t, e, s = !1;
    for (; !s; ) {
      let o, r, i;
      do
        o = 2 * this.random() - 1, r = 2 * this.random() - 1, i = o * o + r * r;
      while (i >= 1 || i === 0);
      const a = Math.sqrt(-2 * Math.log(i) / i);
      t = this.mean + this.stdDev * o * a, e = this.mean + this.stdDev * r * a, (!this.truncated || this.isValidTruncated(t)) && (s = !0);
    }
    return (!this.truncated || this.isValidTruncated(e)) && (this.nextVal = this.convertValue(e)), this.convertValue(t);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(t) {
    return this.dtype == null || this.dtype === "float32" ? t : Math.round(t);
  }
  /** Returns true if less than 2-standard-deviations from the mean. */
  isValidTruncated(t) {
    return t <= this.upper && t >= this.lower;
  }
}
class Q4 {
  constructor(t, e, s, o) {
    this.alpha = t, this.beta = 1 / e, this.dtype = s;
    const r = o || Math.random();
    this.randu = Sr.alea(r.toString()), this.randn = new xp(0, 1, s, !1, this.randu()), t < 1 ? this.d = t + 2 / 3 : this.d = t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  /** Returns next sample from a gamma distribution. */
  nextValue() {
    let t, e, s, o, r, i;
    for (; ; ) {
      do
        o = this.randn.nextValue(), i = 1 + this.c * o;
      while (i <= 0);
      if (i *= i * i, t = o * o, e = 1 - 0.331 * t * t, s = 0.5 * t + this.d * (1 - i + Math.log(i)), r = this.randu(), r < e || Math.log(r) < s)
        break;
    }
    return i = 1 / this.beta * this.d * i, this.alpha < 1 && (i *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(i);
  }
  /** Handles proper rounding for non-floating-point numbers. */
  convertValue(t) {
    return this.dtype === "float32" ? t : Math.round(t);
  }
}
class wS {
  constructor(t = 0, e = 1, s, o) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = t, this.range = e - t, this.dtype = s, o == null && (o = Math.random()), typeof o == "number" && (o = o.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);
    this.random = Sr.alea(o);
  }
  convertValue(t) {
    return this.canReturnFloat() ? t : Math.round(t);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IS(n, t = 0, e = 1, s, o) {
  if (s != null && s === "bool")
    throw new Error(`Unsupported data type ${s}`);
  const r = new xp(t, e, s, !1, o), i = Nt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = r.nextValue();
  return i.toTensor();
}
const CS = V({ randomNormal_: IS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vS(n, t = 0, e = 1, s = "float32", o) {
  const r = Nt(n, s), i = new wS(t, e, null, o);
  for (let a = 0; a < r.values.length; a++)
    r.values[a] = i.nextValue();
  return r.toTensor();
}
const Yc = V({ randomUniform_: vS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hl(n, t, e = 1, s = "float32") {
  if (e === 0)
    throw new Error("Cannot have a step of zero");
  const o = { start: n, stop: t, step: e, dtype: s };
  return W.runKernel(vd, {}, o);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SS(n) {
  const e = { x: N(n, "x", "reciprocal") };
  return W.runKernel(Xi, e);
}
const kS = V({ reciprocal_: SS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TS(n) {
  const e = { x: N(n, "x", "relu") };
  return W.runKernel(Oi, e);
}
const Ms = V({ relu_: TS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NS(n) {
  const e = { x: N(n, "x", "relu6") };
  return W.runKernel(Ai, e);
}
const a0 = V({ relu6_: NS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $S(n, t) {
  const s = { x: N(n, "x", "reverse") }, o = { dims: t };
  return W.runKernel($c, s, o);
}
const Lo = V({ reverse_: $S });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RS(n) {
  const e = { x: N(n, "x", "round") };
  return W.runKernel(Zi, e);
}
const l0 = V({ round_: RS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GS(n) {
  const e = { x: N(n, "x", "rsqrt", "float32") };
  return W.runKernel(Ki, e);
}
const c0 = V({ rsqrt_: GS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LS(n) {
  const e = { x: N(n, "x", "selu") };
  return W.runKernel(Bi, e);
}
const u0 = V({ selu_: LS });
function ES(n, t, e, s, o, r = [1, 1], i = "NHWC") {
  const a = N(n, "x", "separableConv2d"), l = N(t, "depthwiseFilter", "separableConv2d"), c = N(e, "pointwiseFilter", "separableConv2d");
  let u = a, h = !1;
  if (a.rank === 3 && (h = !0, u = P(a, [1, a.shape[0], a.shape[1], a.shape[2]])), i === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  S(u.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${u.rank}.`), S(l.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`), S(c.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`), S(c.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`), S(c.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);
  const d = l.shape[2], p = l.shape[3];
  S(c.shape[2] === d * p, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${d * p}, but got ${c.shape[2]}.`);
  const f = ap(u, l, s, o, i, r), m = Ro(f, c, 1, "valid", i);
  return h ? P(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
const h0 = V({ separableConv2d_: ES });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WS(n) {
  const e = { x: N(n, "x", "sign") };
  return W.runKernel(Ui, e);
}
const MS = V({ sign_: WS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DS(n) {
  const e = { x: N(n, "x", "sin", "float32") };
  return W.runKernel(Hi, e);
}
const d0 = V({ sin_: DS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FS(n) {
  const e = { x: N(n, "x", "sinh") };
  return W.runKernel(_i, e);
}
const p0 = V({ sinh_: FS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zS(n, t, e) {
  const s = N(n, "x", "slice1d");
  return S(s.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`), Qt(s, [t], [e]);
}
const yp = V({ slice1d_: zS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VS(n, t, e) {
  const s = N(n, "x", "slice2d");
  return S(s.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`), Qt(s, t, e);
}
const f0 = V({ slice2d_: VS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PS(n, t, e) {
  const s = N(n, "x", "slice3d");
  return S(s.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`), Qt(s, t, e);
}
const wp = V({ slice3d_: PS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XS(n, t, e) {
  const s = N(n, "x", "slice4d");
  return S(s.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`), Qt(s, t, e);
}
const dl = V({ slice4d_: XS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OS(n, t = -1) {
  const e = N(n, "logits", "softmax", "float32");
  if (t === -1 && (t = e.rank - 1), t !== e.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);
  const s = { logits: e }, o = { dim: t };
  return W.runKernel(Mc, s, o);
}
const Ip = V({ softmax_: OS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AS(n) {
  S(n.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return W.runKernel(dd, t);
}
const Cp = V({ fft_: AS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZS(n) {
  S(n.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`);
  const t = { input: n };
  return W.runKernel(md, t);
}
const pl = V({ ifft_: ZS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KS(n) {
  const t = n.shape[n.shape.length - 1], e = n.size / t;
  let s;
  if (t <= 2) {
    const o = P(n, [e, t]);
    s = pl(o);
  } else {
    const o = [e, 2 * (t - 1)], r = P(cl(n), [e, t]), i = P(jd(n), [e, t]), a = Lo(Qt(r, [0, 1], [e, t - 2]), 1), l = D(Lo(Qt(i, [0, 1], [e, t - 2]), 1), $t(-1)), c = Ze([r, a], 1), u = Ze([i, l], 1), h = P(ko(c, u), [o[0], o[1]]);
    s = pl(h);
  }
  if (s = cl(s), n.rank === 3 && n.shape[0] !== 0) {
    const o = s, r = n.shape[0];
    s = P(s, [r, s.shape[0] / r, s.shape[1]]), o.dispose();
  }
  return s;
}
const m0 = V({ irfft_: KS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BS(n, t, e = 0) {
  const o = { x: N(n, "x", "split") }, r = { numOrSizeSplits: t, axis: e };
  return W.runKernel(Wc, o, r);
}
const Sn = V({ split_: BS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HS(n, t) {
  S(n.dtype === "float32", () => `The dtype for rfft() must be real value but got ${n.dtype}`);
  let e = n.shape[n.shape.length - 1];
  const s = n.size / e;
  let o;
  if (t != null && t < e) {
    const f = n.shape.map((m) => 0), g = n.shape.map((m) => m);
    g[n.shape.length - 1] = t, o = Qt(n, f, g), e = t;
  } else if (t != null && t > e) {
    const f = n.shape.map((g) => g);
    f[n.shape.length - 1] = t - e, o = Ze([n, Me(f)], n.shape.length - 1), e = t;
  } else
    o = n;
  const r = Pt(o), i = P(ko(o, r), [s, e]), a = Cp(i), l = Math.floor(e / 2) + 1, c = cl(a), u = jd(a), h = Sn(c, [l, e - l], c.shape.length - 1), d = Sn(u, [l, e - l], u.shape.length - 1), p = o.shape.slice();
  return p[o.shape.length - 1] = l, P(ko(h[0], d[0]), p);
}
const vp = V({ rfft_: HS });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _S(n, t) {
  let e = N(n, "a", "squaredDifference"), s = N(t, "b", "squaredDifference");
  [e, s] = xe(e, s), Rt(e.shape, s.shape);
  const o = { a: e, b: s }, r = {};
  return W.runKernel(Ji, o, r);
}
const g0 = V({ squaredDifference_: _S });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function US(n, t) {
  const e = N(n, "x", "squeeze", "string_or_numeric");
  return P(e, Gs(e.shape, t).newShape);
}
const ua = V({ squeeze_: US });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YS(n, t = 0) {
  const e = Hd(n, "tensors", "stack", "string_or_numeric");
  S(e.length >= 1, () => "Pass at least one tensor to tf.stack"), e.length > 0 && S(t <= e[0].rank, () => "Axis must be <= rank of the tensor");
  const s = e, o = { axis: t };
  return W.runKernel(Ic, s, o);
}
const Ns = V({ stack_: YS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jS(n, t = 0) {
  const s = { x: N(n, "x", "step") }, o = { alpha: t };
  return W.runKernel(sa, s, o);
}
const ha = V({ step_: jS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QS(n, t, e, s, o = 0, r = 0, i = 0, a = 0, l = 0) {
  const u = { x: N(n, "x", "stridedSlice", "string_or_numeric") }, h = {
    begin: t,
    end: e,
    strides: s,
    beginMask: o,
    endMask: r,
    ellipsisMask: i,
    newAxisMask: a,
    shrinkAxisMask: l
  };
  return W.runKernel(Ed, u, h);
}
const JS = V({ stridedSlice_: QS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qS(n) {
  const e = { x: N(n, "x", "tan", "float32") };
  return W.runKernel(ta, e);
}
const tk = V({ tan_: qS });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dn(n, t) {
  Dl(n);
  const e = ra(n, t);
  if (e.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return ia(n, null, e, t);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Qa(n, t, e) {
  if (Dl(n), t != null && t.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  const s = ra(n, e);
  if (s.length !== 2 && s.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (s.length === 1 && t == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return ia(n, t, s, e);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ek(n, t = 1, e = !0) {
  const s = N(n, "x", "topk");
  if (s.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  const o = s.shape[s.shape.length - 1];
  if (t < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);
  if (t > o)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${o}) but got ${t}`);
  const r = { x: s }, i = { k: t, sorted: e }, [a, l] = W.runKernel(Fd, r, i);
  return { values: a, indices: l };
}
const nk = V({ topk_: ek });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sk(n, t = 0, e = 1, s, o) {
  if (s != null && s === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  const r = new xp(t, e, s, !0, o), i = Nt(n, s);
  for (let a = 0; a < i.values.length; a++)
    i.values[a] = r.nextValue();
  return i.toTensor();
}
const b0 = V({ truncatedNormal_: sk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ok(n, t = 0) {
  const e = N(n, "x", "unique", "string_or_numeric");
  S(e.rank > 0, () => "The input tensor must be at least 1D");
  const s = { x: e }, o = { axis: t }, [r, i] = W.runKernel(Vd, s, o);
  return { values: r, indices: i };
}
const rk = V({ unique_: ok });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ik(n, t, e) {
  const s = N(n, "x", "unsortedSegmentSum"), o = N(t, "segmentIds", "unsortedSegmentSum", "int32");
  S(So(e), () => "numSegments must be of dtype int");
  const r = { x: s, segmentIds: o }, i = { numSegments: e };
  return W.runKernel(Fc, r, i);
}
const x0 = V({ unsortedSegmentSum_: ik });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ak(n, t = 0) {
  const e = N(n, "x", "unstack", "string_or_numeric");
  S(t >= -e.shape.length && t < e.shape.length, () => `Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);
  const s = { value: e }, o = { axis: t };
  return W.runKernel(Dc, s, o);
}
const lr = V({ unstack_: ak });
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lk(n, t = !0, e, s) {
  return W.makeVariable(n, t, e, s);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function y0(n, t) {
  const e = [];
  for (let r = 0; r < t.length; r++)
    t[r] && e.push(r);
  const s = Nt(n, "int32"), o = Nt([e.length, n.length], "int32");
  for (let r = 0; r < e.length; r++) {
    const i = s.indexToLoc(e[r]), a = r * n.length;
    o.values.set(i, a);
  }
  return o.toTensor();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ck(n, t) {
  if (t == null)
    return n.shape.slice();
  if (At(n.shape, t))
    return t;
  if (n.shape.length === t.length) {
    const e = [];
    for (let s = 0; s < n.shape.length; s++)
      t[s] == null && n.shape[s] != null ? e.push(n.shape[s]) : e.push(t[s]);
    return e;
  }
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uk(n, t, e, s) {
  const o = N(n, "x", "dropout");
  if (S(o.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${o.dtype} tensor instead.`), S(t >= 0 && t < 1, () => `rate must be a float in the range [0, 1), but got ${t}.`), t === 0)
    return n instanceof _t ? o.clone() : o;
  const r = ck(o, e), i = 1 - t, a = St(Hc(ot(Yc(r, 0, 1, "float32", s), i)), i);
  return D(o, a);
}
const hk = V({ dropout_: uk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dk(n) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))));
}
function w0(n, t, e) {
  const s = 1 - n % 2, o = new Float32Array(n);
  for (let r = 0; r < n; ++r) {
    const i = 2 * Math.PI * r / (n + s - 1);
    o[r] = t - e * Math.cos(i);
  }
  return dn(o, "float32");
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pk(n, t, e, s, o, r = "NHWC", i) {
  let a = n;
  n.rank === 3 && (a = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = P(t, [1, t.shape[0], t.shape[1], t.shape[2]])), S(a.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${a.shape}.`), S(l.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`), S(e.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);
  const c = r === "NHWC" ? a.shape[3] : a.shape[1], u = r === "NHWC" ? l.shape[3] : l.shape[1];
  S(c === e[2], () => `Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${e[2]}.`), S(u === e[3], () => `Error in conv2dDerFilter: depth of dy (${u}) must match output depth for filter (${e[3]}).`), an("conv2dDerFilter", o, i);
  const h = { x: a, dy: l }, d = { strides: s, pad: o, dataFormat: r, dimRoundingMode: i, filterShape: e };
  return W.runKernel(sd, h, d);
}
const Sp = V({ conv2DBackpropFilter_: pk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kp(n, t, e) {
  if (e == null || e === "linear")
    return n;
  if (e === "relu")
    return D(n, ha(t));
  throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function Tp(n, t) {
  let e = t;
  const s = ve(n.shape, t.shape);
  return s.length > 0 && (e = yt(e, s)), P(e, n.shape);
}
function Np(n, t, e, s) {
  if (t === "linear")
    return n;
  if (t === "relu")
    return Ms(n);
  if (t === "elu")
    return Kc(n);
  if (t === "relu6")
    return a0(n);
  if (t === "prelu")
    return bp(n, e);
  if (t === "leakyrelu")
    return up(n, s);
  if (t === "sigmoid")
    return Ir(n);
  throw new Error(`Unknown fused activation ${t}.`);
}
const $p = (n, t) => !(n > 0) || t === "linear";
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fk({ x: n, filter: t, strides: e, pad: s, dataFormat: o = "NHWC", dilations: r = [1, 1], dimRoundingMode: i, bias: a, activation: l = "linear", preluActivationWeights: c, leakyreluAlpha: u }) {
  if (l = l || "linear", $p(W.state.gradientDepth, l) === !1) {
    S(o === "NHWC", () => `Error in fused conv2d: got dataFormat of ${o} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let v = Ro(n, t, e, s, o, r, i);
    return a != null && (v = ot(v, a)), Np(v, l, c, u);
  }
  const h = N(n, "x", "conv2d", "float32"), d = N(t, "filter", "conv2d", "float32");
  let p = h, f = !1;
  h.rank === 3 && (f = !0, p = P(h, [1, h.shape[0], h.shape[1], h.shape[2]])), S(p.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`), S(d.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`), an("fused conv2d", s, i);
  const g = o === "NHWC" ? p.shape[3] : p.shape[1];
  S(d.shape[2] === g, () => `Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`), S(Ke(e, r), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${r}'`);
  const m = Xe(p.shape, d.shape, e, r, s, i);
  let b;
  a != null && (b = N(a, "bias", "fused conv2d"), [b] = xe(b, h), o === "NHWC" ? Rt(m.outShape, b.shape) : (S(b.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`), S(b.shape.length === 0 || b.shape[0] === m.outChannels || b.shape[0] === 1, () => `Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${m.outChannels})`)));
  let x;
  if (c != null) {
    const v = c.shape;
    if (S(v.length <= 1 || v.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${v.length}.`), v.length === 1)
      S(v[0] === 1 || v[0] === m.outChannels, () => `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the number of output channels (${m.outChannels}).`);
    else if (v.length === 3)
      try {
        Rt(v, m.outShape);
      } catch {
        const k = `Error in fused conv2d: PReLU activation weights (${v}) is not compatible with the output shape of the conv2d (${m.outShape}).`;
        throw Error(k);
      }
    x = N(c, "prelu weights", "fused conv2d");
  }
  const w = (v, T) => {
    S(o === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${o} but only NHWC is currently supported.`);
    const [k, $, G, z] = T, A = kp(v, G, l);
    S($o(r), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);
    const Z = rp($.shape, A, k, e, s), _ = Sp($, A, k.shape, e, s), K = [Z, _];
    if (z != null) {
      const U = Tp(z, A);
      K.push(U);
    }
    return K;
  }, y = {
    x: p,
    filter: d,
    bias: b,
    preluActivationWeights: x
  }, I = {
    strides: e,
    pad: s,
    dataFormat: o,
    dilations: r,
    dimRoundingMode: i,
    activation: l,
    leakyreluAlpha: u
  };
  return a == null ? Go((T, k, $) => {
    let G = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      W.runKernel(ol, y, I)
    );
    return $([k, T, G]), f && (G = P(G, [G.shape[1], G.shape[2], G.shape[3]])), { value: G, gradFunc: w };
  })(p, d) : Go((T, k, $, G) => {
    let z = W.runKernel(ol, y, I);
    return G([k, T, z, $]), f && (z = P(z, [z.shape[1], z.shape[2], z.shape[3]])), { value: z, gradFunc: w };
  })(p, d, b);
}
const mk = V({ fusedConv2d_: fk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gk(n, t, e, s, o, r = [1, 1], i) {
  let a = n;
  n.rank === 3 && (a = P(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let l = t;
  l.rank === 3 && (l = P(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { x: a, dy: l }, u = { strides: s, pad: o, dimRoundingMode: i, dilations: r, filterShape: e };
  return W.runKernel(cd, c, u);
}
const bk = V({ depthwiseConv2dNativeBackpropFilter_: gk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xk(n, t, e, s, o, r = [1, 1], i) {
  let a = t, l = !1;
  t.rank === 3 && (l = !0, a = P(t, [1, t.shape[0], t.shape[1], t.shape[2]]));
  const c = { dy: a, filter: e }, u = { strides: s, pad: o, dimRoundingMode: i, dilations: r, inputShape: n }, h = (
    // tslint:disable-next-line: no-unnecessary-type-assertion
    W.runKernel(ud, c, u)
  );
  return l ? P(h, [h.shape[1], h.shape[2], h.shape[3]]) : h;
}
const yk = V({ depthwiseConv2dNativeBackpropInput_: xk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wk({ a: n, b: t, transposeA: e = !1, transposeB: s = !1, bias: o, activation: r = "linear", preluActivationWeights: i, leakyreluAlpha: a = 0.2 }) {
  if ($p(W.state.gradientDepth, r) === !1) {
    let z = Kt(n, t, e, s);
    return o != null && (z = ot(z, o)), Np(z, r, i, a);
  }
  let l = N(n, "a", "fused matMul"), c = N(t, "b", "fused matMul");
  [l, c] = xe(l, c);
  const u = e ? l.shape[l.rank - 2] : l.shape[l.rank - 1], h = s ? c.shape[c.rank - 1] : c.shape[c.rank - 2], d = e ? l.shape[l.rank - 1] : l.shape[l.rank - 2], p = s ? c.shape[c.rank - 2] : c.shape[c.rank - 1], f = l.shape.slice(0, -2), g = c.shape.slice(0, -2), m = H(f), b = H(g);
  S(u === h, () => `Error in fused matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const w = Rt(l.shape.slice(0, -2), c.shape.slice(0, -2)).concat([d, p]), y = e ? P(l, [m, u, d]) : P(l, [m, d, u]), I = s ? P(c, [b, p, h]) : P(c, [b, h, p]);
  let v;
  o != null && (v = N(o, "bias", "fused matMul"), [v] = xe(v, l), Rt(w, v.shape));
  let T;
  i != null && (T = N(i, "prelu weights", "fused matMul"));
  const k = (z, A) => {
    const [Z, _, K, U] = A, q = kp(P(z, K.shape), K, r);
    let j, tt;
    if (!e && !s ? (j = Kt(q, _, !1, !0), tt = Kt(Z, q, !0, !1)) : !e && s ? (j = Kt(q, _, !1, !1), tt = Kt(q, Z, !0, !1)) : e && !s ? (j = Kt(_, q, !1, !0), tt = Kt(Z, q, !1, !1)) : (j = Kt(_, q, !0, !0), tt = Kt(q, Z, !0, !0)), o != null) {
      const nt = Tp(U, q);
      return [j, tt, nt];
    } else
      return [j, tt];
  }, $ = {
    a: y,
    b: I,
    bias: v,
    preluActivationWeights: T
  }, G = { transposeA: e, transposeB: s, activation: r, leakyreluAlpha: a };
  return o == null ? Go((A, Z, _) => {
    const K = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      W.runKernel(sl, $, G)
    );
    return _([A, Z, K]), { value: P(K, w), gradFunc: k };
  })(y, I) : Go((A, Z, _, K) => {
    const U = (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      W.runKernel(sl, $, G)
    );
    return K([A, Z, U, _]), { value: P(U, w), gradFunc: k };
  })(y, I, v);
}
const Cm = V({ fusedMatMul_: wk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ik(n) {
  return w0(n, 0.54, 0.46);
}
const Ck = V({ hammingWindow_: Ik });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vk(n) {
  return w0(n, 0.5, 0.5);
}
const I0 = V({ hannWindow_: vk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sk(n, t, e, s = !1, o = 0) {
  let r = 0;
  const i = [];
  for (; r + t <= n.size; )
    i.push(Qt(n, r, t)), r += e;
  if (s)
    for (; r < n.size; ) {
      const a = r + t - n.size, l = Ze([
        Qt(n, r, t - a),
        la([a], o)
      ]);
      i.push(l), r += e;
    }
  return i.length === 0 ? Qa([], [0, t]) : P(Ze(i), [i.length, t]);
}
const C0 = V({ frame_: Sk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kk(n, t, e, s, o = I0) {
  s == null && (s = dk(t));
  const r = C0(n, t, e), i = D(r, o(t));
  return vp(i, s);
}
const Tk = V({ stft_: kk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nk(n, t, e, s, o = "bilinear", r = 0) {
  const i = N(n, "image", "cropAndResize"), a = N(t, "boxes", "cropAndResize", "float32"), l = N(e, "boxInd", "cropAndResize", "int32"), c = a.shape[0];
  S(i.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`), S(a.rank === 2 && a.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${c},4] but had shape ${a.shape}.`), S(l.rank === 1 && l.shape[0] === c, () => `Error in cropAndResize: boxInd must be have size [${c}] but had shape ${a.shape}.`), S(s.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`), S(s[0] >= 1 && s[1] >= 1, () => `cropSize must be atleast [1,1], but was ${s}`), S(o === "bilinear" || o === "nearest", () => `method must be bilinear or nearest, but was ${o}`);
  const u = { image: i, boxes: a, boxInd: l }, h = { method: o, extrapolationValue: r, cropSize: s };
  return W.runKernel(ad, u, h);
}
const $k = V({ cropAndResize_: Nk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rk(n) {
  const t = N(n, "image", "flipLeftRight", "float32");
  S(t.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);
  const e = { image: t };
  return W.runKernel(fd, e, {});
}
const Gk = V({ flipLeftRight_: Rk });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Lk(n) {
  const t = N(n, "image", "grayscaleToRGB"), e = t.rank - 1, s = t.shape[e];
  S(t.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`), S(s === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);
  const o = new Array(t.rank);
  return o.fill(1, 0, e), o[e] = 3, es(t, o);
}
const Ek = V({ grayscaleToRGB_: Lk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wk(n, t, e = 0, s = 0.5) {
  const o = N(n, "image", "rotateWithOffset", "float32");
  S(o.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${o.rank}.`);
  const r = { image: o }, i = { radians: t, fillValue: e, center: s };
  return W.runKernel(Pd, r, i);
}
const Mk = V({ rotateWithOffset_: Wk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kr(n, t, e, s, o, r) {
  s == null && (s = 0.5), o == null && (o = Number.NEGATIVE_INFINITY), r == null && (r = 0);
  const i = n.shape[0];
  return e = Math.min(e, i), S(0 <= s && s <= 1, () => `iouThreshold must be in [0, 1], but was '${s}'`), S(n.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${n.rank}'`), S(n.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`), S(t.rank === 1, () => "scores must be a 1D tensor"), S(t.shape[0] === i, () => `scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`), S(0 <= r && r <= 1, () => `softNmsSigma must be in [0, 1], but was '${r}'`), { maxOutputSize: e, iouThreshold: s, scoreThreshold: o, softNmsSigma: r };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Dk(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
  const r = N(n, "boxes", "nonMaxSuppression", "float32"), i = N(t, "scores", "nonMaxSuppression", "float32"), a = kr(r, i, e, s, o);
  e = a.maxOutputSize, s = a.iouThreshold, o = a.scoreThreshold;
  const l = { maxOutputSize: e, iouThreshold: s, scoreThreshold: o };
  return W.runKernel(wd, { boxes: r, scores: i }, l);
}
const Fk = V({ nonMaxSuppression_: Dk });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zk(n, t, e) {
  const s = Vk(n, t, e), o = s < 0 ? -(s + 1) : s;
  n.splice(o, 0, t);
}
function Vk(n, t, e) {
  return Xk(n, t, e || Pk);
}
function Pk(n, t) {
  return n > t ? 1 : n < t ? -1 : 0;
}
function Xk(n, t, e) {
  let s = 0, o = n.length, r = 0, i = !1;
  for (; s < o; ) {
    r = s + (o - s >>> 1);
    const a = e(t, n[r]);
    a > 0 ? s = r + 1 : (o = r, i = !a);
  }
  return i ? s : -s - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rp(n, t, e, s, o) {
  return Ep(
    n,
    t,
    e,
    s,
    o,
    0
    /* softNmsSigma */
  );
}
function Gp(n, t, e, s, o, r) {
  return Ep(
    n,
    t,
    e,
    s,
    o,
    0,
    !1,
    r,
    !0
    /* returnValidOutputs */
  );
}
function Lp(n, t, e, s, o, r) {
  return Ep(
    n,
    t,
    e,
    s,
    o,
    r,
    !0
    /* returnScoresTensor */
  );
}
function Ep(n, t, e, s, o, r, i = !1, a = !1, l = !1) {
  const c = [];
  for (let m = 0; m < t.length; m++)
    t[m] > o && c.push({ score: t[m], boxIndex: m, suppressBeginIndex: 0 });
  c.sort(vm);
  const u = r > 0 ? -0.5 / r : 0, h = [], d = [];
  for (; h.length < e && c.length > 0; ) {
    const m = c.pop(), { score: b, boxIndex: x, suppressBeginIndex: w } = m;
    if (b < o)
      break;
    let y = !1;
    for (let I = h.length - 1; I >= w; --I) {
      const v = Ok(n, x, h[I]);
      if (v >= s) {
        y = !0;
        break;
      }
      if (m.score = m.score * Ak(s, u, v), m.score <= o)
        break;
    }
    m.suppressBeginIndex = h.length, y || (m.score === b ? (h.push(x), d.push(m.score)) : m.score > o && zk(c, m, vm));
  }
  const p = h.length, f = e - p;
  a && f > 0 && (h.push(...new Array(f).fill(0)), d.push(...new Array(f).fill(0)));
  const g = { selectedIndices: h };
  return i && (g.selectedScores = d), l && (g.validOutputs = p), g;
}
function Ok(n, t, e) {
  const s = n.subarray(t * 4, t * 4 + 4), o = n.subarray(e * 4, e * 4 + 4), r = Math.min(s[0], s[2]), i = Math.min(s[1], s[3]), a = Math.max(s[0], s[2]), l = Math.max(s[1], s[3]), c = Math.min(o[0], o[2]), u = Math.min(o[1], o[3]), h = Math.max(o[0], o[2]), d = Math.max(o[1], o[3]), p = (a - r) * (l - i), f = (h - c) * (d - u);
  if (p <= 0 || f <= 0)
    return 0;
  const g = Math.max(r, c), m = Math.max(i, u), b = Math.min(a, h), x = Math.min(l, d), w = Math.max(b - g, 0) * Math.max(x - m, 0);
  return w / (p + f - w);
}
function Ak(n, t, e) {
  const s = Math.exp(t * e * e);
  return e <= n ? s : 0;
}
function vm(n, t) {
  return n.score - t.score || n.score === t.score && t.boxIndex - n.boxIndex;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function Zk(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY) {
  const r = N(n, "boxes", "nonMaxSuppressionAsync"), i = N(t, "scores", "nonMaxSuppressionAsync"), a = kr(r, i, e, s, o);
  e = a.maxOutputSize, s = a.iouThreshold, o = a.scoreThreshold;
  const l = await Promise.all([r.data(), i.data()]), c = l[0], u = l[1], { selectedIndices: h } = Rp(c, u, e, s, o);
  return r !== n && r.dispose(), i !== t && i.dispose(), dn(h, "int32");
}
const Kk = Zk;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bk(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
  const i = N(n, "boxes", "nonMaxSuppression"), a = N(t, "scores", "nonMaxSuppression"), l = kr(i, a, e, s, o, r);
  e = l.maxOutputSize, s = l.iouThreshold, o = l.scoreThreshold, r = l.softNmsSigma;
  const c = { boxes: i, scores: a }, u = { maxOutputSize: e, iouThreshold: s, scoreThreshold: o, softNmsSigma: r }, h = W.runKernel(Cd, c, u);
  return { selectedIndices: h[0], selectedScores: h[1] };
}
const Hk = V({ nonMaxSuppressionWithScore_: Bk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function _k(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = 0) {
  const i = N(n, "boxes", "nonMaxSuppressionAsync"), a = N(t, "scores", "nonMaxSuppressionAsync"), l = kr(i, a, e, s, o, r);
  e = l.maxOutputSize, s = l.iouThreshold, o = l.scoreThreshold, r = l.softNmsSigma;
  const c = await Promise.all([i.data(), a.data()]), u = c[0], h = c[1], { selectedIndices: d, selectedScores: p } = Lp(u, h, e, s, o, r);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: dn(d, "int32"),
    selectedScores: dn(p)
  };
}
const Uk = _k;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yk(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
  const i = N(n, "boxes", "nonMaxSuppression"), a = N(t, "scores", "nonMaxSuppression"), l = kr(
    i,
    a,
    e,
    s,
    o,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, d = { boxes: i, scores: a }, p = {
    maxOutputSize: c,
    iouThreshold: u,
    scoreThreshold: h,
    padToMaxOutputSize: r
  }, f = W.runKernel(Id, d, p);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
const jk = V({ nonMaxSuppressionPadded_: Yk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
async function Qk(n, t, e, s = 0.5, o = Number.NEGATIVE_INFINITY, r = !1) {
  const i = N(n, "boxes", "nonMaxSuppressionAsync"), a = N(t, "scores", "nonMaxSuppressionAsync"), l = kr(
    i,
    a,
    e,
    s,
    o,
    null
    /* softNmsSigma */
  ), c = l.maxOutputSize, u = l.iouThreshold, h = l.scoreThreshold, [d, p] = await Promise.all([i.data(), a.data()]), { selectedIndices: f, validOutputs: g } = Gp(d, p, c, u, h, r);
  return i !== n && i.dispose(), a !== t && a.dispose(), {
    selectedIndices: dn(f, "int32"),
    validOutputs: $t(g, "int32")
  };
}
const Jk = Qk;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qk(n, t, e = !1, s = !1) {
  const o = N(n, "images", "resizeBilinear");
  S(o.rank === 3 || o.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${o.rank}.`), S(t.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t}.`), S(s === !1 || e === !1, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let r = o, i = !1;
  o.rank === 3 && (i = !0, r = P(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const a = { images: r }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = W.runKernel(Nc, a, l);
  return i ? P(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const v0 = V({ resizeBilinear_: qk });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tT(n, t, e = !1, s = !1) {
  const o = N(n, "images", "resizeNearestNeighbor");
  S(o.rank === 3 || o.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${o.rank}.`), S(t.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`), S(o.dtype === "float32" || o.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), S(s === !1 || e === !1, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let r = o, i = !1;
  o.rank === 3 && (i = !0, r = P(o, [1, o.shape[0], o.shape[1], o.shape[2]]));
  const a = { images: r }, l = { alignCorners: e, halfPixelCenters: s, size: t }, c = W.runKernel(Tc, a, l);
  return i ? P(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
const S0 = V({ resizeNearestNeighbor_: tT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eT(n, t = "binary", e = !1, s = 0.5) {
  const o = N(n, "image", "threshold"), r = 0.2989, i = 0.587, a = 0.114, l = o.shape[0] * o.shape[1];
  let c = D(dn([s]), 255), u, h, d, p;
  if (S(o.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${o.rank}.`), S(o.shape[2] === 3 || o.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${o.shape[2]}.`), S(o.dtype === "int32" || o.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${o.dtype}.`), S(t === "otsu" || t === "binary", () => `Method must be binary or otsu, but was ${t}`), o.shape[2] === 3) {
    [u, h, d] = Sn(o, [1, 1, 1], -1);
    const m = D(u, r), b = D(h, i), x = D(d, a);
    p = ot(ot(m, b), x);
  } else
    p = n;
  if (t === "otsu") {
    const m = rC(ht(l0(p), "int32"), _e([]), 256);
    c = nT(m, l);
  }
  const f = e ? vr(p, c) : Tn(p, c);
  return ht(D(f, 255), "int32");
}
function nT(n, t) {
  let e = dn([-1]), s = dn([0]), o = dn([0]), r, i, a, l, c, u;
  for (let h = 0; h < n.size - 1; h++) {
    r = Qt(n, 0, h + 1), i = Qt(n, h + 1), c = St(yt(r), t), u = St(yt(i), t);
    const d = yt(D(r, hl(0, r.size)));
    a = St(d, yt(r));
    const p = la(i.shape, r.size), f = ot(hl(0, i.size), p), g = D(i, f);
    l = St(yt(g), yt(i));
    const m = wt(a, l), b = wt(a, l), x = D(c, u);
    o = D(D(x, m), b);
    const w = Tn(o, s);
    s = sn(w, o, s), e = sn(w, dn([h]), e);
  }
  return e;
}
const sT = V({ threshold_: eT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oT(n, t, e = "nearest", s = "constant", o = 0, r) {
  const i = N(n, "image", "transform", "float32"), a = N(t, "transforms", "transform", "float32");
  S(i.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${i.rank}.`), S(a.rank === 2 && (a.shape[0] === i.shape[0] || a.shape[0] === 1) && a.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), S(r == null || r.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${r}.`);
  const l = { image: i, transforms: a }, c = { interpolation: e, fillMode: s, fillValue: o, outputShape: r };
  return W.runKernel(zd, l, c);
}
const rT = V({ transform_: oT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iT(n, t, e) {
  S(t % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t}.`), S(e % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${e}.`);
  const s = N(n, "a", "bandPart");
  S(s.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${s.rank}.`);
  const o = s.shape, [r, i] = s.shape.slice(-2);
  if (!(t <= r))
    throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);
  if (!(e <= i))
    throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${i}).`);
  t < 0 && (t = r), e < 0 && (e = i);
  const a = P(hl(0, r, 1, "int32"), [-1, 1]), l = hl(0, i, 1, "int32"), c = wt(a, l), u = bs(vr(c, $t(+t, "int32")), Cr(c, $t(-e, "int32"))), h = Me([r, i], s.dtype);
  return P(Ns(lr(P(s, [-1, r, i])).map((d) => sn(u, d, h))), o);
}
const aT = V({ bandPart_: iT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lT(n) {
  let t;
  if (Array.isArray(n)) {
    t = !1, S(n != null && n.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    const o = n[0].shape[0];
    for (let r = 1; r < n.length; ++r)
      S(n[r].shape[0] === o, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[r].shape[0]} vs. ${o})`);
  } else
    t = !0, n = Sn(n, n.shape[0], 0).map((o) => ua(o, [0]));
  S(n.length <= n[0].shape[0], () => `Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);
  const e = [], s = n;
  for (let o = 0; o < n.length; ++o)
    e.push(W.tidy(() => {
      let r = s[o];
      if (o > 0)
        for (let i = 0; i < o; ++i) {
          const a = D(yt(D(e[i], r)), e[i]);
          r = wt(r, a);
        }
      return St(r, Bc(r, "euclidean"));
    }));
  return t ? Ns(e, 0) : e;
}
const cT = V({ gramSchmidt_: lT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uT(n, t = !1) {
  if (S(n.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`), n.rank === 2)
    return Sm(n, t);
  {
    const e = n.shape.slice(0, n.shape.length - 2).reduce((l, c) => l * c), s = lr(P(n, [
      e,
      n.shape[n.shape.length - 2],
      n.shape[n.shape.length - 1]
    ]), 0), o = [], r = [];
    s.forEach((l) => {
      const [c, u] = Sm(l, t);
      o.push(c), r.push(u);
    });
    const i = P(Ns(o, 0), n.shape), a = P(Ns(r, 0), n.shape);
    return [i, a];
  }
}
function Sm(n, t = !1) {
  return W.tidy(() => {
    S(n.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);
    const e = n.shape[0], s = n.shape[1];
    let o = n0(e), r = yo(n);
    const i = Qa([[1]], [1, 1]);
    let a = yo(i);
    const l = e >= s ? s : e;
    for (let c = 0; c < l; ++c) {
      const u = r, h = a, d = o;
      [a, r, o] = W.tidy(() => {
        const p = Qt(r, [c, c], [e - c, 1]), f = Bc(p), g = Qt(r, [c, c], [1, 1]), m = sn(Tn(g, 0), Qa([[-1]]), Qa([[1]])), b = wt(g, D(m, f)), x = St(p, b);
        x.shape[0] === 1 ? a = yo(i) : a = Ze([
          i,
          Qt(x, [1, 0], [x.shape[0] - 1, x.shape[1]])
        ], 0);
        const w = fe(St(Kt(m, b), f)), y = Qt(r, [c, 0], [e - c, s]), I = D(w, a), v = zt(a);
        if (c === 0)
          r = wt(y, Kt(I, Kt(v, y)));
        else {
          const $ = wt(y, Kt(I, Kt(v, y)));
          r = Ze([Qt(r, [0, 0], [c, s]), $], 0);
        }
        const T = zt(I), k = Qt(o, [0, c], [e, o.shape[1] - c]);
        if (c === 0)
          o = wt(k, Kt(Kt(k, a), T));
        else {
          const $ = wt(k, Kt(Kt(k, a), T));
          o = Ze([Qt(o, [0, 0], [e, c]), $], 1);
        }
        return [a, r, o];
      }), Et([u, h, d]);
    }
    return !t && e > s && (o = Qt(o, [0, 0], [e, s]), r = Qt(r, [0, 0], [s, s])), [o, r];
  });
}
const hT = V({ qr_: uT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var en;
(function(n) {
  n[n.NONE = 0] = "NONE", n[n.MEAN = 1] = "MEAN", n[n.SUM = 2] = "SUM", n[n.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(en || (en = {}));
function dT(n, t, e = en.SUM_BY_NONZERO_WEIGHTS) {
  const s = N(n, "losses", "computeWeightedLoss");
  let o = null;
  t != null && (o = N(t, "weights", "computeWeightedLoss"));
  const r = o == null ? s : D(s, o);
  if (e === en.NONE)
    return r;
  if (e === en.SUM)
    return yt(r);
  if (e === en.MEAN) {
    if (o == null)
      return ye(r);
    {
      const i = s.size / o.size, a = St(yt(r), yt(o));
      return i > 1 ? St(a, $t(i)) : a;
    }
  }
  if (e === en.SUM_BY_NONZERO_WEIGHTS) {
    if (o == null)
      return St(yt(r), $t(s.size));
    {
      const i = D(o, eo(s.shape)), a = ht(yt(Jr(i, $t(0))), "float32");
      return St(yt(r), a);
    }
  }
  throw Error(`Unknown reduction: ${e}`);
}
const Ds = V({ computeWeightedLoss_: dT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pT(n, t, e, s = en.SUM_BY_NONZERO_WEIGHTS) {
  const o = N(n, "labels", "absoluteDifference"), r = N(t, "predictions", "absoluteDifference");
  let i = null;
  e != null && (i = N(e, "weights", "absoluteDifference")), Qe(o.shape, r.shape, "Error in absoluteDifference: ");
  const a = Ee(wt(o, r));
  return Ds(a, i, s);
}
const fT = V({ absoluteDifference_: pT });
function mT(n, t, e, s, o = en.SUM_BY_NONZERO_WEIGHTS) {
  const r = N(n, "labels", "cosineDistance"), i = N(t, "predictions", "cosineDistance");
  let a = null;
  s != null && (a = N(s, "weights", "cosineDistance")), Qe(r.shape, i.shape, "Error in cosineDistance: ");
  const l = $t(1), c = wt(l, yt(D(r, i), e, !0));
  return Ds(c, a, o);
}
const gT = V({ cosineDistance_: mT });
function bT(n, t, e, s = en.SUM_BY_NONZERO_WEIGHTS) {
  let o = N(n, "labels", "hingeLoss");
  const r = N(t, "predictions", "hingeLoss");
  let i = null;
  e != null && (i = N(e, "weights", "hingeLoss")), Qe(o.shape, r.shape, "Error in hingeLoss: ");
  const a = $t(1);
  o = wt(D($t(2), o), a);
  const l = Ms(wt(a, D(o, r)));
  return Ds(l, i, s);
}
const xT = V({ hingeLoss_: bT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yT(n, t, e, s = 1, o = en.SUM_BY_NONZERO_WEIGHTS) {
  const r = N(n, "labels", "huberLoss"), i = N(t, "predictions", "huberLoss");
  let a = null;
  e != null && (a = N(e, "weights", "huberLoss")), Qe(r.shape, i.shape, "Error in huberLoss: ");
  const l = $t(s), c = Ee(wt(i, r)), u = Uc(c, l), h = wt(c, u), d = ot(D($t(0.5), ee(u)), D(l, h));
  return Ds(d, a, o);
}
const wT = V({ huberLoss_: yT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IT(n, t, e, s = 1e-7, o = en.SUM_BY_NONZERO_WEIGHTS) {
  const r = N(n, "labels", "logLoss"), i = N(t, "predictions", "logLoss");
  let a = null;
  e != null && (a = N(e, "weights", "logLoss")), Qe(r.shape, i.shape, "Error in logLoss: ");
  const l = $t(1), c = $t(s), u = fe(D(r, Hn(ot(i, c)))), h = D(wt(l, r), Hn(ot(wt(l, i), c))), d = wt(u, h);
  return Ds(d, a, o);
}
const CT = V({ logLoss_: IT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vT(n, t, e, s = en.SUM_BY_NONZERO_WEIGHTS) {
  const o = N(n, "labels", "meanSquaredError"), r = N(t, "predictions", "meanSquaredError");
  let i = null;
  e != null && (i = N(e, "weights", "meanSquaredError")), Qe(o.shape, r.shape, "Error in meanSquaredError: ");
  const a = g0(o, r);
  return Ds(a, i, s);
}
const ST = V({ meanSquaredError_: vT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kT(n, t) {
  const e = N(n, "labels", "sigmoidCrossEntropyWithLogits"), s = N(t, "logits", "sigmoidCrossEntropyWithLogits");
  Qe(e.shape, s.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  const o = Ms(s), r = D(s, e), i = hp(Bn(fe(Ee(s))));
  return ot(wt(o, r), i);
}
function TT(n, t, e, s = 0, o = en.SUM_BY_NONZERO_WEIGHTS) {
  let r = N(n, "multiClassLabels", "sigmoidCrossEntropy");
  const i = N(t, "logits", "sigmoidCrossEntropy");
  let a = null;
  if (e != null && (a = N(e, "weights", "sigmoidCrossEntropy")), Qe(r.shape, i.shape, "Error in sigmoidCrossEntropy: "), s > 0) {
    const c = $t(s), u = $t(1), h = $t(0.5);
    r = ot(D(r, wt(u, c)), D(h, c));
  }
  const l = kT(r, i);
  return Ds(l, a, o);
}
const NT = V({ sigmoidCrossEntropy_: TT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $T(n, t, e = -1) {
  if (e === -1 && (e = t.rank - 1), e !== t.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);
  return Go((o, r, i) => {
    const l = r0(r, [e], !0), c = wt(ht(r, "float32"), l);
    i([o, c]);
    const u = fe(D(c, o));
    return { value: yt(u, [e]), gradFunc: (p, f) => {
      const [g, m] = f, b = we(p.shape, [e]);
      return [
        D(P(p, b), wt(ht(g, "float32"), Bn(m))),
        D(P(p, b), wt(Bn(m), ht(g, "float32")))
      ];
    } };
  })(n, t);
}
function RT(n, t, e, s = 0, o = en.SUM_BY_NONZERO_WEIGHTS) {
  let r = N(n, "onehotLabels", "softmaxCrossEntropy");
  const i = N(t, "logits", "softmaxCrossEntropy");
  let a = null;
  if (e != null && (a = N(e, "weights", "softmaxCrossEntropy")), Qe(r.shape, i.shape, "Error in softmaxCrossEntropy: "), s > 0) {
    const c = $t(s), u = $t(1), h = $t(r.shape[1]);
    r = ot(D(r, wt(u, c)), St(c, h));
  }
  const l = $T(r, i);
  return Ds(l, a, o);
}
const GT = V({ softmaxCrossEntropy_: RT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LT(n, t, e, s) {
  const o = N(n, "indices", "sparseFillEmptyRows", "int32"), r = N(t, "values", "sparseFillEmptyRows"), i = N(e, "denseShape", "sparseFillEmptyRows", "int32"), a = N(s, "defaultValue", "sparseFillEmptyRows", r.dtype);
  if (o.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${r.shape}`);
  if (i.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);
  if (a.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${a.shape}`);
  const l = {
    indices: o,
    values: r,
    denseShape: i,
    defaultValue: a
  }, c = W.runKernel(Nd, l);
  return {
    outputIndices: c[0],
    outputValues: c[1],
    emptyRowIndicator: c[2],
    reverseIndexMap: c[3]
  };
}
const ET = V({ sparseFillEmptyRows_: LT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WT(n, t, e) {
  const s = N(n, "inputIndices", "sparseReshape", "int32"), o = N(t, "inputShape", "sparseReshape", "int32"), r = N(e, "newShape", "sparseReshape", "int32");
  if (s.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${s.shape}`);
  if (o.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${r.shape}`);
  const i = {
    inputIndices: s,
    inputShape: o,
    newShape: r
  }, a = W.runKernel($d, i);
  return { outputIndices: a[0], outputShape: a[1] };
}
const MT = V({ sparseReshape_: WT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DT(n, t, e) {
  const s = N(n, "data", "sparseSegmentMean"), o = N(t, "indices", "sparseSegmentMean", "int32"), r = N(e, "segmentIds", "sparseSegmentMean", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${r.shape}`);
  const i = {
    data: s,
    indices: o,
    segmentIds: r
  };
  return W.runKernel(Rd, i);
}
const FT = V({ sparseSegmentMean_: DT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zT(n, t, e) {
  const s = N(n, "data", "sparseSegmentSum"), o = N(t, "indices", "sparseSegmentSum", "int32"), r = N(e, "segmentIds", "sparseSegmentSum", "int32");
  if (s.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${o.shape}`);
  if (r.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${r.shape}`);
  const i = {
    data: s,
    indices: o,
    segmentIds: r
  };
  return W.runKernel(Gd, i);
}
const VT = V({ sparseSegmentSum_: zT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PT(n, t, e, s, o, r, i, a) {
  const l = N(n, "data", "stringNGrams", "string");
  if (l.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (l.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${l.shape}`);
  const c = N(t, "dataSplits", "stringNGrams");
  if (c.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  const u = {
    separator: e,
    nGramWidths: s,
    leftPad: o,
    rightPad: r,
    padWidth: i,
    preserveShortSequences: a
  }, h = { data: l, dataSplits: c }, d = W.runKernel(Wd, h, u);
  return { nGrams: d[0], nGramsSplits: d[1] };
}
const XT = V({ stringNGrams_: PT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OT(n, t, e = !0) {
  const s = N(n, "input", "stringSplit", "string"), o = N(t, "delimiter", "stringSplit", "string");
  if (s.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);
  if (o.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${o.shape}`);
  const r = { skipEmpty: e }, i = { input: s, delimiter: o }, a = W.runKernel(Md, i, r);
  return { indices: a[0], values: a[1], shape: a[2] };
}
const AT = V({ stringSplit_: OT });
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZT(n, t) {
  const e = N(n, "input", "stringToHashBucketFast", "string"), s = { numBuckets: t };
  if (t <= 0)
    throw new Error("Number of buckets must be at least 1");
  const o = { input: e };
  return W.runKernel(Dd, o, s);
}
const KT = V({ stringToHashBucketFast_: ZT });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const J4 = {
  fft: Cp,
  ifft: pl,
  rfft: vp,
  irfft: m0
}, q4 = {
  hammingWindow: Ck,
  hannWindow: I0,
  frame: C0,
  stft: Tk
}, Ma = {
  flipLeftRight: Gk,
  grayscaleToRGB: Ek,
  resizeNearestNeighbor: S0,
  resizeBilinear: v0,
  rotateWithOffset: Mk,
  cropAndResize: $k,
  nonMaxSuppression: Fk,
  nonMaxSuppressionAsync: Kk,
  nonMaxSuppressionWithScore: Hk,
  nonMaxSuppressionWithScoreAsync: Uk,
  nonMaxSuppressionPadded: jk,
  nonMaxSuppressionPaddedAsync: Jk,
  threshold: sT,
  transform: rT
}, BT = {
  bandPart: aT,
  gramSchmidt: cT,
  qr: hT
}, tY = {
  absoluteDifference: fT,
  computeWeightedLoss: Ds,
  cosineDistance: gT,
  hingeLoss: xT,
  huberLoss: wT,
  logLoss: CT,
  meanSquaredError: ST,
  sigmoidCrossEntropy: NT,
  softmaxCrossEntropy: GT
}, eY = {
  sparseFillEmptyRows: ET,
  sparseReshape: MT,
  sparseSegmentMean: FT,
  sparseSegmentSum: VT
}, nY = {
  stringNGrams: XT,
  stringSplit: AT,
  stringToHashBucketFast: KT
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class no extends zo {
  /**
   * Executes `f()` and minimizes the scalar output of `f()` by computing
   * gradients of y with respect to the list of trainable variables provided by
   * `varList`. If no list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to minimize.
   * @param returnCost Whether to return the scalar cost value produced by
   * executing `f()`.
   * @param varList An optional list of variables to update. If specified, only
   * the trainable variables in varList will be updated by minimize. Defaults to
   * all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  minimize(t, e = !1, s) {
    const { value: o, grads: r } = this.computeGradients(t, s);
    if (s != null) {
      const i = s.map((a) => ({ name: a.name, tensor: r[a.name] }));
      this.applyGradients(i);
    } else
      this.applyGradients(r);
    return Et(r), e ? o : (o.dispose(), null);
  }
  /**
   * The number of iterations that this optimizer instance has been invoked for.
   */
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  /**
   * Executes f() and computes the gradient of the scalar output of f() with
   * respect to the list of trainable variables provided by `varList`. If no
   * list is provided, it defaults to all trainable variables.
   *
   * @param f The function to execute and whose output to use for computing
   * gradients with respect to variables.
   * @param varList An optional list of variables to compute gradients with
   * respect to. If specified, only the trainable variables in varList will have
   * gradients computed with respect to. Defaults to all trainable variables.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers'}
   */
  computeGradients(t, e) {
    return Sv(t, e);
  }
  /**
   * Dispose the variables (if any) owned by this optimizer instance.
   */
  dispose() {
    this.iterations_ != null && Et(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), {
      name: "iter",
      // TODO(cais): Use 'int64' type when available.
      tensor: $t(this.iterations_, "int32")
    };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(t) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  /**
   * Extract the first element of the weight values and set it
   * as the iterations counter variable of this instance of optimizer.
   *
   * @param weightValues
   * @returns Weight values with the first element consumed and excluded.
   */
  async extractIterations(t) {
    return this.iterations_ = (await t[0].tensor.data())[0], t.slice(1);
  }
}
Object.defineProperty(no, Symbol.hasInstance, {
  value: (n) => n.minimize != null && n.computeGradients != null && n.applyGradients != null
});
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Wp extends no {
  constructor(t, e, s = null) {
    super(), this.learningRate = t, this.rho = e, this.epsilon = s, this.accumulatedGrads = [], this.accumulatedUpdates = [], s == null && (this.epsilon = W.backend.epsilon());
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = W.registeredVariables[s], i = !1;
      this.accumulatedGrads[o] == null && (this.accumulatedGrads[o] = {
        originalName: `${s}/accum_grad`,
        variable: X(() => Pt(r).variable(i))
      }), this.accumulatedUpdates[o] == null && (this.accumulatedUpdates[o] = {
        originalName: `${s}/accum_var`,
        variable: X(() => Pt(r).variable(i))
      });
      const a = Array.isArray(t) ? t[o].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedGrads[o].variable, c = this.accumulatedUpdates[o].variable;
      X(() => {
        const u = ot(D(l, this.rho), D(ee(a), 1 - this.rho)), h = D(St(Ye(ot(c, this.epsilon)), Ye(ot(l, this.epsilon))), a), d = ot(D(c, this.rho), D(ee(h), 1 - this.rho));
        l.assign(u), c.assign(d);
        const p = ot(D(h, -this.learningRate), r);
        r.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Et(this.accumulatedGrads.map((t) => t.variable)), Et(this.accumulatedUpdates.map((t) => t.variable)));
  }
  async getWeights() {
    const t = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = t.length / 2, s = !1;
    this.accumulatedGrads = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedUpdates = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      rho: this.rho,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.rho, e.epsilon);
  }
}
Wp.className = "Adadelta";
et(Wp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Mp extends no {
  constructor(t, e = 0.1) {
    super(), this.learningRate = t, this.initialAccumulatorValue = e, this.accumulatedGrads = [];
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = W.registeredVariables[s];
      this.accumulatedGrads[o] == null && (this.accumulatedGrads[o] = {
        originalName: `${s}/accumulator`,
        variable: X(() => la(r.shape, this.initialAccumulatorValue).variable(!1))
      });
      const i = Array.isArray(t) ? t[o].tensor : t[s];
      if (i == null)
        return;
      const a = this.accumulatedGrads[o].variable;
      X(() => {
        const l = ot(a, ee(i));
        a.assign(l);
        const c = ot(D(St(i, Ye(ot(l, W.backend.epsilon()))), -this.learningRate), r);
        r.assign(c);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Et(this.accumulatedGrads.map((t) => t.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulatedGrads = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      initialAccumulatorValue: this.initialAccumulatorValue
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.initialAccumulatorValue);
  }
}
Mp.className = "Adagrad";
et(Mp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Dp extends no {
  constructor(t, e, s, o = null) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = o, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], X(() => {
      this.accBeta1 = $t(e).variable(), this.accBeta2 = $t(s).variable();
    }), o == null && (this.epsilon = W.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    X(() => {
      const s = wt(1, this.accBeta1), o = wt(1, this.accBeta2);
      e.forEach((r, i) => {
        const a = W.registeredVariables[r], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${r}/m`,
          variable: X(() => Pt(a).variable(l))
        }), this.accumulatedSecondMoment[i] == null && (this.accumulatedSecondMoment[i] = {
          originalName: `${r}/v`,
          variable: X(() => Pt(a).variable(l))
        });
        const c = Array.isArray(t) ? t[i].tensor : t[r];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedSecondMoment[i].variable, d = ot(D(u, this.beta1), D(c, 1 - this.beta1)), p = ot(D(h, this.beta2), D(ee(c), 1 - this.beta2)), f = St(d, s), g = St(p, o);
        u.assign(d), h.assign(p);
        const m = ot(D(St(f, ot(Ye(g), this.epsilon)), -this.learningRate), a);
        a.assign(m);
      }), this.accBeta1.assign(D(this.accBeta1, this.beta1)), this.accBeta2.assign(D(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Et(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedSecondMoment != null && Et(this.accumulatedSecondMoment.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t), X(() => {
      this.accBeta1.assign(ar(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(ar(this.beta2, this.iterations_ + 1));
    });
    const e = t.length / 2, s = !1;
    this.accumulatedFirstMoment = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedSecondMoment = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
  }
}
Dp.className = "Adam";
et(Dp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Fp extends no {
  constructor(t, e, s, o = null, r = 0) {
    super(), this.learningRate = t, this.beta1 = e, this.beta2 = s, this.epsilon = o, this.decay = r, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], X(() => {
      this.iteration = $t(0).variable(), this.accBeta1 = $t(e).variable();
    }), o == null && (this.epsilon = W.backend.epsilon());
  }
  applyGradients(t) {
    const e = Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t);
    X(() => {
      const s = wt(1, this.accBeta1), o = St(-this.learningRate, ot(D(this.iteration, this.decay), 1));
      e.forEach((r, i) => {
        const a = W.registeredVariables[r], l = !1;
        this.accumulatedFirstMoment[i] == null && (this.accumulatedFirstMoment[i] = {
          originalName: `${r}/m`,
          variable: Pt(a).variable(l)
        }), this.accumulatedWeightedInfNorm[i] == null && (this.accumulatedWeightedInfNorm[i] = {
          originalName: `${r}/v`,
          variable: Pt(a).variable(l)
        });
        const c = Array.isArray(t) ? t[i].tensor : t[r];
        if (c == null)
          return;
        const u = this.accumulatedFirstMoment[i].variable, h = this.accumulatedWeightedInfNorm[i].variable, d = ot(D(u, this.beta1), D(c, 1 - this.beta1)), p = D(h, this.beta2), f = Ee(c), g = to(p, f);
        u.assign(d), h.assign(g);
        const m = ot(D(St(o, s), St(d, ot(g, this.epsilon))), a);
        a.assign(m);
      }), this.iteration.assign(ot(this.iteration, 1)), this.accBeta1.assign(D(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Et(this.accumulatedFirstMoment.map((t) => t.variable)), this.accumulatedWeightedInfNorm != null && Et(this.accumulatedWeightedInfNorm.map((t) => t.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(t) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      beta1: this.beta1,
      beta2: this.beta2,
      epsilon: this.epsilon,
      decay: this.decay
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
  }
}
Fp.className = "Adamax";
et(Fp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class jc extends no {
  constructor(t) {
    super(), this.learningRate = t, this.setLearningRate(t);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = Array.isArray(t) ? t[o].tensor : t[s];
      if (r == null)
        return;
      const i = W.registeredVariables[s];
      X(() => {
        const a = ot(D(this.c, r), i);
        i.assign(a);
      });
    }), this.incrementIterations();
  }
  /**
   * Sets the learning rate of the optimizer.
   */
  setLearningRate(t) {
    this.learningRate = t, this.c != null && this.c.dispose(), this.c = vn($t(-t));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(t) {
    if (t = await this.extractIterations(t), t.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate);
  }
}
jc.className = "SGD";
et(jc);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zp extends jc {
  constructor(t, e, s = !1) {
    super(t), this.learningRate = t, this.momentum = e, this.useNesterov = s, this.accumulations = [], this.m = $t(this.momentum);
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = W.registeredVariables[s];
      this.accumulations[o] == null && (this.accumulations[o] = {
        originalName: `${s}/momentum`,
        variable: X(() => Pt(r).variable(!1))
      });
      const i = this.accumulations[o].variable, a = Array.isArray(t) ? t[o].tensor : t[s];
      a != null && X(() => {
        let l;
        const c = ot(D(this.m, i), a);
        this.useNesterov ? l = ot(D(this.c, ot(a, D(c, this.m))), r) : l = ot(D(this.c, c), r), i.assign(c), r.assign(l);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Et(this.accumulations.map((t) => t.variable));
  }
  /**
   * Sets the momentum of the optimizer.
   *
   * @param momentum
   */
  setMomentum(t) {
    this.momentum = t;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((t) => ({ name: t.originalName, tensor: t.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = !1;
    this.accumulations = t.map((s) => ({ originalName: s.name, variable: s.tensor.variable(e) }));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      momentum: this.momentum,
      useNesterov: this.useNesterov
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.momentum, e.useNesterov);
  }
}
zp.className = "Momentum";
et(zp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Vp extends no {
  constructor(t, e = 0.9, s = 0, o = null, r = !1) {
    if (super(), this.learningRate = t, this.decay = e, this.momentum = s, this.epsilon = o, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = r, o == null && (this.epsilon = W.backend.epsilon()), t == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(t) {
    (Array.isArray(t) ? t.map((s) => s.name) : Object.keys(t)).forEach((s, o) => {
      const r = W.registeredVariables[s], i = !1;
      this.accumulatedMeanSquares[o] == null && (this.accumulatedMeanSquares[o] = {
        originalName: `${s}/rms`,
        variable: X(() => Pt(r).variable(i))
      }), this.accumulatedMoments[o] == null && (this.accumulatedMoments[o] = {
        originalName: `${s}/momentum`,
        variable: X(() => Pt(r).variable(i))
      }), this.accumulatedMeanGrads[o] == null && this.centered && (this.accumulatedMeanGrads[o] = {
        originalName: `${s}/mg`,
        variable: X(() => Pt(r).variable(i))
      });
      const a = Array.isArray(t) ? t[o].tensor : t[s];
      if (a == null)
        return;
      const l = this.accumulatedMeanSquares[o].variable, c = this.accumulatedMoments[o].variable;
      X(() => {
        const u = ot(D(l, this.decay), D(ee(a), 1 - this.decay));
        if (this.centered) {
          const h = this.accumulatedMeanGrads[o].variable, d = ot(D(h, this.decay), D(a, 1 - this.decay)), p = St(D(a, this.learningRate), Ye(wt(u, ot(ee(d), this.epsilon)))), f = ot(D(c, this.momentum), p);
          l.assign(u), h.assign(d), c.assign(f);
          const g = wt(r, f);
          r.assign(g);
        } else {
          const h = ot(D(l, this.decay), D(ee(a), 1 - this.decay)), d = ot(D(c, this.momentum), St(D(a, this.learningRate), Ye(ot(h, this.epsilon))));
          l.assign(h), c.assign(d);
          const p = wt(r, d);
          r.assign(p);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Et(this.accumulatedMeanSquares.map((t) => t.variable)), this.accumulatedMeanGrads != null && this.centered && Et(this.accumulatedMeanGrads.map((t) => t.variable)), this.accumulatedMoments != null && Et(this.accumulatedMoments.map((t) => t.variable));
  }
  async getWeights() {
    const t = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && t.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(t.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t) {
    t = await this.extractIterations(t);
    const e = this.centered ? t.length / 3 : t.length / 2, s = !1;
    this.accumulatedMeanSquares = t.slice(0, e).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.accumulatedMoments = t.slice(e, e * 2).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })), this.centered && (this.accumulatedMeanGrads = t.slice(e * 2, e * 3).map((o) => ({
      originalName: o.name,
      variable: o.tensor.variable(s)
    })));
  }
  getConfig() {
    return {
      learningRate: this.learningRate,
      decay: this.decay,
      momentum: this.momentum,
      epsilon: this.epsilon,
      centered: this.centered
    };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
  }
}
Vp.className = "RMSProp";
et(Vp);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ao {
  /**
   * Constructs a `tf.SGDOptimizer` that uses stochastic gradient descent.
   *
   * ```js
   * // Fit a quadratic function by learning the coefficients a, b, c.
   * const xs = tf.tensor1d([0, 1, 2, 3]);
   * const ys = tf.tensor1d([1.1, 5.9, 16.8, 33.9]);
   *
   * const a = tf.scalar(Math.random()).variable();
   * const b = tf.scalar(Math.random()).variable();
   * const c = tf.scalar(Math.random()).variable();
   *
   * // y = a * x^2 + b * x + c.
   * const f = x => a.mul(x.square()).add(b.mul(x)).add(c);
   * const loss = (pred, label) => pred.sub(label).square().mean();
   *
   * const learningRate = 0.01;
   * const optimizer = tf.train.sgd(learningRate);
   *
   * // Train the model.
   * for (let i = 0; i < 10; i++) {
   *   optimizer.minimize(() => loss(f(xs), ys));
   * }
   *
   * // Make predictions.
   * console.log(
   *     `a: ${a.dataSync()}, b: ${b.dataSync()}, c: ${c.dataSync()}`);
   * const preds = f(xs).dataSync();
   * preds.forEach((pred, i) => {
   *   console.log(`x: ${i}, pred: ${pred}`);
   * });
   * ```
   *
   * @param learningRate The learning rate to use for the SGD algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static sgd(t) {
    return new jc(t);
  }
  /**
   * Constructs a `tf.MomentumOptimizer` that uses momentum gradient
   * descent.
   *
   * See
   * [http://proceedings.mlr.press/v28/sutskever13.pdf](
   * http://proceedings.mlr.press/v28/sutskever13.pdf)
   *
   * @param learningRate The learning rate to use for the Momentum gradient
   * descent algorithm.
   * @param momentum The momentum to use for the momentum gradient descent
   * algorithm.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static momentum(t, e, s = !1) {
    return new zp(t, e, s);
  }
  /**
   * Constructs a `tf.RMSPropOptimizer` that uses RMSProp gradient
   * descent. This implementation uses plain momentum and is not centered
   * version of RMSProp.
   *
   * See
   * [http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf](
   * http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf)
   *
   * @param learningRate The learning rate to use for the RMSProp gradient
   * descent algorithm.
   * @param decay The discounting factor for the history/coming gradient.
   * @param momentum The momentum to use for the RMSProp gradient descent
   * algorithm.
   * @param epsilon Small value to avoid zero denominator.
   * @param centered If true, gradients are normalized by the estimated
   * variance of the gradient.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static rmsprop(t, e = 0.9, s = 0, o = null, r = !1) {
    return new Vp(t, e, s, o, r);
  }
  /**
   * Constructs a `tf.AdamOptimizer` that uses the Adam algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adam gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adam(t = 1e-3, e = 0.9, s = 0.999, o = null) {
    return new Dp(t, e, s, o);
  }
  /**
   * Constructs a `tf.AdadeltaOptimizer` that uses the Adadelta algorithm.
   * See [https://arxiv.org/abs/1212.5701](https://arxiv.org/abs/1212.5701)
   *
   * @param learningRate The learning rate to use for the Adadelta gradient
   * descent algorithm.
   * @param rho The learning rate decay over each update.
   * @param epsilon A constant epsilon used to better condition the grad
   * update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adadelta(t = 1e-3, e = 0.95, s = null) {
    return new Wp(t, e, s);
  }
  /**
   * Constructs a `tf.AdamaxOptimizer` that uses the Adamax algorithm.
   * See [https://arxiv.org/abs/1412.6980](https://arxiv.org/abs/1412.6980)
   *
   * @param learningRate The learning rate to use for the Adamax gradient
   * descent algorithm.
   * @param beta1 The exponential decay rate for the 1st moment estimates.
   * @param beta2 The exponential decay rate for the 2nd moment estimates.
   * @param epsilon A small constant for numerical stability.
   * @param decay The learning rate decay over each update.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adamax(t = 2e-3, e = 0.9, s = 0.999, o = null, r = 0) {
    return new Fp(t, e, s, o, r);
  }
  /**
   * Constructs a `tf.AdagradOptimizer` that uses the Adagrad algorithm.
   * See
   * [http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf](
   * http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)
   * or
   * [http://ruder.io/optimizing-gradient-descent/index.html#adagrad](
   * http://ruder.io/optimizing-gradient-descent/index.html#adagrad)
   *
   * @param learningRate The learning rate to use for the Adagrad gradient
   * descent algorithm.
   * @param initialAccumulatorValue Starting value for the accumulators, must be
   * positive.
   *
   * @doc {heading: 'Training', subheading: 'Optimizers', namespace: 'train'}
   */
  static adagrad(t, e = 0.1) {
    return new Mp(t, e);
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Ko = {
  sgd: ao.sgd,
  momentum: ao.momentum,
  adadelta: ao.adadelta,
  adagrad: ao.adagrad,
  rmsprop: ao.rmsprop,
  adamax: ao.adamax,
  adam: ao.adam
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HT = (() => typeof requestAnimationFrame < "u" ? requestAnimationFrame : typeof setImmediate < "u" ? setImmediate : (n) => n())();
function Qc() {
  return new Promise((n) => HT(() => n()));
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Pp(n, t) {
  const e = n[0].length;
  n.forEach((o, r) => {
    S(o.length === e, () => `Error in concat${e}D: rank of tensors[${r}] must be the same as the rank of the rest (${e})`);
  }), S(t >= 0 && t < e, () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`);
  const s = n[0];
  n.forEach((o, r) => {
    for (let i = 0; i < e; i++)
      S(i === t || o[i] === s[i], () => `Error in concat${e}D: Shape of tensors[${r}] (${o}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`);
  });
}
function ms(n, t) {
  const e = n[0].slice();
  for (let s = 1; s < n.length; s++)
    e[t] += n[s][t];
  return e;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Dn;
(function(n) {
  n[n.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", n[n.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", n[n.ROW_LENGTHS = 2] = "ROW_LENGTHS", n[n.ROW_SPLITS = 3] = "ROW_SPLITS", n[n.ROW_LIMITS = 4] = "ROW_LIMITS", n[n.ROW_STARTS = 5] = "ROW_STARTS";
})(Dn || (Dn = {}));
function Xp(n, t, e) {
  let s = new Array();
  if (e == null && t == null)
    return s;
  if (t == null)
    for (; s.length < n + e.length; )
      s.push(-1);
  else
    s = t.slice();
  if (e == null)
    return s;
  if (n + e.length !== s.length)
    throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n + e.length}, but shape.rank = ${s.length}`);
  for (let o = 1; o < e.length; ++o) {
    const r = e[o], i = s[s.length - e.length + o], a = s[i];
    if (r >= 0)
      if (a >= 0) {
        if (a !== r)
          throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${o + n}] = ${r} but shape[${o + n}] = ${a}`);
      } else
        s[i] = r;
  }
  return s;
}
function Op(n) {
  const t = {
    FIRST_DIM_SIZE: Dn.FIRST_DIM_SIZE,
    VALUE_ROWIDS: Dn.VALUE_ROWIDS,
    ROW_LENGTHS: Dn.ROW_LENGTHS,
    ROW_SPLITS: Dn.ROW_SPLITS,
    ROW_LIMITS: Dn.ROW_LIMITS,
    ROW_STARTS: Dn.ROW_STARTS
  }, e = [];
  for (const s of n)
    if (s in t)
      e.push(t[s]);
    else
      break;
  return e;
}
function Ap(n) {
  return n.length === 0 ? 0 : n[0] === Dn.FIRST_DIM_SIZE ? n.length - 1 : n.length;
}
function Zp(n, t) {
  if (n == null || t == null)
    return;
  const e = n.length, s = t.length;
  if (e >= s)
    throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);
  for (let o = 0; o < Math.min(e, s - 1); ++o) {
    const r = n[o], i = t[o + 1];
    if (r >= 0 && i >= 0 && r !== 1 && r !== i)
      throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${o - n.length}] = ${r} but ragged tensor input.flatValues.shape[${o - n.length}] = ${i}`);
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Kp = 30;
function Jc(n) {
  return n <= Kp ? n : nl(n, Math.floor(Math.sqrt(n)));
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Bp(n, t, e) {
  const s = e * (typeof n == "number" ? n : n[0]), o = t * (typeof n == "number" ? n : n[1]);
  return [s, o];
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function da(n, t, e, s = !0) {
  let o = [];
  if (s)
    o = o.concat(t.slice(0)), o.push(n[0] / e), o = o.concat(n.slice(1));
  else {
    o = o.concat(n[0]);
    const r = t.length;
    for (let i = 0; i < r; ++i)
      o = o.concat([n[i + 1] / t[i], t[i]]);
    o = o.concat(n.slice(r + 1));
  }
  return o;
}
function pa(n, t, e = !0) {
  const s = [];
  if (e) {
    s.push(t);
    for (let o = t + 1; o < n; ++o)
      o <= 2 * t ? (s.push(o), s.push(o - (t + 1))) : s.push(o);
  } else {
    const o = [], r = [];
    for (let i = 1; i < n; ++i)
      i >= t * 2 + 1 || i % 2 === 1 ? r.push(i) : o.push(i);
    s.push(...o), s.push(0), s.push(...r);
  }
  return s;
}
function fa(n, t, e, s = !0) {
  const o = [];
  s ? o.push(n[0] / e) : o.push(n[0] * e);
  for (let r = 1; r < n.length; ++r)
    r <= t.length ? s ? o.push(t[r - 1] * n[r]) : o.push(n[r] / t[r - 1]) : o.push(n[r]);
  return o;
}
function Hp(n, t) {
  const e = [0];
  for (let s = 0; s < t; ++s)
    e.push(n[s][0]);
  return e;
}
function _p(n, t, e) {
  const s = n.slice(0, 1);
  for (let o = 0; o < e; ++o)
    s.push(n[o + 1] - t[o][0] - t[o][1]);
  return s;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qc = 1.7580993408473768, tu = 1.0507009873554805;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Up = 0.3275911, Yp = 0.254829592, jp = -0.284496736, Qp = 1.421413741, Jp = -1.453152027, qp = 1.061405429;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $s(n, t) {
  if (n.length !== t.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);
  const e = new Float32Array(n.length * 2);
  for (let s = 0; s < e.length; s += 2)
    e[s] = n[s / 2], e[s + 1] = t[s / 2];
  return e;
}
function k0(n) {
  const t = new Float32Array(n.length / 2), e = new Float32Array(n.length / 2);
  for (let s = 0; s < n.length; s += 2)
    t[s / 2] = n[s], e[s / 2] = n[s + 1];
  return { real: t, imag: e };
}
function T0(n) {
  const t = Math.ceil(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let o = 0; o < n.length; o += 4)
    e[Math.floor(o / 4)] = n[o], s[Math.floor(o / 4)] = n[o + 1];
  return { real: e, imag: s };
}
function N0(n) {
  const t = Math.floor(n.length / 4), e = new Float32Array(t), s = new Float32Array(t);
  for (let o = 2; o < n.length; o += 4)
    e[Math.floor(o / 4)] = n[o], s[Math.floor(o / 4)] = n[o + 1];
  return { real: e, imag: s };
}
function tf(n, t) {
  const e = n[t * 2], s = n[t * 2 + 1];
  return { real: e, imag: s };
}
function $0(n, t, e, s) {
  n[s * 2] = t, n[s * 2 + 1] = e;
}
function R0(n, t) {
  const e = new Float32Array(n / 2), s = new Float32Array(n / 2);
  for (let o = 0; o < Math.ceil(n / 2); o++) {
    const r = (t ? 2 : -2) * Math.PI * (o / n);
    e[o] = Math.cos(r), s[o] = Math.sin(r);
  }
  return { real: e, imag: s };
}
function G0(n, t, e) {
  const s = (e ? 2 : -2) * Math.PI * (n / t), o = Math.cos(s), r = Math.sin(s);
  return { real: o, imag: r };
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Su = "->", _T = /->/g, km = ",", Tm = "...";
function ef(n, t) {
  n = n.replace(/\s/g, "");
  const e = (n.length - n.replace(_T, "").length) / Su.length;
  if (e < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (e > 1)
    throw new Error(`Equation must contain exactly one arrow ("${Su}").`);
  const [s, o] = n.split(Su);
  S(s.indexOf(Tm) === -1, () => `The ellipsis notation ("${Tm}") is not supported yet.`);
  const r = s.split(km), i = r.length;
  if (t !== i)
    throw new Error(`Expected ${i} input tensors, received ${t}`);
  if (i > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  const a = [];
  for (let d = 0; d < o.length; ++d) {
    const p = o[d];
    if (!r.some((f) => f.indexOf(p) !== -1))
      throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);
    a.indexOf(p) === -1 && a.push(p);
  }
  for (let d = 0; d < s.length; ++d) {
    const p = s[d];
    a.indexOf(p) === -1 && p !== km && a.push(p);
  }
  const l = new Array(r.length);
  for (let d = 0; d < i; ++d) {
    if (new Set(r[d].split("")).size !== r[d].length)
      throw new Error(`Found duplicate axes in input component ${r[d]}. Support for duplicate axes in input is not implemented yet.`);
    l[d] = [];
    for (let p = 0; p < r[d].length; ++p)
      l[d].push(a.indexOf(r[d][p]));
  }
  const c = a.length, u = o.length, h = [];
  for (let d = u; d < c; ++d)
    h.push(d);
  return { allDims: a, summedDims: h, idDims: l };
}
function nf(n, t) {
  let e = new Array(n);
  e.fill(-1);
  for (let o = 0; o < t.length; ++o)
    e[t[o]] = o;
  const s = [];
  for (let o = 0; o < n; ++o)
    e[o] === -1 && s.push(o);
  return e = e.filter((o) => o !== -1), { permutationIndices: e, expandDims: s };
}
function sf(n, t, e) {
  const s = new Array(n);
  for (let o = 0; o < e.length; ++o) {
    const r = e[o].shape;
    for (let i = 0; i < t[o].length; ++i)
      s[t[o][i]] === void 0 ? s[t[o][i]] = r[i] : S(s[t[o][i]] === r[i], () => `Expected dimension ${s[t[o][i]]} at axis ${i} of input shaped ${JSON.stringify(r)}, but got dimension ${r[i]}`);
  }
}
function of(n, t) {
  const e = n, s = [];
  let o = 0;
  n.length === 0 && e.push(-1), o = n.length + 1;
  for (let i = 0; i < o; ++i)
    s.push([]);
  const r = [];
  for (let i = 0; i < e.length; ++i) {
    const a = e[i], l = UT(t, a);
    for (const c of l)
      r.indexOf(c) === -1 && (s[i].push(c), r.push(c));
  }
  return { path: e, steps: s };
}
function rf(n) {
  return n.every((t, e) => t === e);
}
function UT(n, t) {
  const e = [];
  for (let s = 0; s < n.length; ++s)
    (n[s].length === 0 || n[s].indexOf(t) !== -1 || t === -1) && e.push(s);
  return e;
}
function af(n, t, e = 0) {
  let s = [];
  if (typeof t == "number")
    S(n.shape[e] % t === 0, () => "Number of splits must evenly divide the axis."), s = new Array(t).fill(n.shape[e] / t);
  else {
    const o = t.reduce((i, a) => (a === -1 && (i += 1), i), 0);
    S(o <= 1, () => "There should be only one negative value in split array.");
    const r = t.indexOf(-1);
    if (r !== -1) {
      const i = t.reduce((a, l) => l > 0 ? a + l : a);
      t[r] = n.shape[e] - i;
    }
    S(n.shape[e] === t.reduce((i, a) => i + a), () => "The sum of sizes must match the size of the axis dimension."), s = t;
  }
  return s;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lf(n) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${n}`;
}
function cf(n, t) {
  return `indices(${n}, 0) is invalid: ${t} < 0`;
}
function uf(n, t, e) {
  return `indices(${n}, 0) is invalid: ${t} >= ${e}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hf(n, t) {
  return `only one output dimension may be -1, not both ${n} and ${t}`;
}
function df(n, t) {
  return `size ${n} must be non-negative, not ${t}`;
}
function pf() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function ff(n, t) {
  const e = H(n), s = H(t);
  return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${s}. inputShape=${n} outputShape= ${t}`;
}
function mf(n, t) {
  const e = H(n), s = H(t);
  return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${s}. inputShape=${n} outputShape=${t}`;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qr() {
  return "segment ids must be >= 0";
}
function gf() {
  return "segment ids are not increasing";
}
function bf(n, t) {
  return `Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`;
}
function xf(n, t, e) {
  return `Bad: indices[${n}] == ${t} out of range [0, ${e})`;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L0(n, t) {
  let e = !1, s;
  for (n <= Kp ? (s = n, e = !0) : s = nl(n, Math.floor(Math.sqrt(n))); !e; )
    s > t || s === n ? e = !0 : s = nl(n, s + 1);
  return s;
}
function E0(n, t, e) {
  const s = [], o = n.length;
  for (let r = 0; r < o; r++)
    r !== t ? s.push(n[r]) : s.push(e);
  return s;
}
function yf(n, t, e, s) {
  const o = t.shape.length, r = n.shape.length;
  if (s !== 0 && (s < -o || s > o))
    throw new Error(`Expect batchDims in the range of [-${o}, ${o}], but got ${s}`);
  if (s < 0 && (s += o), s > r)
    throw new Error(`batchDims (${s}) must be less than rank(x) (
    ${r}).`);
  if (e < s)
    throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);
  for (let h = 0; h < s; ++h)
    if (n.shape[h] !== t.shape[h])
      throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);
  const i = n.shape[e], a = [];
  let l = 1, c = 1, u = 1;
  for (let h = 0; h < s; ++h)
    a.push(n.shape[h]), l *= n.shape[h];
  for (let h = s; h < e; h++)
    a.push(n.shape[h]), c *= n.shape[h];
  for (let h = s; h < o; h++)
    a.push(t.shape[h]);
  for (let h = e + 1; h < r; h++)
    a.push(n.shape[h]), u *= n.shape[h];
  return { batchSize: l, sliceSize: u, outerSize: c, dimSize: i, outputShape: a };
}
const YT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  collectGatherOpShapeInfo: yf,
  computeOutShape: E0,
  segOpComputeOptimalWindowSize: L0
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Rs(n) {
  try {
    return n.map((t) => Ss(t));
  } catch (t) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`);
  }
}
function wf(n) {
  return n.map((t) => An(t));
}
const jT = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ERF_A1: Yp,
  ERF_A2: jp,
  ERF_A3: Qp,
  ERF_A4: Jp,
  ERF_A5: qp,
  ERF_P: Up,
  PARALLELIZE_THRESHOLD: Kp,
  get RowPartitionType() {
    return Dn;
  },
  SELU_SCALE: tu,
  SELU_SCALEALPHA: qc,
  applyActivation: Np,
  assertAndGetBroadcastShape: Rt,
  assertAxesAreInnerMostDims: Oe,
  assertParamsConsistent: Pp,
  assignToTypedArray: $0,
  axesAreInnerMostDims: lp,
  calculateShapes: wr,
  checkEinsumDimSizes: sf,
  checkPadOnDimRoundingMode: an,
  combineLocations: t0,
  combineRaggedTensorToTensorShapes: Xp,
  complexWithEvenIndex: T0,
  complexWithOddIndex: N0,
  computeConv2DInfo: Xe,
  computeConv3DInfo: Js,
  computeDefaultPad: ep,
  computeDilation2DInfo: aa,
  computeOptimalWindowSize: Jc,
  computeOutAndReduceShapes: Ge,
  computeOutShape: ms,
  computePool2DInfo: Un,
  computePool3DInfo: Es,
  convertConv2DDataFormat: Ws,
  decodeEinsumEquation: ef,
  eitherStridesOrDilationsAreOne: Ke,
  expandShapeToKeepDim: we,
  exponent: G0,
  exponents: R0,
  fromStringArrayToUint8: wf,
  fromUint8ToStringArray: Rs,
  getAxesPermutation: me,
  getBroadcastDims: Ts,
  getComplexWithIndex: tf,
  getEinsumComputePath: of,
  getEinsumPermutation: nf,
  getFusedBiasGradient: Tp,
  getFusedDyActivation: kp,
  getImageCenter: Bp,
  getInnerMostAxes: Ie,
  getPermuted: pa,
  getRaggedRank: Ap,
  getReductionAxes: ve,
  getReshaped: da,
  getReshapedPermuted: fa,
  getRowPartitionTypesHelper: Op,
  getSliceBeginCoords: Hp,
  getSliceSize: _p,
  getSparseFillEmptyRowsIndicesDenseShapeMismatch: lf,
  getSparseFillEmptyRowsNegativeIndexErrorMessage: cf,
  getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: uf,
  getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: pf,
  getSparseReshapeInputOutputMismatchErrorMessage: mf,
  getSparseReshapeInputOutputMultipleErrorMessage: ff,
  getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: hf,
  getSparseReshapeNegativeOutputDimErrorMessage: df,
  getSparseSegmentReductionIndicesOutOfRangeErrorMessage: xf,
  getSparseSegmentReductionNegativeSegmentIdsErrorMessage: qr,
  getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: gf,
  getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: bf,
  getUndoAxesPermutation: qs,
  isIdentityPermutation: rf,
  log: Vw,
  mergeRealAndImagArrays: $s,
  prepareAndValidate: Pc,
  prepareSplitSize: af,
  segment_util: YT,
  shouldFuse: $p,
  slice_util: d2,
  splitRealAndImagArrays: k0,
  tupleValuesAreOne: $o,
  upcastType: nn,
  validateDefaultValueShape: Zp,
  validateInput: Vb,
  validateUpdateShape: Qd,
  warn: wn
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W0 = {
  kernelName: Vl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, ha(ht(e, "float32"), -1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QT = {
  kernelName: ci,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = ee(ht(e, "float32")), o = Ye(wt($t(1), s));
        return fe(St(n, o));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JT = {
  kernelName: ui,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ye(wt(ee(ht(e, "float32")), 1));
        return St(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qT = {
  kernelName: yr,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = ve(e.shape, o);
      return l.length > 0 && (a = yt(a, l)), P(a, e.shape);
    }, b: () => {
      let a = n;
      const l = ve(s.shape, o);
      return l.length > 0 && (a = yt(a, l)), P(a, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tN = {
  kernelName: jh,
  saveAllInputs: !0,
  gradFunc: (n, t) => {
    const e = {};
    return t.forEach((s, o) => {
      e[o] = () => n.clone();
    }), e;
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eN = {
  kernelName: Pl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Pt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nN = {
  kernelName: Xl,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => Pt(e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sN = {
  kernelName: hi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, Ye(wt($t(1), ee(ht(e, "float32"))))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oN = {
  kernelName: di,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Ye(ot($t(1), ee(ht(e, "float32"))));
        return St(n, s);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rN = {
  kernelName: mi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      const a = ot(ee(e), ee(s));
      let l = D(n, St(s, a));
      const c = ve(e.shape, o);
      return c.length > 0 && (l = yt(l, c)), P(l, e.shape);
    }, b: () => {
      const a = ot(ee(e), ee(s));
      let l = fe(D(n, St(e, a)));
      const c = ve(s.shape, o);
      return c.length > 0 && (l = yt(l, c)), P(l, s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iN = {
  kernelName: pi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ot(ee(ht(e, "float32")), 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aN = {
  kernelName: fi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, wt($t(1), ee(ht(e, "float32")))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lN(n, t, e, s, o, r) {
  const i = N(n, "dy", "avgPool3dGrad"), a = N(t, "input", "avgPool3dGrad");
  let l = i, c = a, u = !1;
  a.rank === 4 && (u = !0, l = P(i, [1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]]), c = P(a, [
    1,
    a.shape[0],
    a.shape[1],
    a.shape[2],
    a.shape[3]
  ])), S(l.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`), S(c.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`), an("avgPool3dGrad", o, r);
  const h = { dy: l, input: c }, d = { filterSize: e, strides: s, pad: o, dimRoundingMode: r }, p = W.runKernel(td, h, d);
  return u ? P(p, [p.shape[1], p.shape[2], p.shape[3], p.shape[4]]) : p;
}
const cN = V({ avgPool3dGrad_: lN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uN = {
  kernelName: Al,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: o, strides: r, pad: i, dimRoundingMode: a } = e;
    return {
      x: () => cN(n, s, o, r, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hN(n, t, e, s, o) {
  const r = N(n, "dy", "avgPoolGrad"), i = N(t, "input", "avgPoolGrad");
  S(i.rank === r.rank, () => `Rank of input (${i.rank}) does not match rank of dy (${r.rank})`);
  let a = i, l = r, c = !1;
  i.rank === 3 && (c = !0, a = P(i, [1, i.shape[0], i.shape[1], i.shape[2]]), l = P(r, [1, r.shape[0], r.shape[1], r.shape[2]])), S(l.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`), S(a.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ${a.rank}.`);
  const u = { dy: l, input: a }, h = { filterSize: e, strides: s, pad: o }, d = W.runKernel(qh, u, h);
  return c ? P(d, [d.shape[1], d.shape[2], d.shape[3]]) : d;
}
const dN = V({ avgPoolGrad_: hN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pN = {
  kernelName: Ol,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { filterSize: o, strides: r, pad: i } = e;
    return { x: () => dN(n, s, o, r, i) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fN = {
  kernelName: Zl,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { transposeA: r, transposeB: i } = e;
    return !r && !i ? {
      a: () => Kt(n, o, !1, !0),
      b: () => Kt(s, n, !0, !1)
    } : !r && i ? {
      a: () => Kt(n, o, !1, !1),
      b: () => Kt(n, s, !0, !1)
    } : r && !i ? {
      a: () => Kt(o, n, !1, !0),
      b: () => Kt(s, n, !1, !1)
    } : {
      a: () => Kt(o, n, !0, !0),
      b: () => Kt(n, s, !0, !0)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mN = {
  kernelName: Kl,
  gradFunc: (n, t, e) => {
    const { blockShape: s, crops: o } = e;
    return { x: () => gp(n, s, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gN = {
  kernelName: Fw,
  gradFunc: (n, t, e) => {
    const s = e, o = s.inputShape, r = s.shape, i = Array.from(r);
    for (let l = o.length - 1; l >= 0; l--)
      if (o[l] === r[l])
        i[l] = 1;
      else if (o[l] !== 1)
        throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${r}].`);
    const a = [];
    for (let l = 0; l < i.length; l++)
      i[l] > 1 && a.push(l);
    return { x: () => yt(
      n,
      a,
      !0
      /* keepDims */
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bN = {
  kernelName: gi,
  gradFunc: (n) => ({ x: () => n.clone() })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xN = {
  kernelName: bi,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yN = {
  kernelName: xi,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { clipValueMin: o, clipValueMax: r } = e;
    return {
      x: () => sn(bs(Cr(s, o), vr(s, r)), n, Pt(n))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wN = {
  kernelName: Bl,
  inputsToSave: ["x"],
  gradFunc: W0.gradFunc
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IN = {
  kernelName: Hl,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const s = t.map((l) => l.shape), { axis: o } = e, r = Dt(o, t[0].shape)[0], i = s.map((l) => l[r]);
    return Sn(n, i, r).map((l) => () => l);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CN = {
  kernelName: _l,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { dilations: r, strides: i, pad: a, dataFormat: l } = e;
    return S($o(r), () => `Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`), {
      x: () => rp(s.shape, n, o, i, a, l),
      filter: () => Sp(s, n, o.shape, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vN = {
  kernelName: Ul,
  inputsToSave: ["dy", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { strides: r, pad: i, dataFormat: a, dimRoundingMode: l } = e;
    return {
      dy: () => Ro(n, o, r, i, a, 1, l),
      filter: () => Sp(n, s, o.shape, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SN(n, t, e, s, o) {
  let r = n;
  n.rank === 4 && (r = P(n, [1, n.shape[0], n.shape[1], n.shape[2], n.shape[3]]));
  let i = t;
  i.rank === 4 && (i = P(t, [1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]])), S(r.rank === 5, () => `Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`), S(i.rank === 5, () => `Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`), S(e.length === 5, () => `Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`), S(r.shape[4] === e[3], () => `Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${e[3]}.`), S(i.shape[4] === e[4], () => `Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`);
  const a = { x: r, dy: i }, l = { strides: s, pad: o, filterShape: e };
  return W.runKernel(od, a, l);
}
const kN = V({ conv3DBackpropFilter_: SN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const TN = {
  kernelName: Yl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: o, pad: r } = e;
    S($o(s), () => `Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    const [i, a] = t;
    return {
      x: () => Qb(i.shape, n, a, o, r),
      filter: () => kN(i, n, a.shape, o, r)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NN = {
  kernelName: yi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(fe(d0(ht(e, "float32"))), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $N = {
  kernelName: wi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(p0(ht(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RN = {
  kernelName: jl,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o, exclusive: r, reverse: i } = e;
    return {
      x: () => {
        const a = me([o], s.rank);
        let l = qb(n, o, r, !i);
        return a != null && (l = zt(l, a)), l;
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GN = {
  kernelName: Ql,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const { dilations: s, strides: o, pad: r, dimRoundingMode: i } = e, a = s ?? [1, 1];
    S($o(a), () => `Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);
    const [l, c] = t;
    return S(l.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`), S(c.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`), S(l.shape[3] === c.shape[2], () => `Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`), S(Ke(o, a), () => `Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${o} and dilations '${a}'.`), an("depthwiseConv2d", r, i), {
      x: () => yk(l.shape, n, c, o, r, a, i),
      filter: () => bk(l, n, c.shape, o, r, a, i)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LN = {
  kernelName: Jl,
  inputsToSave: ["x", "filter"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, r = { x: s, filter: o, dy: n }, i = { x: s, filter: o, dy: n };
    return {
      x: () => W.runKernel(ju, r, e),
      filter: () => W.runKernel(Qu, i, e)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EN = {
  kernelName: Ci,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t, s = { dy: n, y: e };
    return { x: () => W.runKernel(hd, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WN = {
  kernelName: vi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = D(Bn(fe(ee(e))), 2 / Math.sqrt(Math.PI));
    return { x: () => D(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MN = {
  kernelName: Si,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, e) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DN = {
  kernelName: tc,
  inputsToSave: ["input"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { input: () => P(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FN = {
  kernelName: ki,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, Bn(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zN = {
  kernelName: Ti,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const VN = {
  kernelName: Ni,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      const a = St(n, ht(s, "float32")), l = ve(e.shape, o);
      return l.length > 0 ? P(yt(a, l), e.shape) : a;
    }, b: () => {
      let a = D(n, ht(e, "float32"));
      const l = ve(s.shape, o);
      l.length > 0 && (a = P(yt(a, l), s.shape));
      const c = ee(s);
      return fe(St(a, ht(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PN = {
  kernelName: ec,
  inputsToSave: ["x", "mean", "variance", "scale"],
  gradFunc: (n, t, e) => {
    const { varianceEpsilon: s } = e, [o, r, i, a] = t, l = a ?? $t(1), c = ve(r.shape, o.shape), u = [];
    if (r.rank === 1) {
      for (let y = 0; y < o.shape.length - 1; ++y)
        u.push(o.shape[y]);
      u.push(1);
    }
    const h = wt(o, r), d = D(n, l), p = c0(ot(i, $t(s))), f = D(D(D(p, p), p), $t(-0.5));
    return {
      x: () => r.rank === 1 ? P(D(D(n, es(P(p, [1, 1, 1, r.shape[0]]), u)), l), o.shape) : P(D(D(n, p), l), o.shape),
      mean: () => {
        let y = D(D(p, $t(-1)), d);
        return r.rank === 1 && (y = yt(y, c)), P(y, r.shape);
      },
      variance: () => {
        let y = D(D(f, h), d);
        return r.rank === 1 && (y = yt(y, c)), P(y, r.shape);
      },
      scale: () => {
        const y = D(h, p);
        let I = D(n, y);
        return r.rank === 1 && (I = yt(I, c)), P(I, r.shape);
      },
      offset: () => {
        let y = n;
        return r.rank === 1 && (y = yt(y, c)), P(y, r.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XN = {
  kernelName: nc,
  inputsToSave: ["x", "indices"],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { axis: r } = e, i = Dt(r, s.shape)[0];
    return { x: () => {
      const l = s.shape, c = o.size, u = l.slice(0, i), h = u.length, d = l.slice(r, l.length).slice(1), p = d.length, f = Nm(0, h), g = Nm(h + 1, h + 1 + p), m = $m([u, [c], d]), b = P(n, m), x = P(o, [c]), w = $m([[h], f, g]), y = zt(b, w);
      let I = x0(y, x, s.shape[i]);
      const v = qs(w);
      return I = zt(I, v), I;
    }, indices: () => o };
  }
};
function Nm(n, t) {
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
function $m(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e)
    for (let s = 0; s < n[e].length; ++s)
      t.push(n[e][s]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ON = {
  kernelName: $i,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => Pt(e), b: () => Pt(s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AN = {
  kernelName: Ri,
  gradFunc: (n) => ({ x: () => ht(n, "float32") })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZN = {
  kernelName: Gi,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KN = {
  kernelName: Li,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BN = {
  kernelName: Ei,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HN = {
  kernelName: oc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { alpha: o } = e, r = Tn(s, 0);
    return { x: () => sn(r, n, D(n, o)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _N = {
  kernelName: Mi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ot(e, 1)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UN = {
  kernelName: Wi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ht(e, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YN = {
  kernelName: zw,
  inputsToSave: [],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e;
    return {
      logits: () => {
        const i = Bn(s);
        return wt(n, D(yt(n, o, !0), i));
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jN(n, t, e, s = 5, o = 1, r = 1, i = 0.5) {
  const a = { x: n, y: t, dy: e }, l = { depthRadius: s, bias: o, alpha: r, beta: i };
  return W.runKernel(bd, a, l);
}
const QN = V({ localResponseNormalizationBackprop_: jN });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JN = {
  kernelName: uc,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { depthRadius: r, bias: i, alpha: a, beta: l } = e;
    return {
      x: () => QN(s, o, n, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function M0(n, t, e, s) {
  return t.rank < e.rank && (t = P(t, we(t.shape, s))), n.rank < e.rank && (n = P(n, we(n.shape, s))), {
    x: () => D(n, ht(Kn(e, t), n.dtype))
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rm = {
  kernelName: hc,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { reductionIndices: o } = s, r = t[0], i = t[1], a = Dt(o, r.shape), l = M0(n, i, r, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qN = {
  kernelName: Di,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => D(n, ht(Cr(e, s), "float32")), b: () => D(n, ht(s0(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t$(n, t, e, s, o, r, i) {
  const a = N(n, "dy", "maxPool3dGrad"), l = N(t, "input", "maxPool3dGrad"), c = N(e, "output", "maxPool3dGrad");
  let u = a, h = l, d = c, p = !1;
  l.rank === 4 && (p = !0, u = P(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]]), h = P(l, [
    1,
    l.shape[0],
    l.shape[1],
    l.shape[2],
    l.shape[3]
  ]), d = P(c, [
    1,
    c.shape[0],
    c.shape[1],
    c.shape[2],
    c.shape[3]
  ])), S(u.rank === 5, () => `Error in maxPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`), S(h.rank === 5, () => `Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`), S(d.rank === 5, () => `Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`), an("maxPool3dGrad", r, i);
  const f = { dy: u, input: h, output: d }, g = { filterSize: s, strides: o, pad: r, dimRoundingMode: i }, m = W.runKernel(yd, f, g);
  return p ? P(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
const e$ = V({ maxPool3dGrad_: t$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const n$ = {
  kernelName: pc,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = e;
    return {
      x: () => e$(n, s, o, r, i, a, l)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s$(n, t, e, s, o, r, i) {
  const a = N(n, "dy", "maxPoolGrad"), l = N(t, "input", "maxPoolGrad"), c = N(e, "output", "maxPoolGrad");
  S(l.rank === a.rank, () => `Rank of input (${l.rank}) does not match rank of dy (${a.rank})`), S(a.rank === 4, () => `Error in maxPoolGrad: dy must be rank 4 but got rank ${a.rank}.`), S(l.rank === 4, () => `Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`), an("maxPoolGrad", r, i);
  const u = { dy: a, input: l, output: c }, h = { filterSize: s, strides: o, pad: r, dimRoundingMode: i };
  return W.runKernel(xd, u, h);
}
const o$ = V({ maxPoolGrad_: s$ });
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const r$ = {
  kernelName: dc,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s, o] = t, { filterSize: r, strides: i, pad: a } = e;
    return {
      x: () => o$(n, s, o, r, i, a)
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i$ = {
  kernelName: fc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e, r = Dt(o, s.shape), a = Ge(s.shape, r)[1], l = H(a);
    return { x: () => {
      const u = s.shape.slice();
      r.forEach((p) => {
        u[p] = 1;
      });
      const h = P(n, u);
      return St(D(h, eo(s.shape, "float32")), l);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a$ = {
  kernelName: mc,
  inputsToSave: ["x"],
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const s = e, { axis: o } = s, [r, i] = t, a = Dt(o, r.shape), l = M0(n, i, r, a);
    return {
      x: () => l.x()
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l$ = {
  kernelName: Fi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t;
    return { a: () => D(n, ht(vr(e, s), "float32")), b: () => D(n, ht(Tn(e, s), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const c$ = {
  kernelName: gc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: o } = e, r = o.map((i) => i[0]);
    return { x: () => Qt(n, r, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u$ = {
  kernelName: zi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      const a = ve(e.shape, o);
      return a.length > 0 ? P(yt(n, a), e.shape) : n;
    }, b: () => {
      const a = D(n, fe(Hc(St(e, s)))), l = ve(s.shape, o);
      return l.length > 0 ? P(yt(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const h$ = {
  kernelName: Vi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      const a = D(n, ht(s, "float32")), l = ve(e.shape, o);
      return l.length > 0 ? P(yt(a, l), e.shape) : a;
    }, b: () => {
      const a = D(n, ht(e, "float32")), l = ve(s.shape, o);
      return l.length > 0 ? P(yt(a, l), s.shape) : a;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const d$ = {
  kernelName: bc,
  gradFunc: (n) => ({ x: () => fe(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const p$ = {
  kernelName: wc,
  inputsToSave: ["indices"],
  gradFunc: (n, t) => {
    const e = t[0];
    return { indices: () => Me(e.shape, "float32") };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f$ = {
  kernelName: yc,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const m$ = {
  kernelName: Ic,
  saveAllInputs: !0,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return lr(n, s).map((r) => () => r);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Gm = {
  kernelName: Cc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const s = t[0], { paddings: o } = e, r = o.map((i) => i[0]);
    return { x: () => Qt(n, r, s.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g$ = {
  kernelName: Pi,
  inputsToSave: ["a", "b"],
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e, s, o] = t, r = e, i = s, a = Rt(r.shape, i.shape);
    return { a: () => {
      const u = ht(i, "float32");
      let h = D(n, D(u, ar(r, wt(u, $t(1)))));
      const d = ve(r.shape, a);
      return d.length > 0 && (h = yt(h, d)), P(h, r.shape);
    }, b: () => {
      const u = Tn(r, 0), h = sn(u, Hn(r), Pt(r));
      let d = D(n, D(o, h));
      const p = ve(i.shape, a);
      return p.length > 0 && (d = yt(d, p)), P(d, i.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const b$ = {
  kernelName: vc,
  inputsToSave: ["x", "alpha"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Tn(e, 0);
    return {
      x: () => sn(o, n, D(n, s)),
      alpha: () => {
        let r = sn(o, Pt(n), D(n, e));
        const i = ve(s.shape, n.shape);
        return i.length > 0 && (r = yt(r, i)), P(r, s.shape);
      }
    };
  }
};
/**
 * @license
 * Copyright 2022 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x$(n, t, e) {
  const s = n.shape.slice();
  s[e] = 1;
  const o = P(t, s), r = gh(n, e, !0, !1), i = gh(n, e, !0, !0), a = D(r, i);
  return D(o, a);
}
function y$(n, t, e) {
  const s = n.shape.length, o = s - e.length, r = me(e, s);
  let i = n;
  r != null && (i = zt(n, r));
  const a = i.shape.slice(), c = a.splice(s - e.length, e.length).reduce((d, p) => d * p, 1);
  a.push(c);
  const u = i.reshape(a);
  let h = x$(u, t, o);
  if (h = h.reshape(i.shape), r != null) {
    const d = qs(r);
    h = zt(h, d);
  }
  return h;
}
const w$ = {
  kernelName: Sc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { axis: o } = e;
    let r = [];
    return o == null ? r = s.shape.map((i, a) => a) : typeof o == "number" ? r = [o] : r = o, { x: () => y$(s, n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const I$ = {
  kernelName: Ii,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      const a = St(n, ht(s, "float32")), l = ve(e.shape, o);
      return l.length > 0 ? P(yt(a, l), e.shape) : a;
    }, b: () => {
      let a = D(n, ht(e, "float32"));
      const l = ve(s.shape, o);
      l.length > 0 && (a = P(yt(a, l), s.shape));
      const c = ee(s);
      return fe(St(a, ht(c, "float32")));
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const C$ = {
  kernelName: Xi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, fe(ee(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v$ = {
  kernelName: Ai,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t, s = D(vr(e, 6), ha(e));
    return { x: () => D(n, ht(s, "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const S$ = {
  kernelName: Oi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, ht(ha(e), "float32")) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k$ = {
  kernelName: kc,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => P(n, e.shape) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const T$ = {
  kernelName: Nc,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      W.runKernel(Td, o, e)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const N$ = {
  kernelName: Tc,
  inputsToSave: ["images"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = { dy: n, images: s };
    return { images: () => (
      // tslint:disable-next-line: no-unnecessary-type-assertion
      W.runKernel(kd, o, e)
    ) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $$ = {
  kernelName: $c,
  gradFunc: (n, t, e) => {
    const { dims: s } = e, o = Dt(s, n.shape);
    return { x: () => Lo(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const R$ = {
  kernelName: Zi,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G$ = {
  kernelName: Ki,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => fe(St(n, D(ar(e, 1.5), 2))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const L$ = {
  kernelName: Rc,
  inputsToSave: ["condition"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      // TODO(julianoks): Return null for condition gradient
      // when backprop supports it.
      condition: () => ht(Pt(e), "float32"),
      t: () => D(n, ht(e, n.dtype)),
      e: () => D(n, ht(dp(e), n.dtype))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E$ = {
  kernelName: Bi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return {
      x: () => {
        const s = Tn(e, $t(0)), o = $t(qc), r = $t(tu), i = D(n, r), a = D(D(n, o), Bn(ht(e, "float32")));
        return sn(s, i, a);
      }
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const W$ = {
  kernelName: Yi,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, D(e, wt($t(1), e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M$ = {
  kernelName: Ui,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D$ = {
  kernelName: Hi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(ip(ht(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F$ = {
  kernelName: _i,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(Jb(ht(e, "float32")), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z$ = {
  kernelName: Gc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { begin: o, size: r } = e, i = s.shape, [a, l] = Ac(s, o, r), c = [];
    for (let u = 0; u < n.rank; u++)
      c.push([a[u], i[u] - a[u] - l[u]]);
    return { x: () => mp(n, c) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V$ = {
  kernelName: Mc,
  outputsToSave: [!0],
  gradFunc: (n, t, e) => {
    const [s] = t, { dim: o } = e, r = !0, i = D(n, s);
    return {
      logits: () => wt(i, D(yt(i, [o], r), s))
    };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P$ = {
  kernelName: ji,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, Ir(e)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lm = {
  kernelName: Ec,
  gradFunc: (n, t, e) => {
    const { blockShape: s, paddings: o } = e;
    return { x: () => op(n, s, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Em = {
  kernelName: Wc,
  gradFunc: (n, t, e) => {
    const { axis: s } = e;
    return { x: () => Ze(n, s) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const X$ = {
  kernelName: Qi,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, D(Ye(ht(e, "float32")), 2)) };
  }
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const O$ = {
  kernelName: Ld,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(n, D(ht(e, "float32"), 2)) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A$ = {
  kernelName: Ji,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = $t(2);
    return { a: () => D(n, D(o, wt(e, s))), b: () => D(n, D(o, wt(s, e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Z$ = {
  kernelName: sa,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K$ = {
  kernelName: qi,
  inputsToSave: ["a", "b"],
  gradFunc: (n, t) => {
    const [e, s] = t, o = Rt(e.shape, s.shape);
    return { a: () => {
      let a = n;
      const l = ve(e.shape, o);
      return l.length > 0 && (a = yt(a, l)), P(a, e.shape);
    }, b: () => {
      let a = n;
      const l = ve(s.shape, o);
      return l.length > 0 && (a = yt(a, l)), P(fe(a), s.shape);
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const B$ = {
  kernelName: Lc,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, o = s.shape.slice(), { axis: r } = e;
    Dt(r, s.shape).forEach((c) => {
      o[c] = 1;
    });
    const a = P(n, o), l = D(a, eo(s.shape, "float32"));
    return { x: () => l };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const H$ = {
  kernelName: ta,
  inputsToSave: ["x"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => St(n, ee(ip(e))) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _$ = {
  kernelName: ea,
  outputsToSave: [!0],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => D(wt($t(1), ee(e)), n) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const U$ = {
  kernelName: na,
  inputsToSave: ["x"],
  gradFunc: (n, t, e) => {
    const [s] = t, { reps: o } = e;
    return { x: () => {
      let i = Pt(s);
      if (s.rank === 1)
        for (let a = 0; a < o[0]; ++a)
          i = ot(i, Qt(n, [a * s.shape[0]], [s.shape[0]]));
      else if (s.rank === 2)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            i = ot(i, Qt(n, [a * s.shape[0], l * s.shape[1]], [
              s.shape[0],
              s.shape[1]
            ]));
      else if (s.rank === 3)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            for (let c = 0; c < o[2]; ++c)
              i = ot(i, Qt(n, [a * s.shape[0], l * s.shape[1], c * s.shape[2]], [s.shape[0], s.shape[1], s.shape[2]]));
      else if (s.rank === 4)
        for (let a = 0; a < o[0]; ++a)
          for (let l = 0; l < o[1]; ++l)
            for (let c = 0; c < o[2]; ++c)
              for (let u = 0; u < o[3]; ++u)
                i = ot(i, Qt(n, [
                  a * s.shape[0],
                  l * s.shape[1],
                  c * s.shape[2],
                  u * s.shape[3]
                ], [s.shape[0], s.shape[1], s.shape[2], s.shape[3]]));
      else
        throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);
      return i;
    } };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Y$ = {
  kernelName: Jo,
  gradFunc: (n, t, e) => {
    const s = e, { perm: o } = s, r = qs(o);
    return { x: () => zt(n, r) };
  }
};
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const j$ = {
  kernelName: Dc,
  gradFunc: (n, t, e) => {
    const s = e, { axis: o } = s;
    return { value: () => Ns(n, o) };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Q$ = {
  kernelName: Fc,
  inputsToSave: ["segmentIds"],
  gradFunc: (n, t) => {
    const [e] = t;
    return { x: () => J$(n, e) };
  }
};
function J$(n, t) {
  const e = to(t, Pt(t)), s = cp(n, e);
  let o = Cr(t, $t(0, "int32"));
  const r = s.rank - o.rank;
  for (let a = 0; a < r; ++a)
    o = Mn(o, a + 1);
  o = bs(o, eo(s.shape, "bool"));
  const i = Pt(s);
  return sn(o, s, i);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const q$ = {
  kernelName: zc,
  gradFunc: (n) => ({ x: () => Pt(n) })
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tR = [
  W0,
  QT,
  JT,
  qT,
  tN,
  eN,
  nN,
  sN,
  oN,
  rN,
  iN,
  aN,
  uN,
  pN,
  fN,
  mN,
  gN,
  bN,
  xN,
  yN,
  wN,
  IN,
  vN,
  CN,
  TN,
  NN,
  $N,
  RN,
  GN,
  LN,
  I$,
  EN,
  WN,
  MN,
  DN,
  FN,
  VN,
  zN,
  PN,
  XN,
  ON,
  AN,
  ZN,
  KN,
  BN,
  HN,
  _N,
  UN,
  YN,
  JN,
  Rm,
  Rm,
  qN,
  n$,
  r$,
  i$,
  a$,
  l$,
  c$,
  u$,
  h$,
  d$,
  p$,
  f$,
  m$,
  Gm,
  Gm,
  g$,
  b$,
  w$,
  C$,
  v$,
  S$,
  k$,
  T$,
  N$,
  $$,
  R$,
  G$,
  L$,
  E$,
  W$,
  M$,
  D$,
  F$,
  z$,
  V$,
  P$,
  Lm,
  Lm,
  Em,
  Em,
  X$,
  A$,
  O$,
  Z$,
  K$,
  B$,
  H$,
  _$,
  U$,
  Y$,
  j$,
  Q$,
  q$
];
for (const n of tR)
  Pw(n);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.abs = function() {
  return this.throwIfDisposed(), Ee(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.acos = function() {
  return this.throwIfDisposed(), y2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.acosh = function() {
  return this.throwIfDisposed(), I2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.add = function(n) {
  return this.throwIfDisposed(), ot(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.all = function(n, t) {
  return this.throwIfDisposed(), Ub(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.any = function(n, t) {
  return this.throwIfDisposed(), fh(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.argMax = function(n) {
  return this.throwIfDisposed(), Qr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.argMin = function(n) {
  return this.throwIfDisposed(), T2(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asScalar = function() {
  return this.throwIfDisposed(), S(this.size === 1, () => "The array must have only 1 element."), P(this, []);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asType = function(n) {
  return this.throwIfDisposed(), ht(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as1D = function() {
  return this.throwIfDisposed(), P(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as2D = function(n, t) {
  return this.throwIfDisposed(), P(this, [n, t]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as3D = function(n, t, e) {
  return this.throwIfDisposed(), P(this, [n, t, e]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as4D = function(n, t, e, s) {
  return this.throwIfDisposed(), P(this, [n, t, e, s]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.as5D = function(n, t, e, s, o) {
  return this.throwIfDisposed(), P(this, [n, t, e, s, o]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asin = function() {
  return this.throwIfDisposed(), $2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.asinh = function() {
  return this.throwIfDisposed(), G2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atan = function() {
  return this.throwIfDisposed(), E2(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atan2 = function(n) {
  return this.throwIfDisposed(), M2(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.atanh = function() {
  return this.throwIfDisposed(), F2(this);
};
J().prototype.avgPool = function(n, t, e, s) {
  return this.throwIfDisposed(), np(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.batchToSpaceND = function(n, t) {
  return this.throwIfDisposed(), op(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.batchNorm = function(n, t, e, s, o) {
  return this.throwIfDisposed(), Zc(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.broadcastTo = function(n) {
  return this.throwIfDisposed(), er(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cast = function(n) {
  return this.throwIfDisposed(), ht(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.ceil = function() {
  return this.throwIfDisposed(), lC(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.clipByValue = function(n, t) {
  return this.throwIfDisposed(), kn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.concat = function(n, t) {
  return this.throwIfDisposed(), n instanceof _t && (n = [n]), Ze([this, ...n], t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv1d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), Yb(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv2dTranspose = function(n, t, e, s, o) {
  return this.throwIfDisposed(), jb(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.conv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), Ro(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cos = function() {
  return this.throwIfDisposed(), ip(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cosh = function() {
  return this.throwIfDisposed(), Jb(this);
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cumprod = function(n, t, e) {
  return this.throwIfDisposed(), gh(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.cumsum = function(n, t, e) {
  return this.throwIfDisposed(), qb(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.depthToSpace = function(n, t) {
  return this.throwIfDisposed(), EC(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.depthwiseConv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), ap(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.dilation2d = function(n, t, e, s, o) {
  return this.throwIfDisposed(), DC(this, n, t, e, s, o);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.divNoNan = function(n) {
  return this.throwIfDisposed(), XC(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.div = function(n) {
  return this.throwIfDisposed(), St(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.dot = function(n) {
  return this.throwIfDisposed(), AC(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.elu = function() {
  return this.throwIfDisposed(), Kc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.equal = function(n) {
  return this.throwIfDisposed(), Kn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.erf = function() {
  return this.throwIfDisposed(), BC(this);
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.euclideanNorm = function(n, t) {
  return this.throwIfDisposed(), tv(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.exp = function() {
  return this.throwIfDisposed(), Bn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.expandDims = function(n) {
  return this.throwIfDisposed(), Mn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.expm1 = function() {
  return this.throwIfDisposed(), ov(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.fft = function() {
  return this.throwIfDisposed(), Cp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.flatten = function() {
  return this.throwIfDisposed(), P(this, [this.size]);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.floor = function() {
  return this.throwIfDisposed(), Hc(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.floorDiv = function(n) {
  return this.throwIfDisposed(), _b(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.gather = function(n, t) {
  return this.throwIfDisposed(), cp(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.greaterEqual = function(n) {
  return this.throwIfDisposed(), Cr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.greater = function(n) {
  return this.throwIfDisposed(), Tn(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.ifft = function() {
  return this.throwIfDisposed(), pl(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.irfft = function() {
  return this.throwIfDisposed(), m0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isFinite = function() {
  return this.throwIfDisposed(), dv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isInf = function() {
  return this.throwIfDisposed(), fv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.isNaN = function() {
  return this.throwIfDisposed(), gv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.leakyRelu = function(n) {
  return this.throwIfDisposed(), up(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.lessEqual = function(n) {
  return this.throwIfDisposed(), vr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.less = function(n) {
  return this.throwIfDisposed(), s0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.localResponseNormalization = function(n, t, e, s) {
  return this.throwIfDisposed(), Iv(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSigmoid = function() {
  return this.throwIfDisposed(), Nv(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSoftmax = function(n) {
  return this.throwIfDisposed(), o0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logSumExp = function(n, t) {
  return this.throwIfDisposed(), r0(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.log = function() {
  return this.throwIfDisposed(), Hn(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.log1p = function() {
  return this.throwIfDisposed(), hp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalAnd = function(n) {
  return this.throwIfDisposed(), bs(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalNot = function() {
  return this.throwIfDisposed(), dp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalOr = function(n) {
  return this.throwIfDisposed(), i0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.logicalXor = function(n) {
  return this.throwIfDisposed(), Dv(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.matMul = function(n, t, e) {
  return this.throwIfDisposed(), Kt(this, n, t, e);
};
J().prototype.maxPool = function(n, t, e, s) {
  return this.throwIfDisposed(), pp(this, n, t, e, s);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.max = function(n, t) {
  return this.throwIfDisposed(), fs(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.maximum = function(n) {
  return this.throwIfDisposed(), to(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mean = function(n, t) {
  return this.throwIfDisposed(), ye(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.min = function(n, t) {
  return this.throwIfDisposed(), bh(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.minimum = function(n) {
  return this.throwIfDisposed(), Uc(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mirrorPad = function(n, t) {
  return this.throwIfDisposed(), Zv(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mod = function(n) {
  return this.throwIfDisposed(), Bv(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.mul = function(n) {
  return this.throwIfDisposed(), D(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.neg = function() {
  return this.throwIfDisposed(), fe(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.norm = function(n, t, e) {
  return this.throwIfDisposed(), Bc(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.notEqual = function(n) {
  return this.throwIfDisposed(), Jr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.oneHot = function(n, t = 1, e = 0) {
  return this.throwIfDisposed(), Mb(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.onesLike = function() {
  return this.throwIfDisposed(), _n(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.pad = function(n, t) {
  return this.throwIfDisposed(), mp(this, n, t);
};
J().prototype.pool = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), tS(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.pow = function(n) {
  return this.throwIfDisposed(), ar(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.prelu = function(n) {
  return this.throwIfDisposed(), bp(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.prod = function(n, t) {
  return this.throwIfDisposed(), sS(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reciprocal = function() {
  return this.throwIfDisposed(), kS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.relu = function() {
  return this.throwIfDisposed(), Ms(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.relu6 = function() {
  return this.throwIfDisposed(), a0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reshapeAs = function(n) {
  return this.throwIfDisposed(), P(this, n.shape);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reshape = function(n) {
  return this.throwIfDisposed(), P(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.resizeBilinear = function(n, t, e) {
  return this.throwIfDisposed(), v0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.resizeNearestNeighbor = function(n, t, e) {
  return this.throwIfDisposed(), S0(this, n, t, e);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.reverse = function(n) {
  return this.throwIfDisposed(), Lo(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.rfft = function() {
  return this.throwIfDisposed(), vp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.round = function() {
  return this.throwIfDisposed(), l0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.rsqrt = function() {
  return this.throwIfDisposed(), c0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.selu = function() {
  return this.throwIfDisposed(), u0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.separableConv2d = function(n, t, e, s, o, r) {
  return this.throwIfDisposed(), h0(this, n, t, e, s, o, r);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sigmoid = function() {
  return this.throwIfDisposed(), Ir(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sign = function() {
  return this.throwIfDisposed(), MS(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sin = function() {
  return this.throwIfDisposed(), d0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sinh = function() {
  return this.throwIfDisposed(), p0(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.slice = function(n, t) {
  return this.throwIfDisposed(), Qt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.softmax = function(n) {
  return this.throwIfDisposed(), Ip(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.softplus = function() {
  return this.throwIfDisposed(), ca(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.spaceToBatchND = function(n, t) {
  return this.throwIfDisposed(), gp(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.split = function(n, t) {
  return this.throwIfDisposed(), Sn(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sqrt = function() {
  return this.throwIfDisposed(), Ye(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.square = function() {
  return this.throwIfDisposed(), ee(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.squaredDifference = function(n) {
  return this.throwIfDisposed(), g0(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.squeeze = function(n) {
  return this.throwIfDisposed(), ua(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.stack = function(n, t) {
  this.throwIfDisposed();
  const e = n instanceof _t ? [this, n] : [this, ...n];
  return Ns(e, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.step = function(n) {
  return this.throwIfDisposed(), ha(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.stridedSlice = function(n, t, e, s, o, r, i, a) {
  return this.throwIfDisposed(), JS(this, n, t, e, s, o, r, i, a);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sub = function(n) {
  return this.throwIfDisposed(), wt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.sum = function(n, t) {
  return this.throwIfDisposed(), yt(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tan = function() {
  return this.throwIfDisposed(), tk(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tanh = function() {
  return this.throwIfDisposed(), sp(this);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.tile = function(n) {
  return this.throwIfDisposed(), es(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toBool = function() {
  return this.throwIfDisposed(), ht(this, "bool");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toFloat = function() {
  return this.throwIfDisposed(), ht(this, "float32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.toInt = function() {
  return this.throwIfDisposed(), ht(this, "int32");
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.topk = function(n, t) {
  return this.throwIfDisposed(), nk(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.transpose = function(n) {
  return this.throwIfDisposed(), zt(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unique = function(n) {
  return this.throwIfDisposed(), rk(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unsortedSegmentSum = function(n, t) {
  return this.throwIfDisposed(), x0(this, n, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.unstack = function(n) {
  return this.throwIfDisposed(), lr(this, n);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.where = function(n, t) {
  return this.throwIfDisposed(), sn(n, this, t);
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
J().prototype.zerosLike = function() {
  return this.throwIfDisposed(), Pt(this);
};
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class us extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, us.prototype);
  }
}
class Pn extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Pn.prototype);
  }
}
class F extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, F.prototype);
  }
}
class Wt extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, Wt.prototype);
  }
}
class If extends Error {
  constructor(t) {
    super(t), Object.setPrototypeOf(this, If.prototype);
  }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class D0 {
  constructor(t) {
    this.maxEntries = t || 100, this.cache = /* @__PURE__ */ new Map();
  }
  /**
   * Get the entry for the key and mark it as used recently.
   */
  get(t) {
    let e;
    return this.cache.has(t) && (e = this.cache.get(t), this.cache.delete(t), this.cache.set(t, e)), e;
  }
  /**
   * Put the entry into the cache. If the key already existed, mark the key as
   * used recently.
   */
  put(t, e) {
    if (this.cache.has(t))
      this.cache.delete(t);
    else if (this.cache.size >= this.maxEntries) {
      const s = this.cache.keys().next().value;
      this.cache.delete(s);
    }
    this.cache.set(t, e);
  }
  /**
   * Get the MaxEntries of the cache.
   */
  getMaxEntries() {
    return this.maxEntries;
  }
  /**
   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce
   * entries in the cache.
   */
  setMaxEntries(t) {
    if (t < 0)
      throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);
    if (this.maxEntries > t)
      for (let e = 0; e < this.maxEntries - t; e++) {
        const s = this.cache.keys().next().value;
        this.cache.delete(s);
      }
    this.maxEntries = t;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Eo(n, t) {
  if (Array.isArray(n)) {
    let e = [];
    for (let s = 0; s < t; s++)
      e = e.concat(n);
    return e;
  } else {
    const e = new Array(t);
    return e.fill(n), e;
  }
}
function hs(n, t) {
  if (!n)
    throw new If(t);
}
function Wm(n, t) {
  let e = 0;
  for (const s of n)
    s === t && e++;
  return e;
}
function tn(n) {
  return n.length === 1 ? n[0] : n;
}
function oe(n) {
  return Array.isArray(n) ? n : [n];
}
function Is(n) {
  const e = n.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
  return e[0] !== "_" ? e : "private" + e;
}
function po(n) {
  return n.length <= 1 || n.indexOf("_") === -1 ? n : n.replace(/[_]+(\w|$)/g, (t, e) => e.toUpperCase());
}
let Rn = {};
function Cf(n) {
  if (n == null)
    return null;
  const t = {};
  return t.className = n.getClassName(), t.config = n.getConfig(), t;
}
function kh(n) {
  if (!(n == null || typeof n != "object"))
    if (Array.isArray(n))
      n.forEach((t) => kh(t));
    else {
      const t = Object.keys(n);
      for (const e of t) {
        const s = n[e];
        s != null && typeof s == "object" && (!Array.isArray(s) && s.type === "ndarray" && typeof s.value == "number" ? n[e] = s.value : kh(s));
      }
    }
}
function ma(n, t = {}, e = {}, s = "object", o = !1) {
  if (typeof n == "string") {
    const r = n;
    let i;
    if (r in e)
      i = e[r];
    else if (r in Rn)
      i = Rn[r];
    else if (i = t[r], i == null)
      throw new F(`Unknown ${s}: ${n}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    return i;
  } else {
    const r = n;
    if (r.className == null || r.config == null)
      throw new F(`${s}: Improper config format: ${JSON.stringify(r)}.
'className' and 'config' must set.`);
    const i = r.className;
    let a, l;
    if (i in e ? [a, l] = e[i] : i in Rn ? [a, l] = Rn.className : i in t && ([a, l] = t[i]), a == null)
      throw new F(`Unknown ${s}: ${i}. This may be due to one of the following reasons:
1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);
    if (l != null) {
      const c = {};
      for (const p of Object.keys(Rn))
        c[p] = Rn[p];
      for (const p of Object.keys(e))
        c[p] = e[p];
      const u = r.config;
      u.customObjects = c;
      const h = Object.assign({}, Rn);
      for (const p of Object.keys(e))
        Rn[p] = e[p];
      kh(r.config);
      const d = l(a, r.config, e, o);
      return Rn = Object.assign({}, h), d;
    } else {
      const c = Object.assign({}, Rn);
      for (const h of Object.keys(e))
        Rn[h] = e[h];
      const u = new a(r.config);
      return Rn = Object.assign({}, c), u;
    }
  }
}
function eR(n, t) {
  return n < t ? -1 : n > t ? 1 : 0;
}
function Da(n, t) {
  return -1 * eR(n, t);
}
function As(n) {
  if (n == null)
    return n;
  const t = [];
  for (const e of n)
    t.indexOf(e) === -1 && t.push(e);
  return t;
}
function nR(n) {
  if (n == null)
    throw new F(`Invalid value in obj: ${JSON.stringify(n)}`);
  for (const t in n)
    if (n.hasOwnProperty(t))
      return !1;
  return !0;
}
function Po(n, t, e) {
  if (e != null && n.indexOf(e) < 0)
    throw new F(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`);
}
function vf(n, t, e = 0, s = 1 / 0) {
  return hs(e >= 0), hs(s >= e), Array.isArray(n) && n.length >= e && n.length <= s && n.every((o) => typeof o === t);
}
function De(n, t) {
  Array.isArray(n) ? (S(n.length > 0, () => `${t} is unexpectedly an empty array.`), n.forEach((e, s) => De(e, `element ${s + 1} of ${t}`))) : S(Number.isInteger(n) && n > 0, () => `Expected ${t} to be a positive integer, but got ${F0(n)}.`);
}
function F0(n) {
  return n === null ? "null" : Array.isArray(n) ? "[" + n.map((t) => F0(t)).join(",") + "]" : typeof n == "string" ? `"${n}"` : `${n}`;
}
function sR(n, t, e) {
  let s = e != null ? e() : Ve(), o;
  return (...i) => {
    const a = e != null ? e() : Ve();
    return a - s < t || (s = a, o = n(...i)), o;
  };
}
function z0(n) {
  return n === "relu" ? "relu" : n === "linear" ? "linear" : n === "elu" ? "elu" : null;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let oR = 0;
function V0() {
  return oR++;
}
const Fa = {};
function eu(n = "") {
  return n in Fa || (Fa[n] = 0), Fa[n] += 1, n + Fa[n].toString();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const rR = ["channelsFirst", "channelsLast"], iR = ["nearest", "bilinear"], aR = ["valid", "same", "causal"], lR = ["max", "avg"], cR = ["sum", "mul", "concat", "ave"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Bo = /* @__PURE__ */ new Map();
function Ce(n) {
  Po(rR, "DataFormat", n);
}
function uR(n) {
  Po(iR, "InterpolationFormat", n);
}
function Nn(n) {
  Po(aR, "PaddingMode", n);
}
function P0(n) {
  Po(lR, "PoolMode", n);
}
const Yr = [], Mm = "/";
function Io(n, t) {
  Yr.push(n);
  try {
    const e = t();
    return Yr.pop(), e;
  } catch (e) {
    throw Yr.pop(), e;
  }
}
function hR() {
  return Yr.length === 0 ? "" : Yr.join(Mm) + Mm;
}
function X0(n) {
  if (!A0(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  return hR() + n;
}
function O0(n) {
  if (!A0(n))
    throw new Error("Not a valid tensor name: '" + n + "'");
  Bo.has(n) || Bo.set(n, 0);
  const t = Bo.get(n);
  if (Bo.set(n, Bo.get(n) + 1), t > 0) {
    const e = `${n}_${t}`;
    return Bo.set(e, 1), e;
  } else
    return n;
}
const dR = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);
function A0(n) {
  return !!n.match(dR);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function pR(n) {
  return n === parseInt(n.toString(), 10);
}
function Zs(n, t, e) {
  t == null && (t = 0), e == null && (e = n.length);
  let s = 1;
  for (let o = t; o < e; ++o)
    s *= n[o];
  return s;
}
function cr(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.POSITIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s < t && (t = s);
  }
  return t;
}
function Hs(n) {
  if (n.length === 0)
    return Number.NaN;
  let t = Number.NEGATIVE_INFINITY;
  for (let e = 0; e < n.length; e++) {
    const s = n[e];
    s > t && (t = s);
  }
  return t;
}
function os(n, t) {
  if (t < n)
    throw new F(`end (${t}) < begin (${n}) is forbidden.`);
  const e = [];
  for (let s = n; s < t; ++s)
    e.push(s);
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let ku;
function Te() {
  return ku == null && (ku = Vs().epsilon()), ku;
}
function rs() {
  return "channelsLast";
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ga(n, t) {
  return ht(n, t);
}
function ba(n, t = -1) {
  const e = n.shape.slice();
  return t < 0 && (t = e.length + t + 1), e.splice(t, 0, 1), P(n, e);
}
function fR(n, t) {
  return X(() => {
    if (n.shape.length !== 2)
      throw new F(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);
    const e = ba(n, 1);
    return Th(e, [1, t, 1]);
  });
}
function mR(n) {
  const t = [Zs(n.shape)];
  return P(n, t);
}
function gR(n) {
  if (n.rank <= 1)
    throw new F(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);
  const t = [n.shape[0], Zs(n.shape, 1)];
  return P(n, t);
}
function Co(n, t, e) {
  return X(() => {
    switch (n.rank) {
      case 1:
        return yp(n, t, e);
      case 2:
        return f0(n, [t, 0], [e, n.shape[1]]);
      case 3:
        return wp(n, [t, 0, 0], [e, n.shape[1], n.shape[2]]);
      case 4:
        return dl(n, [t, 0, 0, 0], [e, n.shape[1], n.shape[2], n.shape[3]]);
      case 5:
        return Qt(n, [t, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4]
        ]);
      case 6:
        return Qt(n, [t, 0, 0, 0, 0, 0], [
          e,
          n.shape[1],
          n.shape[2],
          n.shape[3],
          n.shape[4],
          n.shape[5]
        ]);
      default:
        throw new F(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Tu(n, t, e) {
  return X(() => {
    switch (n.rank) {
      case 1:
        return yp(n, t, e);
      case 2:
        return f0(n, [0, t], [n.shape[0], e]);
      case 3:
        return wp(n, [0, 0, t], [n.shape[0], n.shape[1], e]);
      case 4:
        return dl(n, [0, 0, 0, t], [n.shape[0], n.shape[1], n.shape[2], e]);
      default:
        throw new F(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function za(n, t, e, s) {
  return X(() => {
    switch (n.rank) {
      case 1:
        return yp(n, t, e);
      case 2:
        switch (s) {
          case 1:
            return Co(n, t, e);
          case 2:
            return Tu(n, t, e);
          default:
            throw new F(`The axis is not within the rank of the tensor ${s}`);
        }
      case 3:
        switch (s) {
          case 1:
            return Co(n, t, e);
          case 2:
            return wp(n, [0, t, 0], [n.shape[0], e, n.shape[2]]);
          case 3:
            return Tu(n, t, e);
          default:
            throw new F(`The axis is not within the rank of the tensor ${s}`);
        }
      case 4:
        switch (s) {
          case 1:
            return Co(n, t, e);
          case 2:
            return dl(n, [0, t, 0, 0], [n.shape[0], e, n.shape[2], n.shape[3]]);
          case 3:
            return dl(n, [0, 0, t, 0], [n.shape[0], n.shape[1], e, n.shape[3]]);
          case 4:
            return Tu(n, t, e);
          default:
            throw new F(`The axis is not within the rank of the tensor ${s}`);
        }
      default:
        throw new F(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`);
    }
  });
}
function Sf(n, t = -1) {
  let e;
  return t < 0 && (e = n[0].rank, e !== 0 ? t = e : t = 0), t === n[0].rank && (t = -1), Ze(n, t);
}
function Dm(n, t) {
  switch (n.rank) {
    case 1:
      return hC([n, t]);
    case 2:
      return pC([n, t], 0);
    case 3:
      return mC([n, t], 0);
    case 4:
      return bC([n, t], 0);
    default:
      throw new F(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`);
  }
}
function Th(n, t) {
  if (Array.isArray(t) || (t = [t]), n.rank !== t.length)
    throw new F(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);
  return es(n, t);
}
function nu(n, t = 0, e = 1, s, o) {
  return CS(n, t, e, s, o);
}
function gs(n, t, e, s) {
  if (n.rank < 2 || t.rank < 2)
    throw new Wt(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);
  if (t.rank >= 3) {
    const o = n.shape.slice(-1)[0], r = t.shape.slice(-2)[0];
    if (o !== r)
      throw new Wt(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);
  }
  if (n.rank === 2 && t.rank === 2)
    return Cm({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Nh(n.rank, s, rs()) : null,
      activation: e
    });
  {
    const o = n.shape.slice(), r = o.pop();
    n = P(n, [-1, r]);
    const i = t.shape.slice(), a = i.pop(), l = i.pop(), c = [...i, a], u = Array.from({ length: t.rank }, (f, g) => g === 0 ? t.rank - 2 : g <= t.rank - 2 ? g - 1 : g);
    t = P(zt(t, u), [l, -1]);
    const h = [...o, ...c];
    return P(Cm({
      a: n,
      b: t,
      transposeA: !1,
      transposeB: !1,
      bias: s ? Nh(n.rank, s, rs()) : null,
      activation: e
    }), h);
  }
}
function Z0(n, t, e) {
  return X(() => (Array.isArray(t) ? t = dn(t, "int32") : t = ht(t, "int32"), cp(n, t, e)));
}
function xa(n) {
  return D(n, n);
}
function Nh(n, t, e) {
  const s = t.shape;
  if (t.rank !== 1 && t.rank !== n)
    throw new F(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);
  if (n === 5) {
    if (e === "channelsFirst")
      return s.length === 1 ? P(t, [1, s[0], 1, 1, 1]) : P(t, [1, s[3], s[0], s[1], s[2]]);
    if (e === "channelsLast")
      return s.length === 1 ? P(t, [1, 1, 1, 1, s[0]]) : P(t, [1].concat(s));
  } else if (n === 4) {
    if (e === "channelsFirst")
      return s.length === 1 ? P(t, [1, s[0], 1, 1]) : P(t, [1, s[2], s[0], s[1]]);
    if (e === "channelsLast")
      return s.length === 1 ? P(t, [1, 1, 1, s[0]]) : P(t, [1].concat(s));
  } else if (n === 3) {
    if (e === "channelsFirst")
      return s.length === 1 ? P(t, [1, s[0], 1]) : P(t, [1, s[1], s[0]]);
    if (e === "channelsLast")
      return s.length === 1 ? P(t, [1, 1, s[0]]) : P(t, [1].concat(s));
  } else if (n < 3)
    return t;
  throw new F(`Unsupported input rank by biasAdd: ${t.rank}`);
}
function ls(n, t, e) {
  return X(() => (e == null && (e = rs()), Ce(e), ot(n, Nh(n.rank, t, e))));
}
function bR(n, t = 1) {
  if (t !== 1)
    throw new Wt(`Support for alpha values other than 1 (${t}) is not implemented yet.`);
  return Kc(n);
}
function xR(n) {
  return X(() => St(n, ot(Ee(n), 1)));
}
function K0(n, t, e, s) {
  return X(() => hk(n, t, e, s));
}
function yR(n) {
  return X(() => {
    const t = ot(0.5, D(0.2, n));
    return kn(t, 0, 1);
  });
}
function ya(n, t, e = !1) {
  return e ? n() : t();
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const wR = ["fanIn", "fanOut", "fanAvg"], IR = ["normal", "uniform", "truncatedNormal"];
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function CR(n) {
  Po(wR, "FanMode", n);
}
function vR(n) {
  Po(IR, "Distribution", n);
}
class Yn extends zo {
  fromConfigUsesCustomObjects() {
    return !1;
  }
  getConfig() {
    return {};
  }
}
class B0 extends Yn {
  apply(t, e) {
    return Me(t, e);
  }
}
B0.className = "Zeros";
et(B0);
class kf extends Yn {
  apply(t, e) {
    return eo(t, e);
  }
}
kf.className = "Ones";
et(kf);
class H0 extends Yn {
  constructor(t) {
    if (super(), typeof t != "object")
      throw new F(`Expected argument of type ConstantConfig but got ${t}`);
    if (t.value === void 0)
      throw new F(`config must have value set but got ${t}`);
    this.value = t.value;
  }
  apply(t, e) {
    return X(() => D($t(this.value), eo(t, e)));
  }
  getConfig() {
    return {
      value: this.value
    };
  }
}
H0.className = "Constant";
et(H0);
class _0 extends Yn {
  constructor(t) {
    super(), this.DEFAULT_MINVAL = -0.05, this.DEFAULT_MAXVAL = 0.05, this.minval = t.minval || this.DEFAULT_MINVAL, this.maxval = t.maxval || this.DEFAULT_MAXVAL, this.seed = t.seed;
  }
  apply(t, e) {
    return Yc(t, this.minval, this.maxval, e);
  }
  getConfig() {
    return { minval: this.minval, maxval: this.maxval, seed: this.seed };
  }
}
_0.className = "RandomUniform";
et(_0);
class U0 extends Yn {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new Wt(`randomNormal does not support dType ${e}.`);
    return nu(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
U0.className = "RandomNormal";
et(U0);
class Y0 extends Yn {
  constructor(t) {
    super(), this.DEFAULT_MEAN = 0, this.DEFAULT_STDDEV = 0.05, this.mean = t.mean || this.DEFAULT_MEAN, this.stddev = t.stddev || this.DEFAULT_STDDEV, this.seed = t.seed;
  }
  apply(t, e) {
    if (e = e || "float32", e !== "float32" && e !== "int32")
      throw new Wt(`truncatedNormal does not support dType ${e}.`);
    return b0(t, this.mean, this.stddev, e, this.seed);
  }
  getConfig() {
    return { mean: this.mean, stddev: this.stddev, seed: this.seed };
  }
}
Y0.className = "TruncatedNormal";
et(Y0);
class j0 extends Yn {
  constructor(t) {
    super(), this.gain = t.gain != null ? t.gain : 1;
  }
  apply(t, e) {
    return X(() => {
      if (t.length !== 2 || t[0] !== t[1])
        throw new F("Identity matrix initializer can only be used for 2D square matrices.");
      return D(this.gain, n0(t[0]));
    });
  }
  getConfig() {
    return { gain: this.gain };
  }
}
j0.className = "Identity";
et(j0);
function SR(n, t = "channelsLast") {
  let e, s;
  if (Ce(t), n.length === 2)
    e = n[0], s = n[1];
  else if ([3, 4, 5].indexOf(n.length) !== -1) {
    if (t === "channelsFirst") {
      const o = Zs(n, 2);
      e = n[1] * o, s = n[0] * o;
    } else if (t === "channelsLast") {
      const o = Zs(n, 0, n.length - 2);
      e = n[n.length - 2] * o, s = n[n.length - 1] * o;
    }
  } else {
    const o = Zs(n);
    e = Math.sqrt(o), s = Math.sqrt(o);
  }
  return [e, s];
}
class mn extends Yn {
  /**
   * Constructor of VarianceScaling.
   * @throws ValueError for invalid value in scale.
   */
  constructor(t) {
    if (super(), t.scale < 0)
      throw new F(`scale must be a positive float. Got: ${t.scale}`);
    this.scale = t.scale == null ? 1 : t.scale, this.mode = t.mode == null ? "fanIn" : t.mode, CR(this.mode), this.distribution = t.distribution == null ? "normal" : t.distribution, vR(this.distribution), this.seed = t.seed;
  }
  apply(t, e) {
    const s = SR(t), o = s[0], r = s[1];
    let i = this.scale;
    if (this.mode === "fanIn" ? i /= Math.max(1, o) : this.mode === "fanOut" ? i /= Math.max(1, r) : i /= Math.max(1, (o + r) / 2), this.distribution === "normal") {
      const a = Math.sqrt(i);
      if (e = e || "float32", e !== "float32" && e !== "int32")
        throw new Wt(`${this.getClassName()} does not support dType ${e}.`);
      return b0(t, 0, a, e, this.seed);
    } else {
      const a = Math.sqrt(3 * i);
      return Yc(t, -a, a, e);
    }
  }
  getConfig() {
    return {
      scale: this.scale,
      mode: this.mode,
      distribution: this.distribution,
      seed: this.seed
    };
  }
}
mn.className = "VarianceScaling";
et(mn);
class Tf extends mn {
  /**
   * Constructor of GlorotUniform
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
Tf.className = "GlorotUniform";
et(Tf);
class Nf extends mn {
  /**
   * Constructor of GlorotNormal.
   * @param scale
   * @param mode
   * @param distribution
   * @param seed
   */
  constructor(t) {
    super({
      scale: 1,
      mode: "fanAvg",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
Nf.className = "GlorotNormal";
et(Nf);
class $f extends mn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
$f.className = "HeNormal";
et($f);
class Rf extends mn {
  constructor(t) {
    super({
      scale: 2,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
Rf.className = "HeUniform";
et(Rf);
class Gf extends mn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "normal",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
Gf.className = "LeCunNormal";
et(Gf);
class Lf extends mn {
  constructor(t) {
    super({
      scale: 1,
      mode: "fanIn",
      distribution: "uniform",
      seed: t == null ? null : t.seed
    });
  }
  getClassName() {
    return mn.className;
  }
}
Lf.className = "LeCunNormal";
et(Lf);
class Q0 extends Yn {
  constructor(t) {
    if (super(), this.DEFAULT_GAIN = 1, this.gain = t.gain == null ? this.DEFAULT_GAIN : t.gain, this.seed = t.seed, this.seed != null)
      throw new Wt("Random seed is not implemented for Orthogonal Initializer yet.");
  }
  apply(t, e) {
    return X(() => {
      if (t.length < 2)
        throw new Wt("Shape must be at least 2D.");
      t[0] * t[1] > 2e3 && console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0] * t[1]}) elements: Slowness may result.`);
      const s = t[0] > t[1] ? [t[1], t[0]] : t, o = nu(s, 0, 1, "float32");
      let r = BT.gramSchmidt(o);
      return t[0] > t[1] && (r = zt(r)), D(this.gain, r);
    });
  }
  getConfig() {
    return {
      gain: this.gain,
      seed: this.seed
    };
  }
}
Q0.className = "Orthogonal";
et(Q0);
const Fm = {
  constant: "Constant",
  glorotNormal: "GlorotNormal",
  glorotUniform: "GlorotUniform",
  heNormal: "HeNormal",
  heUniform: "HeUniform",
  identity: "Identity",
  leCunNormal: "LeCunNormal",
  leCunUniform: "LeCunUniform",
  ones: "Ones",
  orthogonal: "Orthogonal",
  randomNormal: "RandomNormal",
  randomUniform: "RandomUniform",
  truncatedNormal: "TruncatedNormal",
  varianceScaling: "VarianceScaling",
  zeros: "Zeros"
};
function zm(n, t = {}) {
  return ma(n, In.getMap().classNameMap, t, "initializer");
}
function pe(n) {
  return Cf(n);
}
function ce(n) {
  if (typeof n == "string") {
    const t = n in Fm ? Fm[n] : n;
    if (t === "GlorotNormal")
      return new Nf();
    if (t === "GlorotUniform")
      return new Tf();
    if (t === "HeNormal")
      return new $f();
    if (t === "HeUniform")
      return new Rf();
    if (t === "LeCunNormal")
      return new Gf();
    if (t === "LeCunUniform")
      return new Lf();
    {
      const e = {};
      return e.className = t, e.config = {}, zm(e);
    }
  } else
    return n instanceof Yn ? n : zm(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function $h(n) {
  return Array.isArray(n) && Array.isArray(n[0]);
}
function fl(n) {
  return n.length === 0 ? [] : Array.isArray(n[0]) ? n : [n];
}
function Mt(n) {
  let t;
  if (Array.isArray(n)) {
    if (n.length !== 1)
      throw new F(`Expected Tensor length to be 1; got ${n.length}`);
    t = n[0];
  } else
    t = n;
  return t;
}
function Ut(n) {
  if (Array.isArray(n) && Array.isArray(n[0])) {
    if (n.length === 1)
      return n = n, n[0];
    throw new F(`Expected exactly 1 Shape; got ${n.length}`);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ml(n) {
  let t = 0;
  for (const e of n)
    e.shape.length === 0 ? t += 1 : t += e.shape.reduce((s, o) => s * o);
  return t;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Vm = "Variable";
class kR {
  /**
   * Construct Variable from a `tf.Tensor`.
   *
   * If not explicitly named, the Variable will be given a name with the
   * prefix 'Variable'. Variable names are unique. In the case of name
   * collision, suffixies '_<num>' will be added to the name.
   *
   * @param val Initial value of the Variable.
   * @param name Name of the variable. If `null` or `undefined` is provided, it
   *   will default a name with the prefix 'Variable'.
   * @param constraint Optional, projection function to be applied to the
   * variable after optimize updates
   * @throws ValueError if `name` is `null` or `undefined`.
   */
  constructor(t, e = "float32", s = Vm, o = !0, r = null) {
    this.dtype = e ?? "float32", this.shape = t.shape, this.id = V0(), s = s ?? Vm, this.originalName = X0(s), this.name = O0(this.originalName), this.trainable_ = o, this.constraint = r, this.val = lk(t, this.trainable_, this.name, this.dtype);
  }
  /**
   * Get a snapshot of the Variable's value.
   *
   * The returned value is a snapshot of the Variable's value at the time of
   * the invocation. Future mutations in the value of the tensor will only
   * be reflected by future calls to this method.
   */
  read() {
    return this.assertNotDisposed(), this.val;
  }
  /**
   * Update the value of the Variable.
   *
   * @param newVal: The new value to update to. Must be consistent with the
   *   dtype and shape of the Variable.
   * @return This Variable.
   */
  write(t) {
    return this.assertNotDisposed(), TR(this.val, t), this.val.id !== t.id && (this.val.assign(t), this.constraint != null && this.val.assign(this.constraint.apply(this.val))), this;
  }
  /**
   * Dispose this LayersVariable instance from memory.
   */
  dispose() {
    this.assertNotDisposed(), this.val.dispose();
  }
  assertNotDisposed() {
    if (this.val.isDisposed)
      throw new Error(`LayersVariable ${this.name} is already disposed.`);
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.trainable_ = t, this.val.trainable = t;
  }
}
function TR(n, t) {
  if (n.shape.toString() !== t.shape.toString())
    throw new Error("Shape mismatch: " + JSON.stringify(n.shape) + " vs. " + JSON.stringify(t.shape));
}
function Rh(n) {
  return n.map((t) => t.read());
}
function Ef(n) {
  n.forEach((t) => {
    t[0].write(t[1]);
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Ne {
  constructor(t) {
    this.dtype = t.dtype, this.shape = t.shape, t.shape != null ? this.ndim = t.shape.length : this.ndim = t.ndim, this.maxNDim = t.maxNDim, this.minNDim = t.minNDim, this.axes = t.axes || {};
  }
}
class ps {
  /**
   *
   * @param dtype
   * @param shape
   * @param sourceLayer The Layer that produced this symbolic tensor.
   * @param inputs The inputs passed to sourceLayer's __call__() method.
   * @param nodeIndex
   * @param tensorIndex
   * @param callArgs The keyword arguments passed to the __call__() method.
   * @param name
   * @param outputTensorIndex The index of this tensor in the list of outputs
   *   returned by apply().
   */
  constructor(t, e, s, o, r, i, a) {
    this.dtype = t, this.shape = e, this.sourceLayer = s, this.inputs = o, this.callArgs = r, this.outputTensorIndex = a, this.id = V0(), i != null && (this.originalName = X0(i), this.name = O0(this.originalName)), this.rank = e.length;
  }
}
let NR = 0;
class su {
  constructor(t, e) {
    this.callArgs = e, this.id = NR++, this.outboundLayer = t.outboundLayer, this.inboundLayers = t.inboundLayers, this.nodeIndices = t.nodeIndices, this.tensorIndices = t.tensorIndices, this.inputTensors = t.inputTensors, this.outputTensors = t.outputTensors, this.inputMasks = t.inputMasks, this.outputMasks = t.outputMasks, this.inputShapes = t.inputShapes, this.outputShapes = t.outputShapes;
    for (const s of t.inboundLayers)
      s != null && s.outboundNodes.push(this);
    t.outboundLayer.inboundNodes.push(this);
  }
  getConfig() {
    const t = [];
    for (const e of this.inboundLayers)
      e != null ? t.push(e.name) : t.push(null);
    return {
      outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
      inboundLayers: t,
      nodeIndices: this.nodeIndices,
      tensorIndices: this.tensorIndices
    };
  }
}
let $R = 0;
class Vt extends zo {
  constructor(t = {}) {
    super(), this._callHook = null, this._addedWeightNames = [], this._stateful = !1, this.id = $R++, this.activityRegularizer = null, this.inputSpec = null, this.supportsMasking = !1, this._trainableWeights = [], this._nonTrainableWeights = [], this._losses = [], this._updates = [], this._built = !1, this.inboundNodes = [], this.outboundNodes = [];
    let e = t.name;
    if (!e) {
      const s = this.getClassName();
      e = Is(s) + "_" + eu(s);
    }
    if (this.name = e, this.trainable_ = t.trainable == null ? !0 : t.trainable, t.inputShape != null || t.batchInputShape != null) {
      let s;
      if (t.batchInputShape != null)
        s = t.batchInputShape;
      else if (t.inputShape != null) {
        let r = null;
        t.batchSize != null && (r = t.batchSize), s = [r].concat(t.inputShape);
      }
      this.batchInputShape = s;
      let o = t.dtype;
      o == null && (o = t.inputDType), o == null && (o = "float32"), this.dtype = o;
    }
    t.weights != null ? this.initialWeights = t.weights : this.initialWeights = null, this._refCount = null, this.fastWeightInitDuringBuild = !1;
  }
  /**
   * Converts a layer and its index to a unique (immutable type) name.
   * This function is used internally with `this.containerNodes`.
   * @param layer The layer.
   * @param nodeIndex The layer's position (e.g. via enumerate) in a list of
   *   nodes.
   *
   * @returns The unique name.
   */
  static nodeKey(t, e) {
    return t.name + "_ib-" + e.toString();
  }
  /**
   * Returns this.inboundNode at index nodeIndex.
   *
   * Porting note: This is a replacement for _get_node_attribute_at_index()
   * @param nodeIndex
   * @param attrName The name of the attribute related to request for this node.
   */
  getNodeAtIndex(t, e) {
    if (this.inboundNodes.length === 0)
      throw new Pn(`The layer has never been called and thus has no defined ${e}.`);
    if (this.inboundNodes.length <= t)
      throw new F(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);
    return this.inboundNodes[t];
  }
  /**
   * Retrieves the input tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple inputs).
   */
  getInputAt(t) {
    return tn(this.getNodeAtIndex(t, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer at a given node.
   *
   * @param nodeIndex Integer, index of the node from which to retrieve the
   *   attribute. E.g. `nodeIndex=0` will correspond to the first time the layer
   *   was called.
   *
   * @return A tensor (or list of tensors if the layer has multiple outputs).
   */
  getOutputAt(t) {
    return tn(this.getNodeAtIndex(t, "output").outputTensors);
  }
  // Properties
  /**
   * Retrieves the input tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Input tensor or list of input tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get input() {
    if (this.inboundNodes.length > 1)
      throw new us(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);
    if (this.inboundNodes.length === 0)
      throw new us(`Layer ${this.name} is not connected, no input to return.`);
    return tn(this.getNodeAtIndex(0, "input").inputTensors);
  }
  /**
   * Retrieves the output tensor(s) of a layer.
   *
   * Only applicable if the layer has exactly one inbound node,
   * i.e. if it is connected to one incoming layer.
   *
   * @return Output tensor or list of output tensors.
   *
   * @exception AttributeError if the layer is connected to more than one
   *   incoming layers.
   */
  get output() {
    if (this.inboundNodes.length === 0)
      throw new us(`Layer ${this.name} has no inbound nodes.`);
    if (this.inboundNodes.length > 1)
      throw new us(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);
    return tn(this.getNodeAtIndex(0, "output").outputTensors);
  }
  get losses() {
    return this._losses;
  }
  /**
   * Retrieves the Layer's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return this.losses.map((t) => t());
  }
  get updates() {
    return this._updates;
  }
  get built() {
    return this._built;
  }
  set built(t) {
    this._built = t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this._trainableWeights.forEach((e) => e.trainable = t), this.trainable_ = t;
  }
  get trainableWeights() {
    return this.trainable_ ? this._trainableWeights.filter((t) => t.trainable) : [];
  }
  set trainableWeights(t) {
    this._trainableWeights = t;
  }
  get nonTrainableWeights() {
    return this.trainable ? this._trainableWeights.filter((t) => !t.trainable).concat(this._nonTrainableWeights) : this._trainableWeights.concat(this._nonTrainableWeights);
  }
  set nonTrainableWeights(t) {
    this._nonTrainableWeights = t;
  }
  /**
   * The concatenation of the lists trainableWeights and nonTrainableWeights
   * (in this order).
   */
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  get stateful() {
    return this._stateful;
  }
  /**
   * Reset the states of the layer.
   *
   * This method of the base Layer class is essentially a no-op.
   * Subclasses that are stateful (e.g., stateful RNNs) should override this
   * method.
   */
  resetStates() {
    if (!this.stateful)
      throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
  }
  /**
   * Checks compatibility between the layer and provided inputs.
   *
   * This checks that the tensor(s) `input`
   * verify the input assumptions of the layer
   * (if any). If not, exceptions are raised.
   *
   * @param inputs Input tensor or list of input tensors.
   *
   * @exception ValueError in case of mismatch between
   *   the provided inputs and the expectations of the layer.
   */
  assertInputCompatibility(t) {
    if (t = oe(t), this.inputSpec == null || this.inputSpec.length === 0)
      return;
    const e = oe(this.inputSpec);
    if (t.length !== e.length)
      throw new F(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);
    for (let s = 0; s < t.length; s++) {
      const o = t[s], r = e[s];
      if (r == null)
        continue;
      const i = o.rank;
      if (r.ndim != null && i !== r.ndim)
        throw new F(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${i}`);
      if (r.maxNDim != null && i > r.maxNDim)
        throw new F(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${i}`);
      if (r.minNDim != null && i < r.minNDim)
        throw new F(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${i}.`);
      if (r.dtype != null && o.dtype !== r.dtype)
        throw new F(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${o.dtype}.`);
      if (r.axes) {
        const a = o.shape;
        for (const l in r.axes) {
          const c = Number(l), u = r.axes[l], h = c >= 0 ? a[c] : a[a.length + c];
          if (u != null && [u, null].indexOf(h) === -1)
            throw new F(`Input ${s} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${u} but got shape ${a}.`);
        }
      }
      if (r.shape != null)
        for (let a = 0; a < r.shape.length; ++a) {
          const l = r.shape[a], c = o.shape[a];
          if (l != null && c != null && l !== c)
            throw new F(`Input ${s} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${o.shape}.`);
        }
    }
  }
  /**
   * This is where the layer's logic lives.
   *
   * @param inputs Input tensor, or list/tuple of input tensors.
   * @param kwargs Additional keyword arguments.
   *
   * @return A tensor or list/tuple of tensors.
   */
  call(t, e) {
    return t;
  }
  invokeCallHook(t, e) {
    this._callHook != null && this._callHook(t, e);
  }
  /**
   * Set call hook.
   * This is currently used for testing only.
   * @param callHook
   */
  setCallHook(t) {
    this._callHook = t;
  }
  /**
   * Clear call hook.
   * This is currently used for testing only.
   */
  clearCallHook() {
    this._callHook = null;
  }
  /**
   * Builds or executes a `Layer`'s logic.
   *
   * When called with `tf.Tensor`(s), execute the `Layer`'s computation and
   * return Tensor(s). For example:
   *
   * ```js
   * const denseLayer = tf.layers.dense({
   *   units: 1,
   *   kernelInitializer: 'zeros',
   *   useBias: false
   * });
   *
   * // Invoke the layer's apply() method with a `tf.Tensor` (with concrete
   * // numeric values).
   * const input = tf.ones([2, 2]);
   * const output = denseLayer.apply(input);
   *
   * // The output's value is expected to be [[0], [0]], due to the fact that
   * // the dense layer has a kernel initialized to all-zeros and does not have
   * // a bias.
   * output.print();
   * ```
   *
   * When called with `tf.SymbolicTensor`(s), this will prepare the layer for
   * future execution.  This entails internal book-keeping on shapes of
   * expected Tensors, wiring layers together, and initializing weights.
   *
   * Calling `apply` with `tf.SymbolicTensor`s are typically used during the
   * building of non-`tf.Sequential` models. For example:
   *
   * ```js
   * const flattenLayer = tf.layers.flatten();
   * const denseLayer = tf.layers.dense({units: 1});
   *
   * // Use tf.layers.input() to obtain a SymbolicTensor as input to apply().
   * const input = tf.input({shape: [2, 2]});
   * const output1 = flattenLayer.apply(input);
   *
   * // output1.shape is [null, 4]. The first dimension is the undetermined
   * // batch size. The second dimension comes from flattening the [2, 2]
   * // shape.
   * console.log(JSON.stringify(output1.shape));
   *
   * // The output SymbolicTensor of the flatten layer can be used to call
   * // the apply() of the dense layer:
   * const output2 = denseLayer.apply(output1);
   *
   * // output2.shape is [null, 1]. The first dimension is the undetermined
   * // batch size. The second dimension matches the number of units of the
   * // dense layer.
   * console.log(JSON.stringify(output2.shape));
   *
   * // The input and output can be used to construct a model that consists
   * // of the flatten and dense layers.
   * const model = tf.model({inputs: input, outputs: output2});
   * ```
   *
   * @param inputs a `tf.Tensor` or `tf.SymbolicTensor` or an Array of them.
   * @param kwargs Additional keyword arguments to be passed to `call()`.
   *
   * @return Output of the layer's `call` method.
   *
   * @exception ValueError error in case the layer is missing shape information
   *   for its `build` call.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  // Porting Note: This is a replacement for __call__() in Python.
  apply(t, e) {
    e = e || {}, this.assertNotDisposed();
    const s = oe(t);
    let o = !0;
    for (const i of s)
      if (!(i instanceof ps)) {
        o = !1;
        break;
      }
    let r = !0;
    for (const i of s)
      if (i instanceof ps) {
        r = !1;
        break;
      }
    if (o === r)
      throw new F("Arguments to apply() must be all SymbolicTensors or all Tensors");
    return Io(this.name, () => {
      if (!this.built) {
        this.assertInputCompatibility(t);
        const i = [];
        for (const a of oe(t))
          i.push(a.shape);
        this.build(tn(i)), this.built = !0, this.initialWeights && this.setWeights(this.initialWeights), this._refCount === null && r && (this._refCount = 1);
      }
      if (this.assertInputCompatibility(t), r) {
        let i = this.call(t, e);
        const a = oe(i), l = [];
        for (let c of a)
          s.indexOf(c) !== -1 && (c = c.clone()), l.push(c);
        if (i = tn(l), this.activityRegularizer != null)
          throw new Wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return i;
      } else {
        const i = RR(t), a = this.computeOutputShape(i);
        let l;
        const c = GR(t);
        if (this.warnOnIncompatibleInputShape(Array.isArray(t) ? i[0] : i), a != null && a.length > 0 && Array.isArray(a[0]) ? l = a.map((u, h) => new ps(c, u, this, oe(t), e, this.name, h)) : l = new ps(c, a, this, oe(t), e, this.name), this.addInboundNode(t, l, null, null, i, a, e), this._refCount++, this.activityRegularizer != null)
          throw new Wt("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
        return l;
      }
    });
  }
  /**
   * Check compatibility between input shape and this layer's batchInputShape.
   *
   * Print warning if any incompatibility is found.
   *
   * @param inputShape Input shape to be checked.
   */
  warnOnIncompatibleInputShape(t) {
    if (this.batchInputShape != null)
      if (t.length !== this.batchInputShape.length)
        console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);
      else {
        let e = !1;
        this.batchInputShape.forEach((s, o) => {
          s != null && t[o] != null && t[o] !== s && (e = !0);
        }), e && console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`);
      }
  }
  /**
   * Retrieves the output shape(s) of a layer.
   *
   * Only applicable if the layer has only one inbound node, or if all inbound
   * nodes have the same output shape.
   *
   * @returns Output shape or shapes.
   * @throws AttributeError: if the layer is connected to more than one incoming
   *   nodes.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  get outputShape() {
    if (this.inboundNodes == null || this.inboundNodes.length === 0)
      throw new us(`The layer ${this.name} has never been called and thus has no defined output shape.`);
    const t = [];
    for (const e of this.inboundNodes) {
      const s = JSON.stringify(e.outputShapes);
      t.indexOf(s) === -1 && t.push(s);
    }
    if (t.length === 1) {
      const e = this.inboundNodes[0].outputShapes;
      return Array.isArray(e) && Array.isArray(e[0]) && e.length === 1 ? e[0] : e;
    } else
      throw new us(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`);
  }
  /**
   * Counts the total number of numbers (e.g., float32, int32) in the
   * weights.
   *
   * @returns An integer count.
   * @throws RuntimeError: If the layer is not built yet (in which case its
   *   weights are not defined yet.)
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  countParams() {
    if (!this.built)
      throw new Pn(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);
    return ml(this.weights);
  }
  /**
   * Creates the layer weights.
   *
   * Must be implemented on all layers that have weights.
   *
   * Called when apply() is called to construct the weights.
   *
   * @param inputShape A `Shape` or array of `Shape` (unused).
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  build(t) {
    this.built = !0;
  }
  /**
   * Returns the current values of the weights of the layer.
   *
   * @param trainableOnly Whether to get the values of only trainable weights.
   * @returns Weight values as an `Array` of `tf.Tensor`s.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getWeights(t = !1) {
    return Rh(t ? this.trainableWeights : this.weights);
  }
  /**
   * Sets the weights of the layer, from Tensors.
   *
   * @param weights a list of Tensors. The number of arrays and their shape
   *   must match number of the dimensions of the weights of the layer (i.e.
   *   it should match the output of `getWeights`).
   *
   * @exception ValueError If the provided weights list does not match the
   *   layer's specifications.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  setWeights(t) {
    X(() => {
      const e = this.weights;
      if (e.length !== t.length)
        throw new F(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);
      if (e.length === 0)
        return;
      const s = [], o = Rh(e);
      for (let r = 0; r < o.length; ++r) {
        const i = o[r], a = e[r], l = t[r];
        if (!At(i.shape, l.shape))
          throw new F(`Layer weight shape ${i.shape} not compatible with provided weight shape ${l.shape}`);
        s.push([a, l]);
      }
      Ef(s);
    });
  }
  /**
   * Adds a weight variable to the layer.
   *
   * @param name Name of the new weight variable.
   * @param shape The shape of the weight.
   * @param dtype The dtype of the weight.
   * @param initializer An initializer instance.
   * @param regularizer A regularizer instance.
   * @param trainable Whether the weight should be trained via backprop or not
   *   (assuming that the layer itself is also trainable).
   * @param constraint An optional trainable.
   * @return The created weight variable.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addWeight(t, e, s, o, r, i, a, l) {
    if (this._addedWeightNames.indexOf(t) !== -1)
      throw new F(`Duplicate weight name ${t} for layer ${this.name}`);
    this._addedWeightNames.push(t), s == null && (s = "float32"), this.fastWeightInitDuringBuild && (o = l != null ? l() : ce("zeros"));
    const c = o.apply(e, s), u = new kR(c, s, t, i, a);
    return c.dispose(), r != null && this.addLoss(() => r.apply(u.read())), i == null && (i = !0), i ? this._trainableWeights.push(u) : this._nonTrainableWeights.push(u), u;
  }
  /**
   * Set the fast-weight-initialization flag.
   *
   * In cases where the initialized weight values will be immediately
   * overwritten by loaded weight values during model loading, setting
   * the flag to `true` saves unnecessary calls to potentially expensive
   * initializers and speeds up the loading process.
   *
   * @param value Target value of the flag.
   */
  setFastWeightInitDuringBuild(t) {
    this.fastWeightInitDuringBuild = t;
  }
  /**
   * Add losses to the layer.
   *
   * The loss may potentially be conditional on some inputs tensors,
   * for instance activity losses are conditional on the layer's inputs.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  addLoss(t) {
    t == null || Array.isArray(t) && t.length === 0 || (t = oe(t), this._losses !== void 0 && this._losses !== null && this.losses.push(...t));
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  computeOutputShape(t) {
    return t;
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(t, e) {
    if (!this.supportsMasking) {
      if (e != null)
        if (Array.isArray(e))
          e.forEach((s) => {
            if (s != null)
              throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
          });
        else
          throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);
      return null;
    }
    return e;
  }
  /**
   * Internal method to create an inbound node for the layer.
   *
   * @param inputTensors List of input tensors.
   * @param outputTensors List of output tensors.
   * @param inputMasks List of input masks (a mask can be a tensor, or null).
   * @param outputMasks List of output masks (a mask can be a tensor, or null).
   * @param inputShapes List of input shape tuples.
   * @param outputShapes List of output shape tuples.
   * @param kwargs Dictionary of keyword arguments that were passed to the
   *   `call` method of the layer at the call that created the node.
   */
  addInboundNode(t, e, s, o, r, i, a = null) {
    const l = oe(t);
    e = oe(e), s = oe(s), o = oe(o), r = fl(r), i = fl(i);
    const c = [], u = [], h = [];
    for (const d of l)
      c.push(d.sourceLayer), u.push(d.nodeIndex), h.push(d.tensorIndex);
    new su({
      outboundLayer: this,
      inboundLayers: c,
      nodeIndices: u,
      tensorIndices: h,
      inputTensors: l,
      outputTensors: e,
      inputMasks: s,
      outputMasks: o,
      inputShapes: r,
      outputShapes: i
    }, a);
    for (let d = 0; d < e.length; d++)
      e[d].sourceLayer = this, e[d].nodeIndex = this.inboundNodes.length - 1, e[d].tensorIndex = d;
  }
  /**
   * Returns the config of the layer.
   *
   * A layer config is a TS dictionary (serializable)
   * containing the configuration of a layer.
   * The same layer can be reinstantiated later
   * (without its trained weights) from this configuration.
   *
   * The config of a layer does not include connectivity
   * information, nor the layer class name.  These are handled
   * by 'Container' (one layer of abstraction above).
   *
   * Porting Note: The TS dictionary follows TS naming standards for
   * keys, and uses tfjs-layers type-safe Enums.  Serialization methods
   * should use a helper function to convert to the pythonic storage
   * standard. (see serialization_utils.convertTsToPythonic)
   *
   * @returns TS dictionary of configuration.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  getConfig() {
    const t = { name: this.name, trainable: this.trainable };
    return this.batchInputShape != null && (t.batchInputShape = this.batchInputShape), this.dtype != null && (t.dtype = this.dtype), t;
  }
  /**
   * Dispose the weight variables that this Layer instance holds.
   *
   * @returns {number} Number of disposed variables.
   */
  disposeWeights() {
    return this.weights.forEach((t) => t.dispose()), this.weights.length;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Layer '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose layer's weights.
   *
   * This method decreases the reference count of the Layer object by 1.
   *
   * A Layer is reference-counted. Its reference count is incremented by 1
   * the first item its `apply()` method is called and when it becomes a part
   * of a new `Node` (through calling the `apply()` method on a
   * `tf.SymbolicTensor`).
   *
   * If the reference count of a Layer becomes 0, all the weights will be
   * disposed and the underlying memory (e.g., the textures allocated in WebGL)
   * will be freed.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * weights of the Layer will *not* be disposed.
   *
   * After a Layer is disposed, it cannot be used in calls such as `apply()`,
   * `getWeights()` or `setWeights()` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the Container after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the layer has already
   *   been disposed.
   *
   * @doc {heading: 'Models', 'subheading': 'Classes'}
   */
  dispose() {
    if (!this.built)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);
    if (this._refCount === null)
      throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);
    this.assertNotDisposed();
    let t = 0;
    return --this._refCount === 0 && (t = this.disposeWeights()), { refCountAfterDispose: this._refCount, numDisposedVariables: t };
  }
}
function RR(n) {
  n = oe(n);
  const t = [];
  for (const e of n)
    t.push(e.shape);
  return tn(t);
}
function GR(n) {
  return "float32";
}
function J0(n, t, e) {
  if ((t == null || e != null && e > 0) && (t = n.sourceLayer, e = n.nodeIndex), t.inboundNodes.length === 0)
    return [n];
  {
    const s = t.inboundNodes[e];
    if (s.inboundLayers.length === 0)
      return s.inputTensors;
    {
      const o = [];
      for (let r = 0; r < s.inboundLayers.length; r++) {
        const i = s.inputTensors[r], a = s.inboundLayers[r], l = s.nodeIndices[r], c = J0(i, a, l);
        for (const u of c)
          o.indexOf(u) === -1 && o.push(u);
      }
      return o;
    }
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class wa extends Vt {
  constructor(t) {
    if (super({
      dtype: t.dtype,
      name: t.name != null ? t.name : eu("input").toString()
    }), t.batchSize == null && (t.batchSize = null), t.sparse == null && (t.sparse = !1), this.trainable = !1, this.built = !0, this.sparse = t.sparse, t.inputShape != null && t.batchInputShape != null)
      throw new F("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
    let e = t.batchInputShape;
    if (e == null) {
      if (t.inputShape == null)
        throw new F("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
      e = [t.batchSize].concat(t.inputShape);
    } else if (t.batchSize != null)
      throw new F("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");
    const s = t.dtype || "float32";
    this.batchInputShape = e, this.dtype = s, this.inputSpec = [{ shape: e }];
    const o = new ps(this.dtype, this.batchInputShape, this, [], {}, this.name);
    o.nodeIndex = 0, o.tensorIndex = 0, new su({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: [o],
      outputTensors: [o],
      inputMasks: [null],
      outputMasks: [null],
      inputShapes: [e],
      outputShapes: [e]
    });
  }
  apply(t, e) {
    throw new F(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`);
  }
  dispose() {
    return { refCountAfterDispose: this._refCount, numDisposedVariables: 0 };
  }
  getConfig() {
    return {
      batchInputShape: this.batchInputShape,
      dtype: this.dtype,
      sparse: this.sparse,
      name: this.name
    };
  }
}
wa.className = "InputLayer";
et(wa);
function LR(n) {
  if (n.batchShape == null && n.shape == null)
    throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
  if (n.batchShape != null && n.shape != null)
    throw new F("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
  let t = n.batchShape;
  n.shape != null && t == null && (t = [null].concat(n.shape));
  let e = n.dtype;
  return e == null && (e = "float32"), new wa({
    batchInputShape: t,
    name: n.name,
    dtype: e,
    sparse: n.sparse
  }).inboundNodes[0].outputTensors[0];
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ER(n, t) {
  if (n.dtype == null || n.dtype === t.dtype)
    return t;
  try {
    return ht(t, n.dtype);
  } catch {
    throw new F(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`);
  }
}
class Ps {
  /**
   * Constructor, optionally does copy-construction.
   * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case
   *   copy-construction will be performed.
   */
  constructor(t) {
    if (this.id2Value = {}, this.id2Mask = {}, this.name2Id = {}, t instanceof Ps)
      for (const e in t.id2Value)
        this.id2Value[e] = t.id2Value[e], e in t.id2Mask && (this.id2Mask[e] = t.id2Mask[e]);
    else {
      if (t == null)
        return;
      for (const e of t)
        this.add(e.key, e.value);
    }
  }
  /**
   * Add a key-value pair to the FeedDict.
   *
   * @param key The key of the feed.
   * @param value The value of the tensor feed.
   * @param mask The value of the mask feed (optional).
   * @returns This `FeedDict`.
   * @throws ValueError: If the key `SymbolicTensor` already exists in the
   *   `FeedDict`.
   */
  add(t, e, s) {
    if (this.id2Value[t.id] == null)
      this.id2Value[t.id] = ER(t, e), this.name2Id[t.name] = t.id, s != null && (this.id2Mask[t.id] = s);
    else
      throw new F(`Duplicate key: name=${t.name}, id=${t.id}`);
    return this;
  }
  /**
   * Add a Feed to the FeedDict.
   * @param feed The new `Feed` to add.
   * @returns This `FeedDict`.
   */
  addFeed(t) {
    this.add(t.key, t.value);
  }
  /**
   * Probe whether a key already exists in the FeedDict.
   * @param key
   */
  hasKey(t) {
    return this.id2Value[t.id] != null;
  }
  /**
   * Get all the SymbolicTensor available in this FeedDict.
   */
  names() {
    return Object.keys(this.name2Id);
  }
  /**
   * Get the feed value for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed value.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getValue(t) {
    if (t instanceof ps) {
      if (this.id2Value[t.id] == null)
        throw new F(`Nonexistent key: ${t.name}`);
      return this.id2Value[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new F(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Value[e];
    }
  }
  /**
   * Get the feed mask for given key.
   * @param key The SymbolicTensor, or its name (as a string), of which the
   *     value is sought.
   * @returns If `key` exists, the corresponding feed mask.
   * @throws ValueError: If `key` does not exist in this `FeedDict`.
   */
  getMask(t) {
    if (t instanceof ps) {
      if (this.id2Value[t.id] == null)
        throw new F(`Nonexistent key: ${t.name}`);
      return this.id2Mask[t.id];
    } else {
      const e = this.name2Id[t];
      if (e == null)
        throw new F(`Feed dict has no SymbolicTensor name: ${t}`);
      return this.id2Mask[e];
    }
  }
  /** Dispose all mask Tensors held by this object. */
  disposeMasks() {
    this.id2Mask != null && Et(this.id2Mask);
  }
}
const gl = new D0(), bl = new D0();
function WR(n) {
  gl != null && gl.setMaxEntries(n), bl != null && bl.setMaxEntries(n);
}
function Ar(n, t, e, s) {
  const o = e == null ? !1 : e.training, r = Array.isArray(n), i = r ? n : [n], a = i.map((f) => f.name), l = [], c = t.names();
  for (const f of a)
    c.indexOf(f) !== -1 ? l.push(t.getValue(f)) : l.push(null);
  s != null && (s.maxNumTensors = -1 / 0, s.minNumTensors = 1 / 0);
  const u = a.join(",") + "|" + t.names().sort().join(",");
  let h = gl.get(u), d;
  if (h == null) {
    const f = MR(i, t);
    h = f.sorted, d = f.recipientCounts, gl.put(u, h), bl.put(u, d);
  }
  d = {}, o || Object.assign(d, bl.get(u));
  const p = new Ps(t);
  for (let f = 0; f < h.length; ++f) {
    if (s != null) {
      const $ = ll().numTensors;
      $ > s.maxNumTensors && (s.maxNumTensors = $), $ < s.minNumTensors && (s.minNumTensors = $);
    }
    const g = h[f], m = g.sourceLayer;
    if (m instanceof wa)
      continue;
    const b = [], x = [], w = [];
    let y = !1;
    for (const $ of g.inputs) {
      const G = p.getValue($), z = p.getMask($);
      b.push(G), x.push(z), z != null && (y = !0), o || (d[$.name]--, d[$.name] === 0 && !t.hasKey($) && a.indexOf($.name) === -1 && !G.isDisposed && $.sourceLayer.stateful !== !0 && w.push(G));
    }
    y && (e = e || {}, e.mask = x[0]);
    const I = oe(m.apply(b, e));
    let v = null;
    m.supportsMasking && (v = m.computeMask(b, x));
    const T = FR(g), k = Array.isArray(T) ? T : [T];
    for (let $ = 0; $ < k.length; ++$) {
      p.hasKey(k[$]) || p.add(k[$], I[$], Array.isArray(v) ? v[0] : v);
      const G = a.indexOf(k[$].name);
      G !== -1 && (l[G] = I[$]);
    }
    o || Et(w);
  }
  return p.disposeMasks(), r ? l : l[0];
}
function MR(n, t) {
  S(n != null && n.length > 0, () => "Expected at least one fetch, got none");
  let e = [], s = {};
  if (n.length === 1) {
    const o = Pm(n[0], t);
    e = o.sorted, s = o.recipientMap;
  } else {
    const o = /* @__PURE__ */ new Set();
    for (const r of n) {
      const { sorted: i, recipientMap: a } = Pm(r, t);
      for (const l of i)
        o.has(l.name) || (e.push(l), o.add(l.name));
      for (const l in a)
        s[l] == null && (s[l] = /* @__PURE__ */ new Set()), a[l].forEach((c) => s[l].add(c));
    }
  }
  return {
    sorted: e,
    recipientCounts: DR(s)
  };
}
function DR(n) {
  const t = {};
  for (const e in n)
    t[e] = n[e].size;
  return t;
}
function Pm(n, t) {
  const e = /* @__PURE__ */ new Set(), s = [], o = {};
  for (const a of t.names())
    e.add(a);
  const r = [], i = [];
  for (r.push(n); r.length > 0; ) {
    const a = r[r.length - 1];
    if (e.has(a.name)) {
      r.pop();
      continue;
    }
    const l = i[i.length - 1] === r.length - 1;
    if (a.inputs.length === 0 || l)
      r.pop(), s.push(a), e.add(a.name), l && i.pop();
    else {
      i.push(r.length - 1);
      for (const c of a.inputs)
        o[c.name] == null && (o[c.name] = /* @__PURE__ */ new Set()), o[c.name].add(a.name), !e.has(c.name) && r.push(c);
    }
  }
  return { sorted: s, recipientMap: o };
}
function FR(n) {
  let t;
  if (n.sourceLayer.inboundNodes.length === 1)
    t = n.sourceLayer.output;
  else {
    let e = null;
    for (let s = 0; s < n.sourceLayer.inboundNodes.length; ++s)
      for (const o of n.sourceLayer.inboundNodes[s].outputTensors)
        if (o.id === n.id) {
          e = s;
          break;
        }
    t = n.sourceLayer.getOutputAt(e);
  }
  return t;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zR = B();
zR.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES", () => 100, WR);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Wf(n, t) {
  return X(() => Ye(yt(D(n, n), t, !0)));
}
class Ia extends zo {
  getConfig() {
    return {};
  }
}
class q0 extends Ia {
  constructor(t) {
    super(), this.defaultMaxValue = 2, this.defaultAxis = 0, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return X(() => {
      const e = Wf(t, this.axis), s = kn(e, 0, this.maxValue);
      return D(t, St(s, ot(Te(), e)));
    });
  }
  getConfig() {
    return { maxValue: this.maxValue, axis: this.axis };
  }
}
q0.className = "MaxNorm";
et(q0);
class tx extends Ia {
  constructor(t) {
    super(), this.defaultAxis = 0, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return X(() => St(t, ot(Te(), Wf(t, this.axis))));
  }
  getConfig() {
    return { axis: this.axis };
  }
}
tx.className = "UnitNorm";
et(tx);
class ex extends Ia {
  apply(t) {
    return Ms(t);
  }
}
ex.className = "NonNeg";
et(ex);
class nx extends Ia {
  constructor(t) {
    super(), this.defaultMinValue = 0, this.defaultMaxValue = 1, this.defaultRate = 1, this.defaultAxis = 0, this.minValue = t.minValue != null ? t.minValue : this.defaultMinValue, this.maxValue = t.maxValue != null ? t.maxValue : this.defaultMaxValue, this.rate = t.rate != null ? t.rate : this.defaultRate, this.axis = t.axis != null ? t.axis : this.defaultAxis;
  }
  apply(t) {
    return X(() => {
      const e = Wf(t, this.axis), s = ot(D(this.rate, kn(e, this.minValue, this.maxValue)), D(1 - this.rate, e));
      return D(t, St(s, ot(Te(), e)));
    });
  }
  getConfig() {
    return {
      minValue: this.minValue,
      maxValue: this.maxValue,
      rate: this.rate,
      axis: this.axis
    };
  }
}
nx.className = "MinMaxNorm";
et(nx);
const Xm = {
  maxNorm: "MaxNorm",
  minMaxNorm: "MinMaxNorm",
  nonNeg: "NonNeg",
  unitNorm: "UnitNorm"
};
function $e(n) {
  return Cf(n);
}
function Om(n, t = {}) {
  return ma(n, In.getMap().classNameMap, t, "constraint");
}
function Re(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in Xm ? Xm[n] : n, config: {} };
    return Om(e);
  } else
    return n instanceof Ia ? n : Om(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function lo(n) {
  if (n == null)
    return;
  const t = [], e = [], s = [];
  for (const o in n) {
    const r = n[o];
    if (typeof r != "number") {
      const i = r;
      t.push(i.data()), e.push(o), s.push(i);
    }
  }
  if (t.length > 0) {
    const o = await Promise.all(t);
    for (let r = 0; r < o.length; ++r)
      n[e[r]] = o[r][0];
    Et(s);
  }
}
function sx(n) {
  if (n != null)
    for (const t in n) {
      const e = n[t];
      typeof e != "number" && e.dispose();
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var Am;
(function(n) {
  n[n.SILENT = 0] = "SILENT", n[n.VERBOSE = 1] = "VERBOSE";
})(Am || (Am = {}));
const VR = 125;
class ti {
  constructor() {
    this.validationData = null;
  }
  setParams(t) {
    this.params = t;
  }
  async onEpochBegin(t, e) {
  }
  async onEpochEnd(t, e) {
  }
  async onBatchBegin(t, e) {
  }
  async onBatchEnd(t, e) {
  }
  async onTrainBegin(t) {
  }
  async onTrainEnd(t) {
  }
  // LayersModel needs to call Callback.setModel(), but cannot actually depend
  // on Callback because that creates a cyclic dependency.  Providing this no-op
  // method on BaseCallback breaks the cycle: this way LayersModel can depend on
  // BaseCallback but not on Callback.  The argument is typed as `Container`
  // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback
  // overrides this method and enforces that the argument is really a
  // LayersModel.
  setModel(t) {
  }
}
class PR {
  // TODO(cais): When the need arises, uncomment the following lines and
  // implement the queue for time values.
  // private deltaTBatch: number;
  // private deltaTsBatchBegin: Array<number>;
  // private deltaTsBatchEnd: Array<number>;
  /**
   * Constructor of CallbackList.
   * @param callbacks Array of `Callback` instances.
   * @param queueLength Queue length for keeping running statistics over
   *   callback execution time.
   */
  constructor(t, e = 10) {
    t == null && (t = []), this.callbacks = t, this.queueLength = e;
  }
  append(t) {
    this.callbacks.push(t);
  }
  setParams(t) {
    for (const e of this.callbacks)
      e.setParams(t);
  }
  setModel(t) {
    for (const e of this.callbacks)
      e.setModel(t);
  }
  /**
   * Called at the start of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochBegin(t, e);
  }
  /**
   * Called at the end of an epoch.
   * @param epoch Index of epoch.
   * @param logs Dictionary of logs.
   */
  async onEpochEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onEpochEnd(t, e);
  }
  /**
   * Called  right before processing a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchBegin(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchBegin(t, e);
  }
  /**
   * Called at the end of a batch.
   * @param batch Index of batch within the current epoch.
   * @param logs Dictionary of logs.
   */
  async onBatchEnd(t, e) {
    e == null && (e = {});
    for (const s of this.callbacks)
      await s.onBatchEnd(t, e);
  }
  /**
   * Called at the beginning of training.
   * @param logs Dictionary of logs.
   */
  async onTrainBegin(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainBegin(t);
  }
  /**
   * Called at the end of training.
   * @param logs Dictionary of logs.
   */
  async onTrainEnd(t) {
    t == null && (t = {});
    for (const e of this.callbacks)
      await e.onTrainEnd(t);
  }
}
class XR extends ti {
  constructor() {
    super();
  }
  async onEpochBegin(t) {
    this.seen = 0, this.totals = {};
  }
  async onBatchEnd(t, e) {
    e == null && (e = {});
    const s = e.size == null ? 0 : e.size;
    this.seen += s;
    for (const o in e) {
      const r = e[o];
      if (typeof r == "number")
        this.totals.hasOwnProperty(o) || (this.totals[o] = 0), this.totals[o] = this.totals[o] + r * s;
      else {
        let i;
        o in this.totals ? i = this.totals[o] : this.totals[o] = 0;
        const a = X(() => ot(this.totals[o], D(r, s)));
        this.totals[o] = a, i != null && i.dispose();
      }
    }
  }
  async onEpochEnd(t, e) {
    if (e != null)
      for (const s of this.params.metrics)
        this.totals[s] != null && (typeof this.totals[s] == "number" ? e[s] = this.totals[s] / this.seen : X(() => {
          const o = D(St(1, this.seen), this.totals[s]);
          e[s] = o, this.totals[s].dispose(), vn(e[s]);
        }));
  }
}
class OR extends ti {
  async onTrainBegin(t) {
    this.epoch = [], this.history = {};
  }
  async onEpochEnd(t, e) {
    e == null && (e = {}), this.epoch.push(t);
    for (const s in e)
      this.history[s] == null && (this.history[s] = []), this.history[s].push(e[s]);
  }
  /**
   * Await the values of all losses and metrics.
   */
  async syncData() {
    const t = [], e = [], s = [];
    for (const r in this.history) {
      const i = this.history[r];
      for (let a = 0; a < i.length; ++a)
        if (typeof i[a] != "number") {
          const l = i[a];
          t.push(l.data()), e.push(r), s.push(a);
        }
    }
    const o = await Promise.all(t);
    for (let r = 0; r < o.length; ++r)
      this.history[e[r]][s[r]].dispose(), this.history[e[r]][s[r]] = o[r][0];
  }
}
class AR extends ti {
  constructor(t, e) {
    if (super(), this.currentEpoch = 0, this.nowFunc = t.nowFunc, this.nextFrameFunc = t.nextFrameFunc || Qc, this.yieldEvery = e || "auto", this.yieldEvery === "auto" && (this.yieldEvery = VR), this.yieldEvery === "never" && t.onYield != null)
      throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");
    el(this.yieldEvery) && (this.maybeWait = sR(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc)), this.trainBegin = t.onTrainBegin, this.trainEnd = t.onTrainEnd, this.epochBegin = t.onEpochBegin, this.epochEnd = t.onEpochEnd, this.batchBegin = t.onBatchBegin, this.batchEnd = t.onBatchEnd, this.yield = t.onYield;
  }
  async maybeWait(t, e, s) {
    const o = [];
    this.yield != null && (await lo(s), o.push(this.yield(t, e, s))), o.push(this.nextFrameFunc()), await Promise.all(o);
  }
  async onEpochBegin(t, e) {
    this.currentEpoch = t, this.epochBegin != null && (await lo(e), await this.epochBegin(t, e));
  }
  async onEpochEnd(t, e) {
    const s = [];
    this.epochEnd != null && (await lo(e), s.push(this.epochEnd(t, e))), this.yieldEvery === "epoch" && s.push(this.nextFrameFunc()), await Promise.all(s);
  }
  async onBatchBegin(t, e) {
    this.batchBegin != null && (await lo(e), await this.batchBegin(t, e));
  }
  async onBatchEnd(t, e) {
    const s = [];
    this.batchEnd != null && (await lo(e), s.push(this.batchEnd(t, e))), this.yieldEvery === "batch" ? s.push(this.nextFrameFunc()) : el(this.yieldEvery) && s.push(this.maybeWait(this.currentEpoch, t, e)), await Promise.all(s);
  }
  async onTrainBegin(t) {
    this.trainBegin != null && (await lo(t), await this.trainBegin(t));
  }
  async onTrainEnd(t) {
    this.trainEnd != null && (await lo(t), await this.trainEnd(t));
  }
}
function ox(n, t) {
  return n == null && (n = {}), n instanceof ti ? [n] : Array.isArray(n) && n[0] instanceof ti ? n : oe(n).map((s) => new AR(s, t));
}
class Wn {
  /**
   * Blocks public access to constructor.
   */
  constructor() {
  }
  /**
   * Register a tf.LayersModel.fit() callback constructor.
   *
   * The registered callback constructor will be used to instantiate
   * callbacks for every tf.LayersModel.fit() call afterwards.
   *
   * @param verbosityLevel Level of verbosity at which the `callbackConstructor`
   *   is to be reigstered.
   * @param callbackConstructor A no-arg constructor for `tf.Callback`.
   * @throws Error, if the same callbackConstructor has been registered before,
   *   either at the same or a different `verbosityLevel`.
   */
  static registerCallbackConstructor(t, e) {
    S(t >= 0 && Number.isInteger(t), () => `Verbosity level is expected to be an integer >= 0, but got ${t}`), Wn.checkForDuplicate(e), Wn.constructors[t] == null && (Wn.constructors[t] = []), Wn.constructors[t].push(e);
  }
  static checkForDuplicate(t) {
    for (const e in Wn.constructors)
      Wn.constructors[+e].forEach((o) => {
        if (o === t)
          throw new F("Duplicate callback constructor.");
      });
  }
  /**
   * Clear all registered callback constructors.
   */
  static clear() {
    Wn.constructors = {};
  }
  /**
   * Create callbacks using the registered callback constructors.
   *
   * Given `verbosityLevel`, all constructors registered at that level or above
   * will be called and the instantiated callbacks will be used.
   *
   * @param verbosityLevel: Level of verbosity.
   */
  static createCallbacks(t) {
    const e = [];
    for (const s in Wn.constructors) {
      const o = +s;
      t >= o && e.push(...Wn.constructors[o]);
    }
    return e.map((s) => new s());
  }
}
Wn.constructors = {};
function rx(n, t, e, s, o, r, i, a, l) {
  const c = new OR(), u = [
    new XR(),
    ...Wn.createCallbacks(t)
  ];
  n != null && u.push(...n), u.push(c);
  const h = new PR(u);
  return h.setParams({
    epochs: e,
    initialEpoch: s,
    samples: o,
    steps: r,
    batchSize: i,
    verbose: t,
    doValidation: a,
    metrics: l
  }), { callbackList: h, history: c };
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ns(n, t = {}, e = !1) {
  return ma(n, In.getMap().classNameMap, t, "layer", e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function xl(n, t) {
  return X(() => {
    n.dtype !== "float32" && (n = ht(n, "float32"));
    const e = yt(xa(n), t, !0), s = la(e.shape, Te()), o = Ye(to(e, s));
    return St(n, o);
  });
}
function ou(n, t) {
  return X(() => ye(xa(wt(t, n)), -1));
}
function Mf(n, t) {
  return X(() => ye(Ee(wt(t, n)), -1));
}
function Df(n, t) {
  return X(() => {
    const e = wt(n, t), s = kn(Ee(n), Te(), Number.MAX_VALUE), o = Ee(St(e, s));
    return D(100, ye(o, -1));
  });
}
function ZR(n, t) {
  return X(() => {
    const e = kn(t, Te(), Number.MAX_VALUE), s = Hn(ot(1, e)), o = kn(n, Te(), Number.MAX_VALUE), r = Hn(ot(1, o));
    return ye(xa(wt(s, r)), -1);
  });
}
function KR(n, t) {
  return X(() => {
    const e = to(0, wt(1, D(n, t)));
    return ye(xa(e), -1);
  });
}
function BR(n, t) {
  return X(() => {
    const e = to(0, wt(1, D(n, t)));
    return ye(e, -1);
  });
}
function HR(n, t) {
  return X(() => {
    const e = yt(D(n, t), -1), s = fs(D(wt(1, n), t), -1);
    return to(0, ot(1, wt(s, e)));
  });
}
function _R(n, t) {
  return X(() => {
    const e = Math.log(2), s = wt(t, n), o = wt(ot(s, ca(D(-2, s))), e);
    return ye(o, -1);
  });
}
function ei(n, t, e = !1) {
  return X(() => {
    if (e)
      t = Ip(t);
    else {
      const s = yt(t, t.shape.length - 1, !0);
      t = St(t, s);
    }
    return t = kn(t, Te(), 1 - Te()), fe(yt(D(ht(n, "float32"), Hn(t)), t.shape.length - 1));
  });
}
function yl(n, t, e = !1) {
  return X(() => {
    const s = ht(Hc(mR(n)), "int32");
    t = kn(t, Te(), 1 - Te());
    const o = t.shape, r = P(Mb(s, o[o.length - 1]), o);
    return ei(r, t, e);
  });
}
function UR(n, t) {
  if (!At(n.shape, t.shape))
    throw new F(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);
  return X(() => {
    const e = Ms(t), s = fe(Ee(t));
    return ot(wt(e, D(t, n)), hp(Bn(s)));
  });
}
function ru(n, t) {
  return X(() => {
    let e;
    return e = kn(t, Te(), 1 - Te()), e = Hn(St(e, wt(1, e))), ye(UR(n, e), -1);
  });
}
function YR(n, t) {
  return X(() => {
    const e = kn(n, Te(), 1), s = kn(t, Te(), 1);
    return yt(D(n, Hn(St(e, s))), -1);
  });
}
function jR(n, t) {
  return X(() => {
    const e = Hn(ot(Te(), t));
    return ye(wt(t, D(n, e)), -1);
  });
}
function ix(n, t) {
  return X(() => {
    const e = xl(n, -1), s = xl(t, -1), o = D(e, s);
    return fe(yt(o, -1));
  });
}
const wl = {
  meanSquaredError: ou,
  meanAbsoluteError: Mf,
  meanAbsolutePercentageError: Df,
  meanSquaredLogarithmicError: ZR,
  squaredHinge: KR,
  hinge: BR,
  categoricalHinge: HR,
  logcosh: _R,
  categoricalCrossentropy: ei,
  sparseCategoricalCrossentropy: yl,
  binaryCrossentropy: ru,
  kullbackLeiblerDivergence: YR,
  poisson: jR,
  cosineProximity: ix
};
function Nu(n) {
  if (typeof n == "string") {
    if (n in wl)
      return wl[n];
    let t = `Unknown loss ${n}`;
    throw n.toLowerCase().includes("softmaxcrossentropy") && (t = `Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`), new F(t);
  } else
    return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function ax(n, t) {
  return X(() => {
    const e = D(0.5, _n(t)), s = ga(Tn(t, e), n.dtype);
    return ye(Kn(n, s), -1);
  });
}
function lx(n, t) {
  return X(() => ga(Kn(Qr(n, -1), Qr(t, -1)), "float32"));
}
function cx(n, t) {
  return X(() => ht(yt(bs(Kn(n, 1), Kn(t, 1))), "float32"));
}
function QR(n, t) {
  return X(() => ht(yt(bs(Kn(n, 1), Kn(t, 0))), "float32"));
}
function JR(n, t) {
  return X(() => ht(yt(bs(Kn(n, 0), Kn(t, 1))), "float32"));
}
function qR(n, t) {
  return X(() => {
    const e = cx(n, t), s = JR(n, t), o = ot(e, s);
    return ht(sn(Tn(o, 0), St(e, o), 0), "float32");
  });
}
function sY(n, t) {
  return X(() => {
    const e = cx(n, t), s = QR(n, t), o = ot(e, s);
    return ht(sn(Tn(o, 0), St(e, o), 0), "float32");
  });
}
function tG(n, t) {
  return ru(n, t);
}
function eG(n, t) {
  return n.rank === t.rank && (n = ua(n, [n.rank - 1])), t = Qr(t, -1), t.dtype !== n.dtype && (t = ht(t, n.dtype)), ht(Kn(n, t), "float32");
}
const nG = ou, sG = ou, oG = Mf, rG = Mf, iG = Df, aG = Df, ux = ei, lG = ix, hx = yl, Il = {
  binaryAccuracy: ax,
  categoricalAccuracy: lx,
  precision: qR,
  categoricalCrossentropy: ux,
  sparseCategoricalCrossentropy: hx,
  mse: nG,
  MSE: sG,
  mae: oG,
  MAE: rG,
  mape: iG,
  MAPE: aG,
  cosine: lG
};
function cG(n) {
  if (typeof n == "string" && n in Il)
    return Il[n];
  if (typeof n != "string" && n != null)
    return n;
  throw new F(`Unknown metric ${n}`);
}
function Va(n) {
  if (hs(n !== null, `Unknown LossOrMetricFn ${n}`), typeof n == "string")
    return n;
  {
    let t;
    for (const e of Object.keys(wl))
      if (wl[e] === n) {
        t = e;
        break;
      }
    if (t !== void 0)
      return t;
    for (const e of Object.keys(Il))
      if (Il[e] === n) {
        t = e;
        break;
      }
    return t !== void 0 ? t : n.name;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function uG(n) {
  const t = {
    Adagrad: () => Ko.adagrad(0.01),
    Adadelta: () => Ko.adadelta(1, 0.95, Te()),
    Adam: () => Ko.adam(1e-3, 0.9, 0.999, Te()),
    Adamax: () => Ko.adamax(2e-3, 0.9, 0.999, Te(), 0),
    RMSProp: () => Ko.rmsprop(1e-3, 0.9, 0, Te()),
    SGD: () => Ko.sgd(0.01)
  };
  if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, n in t)
    return t[n]();
  throw new F(`Unknown Optimizer ${n}`);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const Zm = 1 * 1024 * 1024;
function Km(n, t, e = !1) {
  if (n == null || typeof n != "object" || Object.getPrototypeOf(n) !== Object.prototype || !Gh(n))
    throw new Error("User-defined metadata is expected to be a JSON object, but is not.");
  if (e) {
    const s = JSON.stringify(n);
    s.length > Zm && console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${Zm}.`);
  }
}
function Gh(n) {
  if (n === null)
    return !0;
  if (typeof n == "object")
    if (Object.getPrototypeOf(n) === Object.prototype) {
      const t = Object.keys(n);
      for (const e of t)
        if (typeof e != "string" || !Gh(n[e]))
          return !1;
      return !0;
    } else if (Array.isArray(n)) {
      for (const t of n)
        if (!Gh(t))
          return !1;
      return !0;
    } else
      return !1;
  else {
    const t = typeof n;
    return t === "string" || t === "number" || t === "boolean";
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function hG(n, t, e, s = console.log) {
  const o = pG(n), r = ["Layer (type)", "Input Shape", "Output shape", "Param #"];
  o ? (t = t || 90, e = e || [0.32, 0.61, 0.89, 1]) : (t = t || 115, e = e || [0.24, 0.48, 0.7, 0.8, 1]), e[e.length - 1] <= 1 && (e = e.map((u) => Math.floor(t * u)));
  let i;
  if (!o) {
    r.push("Receives inputs"), i = [];
    for (const u in n.nodesByDepth)
      i.push(...n.nodesByDepth[u]);
  }
  s("_".repeat(t)), Cl(r, e, s), s("=".repeat(t));
  const a = n.layers;
  for (let u = 0; u < a.length; ++u)
    o ? fG(a[u], e, s) : mG(a[u], e, i, s), s((u === a.length - 1 ? "=" : "_").repeat(t));
  n.checkTrainableWeightsConsistency();
  const l = dG(n), c = ml(n.nonTrainableWeights);
  s(`Total params: ${l + c}`), s(`Trainable params: ${l}`), s(`Non-trainable params: ${c}`), s("_".repeat(t));
}
function dG(n) {
  let t;
  return n.collectedTrainableWeights != null ? t = ml(n.collectedTrainableWeights) : t = ml(n.trainableWeights), t;
}
function pG(n) {
  let t = !0;
  const e = [], s = [];
  for (const o in n.nodesByDepth)
    e.push(n.nodesByDepth[o]);
  for (const o of e) {
    if (o.length > 1 || o.length === 1 && o[0].inboundLayers.length > 1) {
      t = !1;
      break;
    }
    s.push(...o);
  }
  if (t)
    for (const o of n.layers) {
      let r = !1;
      for (const i of o.inboundNodes)
        if (s.indexOf(i) !== -1)
          if (r) {
            t = !1;
            break;
          } else
            r = !0;
      if (!t)
        break;
    }
  return t;
}
function Cl(n, t, e = console.log) {
  let s = "";
  for (let o = 0; o < n.length; ++o)
    o > 0 && (s = s.slice(0, s.length - 1) + " "), s += n[o], s = s.slice(0, t[o]), s += " ".repeat(t[o] - s.length);
  e(s);
}
function fG(n, t, e) {
  let s, o;
  try {
    o = n.inboundNodes.map((l) => JSON.stringify(l.inputShapes)).join(",");
  } catch {
    o = "multiple";
  }
  try {
    s = JSON.stringify(n.outputShape);
  } catch {
    s = "multiple";
  }
  const r = n.name, i = n.getClassName(), a = [
    `${r} (${i})`,
    o,
    s,
    n.countParams().toString()
  ];
  Cl(a, t, e);
}
function mG(n, t, e, s) {
  let o, r;
  try {
    r = n.inboundNodes.map((h) => JSON.stringify(h.inputShapes)).join(",");
  } catch {
    r = "multiple";
  }
  try {
    o = JSON.stringify(n.outputShape);
  } catch {
    o = "multiple";
  }
  const i = [];
  for (const h of n.inboundNodes)
    if (!(e != null && e.length > 0 && e.indexOf(h) === -1))
      for (let d = 0; d < h.inboundLayers.length; ++d) {
        const p = h.inboundLayers[d].name, f = h.nodeIndices[d], g = h.tensorIndices[d];
        i.push(`${p}[${f}][${g}]`);
      }
  const a = n.name, l = n.getClassName(), c = i.length === 0 ? "" : i[0], u = [
    `${a} (${l})`,
    r,
    o,
    n.countParams().toString(),
    c
  ];
  Cl(u, t, s);
  for (let h = 1; h < i.length; ++h)
    Cl(["", "", "", "", i[h]], t, s);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function dx(n, t, e) {
  return (n === "inboundNodes" || n === "outputLayers" || n === "inputLayers") && t === 0 && typeof e == "string";
}
function ni(n, t) {
  if (n === null)
    return null;
  if (typeof n == "string")
    return po(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let o = 0; o < s; ++o) {
      const r = n[o];
      dx(t, o, r) ? e.push(r) : e.push(ni(r, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const o = n[s];
      if (s === "name" && typeof o == "string")
        e[s] = o;
      else {
        const r = po(s);
        e[r] = ni(o, r);
      }
    }
    return e;
  }
}
function Lh(n, t) {
  if (n == null)
    return null;
  if (typeof n == "string")
    return Is(n);
  if (typeof n == "number" || typeof n == "boolean")
    return n;
  if (n instanceof Array) {
    const e = [], s = n.length;
    for (let o = 0; o < s; ++o) {
      const r = n[o];
      dx(t, o, r) ? e.push(r) : e.push(Lh(r, t));
    }
    return e;
  } else {
    const e = {};
    for (const s of Object.keys(n)) {
      const o = n[s], r = Is(s);
      (s === "name" || s === "className") && typeof o == "string" ? e[r] = o : e[r] = Lh(o, s);
    }
    return e;
  }
}
/** @license See the LICENSE file. */
const px = "3.21.0";
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Jn extends Vt {
  constructor(t) {
    if (super({}), this.containerNodes = /* @__PURE__ */ new Set(), this.name = t.name, this.name == null) {
      const x = this.getClassName().toLowerCase();
      this.name = eu(x);
    }
    if (this.supportsMasking = !1, this.trainable_ = !0, Array.isArray(t.inputs) ? this.inputs = t.inputs.slice() : this.inputs = [t.inputs], Array.isArray(t.outputs) ? this.outputs = t.outputs.slice() : this.outputs = [t.outputs], As(this.inputs).length !== this.inputs.length)
      throw new F(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((x) => x.name)}`);
    As(this.outputs).length !== this.outputs.length && console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((x) => x.name)}`), this.inputLayers = [], this.inputLayersNodeIndices = [], this.inputLayersTensorIndices = [], this.outputLayers = [], this.outputLayersNodeIndices = [], this.outputLayersTensorIndices = [], this.layers = [], this.internalContainerRefs = [];
    for (const x of this.outputs) {
      const w = x.sourceLayer, y = x.nodeIndex, I = x.tensorIndex;
      this.outputLayers.push(w), this.outputLayersNodeIndices.push(y), this.outputLayersTensorIndices.push(I);
    }
    for (const x of this.inputs) {
      const w = x.sourceLayer, y = x.nodeIndex, I = x.tensorIndex;
      hs(y === 0, "input layer has >1 nodes"), hs(I === 0, "input layer has >1 tensors"), this.inputLayers.push(w), this.inputLayersNodeIndices.push(y), this.inputLayersTensorIndices.push(I);
    }
    this.inputNames = [], this.outputNames = [], this.feedInputShapes = [], this.feedInputNames = [], this.feedOutputNames = [];
    for (let x = 0; x < this.inputLayers.length; x++) {
      const w = this.inputLayers[x];
      if (!(w instanceof wa))
        throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${w.getClassName()}.`);
      this.inputNames.push(w.name), this.feedInputShapes.push(w.batchInputShape), this.feedInputNames.push(w.name);
    }
    for (const x of this.outputLayers)
      this.outputNames.push(x.name);
    this.internalInputShapes = this.inputs.map((x) => x.shape), this.internalOutputShapes = this.outputs.map((x) => x.shape);
    const e = {}, s = {}, o = {}, r = {}, i = {}, a = [], l = (x, w, y, I, v, T) => {
      (I == null || v == null || T == null) && (I = x.sourceLayer, v = x.nodeIndex, T = x.tensorIndex);
      const k = I.inboundNodes[v];
      if (y.indexOf(k) !== -1)
        throw new Pn(`The tensor ${x.name} at layer "${I.name}" is part of a cycle.`);
      if (w.indexOf(k) !== -1)
        return;
      this.containerNodes.add(Jn.nodeKey(I, v)), I.id in i || (i[I.id] = Object.keys(i).length), y.indexOf(k) === -1 && y.push(k);
      const $ = k.inboundLayers.length;
      for (let G = 0; G < $; G++) {
        const z = k.inputTensors[G], A = k.inboundLayers[G], Z = k.nodeIndices[G], _ = k.tensorIndices[G];
        l(z, w, y, A, Z, _);
      }
      for (w.push(k); y.indexOf(k) >= 0; )
        y.splice(y.indexOf(k), 1);
      a.push(k);
    }, c = [], u = [];
    for (const x of this.outputs)
      l(x, c, u);
    const h = a.slice().reverse();
    for (const x of h) {
      s[x.id] = x, x.id in e || (e[x.id] = 0);
      let w = e[x.id];
      const y = o[x.outboundLayer.id] == null ? 0 : o[x.outboundLayer.id];
      w = Math.max(w, y), o[x.outboundLayer.id] = w, r[x.outboundLayer.id] = x.outboundLayer, e[x.id] = w;
      for (let I = 0; I < x.inboundLayers.length; I++) {
        const v = x.inboundLayers[I], T = x.nodeIndices[I], k = v.inboundNodes[T], $ = e[k.id] == null ? 0 : e[k.id];
        e[k.id] = Math.max(w + 1, $), s[k.id] = k;
      }
    }
    const d = {};
    for (const x in e) {
      const w = e[x];
      w in d || (d[w] = []), d[w].push(s[x]);
    }
    const p = {};
    for (const x in o) {
      const w = o[x];
      w in p || (p[w] = []), p[w].push(r[x]);
    }
    let f = Object.keys(p).map((x) => parseInt(x, 10)).sort(Da);
    this.layers = [];
    for (const x of f) {
      const w = p[x];
      w.sort((y, I) => {
        const v = i[y.id], T = i[I.id];
        return v < T ? -1 : v > T ? 1 : 0;
      });
      for (const y of w)
        y instanceof Jn && this.internalContainerRefs.push(y), this.layers.push(y);
    }
    this.layersByDepth = p, f = Object.keys(d).map((x) => parseInt(x, 10)).sort(Da);
    const g = this.inputs.slice(), m = [];
    for (const x of f)
      for (const w of d[x]) {
        const y = w.outboundLayer;
        if (y != null) {
          for (const I of w.inputTensors)
            if (g.indexOf(I) === -1)
              throw new Pn(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${y.name}". The following previous layers were accessed without issue: ${m}`);
          for (const I of w.outputTensors)
            g.push(I);
          m.push(y.name);
        }
      }
    this.nodesByDepth = d;
    const b = this.layers.map((x) => x.name);
    for (const x of b) {
      const w = b.filter((y) => y === x).length;
      if (w !== 1)
        throw new Pn(`The name "${x}" is used ${w} times in the model. All layer names should be unique. Layer names: ` + JSON.stringify(b));
    }
    this.outboundNodes = [], this.inboundNodes = [], new su({
      outboundLayer: this,
      inboundLayers: [],
      nodeIndices: [],
      tensorIndices: [],
      inputTensors: this.inputs,
      outputTensors: this.outputs,
      inputMasks: this.inputs.map((x) => null),
      outputMasks: this.outputs.map((x) => null),
      inputShapes: this.inputs.map((x) => x.shape),
      outputShapes: this.outputs.map((x) => x.shape)
    }), this.built = !0, this._refCount = 1;
  }
  assertNotDisposed() {
    if (this._refCount === 0)
      throw new Error(`Container '${this.name}' is already disposed.`);
  }
  /**
   * Attempt to dispose a LayersModel's weights.
   *
   * This method decrease the reference count of the LayersModel object by 1.
   *
   * A LayersModel is reference-counted. Its reference count is incremented by 1
   * when it is first constructed and when it is used as a Layer of another
   * LayersModel.
   *
   * If the reference count of a LayersModel becomes 0, the `dispose` method of
   * all its constituent `Layer`s will be called.
   *
   * Note: If the reference count is greater than 0 after the decrement, the
   * `dispose` method of its constituent `Layer`s will *not* be called.
   *
   * After a LayersModel is disposed, it cannot be used in calls such as
   * 'predict`, `evaluate` or `fit` anymore.
   *
   * @returns A DisposeResult Object with the following fields:
   *   - refCountAfterDispose: The reference count of the LayersModel after this
   *     `dispose()` call.
   *   - numDisposedVariables: Number of `tf.Variable`s (i.e., weights) disposed
   *     during this `dispose()` call.
   * @throws {Error} If the layer is not built yet, or if the LayersModel has
   *   already been disposed.
   */
  dispose() {
    this.assertNotDisposed();
    const t = { refCountAfterDispose: null, numDisposedVariables: 0 };
    if (--this._refCount === 0) {
      for (const e of this.layers)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
      for (const e of this.internalContainerRefs)
        t.numDisposedVariables += e.dispose().numDisposedVariables;
    }
    return t.refCountAfterDispose = this._refCount, t;
  }
  get trainable() {
    return this.trainable_;
  }
  set trainable(t) {
    this.layers.forEach((e) => {
      e._trainableWeights.forEach((s) => s.trainable = t);
    }), this.trainable_ = t;
  }
  get trainableWeights() {
    if (this._trainableWeights.length > 0)
      throw new F("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
    if (!this.trainable)
      return [];
    let t = [];
    for (const e of this.layers)
      t = t.concat(e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.layers)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.layers)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  get weights() {
    return this.trainableWeights.concat(this.nonTrainableWeights);
  }
  /**
   * Loads all layer weights from a JSON object.
   *
   * Porting Note: HDF5 weight files cannot be directly loaded in JavaScript /
   *   TypeScript. The utility script at `scripts/pykeras.py` offers means
   *   to convert them into JSON strings compatible with this method.
   * Porting Note: TensorFlow.js Layers supports only loading by name currently.
   *
   * @param weights A JSON mapping weight names to weight values as nested
   *   arrays of numbers, or a `NamedTensorMap`, i.e., a JSON mapping weight
   *   names to `tf.Tensor` objects.
   * @param strict Require that the provided weights exactly match those
   *   required by the container.  Default: `true`.  Passing `false` means that
   *   extra weights and missing weights will be silently ignored.
   */
  loadWeights(t, e = !0) {
    const s = {};
    let o = 0;
    for (const i of this.layers)
      for (const a of i.weights) {
        if (s[a.originalName] != null)
          throw new F(`Duplicate weight name: ${a.originalName}`);
        s[a.originalName] = a, o++;
      }
    const r = [];
    for (const i in t) {
      let a = i;
      if (s[i] == null) {
        const l = i.split("/");
        a = l.slice(0, -2).concat([l[l.length - 1]]).join("/");
      }
      if (s[a] != null)
        r.push([s[a], t[i]]);
      else if (e)
        throw new F(`Provided weight data has no target variable: ${i}`);
      delete s[a];
    }
    if (e) {
      const i = [];
      for (const a in s)
        i.push(a);
      if (i.length > 0)
        throw new F(`${i.length} of ${o} weights are not set: ${i}`);
    }
    Ef(r);
  }
  /**
   * Util shared between different serialization methods.
   * @returns LayersModel config with Keras version information added.
   */
  updatedConfig() {
    const t = this.getConfig(), e = {};
    return e.className = this.getClassName(), e.config = t, e.kerasVersion = `tfjs-layers ${px}`, e.backend = "TensorFlow.js", e;
  }
  /**
   * Returns a JSON string containing the network configuration.
   *
   * To load a network from a JSON save file, use
   * models.modelFromJSON(jsonString);
   * @param extraJsonArgs Unused in tfjs-layers, maintained for PyKeras
   * @param returnString Whether the return value should be stringified
   *    (default: `true`).
   * @returns a JSON string if `returnString` (default), or a JSON object if
   *   `!returnString`.
   */
  // tslint:disable-next-line:no-any
  toJSON(t, e = !0) {
    const s = Lh(this.updatedConfig());
    return e ? JSON.stringify(s) : s;
  }
  /**
   * Call the model on new inputs.
   *
   * In this case `call` just reapplies all ops in the graph to the new inputs
   * (e.g. build a new computational graph from the provided inputs).
   *
   * @param inputs A tensor or list of tensors.
   * @param mask A mask or list of masks. A mask can be either a tensor or null
   *   (no mask).
   *
   * @return A tensor if there is a single output, or a list of tensors if there
   *   are more than one outputs.
   */
  call(t, e) {
    return X(() => {
      t = oe(t);
      const s = new Ps();
      for (let o = 0; o < this.inputs.length; ++o)
        s.add(this.inputs[o], t[o]);
      return Ar(this.outputs, s, e);
    });
  }
  /**
   * Computes an output mask tensor.
   *
   * @param inputs Tensor or list of tensors.
   * @param mask Tensor or list of tensors.
   *
   * @return null or a tensor (or list of tensors, one per output tensor of the
   * layer).
   */
  computeMask(t, e) {
    return X(() => {
      t = oe(t);
      let s;
      return e == null ? s = Eo(null, t.length) : s = oe(e), this.runInternalGraph(t, s)[1];
    });
  }
  /**
   * Computes the output shape of the layer.
   *
   * Assumes that the layer will be built to match that input shape provided.
   *
   * @param inputShape A shape (tuple of integers) or a list of shape tuples
   *   (one per output tensor of the layer). Shape tuples can include null for
   *   free dimensions, instead of an integer.
   */
  computeOutputShape(t) {
    const e = fl(t);
    if (e.length !== this.inputLayers.length)
      throw new F(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);
    const s = {};
    for (let a = 0; a < e.length; a++) {
      const l = this.inputLayers[a], c = e[a], u = l.name + "_0_0";
      s[u] = c;
    }
    const o = Object.keys(this.nodesByDepth).map((a) => parseInt(a, 10)).sort(Da);
    if (o.length > 1)
      for (const a of o) {
        const l = this.nodesByDepth[a];
        for (const c of l) {
          const u = c.outboundLayer;
          if (this.inputLayers.map((g) => g.id).indexOf(u.id) !== -1)
            continue;
          const h = [];
          for (let g = 0; g < c.inboundLayers.length; g++) {
            const m = c.inboundLayers[g], b = c.nodeIndices[g], x = c.tensorIndices[g], w = `${m.name}_${b}_${x}`, y = s[w];
            h.push(y);
          }
          const d = u.computeOutputShape(tn(h)), p = fl(d), f = u.inboundNodes.indexOf(c);
          for (let g = 0; g < p.length; g++) {
            const m = `${u.name}_${f}_${g}`;
            s[m] = p[g];
          }
        }
      }
    const r = [], i = [];
    for (let a = 0; a < this.outputLayers.length; a++) {
      const l = this.outputLayers[a], c = this.outputLayersNodeIndices[a], u = this.outputLayersTensorIndices[a], h = `${l.name}_${c}_${u}`;
      i.push(h);
    }
    for (let a = 0; a < i.length; a++) {
      const l = i[a];
      hs(l in s), r.push(s[l]);
    }
    return tn(r);
  }
  /**
   * Computes output tensors for new inputs.
   *
   * Note:
   *   - Expects `inputs` to be a list (potentially with 1 element).
   *
   * @param inputs List of tensors
   * @param masks List of masks (tensors or null).
   * @return Three lists: outputTensors, outputMasks, outputShapes
   */
  runInternalGraph(t, e) {
    e == null && (e = Eo(null, t.length));
    const s = {};
    for (let l = 0; l < this.inputs.length; ++l) {
      const c = this.inputs[l], u = t[l], h = e[l];
      s[c.id] = [u, h];
    }
    const o = Object.keys(this.nodesByDepth).map((l) => parseInt(l, 10)).sort(Da);
    for (const l of o) {
      const c = this.nodesByDepth[l];
      for (const u of c) {
        const h = u.outboundLayer, d = u.inputTensors, p = u.outputTensors, f = new Array();
        for (const g of d)
          g.id in s && f.push(s[g.id]);
        if (f.length === d.length) {
          let g = {}, m, b, x, w;
          if (u.callArgs != null && (g = u.callArgs), f.length === 1) {
            const [y, I] = f[0];
            g.mask == null && (g.mask = I), x = oe(h.call(y, g)), w = oe(h.computeMask(y, I)), m = [y], b = [I];
          } else
            m = f.map((y) => y[0]), b = f.map((y) => y[1]), g.mask == null && (g.mask = b), x = oe(h.call(m, g)), w = oe(h.computeMask(m, b));
          if (h.activityRegularizer)
            throw new Wt("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
          for (let y = 0; y < p.length; ++y) {
            const I = p[y], v = x[y], T = w[y];
            s[I.id] = [v, T];
          }
        }
      }
    }
    const r = [], i = [], a = [];
    for (const l of this.outputs) {
      hs(l.id in s, `Could not compute output ${l.name} : ${l.id}`);
      const [c, u] = s[l.id];
      a.push(c.shape), r.push(c), i.push(u);
    }
    return [r, i, a];
  }
  /**
   * Builds a map of internal node keys to node ordering.
   * Used in serializaion a node orderings may change as unused nodes are
   * dropped. Porting Note:  This helper method was pulled out of getConfig to
   * improve readability.
   * @param layers An array of Layers in the model.
   * @returns Map of Node Keys to index order within the layer.
   */
  buildNodeConversionMap(t) {
    const e = {};
    let s;
    for (const o of this.layers) {
      s = o instanceof Jn ? 1 : 0;
      for (let r = 0; r < o.inboundNodes.length; r++) {
        const i = Jn.nodeKey(o, r);
        this.containerNodes.has(i) && (e[i] = s, s += 1);
      }
    }
    return e;
  }
  /**
   * Retrieves a layer based on either its name (unique) or index.
   *
   * Indices are based on order of horizontal graph traversal (bottom-up).
   *
   * If both `name` and `index` are specified, `index` takes precedence.
   *
   * @param name Name of layer.
   * @param index Index of layer.
   * @returns A Layer instance.
   * @throws ValueError: In case of invalid layer name or index.
   *
   * @doc {
   *    heading: 'Layers',
   *    subheading: 'Classes',
   *    namespace: 'layers',
   *    subclasses: ['LayersModel']
   * }
   */
  getLayer(t, e) {
    if (e != null) {
      if (this.layers.length <= e)
        throw new F(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);
      return this.layers[e];
    } else if (t == null)
      throw new F("Provide either a layer name or layer index");
    for (const s of this.layers)
      if (s.name === t)
        return s;
    throw new F(`No such layer: ${t}`);
  }
  /**
   * Retrieves the Container's current loss values.
   *
   * Used for regularizers during training.
   */
  calculateLosses() {
    return X(() => {
      const t = [];
      for (const e of this.layers)
        for (let s = 0; s < e.inboundNodes.length; ++s) {
          const o = Jn.nodeKey(e, s);
          this.containerNodes.has(o) && t.push(...e.calculateLosses());
        }
      return t;
    });
  }
  getConfig() {
    const t = { name: this.name }, e = this.buildNodeConversionMap(this.layers), s = [];
    for (const i of this.layers) {
      const a = i.getClassName(), l = i.getConfig(), c = [];
      for (let h = 0; h < i.inboundNodes.length; h++) {
        const d = i.inboundNodes[h], p = Jn.nodeKey(i, h);
        let f = {};
        if (this.containerNodes.has(p)) {
          if (d.callArgs)
            try {
              JSON.stringify(d.callArgs), f = d.callArgs;
            } catch {
              console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`), f = {};
            }
          if (d.inboundLayers.length > 0) {
            const g = [];
            for (let m = 0; m < d.inboundLayers.length; m++) {
              const b = d.inboundLayers[m], x = d.nodeIndices[m], w = d.tensorIndices[m], y = Jn.nodeKey(b, x);
              let I = e[y];
              I == null && (I = 0), g.push([b.name, I, w, f]);
            }
            c.push(g);
          }
        }
      }
      const u = {};
      u.name = i.name, u.className = a, u.config = l, u.inboundNodes = c, s.push(u);
    }
    t.layers = s;
    const o = [];
    for (let i = 0; i < this.inputLayers.length; i++) {
      const a = this.inputLayers[i], l = this.inputLayersNodeIndices[i], c = Jn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.inputLayersTensorIndices[i];
      o.push([a.name, u, h]);
    }
    t.inputLayers = o;
    const r = [];
    for (let i = 0; i < this.outputLayers.length; i++) {
      const a = this.outputLayers[i], l = this.outputLayersNodeIndices[i], c = Jn.nodeKey(a, l);
      if (!this.containerNodes.has(c))
        continue;
      let u = e[c];
      u == null && (u = 0);
      const h = this.outputLayersTensorIndices[i];
      r.push([a.name, u, h]);
    }
    return t.outputLayers = r, t;
  }
  /**
   * Instantiates a LayersModel from its config (output of `get_config()`).
   * @param cls the class to create
   * @param config LayersModel config dictionary.
   * @param customObjects An optional dictionary of custom objects.
   * @param fastWeightInit Optional flag to use fast weight initialization
   *   during deserialization. This is applicable to cases in which
   *   the initialization will be immediately overwritten by loaded weight
   *   values. Default: `false`.
   * @returns A LayersModel instance.
   * @throws ValueError: In case of improperly formatted config dict.
   */
  /** @nocollapse */
  static fromConfig(t, e, s = {}, o = !1) {
    const r = {}, i = {};
    function a(m, b) {
      m.name in i ? i[m.name].push(b) : i[m.name] = [b];
    }
    function l(m, b) {
      const x = [];
      let w;
      for (const y of b) {
        const I = y[0], v = y[1], T = y[2];
        if (w = y[3] == null ? {} : y[3], !(I in r)) {
          a(m, b);
          return;
        }
        const k = r[I];
        if (k.inboundNodes.length <= v) {
          a(m, b);
          return;
        }
        const $ = k.inboundNodes[v];
        x.push($.outputTensors[T]);
      }
      x.length > 0 && m.apply(tn(x), w);
    }
    function c(m) {
      const b = m.name, x = ns(m, e.customObjects != null ? e.customObjects : {});
      x.setFastWeightInitDuringBuild(o), r[b] = x, m.inboundNodes.forEach((y) => {
        if (!(y instanceof Array))
          throw new F(`Corrupted configuration, expected array for nodeData: ${y}`);
        a(x, y);
      });
    }
    const u = e.name, h = e.layers;
    for (const m of h)
      c(m);
    for (; !nR(i); )
      for (const m of h) {
        const b = r[m.name];
        if (b.name in i) {
          const x = i[b.name];
          delete i[b.name];
          for (const w of x)
            l(b, w);
        }
      }
    const d = [], p = [], f = e.inputLayers;
    for (const m of f) {
      const b = m[0], x = m[1], w = m[2];
      hs(b in r);
      const I = r[b].inboundNodes[x].outputTensors;
      d.push(I[w]);
    }
    const g = e.outputLayers;
    for (const m of g) {
      const b = m[0], x = m[1], w = m[2];
      hs(b in r);
      const I = r[b].inboundNodes[x].outputTensors;
      p.push(I[w]);
    }
    return new t({ inputs: d, outputs: p, name: u });
  }
  /**
   * Determine whether the container is stateful.
   *
   * Porting Note: this is the equivalent of the stateful @property of
   *   the Container class in PyKeras.
   */
  get stateful() {
    if (this._stateful)
      throw new F("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
    for (const t of this.layers)
      if (t.stateful)
        return !0;
    return !1;
  }
  /**
   * Reset the state of all stateful constituent layers (if any).
   *
   * Examples of stateful layers include RNN layers whose `stateful` property
   * is set as `true`.
   */
  resetStates() {
    X(() => {
      this.layers.forEach((t) => {
        t.stateful && t.resetStates();
      });
    });
  }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function gG(n, t, e) {
  const s = t.length;
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((o) => null);
  if (s === 1)
    return Array.isArray(n) && n.length === 1 ? n : typeof n == "object" && t[0] in n ? [n[t[0]]] : [n];
  if (Array.isArray(n)) {
    if (n.length !== s)
      throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);
    return n;
  } else if (typeof n == "object" && Object.keys(n).length > 0 && typeof n[Object.keys(n)[0]] == "object") {
    const o = [];
    return t.forEach((r) => {
      r in n ? o.push(n[r]) : o.push(null);
    }), o;
  } else
    throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`);
}
function fx(n, t) {
  return gG(n, t, "classWeight");
}
async function mx(n, t, e, s) {
  if (t != null || s != null)
    throw new Error("Support sampleWeight is not implemented yet");
  if (e != null) {
    const o = X(() => {
      if (n.shape.length === 1)
        return yo(n);
      if (n.shape.length === 2) {
        if (n.shape[1] > 1)
          return Qr(n, 1);
        if (n.shape[1] === 1)
          return P(n, [n.shape[0]]);
        throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`);
      } else
        throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`);
    }), r = Array.from(await o.data());
    Et(o);
    const i = [];
    return r.forEach((a) => {
      if (e[a] == null)
        throw new Error(`classWeight must contain all classes in the training data. The class ${a} exists in the data but not in classWeight`);
      i.push(e[a]);
    }), dn(i, "float32");
  } else
    return null;
}
function bG(n, t) {
  return D(n, t);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
const xG = 32;
function gx(n, t) {
  let e, s;
  const o = t;
  e = o.xs, s = o.ys, S(e != null && s != null, () => `A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);
  const r = Bm("input", n.inputNames, e), i = Bm("output", n.outputNames, s), a = r[0].shape[0];
  S(r.length === n.inputs.length, () => `LayersModel has ${n.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`), S(i.length === n.outputs.length, () => `LayersModel has ${n.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);
  for (let l = 0; l < r.length; l++)
    S(r[l].shape[0] === a, () => `Batch size mismatch: input ${n.inputNames[l]} has ${r[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  for (let l = 0; l < i.length; l++)
    S(i[l].shape[0] === a, () => `Batch size mismatch: output ${n.outputNames[l]} has ${i[l].shape[0]}; expected  ${a} based on input ${n.inputNames[0]}.`);
  return { xs: r, ys: i };
}
function Bm(n, t, e) {
  if (e instanceof _t)
    return [e];
  if (Array.isArray(e))
    return S(e.length === t.length, () => `Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`), e;
  {
    const s = [];
    for (const o of t) {
      if (e[o] == null)
        throw new F(`The feature data generated by the dataset lacks the required ${n} key '${o}'.`);
      s.push(e[o]);
    }
    return s;
  }
}
function yG(n) {
  if (n.length === 3)
    throw new Wt("Validation with sample weights is not implemented yet.");
  return { xs: n[0], ys: n[1] };
}
async function wG(n, t, e) {
  const s = e.batchesPerEpoch != null;
  if (S(n.optimizer != null, () => "You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."), S(e != null, () => "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), S(e.epochs != null && e.epochs > 0 && Number.isInteger(e.epochs), () => `For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`), S(!s || e.batchesPerEpoch > 0 && Number.isInteger(e.batchesPerEpoch), () => `For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`), S(
    // tslint:disable-next-line:no-any
    e.validationSplit == null,
    () => "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."
  ), n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  try {
    const o = e.validationData != null;
    let r, i;
    if (o)
      if (Hm(e.validationData))
        S(e.validationBatches == null || e.validationBatches > 0 && Number.isInteger(e.validationBatches), () => `For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);
      else {
        const m = yG(e.validationData);
        r = m.xs, i = m.ys;
      }
    const a = n.makeTrainFunction(), l = n.getDedupedMetricsNames();
    let c;
    o ? c = l.slice().concat(l.map((m) => "val_" + m)) : c = l.slice();
    const u = ox(e.callbacks, e.yieldEvery), h = e.verbose == null ? 1 : e.verbose, { callbackList: d, history: p } = rx(
      u,
      h,
      e.epochs,
      null,
      null,
      IG(t, e),
      null,
      // Batch size determined by the dataset itself.
      o,
      c
    );
    d.setModel(n), n.history = p, await d.onTrainBegin(), n.stopTraining_ = !1;
    let f = e.initialEpoch == null ? 0 : e.initialEpoch, g = await t.iterator();
    for (; f < e.epochs; ) {
      const m = {};
      await d.onEpochBegin(f);
      let b = 0, x = 0;
      for (s || (g = await t.iterator()); !s || b < e.batchesPerEpoch; ) {
        const w = await g.next();
        if (s && w.done) {
          console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${b} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch * e.epochs} batches). You may need to use the repeat() function when building your dataset.`);
          break;
        }
        if (w.value != null) {
          const { xs: y, ys: I } = gx(n, w.value), v = {};
          v.batch = x, v.size = y[0].shape[0], await d.onBatchBegin(x, v);
          const T = [];
          if (e.classWeight != null) {
            const G = fx(e.classWeight, n.outputNames);
            for (let z = 0; z < G.length; ++z)
              T.push(await mx(I[z], null, G[z]));
          }
          const k = y.concat(I).concat(T), $ = a(k);
          Et(k);
          for (let G = 0; G < l.length; ++G) {
            const z = l[G], A = $[G];
            v[z] = A, vn(A);
          }
          await d.onBatchEnd(x, v), sx(v), x++, b++;
        }
        if (s ? b >= e.batchesPerEpoch : w.done) {
          if (o) {
            let y;
            Hm(e.validationData) ? y = oe(await n.evaluateDataset(e.validationData, { batches: e.validationBatches })) : y = oe(n.evaluate(r, i, {
              batchSize: e.validationBatchSize == null ? xG : e.validationBatchSize,
              verbose: 0
            }));
            for (let I = 0; I < n.metricsNames.length; ++I)
              m[`val_${n.metricsNames[I]}`] = y[I];
          }
          break;
        }
        if (n.stopTraining_)
          break;
      }
      if (await d.onEpochEnd(f, m), f++, n.stopTraining_)
        break;
    }
    return await d.onTrainEnd(), await n.history.syncData(), n.history;
  } finally {
    n.isTraining = !1;
  }
}
function IG(n, t) {
  let e = null;
  return t.batchesPerEpoch != null ? e = t.batchesPerEpoch : Number.isFinite(n.size) && (e = n.size), e;
}
function Hm(n) {
  return typeof n.iterator == "function";
}
function CG(n) {
  return typeof n.next == "function";
}
async function vG(n, t, e) {
  e = e || {};
  const s = e.batches != null, o = n.testFunction;
  let r = [];
  if (e.verbose > 0)
    throw new Wt("Verbose mode is not implemented yet.");
  S(!s || e.batches > 0 && Number.isInteger(e.batches), () => `Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);
  const i = CG(t) ? t : await t.iterator();
  let a = 0, l = 0;
  for (; !s || l < e.batches; ) {
    const c = await i.next();
    if (r = X(() => {
      if (c.value) {
        const { xs: u, ys: h } = gx(n, c.value), d = u.concat(h), p = X(() => o(d));
        if (Et(d), l === 0)
          for (let g = 0; g < p.length; ++g)
            r.push($t(0));
        const f = d[0].shape[0];
        for (let g = 0; g < p.length; ++g) {
          const m = p[g], b = r[g];
          r[g] = X(() => ot(r[g], D(f, m))), l > 0 && Et(b);
        }
        Et(p), a += f, ++l;
      }
      return r;
    }), c.done) {
      s && console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);
      break;
    }
  }
  for (let c = 0; c < r.length; ++c) {
    const u = r[c];
    r[c] = St(r[c], a), Et(u);
  }
  return tn(r);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Eh(n) {
  S(n > 0 && Number.isInteger(n), () => `batchSize is required to be a positive integer, but got ${n}`);
}
function Zr(n, t, e) {
  return n == null ? [null] : Array.isArray(n) ? n.map((s) => Co(s, t, e - t)) : Co(n, t, e - t);
}
function Ff(n, t) {
  return X(() => n == null ? null : Array.isArray(n) ? n.map((e) => Ff(e, t)) : Z0(n, t.dtype === "int32" ? t : ht(t, "int32")));
}
function Wh(n, t) {
  const e = [];
  let s = 0, o = null;
  for (; s < n; )
    o = s + t, o >= n && (o = n), e.push([s, o]), s = o;
  return e;
}
async function SG(n, t, e, s, o, r, i, a, l, c, u, h, d, p, f) {
  o == null && (o = 32), r == null && (r = 1), u == null && (u = !0), d == null && (d = 0);
  let g = !1;
  if (l != null && c != null && (g = !0), f != null && (g = !0, p == null))
    throw new F("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
  const m = n.checkNumSamples(e, o, p, "steps_per_epoch");
  let b;
  m != null && (b = os(0, m)), i == null && (i = 1);
  const { callbackList: x, history: w } = rx(a, i, r, d, m, p, o, g, h);
  x.setModel(n), n.history = w, await x.onTrainBegin(), n.stopTraining_ = !1;
  for (let y = d; y < r; ++y) {
    await x.onEpochBegin(y);
    const I = {};
    if (p != null)
      throw new Wt("stepsPerEpoch mode is not implemented yet.");
    {
      if (u === "batch")
        throw new Wt("batch shuffling is not implemneted yet");
      u && Kh(b);
      const v = dn(b), T = Wh(m, o);
      for (let k = 0; k < T.length; ++k) {
        const $ = {};
        if (await x.onBatchBegin(k, $), X(() => {
          const G = T[k][0], z = T[k][1], A = Co(v, G, z - G);
          $.batch = k, $.size = z - G;
          const Z = Ff(e, A), _ = t(Z);
          for (let K = 0; K < s.length; ++K) {
            const U = s[K], q = _[K];
            $[U] = q, vn(q);
          }
          if (k === T.length - 1 && g) {
            const K = n.testLoop(l, c, o);
            for (let U = 0; U < s.length; ++U) {
              const q = s[U], j = K[U];
              vn(j), I["val_" + q] = j;
            }
          }
        }), await x.onBatchEnd(k, $), sx($), n.stopTraining_)
          break;
      }
      v.dispose();
    }
    if (await x.onEpochEnd(y, I), n.stopTraining_)
      break;
  }
  return await x.onTrainEnd(), await n.history.syncData(), n.history;
}
async function kG(n, t, e, s = {}) {
  if (n.isTraining)
    throw new Error("Cannot start training because another fit() call is ongoing.");
  n.isTraining = !0;
  let o, r, i, a, l, c, u, h, d;
  try {
    const p = s.batchSize == null ? 32 : s.batchSize;
    Eh(p);
    const f = !1, g = await n.standardizeUserData(t, e, s.sampleWeight, s.classWeight, f, p);
    o = g[0], r = g[1], d = g[2];
    let m = !1, b;
    if (s.validationData != null && s.validationData.length > 0) {
      if (m = !0, s.validationData.length === 2)
        l = s.validationData[0], c = s.validationData[1];
      else
        throw s.validationData.length === 3 ? new Wt("validationData including sample weights is not supported yet.") : new F(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);
      const $ = !0, G = await n.standardizeUserData(
        l,
        c,
        null,
        /** Unused sample weights. */
        null,
        /** Unused class weights. */
        $,
        p
      );
      u = G[0], h = G[1], b = u.concat(h);
    } else if (s.validationSplit != null && s.validationSplit > 0 && s.validationSplit < 1) {
      m = !0;
      const $ = Math.floor(o[0].shape[0] * (1 - s.validationSplit)), G = o[0].shape[0];
      u = Zr(o, $, G), i = o, o = Zr(o, 0, $), h = Zr(r, $, G), a = r, r = Zr(r, 0, $), b = u.concat(h);
    } else
      s.validationSteps != null && (m = !0);
    const x = o.concat(r).concat(d);
    n.checkTrainableWeightsConsistency();
    const w = n.makeTrainFunction(), y = n.getDedupedMetricsNames();
    let I, v;
    m ? (n.makeTestFunction(), I = n.testFunction, v = y.slice().concat(y.map(($) => "val_" + $))) : (I = null, b = [], v = y.slice());
    const T = ox(s.callbacks, s.yieldEvery);
    return await SG(n, w, x, y, p, s.epochs, s.verbose, T, I, b, s.shuffle, v, s.initialEpoch, null, null);
  } finally {
    n.isTraining = !1, ts(o, t), ts(r, e), ts(i, t), ts(a, e), ts(u, l), ts(h, c), d != null && Et(d);
  }
}
function bx(n) {
  const t = [];
  n instanceof _t && (n = [n]);
  for (let e = 0; e < n.length; ++e) {
    const s = n[e];
    if (s.rank === 1)
      t.push(ba(s, 1));
    else {
      if (s.rank === 0)
        throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
      t.push(s);
    }
  }
  return t;
}
function ts(n, t) {
  if (n == null)
    return;
  const e = [];
  if (t instanceof _t)
    e.push(t.id);
  else if (Array.isArray(t))
    t.forEach((o) => e.push(o.id));
  else if (t != null)
    for (const o in t) {
      const r = t[o];
      e.push(r.id);
    }
  const s = [];
  if (n instanceof _t)
    e.indexOf(n.id) === -1 && s.push(n);
  else if (Array.isArray(n))
    n.forEach((o) => {
      e.indexOf(o.id) === -1 && s.push(o);
    });
  else if (n != null)
    for (const o in n) {
      const r = n[o];
      e.indexOf(r.id) === -1 && s.push(r);
    }
  s.forEach((o) => {
    o.isDisposed || o.dispose();
  });
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function TG(n) {
  return n instanceof _t;
}
function Mh(n) {
  return Array.isArray(n);
}
function _m(n) {
  return !TG(n) && !Mh(n);
}
function Um(n, t, e, s = !0, o = "") {
  if (t == null || t.length === 0) {
    if (n != null) {
      let i = !1;
      if (Mh(n) && n.length > 0)
        i = !0;
      else if (_m(n)) {
        for (const a in n)
          if (n.hasOwnProperty(a)) {
            i = !0;
            break;
          }
      } else
        i = !0;
      if (i)
        throw new F(`Error when checking model ${o} expected no data, but got ${n}`);
    }
    return [];
  }
  if (n == null)
    return t.map((i) => null);
  let r;
  if (_m(n)) {
    n = n, r = [];
    for (const i of t) {
      if (n[i] == null)
        throw new F(`No data provided for "${i}". Need data for each key in: ${t}`);
      r.push(n[i]);
    }
  } else if (Mh(n)) {
    if (n = n, n.length !== t.length)
      throw new F(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);
    r = n;
  } else {
    if (n = n, t.length > 1)
      throw new F(`The model ${o} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);
    r = [n];
  }
  if (r = bx(r), e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = r[i];
      if (a.shape.length !== e[i].length)
        throw new F(`Error when checking ${o}: expected ${t[i]} to have ${e[i].length} dimension(s). but got array with shape ${a.shape}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u >= 0 && c !== u)
          throw new F(`${o} expected a batch of elements where each example has shape [${e[i].slice(1, e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1, e[i].length)}]) but the ${o} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1, a.shape.length)}] (tensor shape [${a.shape}])`);
      }
    }
  return r;
}
function NG(n, t, e) {
  const s = As(n.map((r) => r.shape[0]));
  s.sort();
  const o = As(t.map((r) => r.shape[0]));
  if (o.sort(), s.length > 1)
    throw new F(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map((r) => r.shape))}`);
  if (o.length > 1)
    throw new F(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((r) => r.shape))}`);
  if (s.length > 0 && o.length > 0 && !At(s, o))
    throw new F(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${o[0]} target sample(s).`);
}
function $G(n, t, e) {
  const s = [
    ou,
    ru,
    ei
  ];
  for (let o = 0; o < n.length; ++o) {
    const r = n[o], i = t[o], a = e[o];
    if (i != null) {
      if (i === ei && r.shape[r.shape.length - 1] === 1)
        throw new F(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);
      if (s.indexOf(i) !== -1) {
        const l = r.shape.slice(1), c = a.slice(1);
        for (let u = 0; u < l.length; ++u) {
          const h = l[u], d = c[u];
          if (d != null && h !== d)
            throw new F(`A target Tensor with shape ${r.shape} was passed for an output of shape ${a}, while using a loss function that expects targets to have the same shape as the output.`);
        }
      }
    }
  }
}
function Ym(n, t, e, s = !0, o = "") {
  let r;
  if (Array.isArray(n)) {
    if (n.length !== t.length)
      throw new F(`Error when checking model ${o}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);
    r = n;
  } else {
    if (t.length > 1)
      throw new F(`The model expects ${t.length} ${o} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);
    r = [n];
  }
  if (e != null)
    for (let i = 0; i < t.length; ++i) {
      if (e[i] == null)
        continue;
      const a = r[i];
      if (a.shape.length !== e[i].length)
        throw new F(`Error when checking ${o}: expected ${t[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);
      for (let l = 0; l < e[i].length; ++l) {
        if (l === 0 && !s)
          continue;
        const c = a.shape[l], u = e[i][l];
        if (u != null && u !== c)
          throw new F(`Error when checking ${o}: expected ${t[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(a.shape)}.`);
      }
    }
}
function RG(n, t) {
  if (n == null || Array.isArray(n) && n.length === 0)
    return t.map((s) => []);
  let e;
  if (typeof n == "string" || typeof n == "function")
    e = [n];
  else if (Array.isArray(n) || typeof n == "object")
    e = n;
  else
    throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);
  if (Array.isArray(e))
    return t.map((s) => e);
  {
    const s = [];
    for (const o of t) {
      let r = e.hasOwnProperty(o) ? e[o] : [];
      Array.isArray(r) || (r = [r]), s.push(r);
    }
    return s;
  }
}
const GG = "layers-model";
class nr extends Jn {
  constructor(t) {
    super(t), this.isTraining = !1;
  }
  /**
   * Print a text summary of the model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - If the model has non-sequential-like topology, the inputs each layer
   *   receives
   * - The total number of trainable and non-trainable parameters of the model.
   *
   * ```js
   * const input1 = tf.input({shape: [10]});
   * const input2 = tf.input({shape: [20]});
   * const dense1 = tf.layers.dense({units: 4}).apply(input1);
   * const dense2 = tf.layers.dense({units: 8}).apply(input2);
   * const concat = tf.layers.concatenate().apply([dense1, dense2]);
   * const output =
   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);
   *
   * const model = tf.model({inputs: [input1, input2], outputs: output});
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(t, e, s = console.log) {
    if (!this.built)
      throw new F("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
    hG(this, t, e, s);
  }
  /**
   * Configures and prepares the model for training and evaluation.  Compiling
   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`
   * or `evaluate` on an un-compiled model will throw an error.
   *
   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and
   * metrics to be used for fitting and evaluating this model.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  compile(t) {
    if (t.loss == null && (t.loss = []), this.loss = t.loss, typeof t.optimizer == "string")
      this.optimizer_ = uG(t.optimizer), this.isOptimizerOwned = !0;
    else {
      if (!(t.optimizer instanceof no))
        throw new F("User-defined optimizer must be an instance of tf.Optimizer.");
      this.optimizer_ = t.optimizer, this.isOptimizerOwned = !1;
    }
    let e = [];
    if (!Array.isArray(t.loss) && typeof t.loss != "string" && typeof t.loss != "function") {
      t.loss = t.loss;
      for (const i in t.loss)
        if (this.outputNames.indexOf(i) === -1)
          throw new F(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);
      for (const i of this.outputNames)
        t.loss[i] == null && console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`), e.push(Nu(t.loss[i]));
    } else if (Array.isArray(t.loss)) {
      if (t.loss.length !== this.outputs.length)
        throw new F(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);
      e = t.loss.map((a) => Nu(a));
    } else {
      const i = Nu(t.loss);
      this.outputs.forEach((a) => {
        e.push(i);
      });
    }
    this.lossFunctions = e, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
    for (let i = 0; i < this.outputs.length; ++i) {
      const a = this.internalOutputShapes[i], l = this.outputNames[i];
      this.feedOutputNames.push(l), this.feedOutputShapes.push(a), this.feedLossFns.push(this.lossFunctions[i]);
    }
    const s = [];
    this.metrics = t.metrics, this.metricsNames = ["loss"], this.metricsTensors = [], Io("loss", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = this.lossFunctions[i];
        this.outputs.length > 1 && (this.metricsTensors.push([a, i]), this.metricsNames.push(this.outputNames[i] + "_loss"));
      }
    });
    const o = RG(t.metrics, this.outputNames), r = (i, a, l) => {
      this.outputNames.length > 1 && (a = this.outputNames[i] + "_" + a), this.metricsNames.push(a), this.metricsTensors.push([l, i]);
    };
    Io("metric", () => {
      for (let i = 0; i < this.outputs.length; ++i) {
        if (s.indexOf(i) !== -1)
          continue;
        const a = o[i];
        ((c) => {
          const u = "";
          let h, d, p;
          for (const f of c) {
            if (typeof f == "string" && ["accuracy", "acc", "crossentropy", "ce"].indexOf(f) !== -1) {
              const m = this.internalOutputShapes[i];
              m[m.length - 1] === 1 || this.lossFunctions[i] === ru ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = ax : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = tG) : this.lossFunctions[i] === yl ? ["accuracy", "acc"].indexOf(f) !== -1 ? d = eG : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = hx) : ["accuracy", "acc"].indexOf(f) !== -1 ? d = lx : ["crossentropy", "ce"].indexOf(f) !== -1 && (d = ux);
              let b;
              ["accuracy", "acc"].indexOf(f) !== -1 ? b = "acc" : ["crossentropy", "ce"].indexOf(f) !== -1 && (b = "ce"), p = d, h = u + b;
            } else
              p = cG(f), h = u + Va(f);
            let g;
            Io(h, () => {
              g = p;
            }), r(i, h, g);
          }
        })(a);
      }
    }), this.collectedTrainableWeights = this.trainableWeights;
  }
  /**
   * Check trainable weights count consistency.
   *
   * This will raise a warning if `this.trainableWeights` and
   * `this.collectedTrainableWeights` are inconsistent (i.e., have different
   * numbers of parameters).
   * Inconsistency will typically arise when one modifies `model.trainable`
   * without calling `model.compile()` again.
   */
  checkTrainableWeightsConsistency() {
    this.collectedTrainableWeights != null && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(
   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateArgs`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(t, e, s = {}) {
    const o = s.batchSize == null ? 32 : s.batchSize;
    Eh(o);
    const r = !0, i = this.standardizeUserDataXY(t, e, r, o);
    try {
      const a = i[0].concat(i[1]);
      this.makeTestFunction();
      const l = this.testFunction, c = this.testLoop(l, a, o, s.verbose, s.steps);
      return tn(c);
    } finally {
      ts(i[0], t), ts(i[1], e);
    }
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(t, e) {
    return this.makeTestFunction(), vG(this, t, e);
  }
  /**
   * Get number of samples provided for training, evaluation or prediction.
   *
   * @param ins Input `tf.Tensor`.
   * @param batchSize Integer batch size, optional.
   * @param steps Total number of steps (batches of samples) before
   * declaring loop finished. Optional.
   * @param stepsName The public API's parameter name for `steps`.
   * @returns Number of samples provided.
   */
  checkNumSamples(t, e, s, o = "steps") {
    let r;
    if (s != null) {
      if (r = null, e != null)
        throw new F(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${e}`);
    } else if (t != null)
      Array.isArray(t) ? r = t[0].shape[0] : r = t.shape[0];
    else
      throw new F(`Either the input data should have a defined shape, or ${o} shoud be specified.`);
    return r;
  }
  /**
   * Execute internal tensors of the model with input data feed.
   * @param inputs Input data feed. Must match the inputs of the model.
   * @param outputs Names of the output tensors to be fetched. Must match
   *   names of the SymbolicTensors that belong to the graph.
   * @returns Fetched values for `outputs`.
   */
  execute(t, e) {
    if (Array.isArray(e) && e.length === 0)
      throw new F("`outputs` is an empty Array, which is not allowed.");
    const s = Array.isArray(e), o = s ? e : [e], r = this.retrieveSymbolicTensors(o), i = new Ps();
    if (t instanceof _t && (t = [t]), Array.isArray(t)) {
      if (t.length !== this.inputs.length)
        throw new F(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);
      for (let l = 0; l < this.inputs.length; ++l)
        i.add(this.inputs[l], t[l]);
    } else
      for (const l of this.inputs) {
        const c = t[l.name];
        if (c == null)
          throw new F(`No value is provided for the model's input ${l.name}`);
        i.add(l, c);
      }
    const a = Ar(r, i);
    return s ? a : a[0];
  }
  /**
   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.
   */
  retrieveSymbolicTensors(t) {
    const e = Eo(null, t.length);
    let s = t.length;
    for (const o of this.layers) {
      const r = Array.isArray(o.output) ? o.output : [o.output], i = r.map((a) => a.name);
      for (let a = 0; a < t.length; ++a) {
        const l = i.indexOf(t[a]);
        if (l !== -1 && (e[a] = r[l], s--), s === 0)
          break;
      }
      if (s === 0)
        break;
    }
    if (s > 0) {
      const o = [];
      throw e.forEach((r, i) => {
        r == null && o.push(t[i]);
      }), new F(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`);
    }
    return e;
  }
  /**
   * Helper method to loop over some data in batches.
   *
   * Porting Note: Not using the functional approach in the Python equivalent
   *   due to the imperative backend.
   * Porting Note: Does not support step mode currently.
   *
   * @param ins: input data
   * @param batchSize: integer batch size.
   * @param verbose: verbosity model
   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of
   *   `tf.Tensor` (if multipe outputs).
   */
  predictLoop(t, e = 32, s = !1) {
    return X(() => {
      const o = this.checkNumSamples(t);
      if (s)
        throw new Wt("Verbose predictLoop() is not implemented yet.");
      const r = Wh(o, e), i = this.outputs.map((a) => []);
      for (let a = 0; a < r.length; ++a)
        X(() => {
          const c = r[a][0], u = r[a][1], h = Zr(t, c, u), d = [];
          if (Array.isArray(h))
            for (let f = 0; f < h.length; ++f)
              d.push({ key: this.inputs[f], value: h[f] });
          else
            d.push({ key: this.inputs[0], value: h });
          const p = new Ps(d);
          return Ar(this.outputs, p);
        }).forEach((c, u) => i[u].push(c));
      return tn(i.map((a) => Ze(a, 0)));
    });
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param args A `ModelPredictArgs` object containing optional fields.
   *
   * @return Prediction results as a `tf.Tensor`(s).
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(t, e = {}) {
    const s = bx(t);
    Ym(s, this.inputNames, this.feedInputShapes, !1);
    try {
      const o = e.batchSize == null ? 32 : e.batchSize;
      return Eh(o), this.predictLoop(s, o);
    } finally {
      ts(s, t);
    }
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predictOnBatch(tf.ones([8, 10])).print();
   * ```
   * @param x: Input samples, as a Tensor (for models with exactly one
   *   input) or an array of Tensors (for models with more than one input).
   * @return Tensor(s) of predictions
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predictOnBatch(t) {
    Ym(t, this.inputNames, this.feedInputShapes, !0);
    const e = (Array.isArray(t) ? t[0] : t).shape[0];
    return this.predictLoop(t, e);
  }
  standardizeUserDataXY(t, e, s = !0, o) {
    if (this.optimizer_ == null)
      throw new Pn("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");
    const r = [];
    for (let i = 0; i < this.feedOutputShapes.length; ++i) {
      const a = this.feedOutputShapes[i];
      this.feedLossFns[i] === yl ? r.push(a.slice(0, a.length - 1).concat([1])) : r.push(a);
    }
    if (t = Um(t, this.feedInputNames, this.feedInputShapes, !1, "input"), e = Um(e, this.feedOutputNames, r, !1, "target"), NG(t, e), $G(e, this.feedLossFns, this.feedOutputShapes), this.stateful && o != null && o > 0 && t[0].shape[0] % o !== 0)
      throw new F(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${t[0].shape[0]} sample(s).`);
    return [t, e];
  }
  async standardizeUserData(t, e, s, o, r = !0, i) {
    const [a, l] = this.standardizeUserDataXY(t, e, r, i);
    if (s != null)
      throw new Error("sample weight is not supported yet.");
    let c = null;
    if (o != null) {
      const u = fx(o, this.outputNames);
      c = [];
      for (let h = 0; h < u.length; ++h)
        c.push(await mx(l[h], null, u[h]));
    }
    return [a, l, c];
  }
  /**
   * Loop over some test data in batches.
   * @param f A Function returning a list of tensors.
   * @param ins Array of tensors to be fed to `f`.
   * @param batchSize Integer batch size or `null` / `undefined`.
   * @param verbose verbosity mode.
   * @param steps Total number of steps (batches of samples) before
   * declaring test finished. Ignored with the default value of `null` /
   * `undefined`.
   * @returns Array of Scalars.
   */
  testLoop(t, e, s, o = 0, r) {
    return X(() => {
      const i = this.checkNumSamples(e, s, r, "steps"), a = [];
      if (o > 0)
        throw new Wt("Verbose mode is not implemented yet.");
      if (r != null)
        throw new Wt("steps mode in testLoop() is not implemented yet");
      {
        const l = Wh(i, s), c = dn(os(0, i));
        for (let u = 0; u < l.length; ++u) {
          const h = l[u][0], d = l[u][1], p = Co(c, h, d - h), f = Ff(e, p), g = t(f);
          if (u === 0)
            for (let m = 0; m < g.length; ++m)
              a.push($t(0));
          for (let m = 0; m < g.length; ++m) {
            const b = g[m];
            a[m] = ot(a[m], D(d - h, b));
          }
        }
        for (let u = 0; u < a.length; ++u)
          a[u] = St(a[u], i);
      }
      return a;
    });
  }
  getDedupedMetricsNames() {
    const t = this.metricsNames, e = [];
    for (let s = 0; s < t.length; ++s) {
      const o = t[s];
      let r = o;
      if (Wm(t, o) > 1) {
        const i = Wm(t.slice(0, s), o);
        r += `_${i}`;
      }
      e.push(r);
    }
    return e;
  }
  /**
   * Creates a function that performs the following actions:
   *
   * 1. computes the losses
   * 2. sums them to get the total loss
   * 3. call the optimizer computes the gradients of the LayersModel's
   *    trainable weights w.r.t. the total loss and update the variables
   * 4. calculates the metrics
   * 5. returns the values of the losses and metrics.
   */
  makeTrainFunction() {
    return (t) => {
      const e = [], s = t.slice(0, this.inputs.length), o = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), r = t.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2), i = [], a = () => {
        const h = [];
        for (let g = 0; g < this.inputs.length; ++g)
          h.push({ key: this.inputs[g], value: s[g] });
        const d = new Ps(h), p = Ar(this.outputs, d, { training: !0 });
        let f;
        for (let g = 0; g < this.lossFunctions.length; ++g) {
          const m = this.lossFunctions[g];
          let b = m(o[g], p[g]);
          r[g] != null && (b = bG(b, r[g]));
          const x = ye(b);
          e.push(x), g === 0 ? f = b : f = ot(f, b);
        }
        for (let g = 0; g < this.metricsTensors.length; ++g) {
          let m;
          if (this.outputs.length > 1 && g < this.outputs.length)
            m = e[g];
          else {
            const b = this.metricsTensors[g][0], x = this.metricsTensors[g][1];
            m = ye(b(o[x], p[x]));
          }
          vn(m), i.push(m);
        }
        return f = ye(f), this.calculateLosses().forEach((g) => {
          f = ot(f, g);
        }), f;
      }, l = this.collectedTrainableWeights.map((h) => h.read()), c = !0;
      return [this.optimizer_.minimize(a, c, l)].concat(i);
    };
  }
  /**
   * Create a function which, when invoked with an array of `tf.Tensor`s as a
   * batch of inputs, returns the prespecified loss and metrics of the model
   * under the batch of input data.
   */
  makeTestFunction() {
    this.testFunction = (t) => X(() => {
      const e = [];
      let s;
      const o = t.slice(0, this.inputs.length), r = t.slice(this.inputs.length, this.inputs.length + this.outputs.length), i = [];
      for (let c = 0; c < this.inputs.length; ++c)
        i.push({ key: this.inputs[c], value: o[c] });
      const a = new Ps(i), l = Ar(this.outputs, a);
      for (let c = 0; c < this.lossFunctions.length; ++c) {
        const u = this.lossFunctions[c], h = ye(u(r[c], l[c]));
        c === 0 ? s = h : s = ot(s, h), e.push(s);
      }
      for (let c = 0; c < this.metricsTensors.length; ++c) {
        const u = this.metricsTensors[c][0], h = this.metricsTensors[c][1], d = ye(u(r[h], l[h]));
        e.push(d);
      }
      return e;
    });
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a
   * dataset).
   *
   * ```js
   * const model = tf.sequential({
   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * for (let i = 1; i < 5 ; ++i) {
   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *       batchSize: 4,
   *       epochs: 3
   *   });
   *   console.log("Loss after Epoch " + i + " : " + h.history.loss[0]);
   * }
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you
   * can also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named,
   * you can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args A `ModelFitArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input
   * data and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(t, e, s = {}) {
    return kG(this, t, e, s);
  }
  // TODO(cais): Add code snippet below when it's possible to instantiate
  //   actual dataset objects.
  /**
   * Trains the model using a dataset object.
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for training. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs.
   *   Of the two items in the array, the first is the input feature(s) and
   *   the second is the output target(s).
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fitDataset(t, e) {
    return wG(this, t, e);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(t, e) {
    const s = await this.standardizeUserData(t, e), o = s[0], r = s[1], a = this.makeTrainFunction()(o.concat(r)), l = [];
    for (const c of a) {
      const u = await c.data();
      l.push(u[0]);
    }
    return Et(a), ts(s[0], t), ts(s[1], e), tn(l);
  }
  /**
   * Extract weight values of the model.
   *
   * @param config: An instance of `io.SaveConfig`, which specifies
   * model-saving options such as whether only trainable weights are to be
   * saved.
   * @returns A `NamedTensorMap` mapping original weight names (i.e.,
   *   non-uniqueified weight names) to their values.
   */
  getNamedWeights(t) {
    const e = [], s = t != null && t.trainableOnly, o = s ? this.trainableWeights : this.weights, r = this.getWeights(s);
    for (let i = 0; i < o.length; ++i)
      s && !o[i].trainable || e.push({ name: o[i].originalName, tensor: r[i] });
    return e;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const input = tf.input({shape: [10]});
   * const output = tf.layers.dense({units: 1}).apply(input);
   * const model = tf.model({inputs: [input], outputs: [output]});
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10
   * values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(t) {
    this.stopTraining_ = t;
  }
  get stopTraining() {
    return this.stopTraining_;
  }
  get optimizer() {
    return this.optimizer_;
  }
  set optimizer(t) {
    this.optimizer_ !== t && (this.optimizer_ = t, this.isOptimizerOwned = !1);
  }
  dispose() {
    const t = super.dispose();
    if (t.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {
      const e = ll().numTensors;
      this.optimizer_.dispose(), t.numDisposedVariables += e - ll().numTensors;
    }
    return t;
  }
  getLossIdentifiers() {
    let t;
    if (typeof this.loss == "string")
      t = Is(this.loss);
    else if (Array.isArray(this.loss)) {
      for (const e of this.loss)
        if (typeof e != "string")
          throw new Error("Serialization of non-string loss is not supported.");
      t = this.loss.map((e) => Is(e));
    } else {
      const e = Object.keys(this.loss);
      t = {};
      const s = this.loss;
      for (const o of e)
        if (typeof s[o] == "string")
          t[o] = Is(s[o]);
        else
          throw new Error("Serialization of non-string loss is not supported.");
    }
    return t;
  }
  getMetricIdentifiers() {
    if (typeof this.metrics == "string" || typeof this.metrics == "function")
      return [Is(Va(this.metrics))];
    if (Array.isArray(this.metrics))
      return this.metrics.map((t) => Is(Va(t)));
    {
      const t = {};
      for (const e in this.metrics)
        t[e] = Is(Va(this.metrics[e]));
      return t;
    }
  }
  getTrainingConfig() {
    return {
      loss: this.getLossIdentifiers(),
      metrics: this.getMetricIdentifiers(),
      optimizer_config: {
        class_name: this.optimizer.getClassName(),
        config: this.optimizer.getConfig()
      }
    };
  }
  loadTrainingConfig(t) {
    if (t.weighted_metrics != null)
      throw new Error("Loading weight_metrics is not supported yet.");
    if (t.loss_weights != null)
      throw new Error("Loading loss_weights is not supported yet.");
    if (t.sample_weight_mode != null)
      throw new Error("Loading sample_weight_mode is not supported yet.");
    const e = ni(t.optimizer_config), s = ns(e);
    let o;
    if (typeof t.loss == "string")
      o = po(t.loss);
    else if (Array.isArray(t.loss))
      o = t.loss.map((i) => po(i));
    else if (t.loss != null) {
      o = {};
      for (const i in t.loss)
        o[i] = po(t.loss[i]);
    }
    let r;
    if (Array.isArray(t.metrics))
      r = t.metrics.map((i) => po(i));
    else if (t.metrics != null) {
      r = {};
      for (const i in t.metrics)
        r[i] = po(t.metrics[i]);
    }
    this.compile({ loss: o, metrics: r, optimizer: s });
  }
  /**
   * Save the configuration and/or weights of the LayersModel.
   *
   * An `IOHandler` is an object that has a `save` method of the proper
   * signature defined. The `save` method manages the storing or
   * transmission of serialized data ("artifacts") that represent the
   * model's topology and weights onto or via a specific medium, such as
   * file downloads, local storage, IndexedDB in the web browser and HTTP
   * requests to a server. TensorFlow.js provides `IOHandler`
   * implementations for a number of frequently used saving mediums, such as
   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`
   * for more details.
   *
   * This method also allows you to refer to certain types of `IOHandler`s
   * as URL-like string shortcuts, such as 'localstorage://' and
   * 'indexeddb://'.
   *
   * Example 1: Save `model`'s topology and weights to browser [local
   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('localstorage://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 2. Saving `model`'s topology and weights to browser
   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);
   * then load it back.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * console.log('Prediction from original model:');
   * model.predict(tf.ones([1, 3])).print();
   *
   * const saveResults = await model.save('indexeddb://my-model-1');
   *
   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');
   * console.log('Prediction from loaded model:');
   * loadedModel.predict(tf.ones([1, 3])).print();
   * ```
   *
   * Example 3. Saving `model`'s topology and weights as two files
   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from
   * browser.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('downloads://my-model-1');
   * ```
   *
   * Example 4. Send  `model`'s topology and weights to an HTTP server.
   * See the documentation of `tf.io.http` for more details
   * including specifying request parameters and implementation of the
   * server.
   *
   * ```js
   * const model = tf.sequential(
   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});
   * const saveResults = await model.save('http://my-server/model/upload');
   * ```
   *
   * @param handlerOrURL An instance of `IOHandler` or a URL-like,
   * scheme-based string shortcut for `IOHandler`.
   * @param config Options for saving the model.
   * @returns A `Promise` of `SaveResult`, which summarizes the result of
   * the saving, such as byte sizes of the saved artifacts for the model's
   *   topology and weight values.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async save(t, e) {
    if (typeof t == "string") {
      const c = vI(t);
      if (c.length === 0)
        throw new F(`Cannot find any save handlers for URL '${t}'`);
      if (c.length > 1)
        throw new F(`Found more than one (${c.length}) save handlers for URL '${t}'`);
      t = c[0];
    }
    if (t.save == null)
      throw new F("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    const s = await bm(this.getNamedWeights(e)), o = !1, r = null, a = {
      modelTopology: this.toJSON(r, o),
      format: GG,
      generatedBy: `TensorFlow.js tfjs-layers v${px}`,
      convertedBy: null
    };
    if ((e == null ? !1 : e.includeOptimizer) && this.optimizer != null) {
      a.trainingConfig = this.getTrainingConfig();
      const c = "optimizer", { data: u, specs: h } = await bm(await this.optimizer.getWeights(), c);
      s.specs.push(...h), s.data = vb([s.data, u]);
    }
    return this.userDefinedMetadata != null && (Km(this.userDefinedMetadata, this.name, !0), a.userDefinedMetadata = this.userDefinedMetadata), a.weightData = s.data, a.weightSpecs = s.specs, t.save(a);
  }
  /**
   * Set user-defined metadata.
   *
   * The set metadata will be serialized together with the topology
   * and weights of the model during `save()` calls.
   *
   * @param setUserDefinedMetadata
   */
  setUserDefinedMetadata(t) {
    Km(t, this.name), this.userDefinedMetadata = t;
  }
  /**
   * Get user-defined metadata.
   *
   * The metadata is supplied via one of the two routes:
   *   1. By calling `setUserDefinedMetadata()`.
   *   2. Loaded during model loading (if the model is constructed
   *      via `tf.loadLayersModel()`.)
   *
   * If no user-defined metadata is available from either of the
   * two routes, this function will return `undefined`.
   */
  getUserDefinedMetadata() {
    return this.userDefinedMetadata;
  }
}
nr.className = "Model";
et(nr);
class xx extends nr {
}
xx.className = "Functional";
et(xx);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
async function oY(n, t) {
  "modelTopology" in n || (n = { modelTopology: n }), n = n;
  let e = n.modelTopology;
  e.model_config != null && (e = e.model_config);
  const s = ni(e), o = ns(s, t);
  if (n.weightsManifest != null) {
    const r = await ZI(n.weightsManifest, n.pathPrefix, o.weights.map((a) => a.originalName)), i = {};
    for (const a of o.weights)
      i[a.originalName] = r[a.originalName];
    o.loadWeights(i), Et(r);
  }
  return o;
}
async function rY(n, t) {
  if (t == null && (t = {}), typeof n == "string") {
    const e = SI(n, t);
    if (e.length === 0)
      e.push(UI(n, t));
    else if (e.length > 1)
      throw new F(`Found more than one (${e.length}) load handlers for URL '${n}'`);
    n = e[0];
  }
  return LG(n, void 0, t);
}
async function LG(n, t, e) {
  if (e == null && (e = {}), n.load == null)
    throw new F("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
  const s = await n.load();
  let o = s.modelTopology;
  o.model_config != null && (o = o.model_config);
  const r = e.strict == null ? !0 : e.strict, i = s.weightData != null && s.weightSpecs != null && r, a = ns(ni(o), t, i), l = s.trainingConfig;
  if (l != null && a.loadTrainingConfig(l), s.userDefinedMetadata != null && a.setUserDefinedMetadata(s.userDefinedMetadata), s.weightData != null) {
    if (s.weightSpecs == null)
      throw new F("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
    const { modelWeights: c, optimizerWeights: u } = EG(s.weightData, s.weightSpecs);
    a.loadWeights(c, r), a.optimizer != null && u.length > 0 && await a.optimizer.setWeights(u), Et(c), Et(u.map((h) => h.tensor));
  }
  return a;
}
function EG(n, t) {
  const e = Cb(n, t), s = {}, o = [];
  return t.forEach((r) => {
    r.group === "optimizer" ? o.push({ name: r.name, tensor: e[r.name] }) : s[r.name] = e[r.name];
  }), { modelWeights: s, optimizerWeights: o };
}
class si extends nr {
  constructor(t) {
    if (super({ inputs: [], outputs: [] }), t = t || {}, this.trainable = !0, this.built = !1, this.name = t.name != null ? t.name : eu("sequential_"), t.layers != null)
      for (const e of t.layers)
        this.add(e);
  }
  // Helper function to Sequential.add  Throws if the new output shape will be
  // invalid.
  checkShape(t) {
    if (t.inboundNodes[0].outputTensors[0].shape.some((s) => s < 0))
      throw new F(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`);
  }
  /**
   * Adds a layer instance on top of the layer stack.
   *
   * ```js
   *  const model = tf.sequential();
   *  model.add(tf.layers.dense({units: 8, inputShape: [1]}));
   *  model.add(tf.layers.dense({units: 4, activation: 'relu6'}));
   *  model.add(tf.layers.dense({units: 1, activation: 'relu6'}));
   *  // Note that the untrained model is random at this point.
   *  model.predict(tf.randomNormal([10, 1])).print();
   * ```
   * @param layer Layer instance.
   *
   * @exception ValueError In case the `layer` argument does not know its
   * input shape.
   * @exception ValueError In case the `layer` argument has multiple output
   *   tensors, or is already connected somewhere else (forbidden in
   *   `Sequential` models).
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  add(t) {
    const e = t instanceof si || t instanceof nr;
    let s;
    if (e) {
      if (s = t, s.outputs.length !== 1)
        throw new F("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      if (s.inputs.length !== 1)
        throw new F("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
    }
    if (this.outputs.length === 0) {
      if (t.inboundNodes.length === 0) {
        if (t.batchInputShape == null)
          throw new F("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
        const o = LR({
          batchShape: t.batchInputShape,
          dtype: t.dtype,
          name: t.name + "_input"
        });
        t.apply(o);
      }
      if (e)
        this.outputs = s.outputs, this.inputs = s.inputs;
      else {
        if (t.inboundNodes.length !== 1)
          throw new F(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);
        if (t.inboundNodes[0].outputTensors.length !== 1)
          throw new F("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
        this.checkShape(t), this.outputs = [t.inboundNodes[0].outputTensors[0]], this.inputs = J0(this.outputs[0]);
      }
      this.inboundNodes = [], new su({
        outboundLayer: this,
        inboundLayers: [],
        nodeIndices: [],
        tensorIndices: [],
        inputTensors: this.inputs,
        outputTensors: this.outputs,
        // no model-level masking for now
        inputMasks: Eo(null, this.inputs.length),
        outputMasks: [null],
        inputShapes: this.inputs.map((o) => o.shape),
        outputShapes: this.outputs[0].shape
      });
    } else {
      const o = t.apply(this.outputs[0]);
      if (Array.isArray(o))
        throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
      this.checkShape(t), this.outputs = [o], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
    this.layers.push(t), this.built = !1;
  }
  /**
   * Removes the last layer in the model.
   *
   * @exception TypeError if there are no layers in the model.
   */
  pop() {
    if (this.layers.length === 0)
      throw new TypeError("There are no layers in the model.");
    if (this.layers.pop(), this.layers.length === 0)
      this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
    else {
      const t = this.layers.length - 1;
      this.layers[t].outboundNodes = [], this.outputs = [this.layers[t].output], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [this.outputs[0].shape];
    }
  }
  call(t, e) {
    return this.model == null && this.build(), this.model.call(t, e);
  }
  build(t) {
    if (Ut(t), this.inputs.length === 0 || this.outputs.length === 0)
      throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
    this.model = new nr({
      inputs: this.inputs,
      outputs: this.outputs[0],
      name: this.name + "_model"
    }), this.model.trainable = this.trainable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
  }
  countParams() {
    return this.built || this.build(), super.countParams();
  }
  /**
   * Print a text summary of the Sequential model's layers.
   *
   * The summary includes
   * - Name and type of all layers that comprise the model.
   * - Output shape(s) of the layers
   * - Number of weight parameters of each layer
   * - The total number of trainable and non-trainable parameters of the
   * model.
   *
   * ```js
   * const model = tf.sequential();
   * model.add(
   *     tf.layers.dense({units: 100, inputShape: [10], activation: 'relu'}));
   * model.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));
   *
   * model.summary();
   * ```
   *
   * @param lineLength Custom line length, in number of characters.
   * @param positions Custom widths of each of the columns, as either
   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number
   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to
   *   right-most (i.e., ending) position of a column.
   * @param printFn Custom print function. Can be used to replace the default
   *   `console.log`. For example, you can use `x => {}` to mute the printed
   *   messages in the console.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  summary(t, e, s = console.log) {
    this.built || this.build(), super.summary(t, e, s);
  }
  /**
   * Sets the weights of the model.
   *
   * @param weights Should be a list of Tensors with shapes and types matching
   *   the output of `model.getWeights()`.
   */
  setWeights(t) {
    this.model == null && this.build(), this.model.setWeights(t);
  }
  /**
   * Returns the loss value & metrics values for the model in test mode.
   *
   * Loss and metrics are specified during `compile()`, which needs to happen
   * before calls to `evaluate()`.
   *
   * Computation is done in batches.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const result = model.evaluate(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   * });
   * result.print();
   * ```
   *
   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the
   * model has multiple inputs.
   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the
   * model has multiple outputs.
   * @param args A `ModelEvaluateConfig`, containing optional fields.
   *
   * @return `Scalar` test loss (if the model has a single output and no
   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs
   *   and/or metrics). The attribute `model.metricsNames`
   *   will give you the display labels for the scalar outputs.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  evaluate(t, e, s = {}) {
    if (!this.built)
      throw new Pn("The model needs to be compiled before being used.");
    return this.model.evaluate(t, e, s);
  }
  // TODO(cais): Add code snippet below once real dataset objects are
  //   available.
  /**
   * Evaluate model using a dataset object.
   *
   * Note: Unlike `evaluate()`, this method is asynchronous (`async`).
   *
   * @param dataset A dataset object. Its `iterator()` method is expected
   *   to generate a dataset iterator object, the `next()` method of which
   *   is expected to produce data batches for evaluation. The return value
   *   of the `next()` call ought to contain a boolean `done` field and a
   *   `value` field. The `value` field is expected to be an array of two
   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former
   *   case is for models with exactly one input and one output (e.g.
   *   a sequential model). The latter case is for models with multiple
   *   inputs and/or multiple outputs. Of the two items in the array, the
   *   first is the input feature(s) and the second is the output target(s).
   * @param args A configuration object for the dataset-based evaluation.
   * @returns Loss and metric values as an Array of `Scalar` objects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async evaluateDataset(t, e) {
    if (!this.built)
      throw new Pn("The model needs to be compiled before being used.");
    return this.model.evaluateDataset(t, e);
  }
  /**
   * Generates output predictions for the input samples.
   *
   * Computation is done in batches.
   *
   * Note: the "step" mode of predict() is currently not supported.
   *   This is because the TensorFlow.js core backend is imperative only.
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.predict(tf.ones([2, 10])).print();
   * ```
   *
   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if
   *   the model has multiple inputs.
   * @param conifg A `ModelPredictConfig` object containing optional fields.
   *
   * @return `tf.Tensor`(s) of predictions.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and the model's expectations, or in case a stateful model receives a
   *   number of samples that is not a multiple of the batch size.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  predict(t, e = {}) {
    return this.model == null && this.build(), this.model.predict(t, e);
  }
  /**
   * Returns predictions for a single batch of samples.
   *
   * @param x: Input samples, as a Tensor, or list of Tensors (if the model
   *   has multiple inputs).
   * @return Tensor(s) of predictions
   */
  predictOnBatch(t) {
    return this.model == null && this.build(), this.model.predictOnBatch(t);
  }
  /**
   * See `LayersModel.compile`.
   *
   * @param args
   */
  compile(t) {
    this.build(), this.model.compile(t), this.optimizer_ = this.model.optimizer, this.isOptimizerOwned = this.model.isOptimizerOwned, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
  }
  get optimizer() {
    return this.model == null ? void 0 : this.model.optimizer;
  }
  set optimizer(t) {
    this.model.optimizer = t;
  }
  /**
   * Trains the model for a fixed number of epochs (iterations on a dataset).
   *
   * ```js
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {
   *   batchSize: 4,
   *   epochs: 3
   * });
   * console.log(history.history.loss[0]);
   * ```
   *
   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the
   * model has multiple inputs. If all inputs in the model are named, you can
   * also pass a dictionary mapping input names to `tf.Tensor`s.
   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if
   * the model has multiple outputs. If all outputs in the model are named, you
   *  can also pass a dictionary mapping output names to `tf.Tensor`s.
   * @param args  A `ModelFitConfig`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @exception ValueError In case of mismatch between the provided input data
   *   and what the model expects.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async fit(t, e, s = {}) {
    if (!this.built)
      throw new Pn("The model needs to be compiled before being used.");
    return this.model.fit(t, e, s);
  }
  /**
   * Trains the model using a dataset object.
   *
   * ```js
   * const xArray = [
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   *   [1, 1, 1, 1, 1, 1, 1, 1, 1],
   * ];
   * const yArray = [1, 1, 1, 1];
   * // Create a dataset from the JavaScript array.
   * const xDataset = tf.data.array(xArray);
   * const yDataset = tf.data.array(yArray);
   * // Zip combines the `x` and `y` Datasets into a single Dataset, the
   * // iterator of which will return an object containing of two tensors,
   * // corresponding to `x` and `y`.  The call to `batch(4)` will bundle
   * // four such samples into a single object, with the same keys now pointing
   * // to tensors that hold 4 examples, organized along the batch dimension.
   * // The call to `shuffle(4)` causes each iteration through the dataset to
   * // happen in a different order.  The size of the shuffle window is 4.
   * const xyDataset = tf.data.zip({xs: xDataset, ys: yDataset})
   *     .batch(4)
   *     .shuffle(4);
   * const model = tf.sequential({
   *   layers: [tf.layers.dense({units: 1, inputShape: [9]})]
   * });
   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});
   * const history = await model.fitDataset(xyDataset, {
   *   epochs: 4,
   *   callbacks: {onEpochEnd: (epoch, logs) => console.log(logs.loss)}
   * });
   * ```
   *
   * @param dataset A dataset object. Its `iterator()` method is expected to
   *   generate a dataset iterator object, the `next()` method of which is
   *   expected to produce data batches for evaluation. The return value of the
   *   `next()` call ought to contain a boolean `done` field and a `value`
   *   field.
   *
   *   The `value` field is expected to be an object of with fields
   *   `xs` and `ys`, which point to the feature tensor and the target tensor,
   *   respectively. This case is for models with exactly one input and one
   *   output (e.g. a sequential model). For example:
   *   ```js
   *   {value: {xs: xsTensor, ys: ysTensor}, done: false}
   *   ```
   *
   *   If the model has multiple inputs, the `xs` field of `value` should
   *   be an object mapping input names to their respective feature tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: {
   *         input_1: xsTensor1,
   *         input_2: xsTensor2
   *       },
   *       ys: ysTensor
   *     },
   *     done: false
   *   }
   *   ```
   *   If the model has multiple outputs, the `ys` field of `value` should
   *   be an object mapping output names to their respective target tensors.
   *   For example:
   *   ```js
   *   {
   *     value: {
   *       xs: xsTensor,
   *       ys: {
   *         output_1: ysTensor1,
   *         output_2: ysTensor2
   *       },
   *     },
   *     done: false
   *   }
   *   ```
   * @param args A `ModelFitDatasetArgs`, containing optional fields.
   *
   * @return A `History` instance. Its `history` attribute contains all
   *   information collected during training.
   *
   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}
   */
  async fitDataset(t, e) {
    if (!this.built)
      throw new Pn("The model needs to be compiled before being used.");
    return this.model.fitDataset(t, e);
  }
  /**
   * Runs a single gradient update on a single batch of data.
   *
   * This method differs from `fit()` and `fitDataset()` in the following
   * regards:
   *   - It operates on exactly one batch of data.
   *   - It returns only the loss and metric values, instead of
   *     returning the batch-by-batch loss and metric values.
   *   - It doesn't support fine-grained options such as verbosity and
   *     callbacks.
   *
   * @param x Input data. It could be one of the following:
   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has
   *     multiple inputs).
   *   - An Object mapping input names to corresponding `tf.Tensor` (if the
   *     model has named inputs).
   * @param y Target data. It could be either a `tf.Tensor` or multiple
   *   `tf.Tensor`s. It should be consistent with `x`.
   * @returns Training loss or losses (in case the model has
   *   multiple outputs), along with metrics (if any), as numbers.
   *
   * @doc {heading: 'Models', subheading: 'Classes'}
   */
  async trainOnBatch(t, e) {
    return this.model.trainOnBatch(t, e);
  }
  /* See parent class for JsDoc */
  /** @nocollapse */
  static fromConfig(t, e, s = {}, o = !1) {
    let r, i = {};
    if (e instanceof Array) {
      if (e[0].className == null || e[0].className === "Merge")
        throw new F("Legacy serialization format not supported yet.");
      r = e;
    } else
      S(e.layers != null, () => "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), r = e.layers, delete e.layers, i = e;
    const a = new t(i);
    if (!(a instanceof si))
      throw new Wt(`Sequential.fromConfig called on non-Sequential input: ${a}`);
    for (const l of r) {
      const u = ns(l, void 0, o);
      o && u.setFastWeightInitDuringBuild(!0), a.add(u);
    }
    return a;
  }
  /**
   * Setter used for force stopping of LayersModel.fit() (i.e., training).
   *
   * Example:
   *
   * ```js
   * const model = tf.sequential();
   * model.add(tf.layers.dense({units: 1, inputShape: [10]}));
   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});
   * const xs = tf.ones([8, 10]);
   * const ys = tf.zeros([8, 1]);
   *
   * const history = await model.fit(xs, ys, {
   *   epochs: 10,
   *   callbacks: {
   *     onEpochEnd: async (epoch, logs) => {
   *       if (epoch === 2) {
   *         model.stopTraining = true;
   *       }
   *     }
   *   }
   * });
   *
   * // There should be only 3 values in the loss array, instead of 10 values,
   * // due to the stopping after 3 epochs.
   * console.log(history.history.loss);
   * ```
   */
  set stopTraining(t) {
    if (this.model == null)
      throw new F("Cannot set the stopTraining property of a sequential model before it is compiled.");
    this.model.stopTraining = t;
  }
  get stopTraining() {
    if (this.model == null)
      throw new F("Cannot get the stopTraining property of a sequential model before it is compiled.");
    return this.model.stopTraining;
  }
  // TODO(cais): Override get trainableWeights() here
  // tslint:disable-next-line:no-any
  getConfig() {
    const t = [];
    for (const e of this.layers) {
      const s = {};
      s.className = e.getClassName(), s.config = e.getConfig(), t.push(s);
    }
    return { name: this.name, layers: t };
  }
}
si.className = "Sequential";
et(si);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let ln = class extends zo {
  getConfig() {
    return {};
  }
};
class yx extends ln {
  /**
   * Calculate the activation function.
   *
   * @param x: Input.
   * @param alpha: Scaling factor the negative section.
   * @return Output of the ELU activation.
   */
  apply(t, e = 1) {
    return bR(t, e);
  }
}
yx.className = "elu";
et(yx);
class wx extends ln {
  apply(t) {
    return u0(t);
  }
}
wx.className = "selu";
et(wx);
class Ix extends ln {
  apply(t) {
    return Ms(t);
  }
}
Ix.className = "relu";
et(Ix);
class Cx extends ln {
  apply(t) {
    return X(() => Uc(6, Ms(t)));
  }
}
Cx.className = "relu6";
et(Cx);
class vx extends ln {
  apply(t) {
    return t;
  }
}
vx.className = "linear";
et(vx);
class Sx extends ln {
  apply(t) {
    return Ir(t);
  }
}
Sx.className = "sigmoid";
et(Sx);
class kx extends ln {
  apply(t) {
    return yR(t);
  }
}
kx.className = "hardSigmoid";
et(kx);
class Tx extends ln {
  apply(t) {
    return ca(t);
  }
}
Tx.className = "softplus";
et(Tx);
class Nx extends ln {
  apply(t) {
    return xR(t);
  }
}
Nx.className = "softsign";
et(Nx);
class $x extends ln {
  apply(t) {
    return sp(t);
  }
}
$x.className = "tanh";
et($x);
let zf = class extends ln {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(t, e = -1) {
    return Ip(t, e);
  }
};
zf.className = "softmax";
et(zf);
class Rx extends ln {
  /**
   * Calculate the activation function of log softmax:
   * log( exp(x_i) / sum(exp(x)) )
   *
   * @param x Tensor.
   * @param axis Integer, axis along which the softmax normalization is applied.
   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be
   * an error.
   *
   * @returns a Tensor of the same shape as x
   *
   * @throws ValueError: In case `dim(x) < 2`.
   */
  apply(t, e = -1) {
    return o0(t, e);
  }
}
Rx.className = "logSoftmax";
et(Rx);
class Gx extends ln {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @param alpha Scaling factor for the sigmoid function.
   * @returns a Tensor of the same shape as x
   */
  apply(t, e = 1) {
    return X(() => D(Ir(D(t, e)), t));
  }
}
Gx.className = "swish";
et(Gx);
class Lx extends ln {
  /**
   * Calculate the activation function.
   *
   * @param x Tensor.
   * @returns a Tensor of the same shape as x
   */
  apply(t) {
    return X(() => D(t, sp(ca(t))));
  }
}
Lx.className = "mish";
et(Lx);
function _s(n) {
  return n.getClassName();
}
function $u(n, t = {}) {
  return ma(n, In.getMap().classNameMap, t, "activation");
}
function Us(n) {
  if (n == null) {
    const t = {};
    return t.className = "linear", t.config = {}, $u(t);
  }
  if (typeof n == "string") {
    const t = {};
    return t.className = n, t.config = {}, $u(t);
  } else
    return n instanceof ln ? n : $u(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Vf(n) {
  if (n != null && typeof n != "object")
    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`);
}
class Ex extends zo {
}
class iu extends Ex {
  constructor(t) {
    super(), Vf(t), this.l1 = t == null || t.l1 == null ? 0.01 : t.l1, this.l2 = t == null || t.l2 == null ? 0.01 : t.l2, this.hasL1 = this.l1 !== 0, this.hasL2 = this.l2 !== 0;
  }
  /**
   * Porting note: Renamed from __call__.
   * @param x Variable of which to calculate the regularization score.
   */
  apply(t) {
    return X(() => {
      let e = Me([1]);
      return this.hasL1 && (e = ot(e, yt(D(this.l1, Ee(t))))), this.hasL2 && (e = ot(e, yt(D(this.l2, xa(t))))), P(e, []);
    });
  }
  getConfig() {
    return { l1: this.l1, l2: this.l2 };
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t({ l1: e.l1, l2: e.l2 });
  }
}
iu.className = "L1L2";
et(iu);
function lY(n) {
  return Vf(n), new iu({ l1: n != null ? n.l1 : null, l2: 0 });
}
function cY(n) {
  return Vf(n), new iu({ l2: n != null ? n.l2 : null, l1: 0 });
}
const jm = {
  l1l2: "L1L2"
};
function Jt(n) {
  return Cf(n);
}
function Qm(n, t = {}) {
  return ma(n, In.getMap().classNameMap, t, "regularizer");
}
function ue(n) {
  if (n == null)
    return null;
  if (typeof n == "string") {
    const e = { className: n in jm ? jm[n] : n, config: {} };
    return Qm(e);
  } else
    return n instanceof Ex ? n : Qm(n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Wx extends Vt {
  constructor(t) {
    super(t ?? {}), this.supportsMasking = !0, t != null && (this.maxValue = t.maxValue);
  }
  call(t, e) {
    t = Mt(t);
    let s = Ms(t);
    return this.maxValue != null && (s = kn(s, 0, this.maxValue)), s;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { maxValue: this.maxValue }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Wx.className = "ReLU";
et(Wx);
class Mx extends Vt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_ALPHA = 0.3, t == null && (t = {}), this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = Mt(t);
    return up(s, this.alpha);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Mx.className = "LeakyReLU";
et(Mx);
class Dx extends Vt {
  constructor(t) {
    if (super(t ?? {}), this.DEFAULT_ALPHA_INITIALIZER = "zeros", t == null && (t = {}), this.supportsMasking = !0, this.alphaInitializer = ce(t.alphaInitializer || this.DEFAULT_ALPHA_INITIALIZER), this.alphaRegularizer = ue(t.alphaRegularizer), this.alphaConstraint = Re(t.alphaConstraint), t.sharedAxes == null)
      this.sharedAxes = null;
    else if (Array.isArray(t.sharedAxes))
      this.sharedAxes = t.sharedAxes;
    else if (typeof t.sharedAxes == "number")
      this.sharedAxes = [t.sharedAxes];
    else
      throw new F(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);
  }
  build(t) {
    t = Ut(t);
    const e = t.slice(1);
    if (this.sharedAxes != null)
      for (const o of this.sharedAxes)
        e[o - 1] = 1;
    this.alpha = this.addWeight("alpha", e, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
    const s = {};
    if (this.sharedAxes != null)
      for (let o = 1; o < t.length; ++o)
        s[o] = t[o];
    this.inputSpec = [new Ne({
      ndim: t.length,
      axes: s
    })], this.built = !0;
  }
  call(t, e) {
    return t = Mt(t), bp(t, this.alpha.read());
  }
  getConfig() {
    const t = {
      alphaInitializer: pe(this.alphaInitializer),
      alphaRegularizer: Jt(this.alphaRegularizer),
      alphaConstraint: $e(this.alphaConstraint),
      sharedAxes: this.sharedAxes
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Dx.className = "PReLU";
et(Dx);
let Fx = class extends Vt {
  constructor(t) {
    if (super(t ?? {}), this.DEFAULT_ALPHA = 1, t == null && (t = {}), t.alpha != null && t.alpha !== this.DEFAULT_ALPHA)
      throw new Wt(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);
    this.alpha = t.alpha == null ? this.DEFAULT_ALPHA : t.alpha;
  }
  call(t, e) {
    const s = Mt(t);
    return Kc(s);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { alpha: this.alpha }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
};
Fx.className = "ELU";
et(Fx);
class zx extends Vt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_THETA = 1, t == null && (t = {}), this.theta = t.theta == null ? this.DEFAULT_THETA : t.theta;
  }
  call(t, e) {
    const s = Mt(t);
    return D(s, ht(Tn(s, this.theta), "float32"));
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { theta: this.theta }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
zx.className = "ThresholdedReLU";
et(zx);
class Vx extends Vt {
  constructor(t) {
    super(t ?? {}), this.DEFAULT_AXIS = 1, t == null && (t = {}), this.softmax = new zf().apply, this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis;
  }
  call(t, e) {
    const s = Mt(t);
    return this.softmax(s, this.axis);
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = { axis: this.axis }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Vx.className = "Softmax";
et(Vx);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function sr(n, t, e) {
  if (typeof n == "number")
    return Eo(n, t);
  if (n.length !== t)
    throw new F(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);
  for (let s = 0; s < t; ++s) {
    const o = n[s];
    if (!pR(o))
      throw new F(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${o}`);
  }
  return n;
}
function ss(n, t, e, s, o = 1) {
  if (n == null)
    return n;
  const r = t + (t - 1) * (o - 1);
  let i;
  return e === "same" ? i = n : i = n - r + 1, Math.floor((i + s - 1) / s);
}
function ds(n, t, e, s) {
  if (n == null)
    return null;
  if (s === "valid")
    n = n * t + Hs([e - t, 0]);
  else if (s === "same")
    n = n * t;
  else
    throw new F(`Unsupport padding mode: ${s}.`);
  return n;
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function Pf(n, t) {
  return X(() => (Ce(t), t === "channelsFirst" ? zt(n, [0, 2, 3, 1]) : n));
}
function Px(n, t) {
  return X(() => (Ce(t), t === "channelsFirst" ? zt(n, [0, 2, 3, 4, 1]) : n));
}
function WG(n, t, e, s = 1, o = "valid", r, i = 1) {
  return X(() => {
    if (r == null && (r = rs()), Ce(r), n.shape.length !== 3)
      throw new F(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);
    if (t.shape.length !== 3)
      throw new F(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);
    if (e != null && e.shape.length !== 1)
      throw new F(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);
    if (r === "channelsFirst" && (n = zt(n, [0, 2, 1])), o === "causal")
      throw new Wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    let a = Yb(n, t, s, o === "same" ? "same" : "valid", "NWC", i);
    return e != null && (a = ls(a, e)), a;
  });
}
function Jm(n, t, e, s = [1, 1], o = "valid", r, i, a = null) {
  return X(() => {
    if (r == null && (r = rs()), Ce(r), n.rank !== 3 && n.rank !== 4)
      throw new F(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);
    if (t.rank !== 3 && t.rank !== 4)
      throw new F(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);
    let l = Pf(n, r);
    if (o === "causal")
      throw new Wt("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
    return l = mk({
      x: l,
      filter: t,
      strides: s,
      pad: o === "same" ? "same" : "valid",
      dilations: i,
      dataFormat: "NHWC",
      bias: e,
      activation: a
    }), r === "channelsFirst" && (l = zt(l, [0, 3, 1, 2])), l;
  });
}
function MG(n, t, e, s = [1, 1, 1], o = "valid", r, i) {
  return X(() => {
    if (r == null && (r = rs()), Ce(r), n.rank !== 4 && n.rank !== 5)
      throw new F(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);
    if (t.rank !== 4 && t.rank !== 5)
      throw new F(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);
    let a = Px(n, r);
    if (o === "causal")
      throw new Wt("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");
    return a = vC(a, t, s, o === "same" ? "same" : "valid", "NDHWC", i), e != null && (a = ls(a, e)), r === "channelsFirst" && (a = zt(a, [0, 4, 1, 2, 3])), a;
  });
}
class au extends Vt {
  constructor(t, e) {
    if (super(e), this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", au.verifyArgs(e), this.rank = t, De(this.rank, "rank"), this.rank !== 1 && this.rank !== 2 && this.rank !== 3)
      throw new Wt(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);
    if (this.kernelSize = sr(e.kernelSize, t, "kernelSize"), this.strides = sr(e.strides == null ? 1 : e.strides, t, "strides"), this.padding = e.padding == null ? "valid" : e.padding, Nn(this.padding), this.dataFormat = e.dataFormat == null ? "channelsLast" : e.dataFormat, Ce(this.dataFormat), this.activation = Us(e.activation), this.useBias = e.useBias == null ? !0 : e.useBias, this.biasInitializer = ce(e.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.biasConstraint = Re(e.biasConstraint), this.biasRegularizer = ue(e.biasRegularizer), this.activityRegularizer = ue(e.activityRegularizer), this.dilationRate = sr(e.dilationRate == null ? 1 : e.dilationRate, t, "dilationRate"), this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)
      throw new F(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    if (this.rank === 2) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 2)
        throw new F(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    } else if (this.rank === 3) {
      if (typeof this.dilationRate == "number")
        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];
      else if (this.dilationRate.length !== 3)
        throw new F(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`);
    }
  }
  static verifyArgs(t) {
    if (hs("kernelSize" in t, "required key 'kernelSize' not in config"), typeof t.kernelSize != "number" && !vf(t.kernelSize, "number", 1, 3))
      throw new F(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`);
  }
  getConfig() {
    const t = {
      kernelSize: this.kernelSize,
      strides: this.strides,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      activation: _s(this.activation),
      useBias: this.useBias,
      biasInitializer: pe(this.biasInitializer),
      biasRegularizer: Jt(this.biasRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      biasConstraint: $e(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Tr extends au {
  constructor(t, e) {
    super(t, e), this.kernel = null, Tr.verifyArgs(e), this.filters = e.filters, De(this.filters, "filters"), this.kernelInitializer = ce(e.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.kernelConstraint = Re(e.kernelConstraint), this.kernelRegularizer = ue(e.kernelRegularizer);
  }
  build(t) {
    t = Ut(t);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new F(`The channel dimension of the input should be defined. Found ${t[e]}`);
    const s = t[e], o = this.kernelSize.concat([s, this.filters]);
    this.kernel = this.addWeight("kernel", o, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [{ ndim: this.rank + 2, axes: { [e]: s } }], this.built = !0;
  }
  call(t, e) {
    return X(() => {
      t = Mt(t);
      let s;
      const o = this.bias == null ? null : this.bias.read(), r = z0(this.activation.getClassName());
      if (r != null && this.rank === 2)
        s = Jm(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate, r);
      else {
        if (this.rank === 1)
          s = WG(t, this.kernel.read(), o, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);
        else if (this.rank === 2)
          s = Jm(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else if (this.rank === 3)
          s = MG(t, this.kernel.read(), o, this.strides, this.padding, this.dataFormat, this.dilationRate);
        else
          throw new Wt("convolutions greater than 3D are not implemented yet.");
        this.activation != null && (s = this.activation.apply(s));
      }
      return s;
    });
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = [], s = this.dataFormat === "channelsLast" ? t.slice(1, t.length - 1) : t.slice(2);
    for (let r = 0; r < s.length; ++r) {
      const i = ss(s[r], this.kernelSize[r], this.padding, this.strides[r], typeof this.dilationRate == "number" ? this.dilationRate : this.dilationRate[r]);
      e.push(i);
    }
    let o = [t[0]];
    return this.dataFormat === "channelsLast" ? (o = o.concat(e), o.push(this.filters)) : (o.push(this.filters), o = o.concat(e)), o;
  }
  getConfig() {
    const t = {
      filters: this.filters,
      kernelInitializer: pe(this.kernelInitializer),
      kernelRegularizer: Jt(this.kernelRegularizer),
      kernelConstraint: $e(this.kernelConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  static verifyArgs(t) {
    if (!("filters" in t) || typeof t.filters != "number" || t.filters < 1)
      throw new F(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`);
  }
}
class Ca extends Tr {
  constructor(t) {
    super(2, t), Ca.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !vf(t.kernelSize, "number", 1, 2))
      throw new F(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
Ca.className = "Conv2D";
et(Ca);
class va extends Tr {
  constructor(t) {
    super(3, t), va.verifyArgs(t);
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !(Array.isArray(t.kernelSize) && (t.kernelSize.length === 1 || t.kernelSize.length === 3)))
      throw new F(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
va.className = "Conv3D";
et(va);
class Xx extends Ca {
  constructor(t) {
    if (super(t), this.inputSpec = [new Ne({ ndim: 4 })], this.padding !== "same" && this.padding !== "valid")
      throw new F(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Ut(t), t.length !== 4)
      throw new F("Input should have rank 4; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new F("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], o = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new Ne({ ndim: 4, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return X(() => {
      let s = Mt(t);
      if (s.shape.length !== 4)
        throw new F(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const o = s.shape, r = o[0];
      let i, a;
      this.dataFormat === "channelsFirst" ? (i = 2, a = 3) : (i = 1, a = 2);
      const l = o[i], c = o[a], u = this.kernelSize[0], h = this.kernelSize[1], d = this.strides[0], p = this.strides[1], f = ds(l, d, u, this.padding), g = ds(c, p, h, this.padding), m = [r, f, g, this.filters];
      this.dataFormat !== "channelsLast" && (s = zt(s, [0, 2, 3, 1]));
      let b = jb(s, this.kernel.read(), m, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (b = zt(b, [0, 3, 1, 2])), this.bias != null && (b = ls(b, this.bias.read(), this.dataFormat)), this.activation != null && (b = this.activation.apply(b)), b;
    });
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = t.slice();
    let s, o, r;
    this.dataFormat === "channelsFirst" ? (s = 1, o = 2, r = 3) : (s = 3, o = 1, r = 2);
    const i = this.kernelSize[0], a = this.kernelSize[1], l = this.strides[0], c = this.strides[1];
    return e[s] = this.filters, e[o] = ds(e[o], l, i, this.padding), e[r] = ds(e[r], c, a, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
Xx.className = "Conv2DTranspose";
et(Xx);
class Ox extends va {
  constructor(t) {
    if (super(t), this.inputSpec = [new Ne({ ndim: 5 })], this.padding !== "same" && this.padding !== "valid")
      throw new F(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`);
  }
  build(t) {
    if (t = Ut(t), t.length !== 5)
      throw new F("Input should have rank 5; Received input shape: " + JSON.stringify(t));
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null)
      throw new F("The channel dimension of the inputs should be defined. Found `None`.");
    const s = t[e], o = this.kernelSize.concat([this.filters, s]);
    this.kernel = this.addWeight("kernel", o, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [new Ne({ ndim: 5, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return X(() => {
      let s = Mt(t);
      if (s.shape.length !== 5)
        throw new F(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${s.shape.length}`);
      const o = s.shape, r = o[0];
      let i, a, l;
      this.dataFormat === "channelsFirst" ? (l = 2, i = 3, a = 4) : (l = 1, i = 2, a = 3);
      const c = o[l], u = o[i], h = o[a], d = this.kernelSize[0], p = this.kernelSize[1], f = this.kernelSize[2], g = this.strides[0], m = this.strides[1], b = this.strides[2], x = ds(c, g, d, this.padding), w = ds(u, m, p, this.padding), y = ds(h, b, f, this.padding), I = [r, x, w, y, this.filters];
      this.dataFormat !== "channelsLast" && (s = zt(s, [0, 2, 3, 4, 1]));
      let v = TC(s, this.kernel.read(), I, this.strides, this.padding);
      return this.dataFormat !== "channelsLast" && (v = zt(v, [0, 4, 1, 2, 3])), this.bias !== null && (v = ls(v, this.bias.read(), this.dataFormat)), this.activation !== null && (v = this.activation.apply(v)), v;
    });
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = t.slice();
    let s, o, r, i;
    this.dataFormat === "channelsFirst" ? (s = 1, o = 2, r = 3, i = 4) : (s = 4, o = 1, r = 2, i = 3);
    const a = this.kernelSize[0], l = this.kernelSize[1], c = this.kernelSize[2], u = this.strides[0], h = this.strides[1], d = this.strides[2];
    return e[s] = this.filters, e[o] = ds(e[o], u, a, this.padding), e[r] = ds(e[r], h, l, this.padding), e[i] = ds(e[i], d, c, this.padding), e;
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.dilationRate, t;
  }
}
Ox.className = "Conv3DTranspose";
et(Ox);
class Ax extends Tr {
  constructor(t, e) {
    if (super(t, e), this.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", this.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", this.depthwiseKernel = null, this.pointwiseKernel = null, e.filters == null)
      throw new F("The `filters` configuration field is required by SeparableConv, but is unspecified.");
    if (e.kernelInitializer != null || e.kernelRegularizer != null || e.kernelConstraint != null)
      throw new F("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
    if (e.padding != null && e.padding !== "same" && e.padding !== "valid")
      throw new F(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);
    this.depthMultiplier = e.depthMultiplier == null ? 1 : e.depthMultiplier, this.depthwiseInitializer = ce(e.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER), this.depthwiseRegularizer = ue(e.depthwiseRegularizer), this.depthwiseConstraint = Re(e.depthwiseConstraint), this.pointwiseInitializer = ce(e.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER), this.pointwiseRegularizer = ue(e.pointwiseRegularizer), this.pointwiseConstraint = Re(e.pointwiseConstraint);
  }
  build(t) {
    if (t = Ut(t), t.length < this.rank + 2)
      throw new F(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank + 2}, but received input shape: ${JSON.stringify(t)}`);
    const e = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[e] == null || t[e] < 0)
      throw new F(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);
    const s = t[e], o = this.kernelSize.concat([s, this.depthMultiplier]), r = [];
    for (let a = 0; a < this.rank; ++a)
      r.push(1);
    r.push(s * this.depthMultiplier, this.filters);
    const i = !0;
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, i, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", r, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, i, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.filters], "float32", this.biasInitializer, this.biasRegularizer, i, this.biasConstraint) : this.bias = null, this.inputSpec = [new Ne({ ndim: this.rank + 2, axes: { [e]: s } })], this.built = !0;
  }
  call(t, e) {
    return X(() => {
      t = Mt(t);
      let s;
      if (this.rank === 1)
        throw new Wt("1D separable convolution is not implemented yet.");
      return this.rank === 2 && (this.dataFormat === "channelsFirst" && (t = zt(t, [0, 2, 3, 1])), s = h0(t, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, "NHWC")), this.useBias && (s = ls(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), this.dataFormat === "channelsFirst" && (s = zt(s, [0, 3, 1, 2])), s;
    });
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = pe(this.depthwiseInitializer), t.pointwiseInitializer = pe(this.pointwiseInitializer), t.depthwiseRegularizer = Jt(this.depthwiseRegularizer), t.pointwiseRegularizer = Jt(this.pointwiseRegularizer), t.depthwiseConstraint = $e(this.depthwiseConstraint), t.pointwiseConstraint = $e(this.pointwiseConstraint), t;
  }
}
Ax.className = "SeparableConv";
class Zx extends Ax {
  constructor(t) {
    super(2, t);
  }
}
Zx.className = "SeparableConv2D";
et(Zx);
class lu extends Tr {
  constructor(t) {
    super(1, t), lu.verifyArgs(t), this.inputSpec = [{ ndim: 3 }];
  }
  getConfig() {
    const t = super.getConfig();
    return delete t.rank, delete t.dataFormat, t;
  }
  static verifyArgs(t) {
    if (typeof t.kernelSize != "number" && !vf(t.kernelSize, "number", 1, 1))
      throw new F(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`);
  }
}
lu.className = "Conv1D";
et(lu);
class Kx extends Vt {
  constructor(t) {
    super(t), typeof t.cropping == "number" ? this.cropping = [[t.cropping, t.cropping], [t.cropping, t.cropping]] : typeof t.cropping[0] == "number" ? this.cropping = [
      [t.cropping[0], t.cropping[0]],
      [t.cropping[1], t.cropping[1]]
    ] : this.cropping = t.cropping, this.dataFormat = t.dataFormat === void 0 ? "channelsLast" : t.dataFormat, this.inputSpec = [{ ndim: 4 }];
  }
  computeOutputShape(t) {
    return this.dataFormat === "channelsFirst" ? [
      t[0],
      t[1],
      t[2] - this.cropping[0][0] - this.cropping[0][1],
      t[3] - this.cropping[1][0] - this.cropping[1][1]
    ] : [
      t[0],
      t[1] - this.cropping[0][0] - this.cropping[0][1],
      t[2] - this.cropping[1][0] - this.cropping[1][1],
      t[3]
    ];
  }
  call(t, e) {
    return X(() => {
      if (t = Mt(t), this.dataFormat === "channelsLast") {
        const s = za(t, this.cropping[0][0], t.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);
        return za(s, this.cropping[1][0], t.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);
      } else {
        const s = za(t, this.cropping[0][0], t.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);
        return za(s, this.cropping[1][0], t.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);
      }
    });
  }
  getConfig() {
    const t = { cropping: this.cropping, dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Kx.className = "Cropping2D";
et(Kx);
class Bx extends Vt {
  constructor(t) {
    super(t), this.DEFAULT_SIZE = [2, 2], this.inputSpec = [{ ndim: 4 }], this.size = t.size == null ? this.DEFAULT_SIZE : t.size, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Ce(this.dataFormat), this.interpolation = t.interpolation == null ? "nearest" : t.interpolation, uR(this.interpolation);
  }
  computeOutputShape(t) {
    if (this.dataFormat === "channelsFirst") {
      const e = t[2] == null ? null : this.size[0] * t[2], s = t[3] == null ? null : this.size[1] * t[3];
      return [t[0], t[1], e, s];
    } else {
      const e = t[1] == null ? null : this.size[0] * t[1], s = t[2] == null ? null : this.size[1] * t[2];
      return [t[0], e, s, t[3]];
    }
  }
  call(t, e) {
    return X(() => {
      let s = Mt(t);
      const o = s.shape;
      if (this.dataFormat === "channelsFirst") {
        s = zt(s, [0, 2, 3, 1]);
        const r = this.size[0] * o[2], i = this.size[1] * o[3], a = this.interpolation === "nearest" ? Ma.resizeNearestNeighbor(s, [r, i]) : Ma.resizeBilinear(s, [r, i]);
        return zt(a, [0, 3, 1, 2]);
      } else {
        const r = this.size[0] * o[1], i = this.size[1] * o[2];
        return this.interpolation === "nearest" ? Ma.resizeNearestNeighbor(s, [r, i]) : Ma.resizeBilinear(s, [r, i]);
      }
    });
  }
  getConfig() {
    const t = {
      size: this.size,
      dataFormat: this.dataFormat,
      interpolation: this.interpolation
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Bx.className = "UpSampling2D";
et(Bx);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function DG(n, t, e = [1, 1], s = "valid", o, r) {
  return X(() => {
    o == null && (o = rs()), Ce(o);
    let i = Pf(n, o);
    if (n.rank !== 4)
      throw new F(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);
    if (t.rank !== 4)
      throw new F(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);
    return i = ap(i, t, e, s === "same" ? "same" : "valid", "NHWC", r), o === "channelsFirst" && (i = zt(i, [0, 3, 1, 2])), i;
  });
}
class Hx extends au {
  constructor(t) {
    super(2, t), this.depthwiseKernel = null, this.depthMultiplier = t.depthMultiplier == null ? 1 : t.depthMultiplier, this.depthwiseInitializer = ce(t.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.depthwiseConstraint = Re(t.depthwiseConstraint), this.depthwiseRegularizer = ue(t.depthwiseRegularizer);
  }
  build(t) {
    if (t = Ut(t), t.length < 4)
      throw new F(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);
    const e = this.dataFormat === "channelsFirst" ? 1 : 3;
    if (t[e] == null || t[e] < 0)
      throw new F(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);
    const s = t[e], o = [
      this.kernelSize[0],
      this.kernelSize[1],
      s,
      this.depthMultiplier
    ];
    this.depthwiseKernel = this.addWeight("depthwise_kernel", o, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [s * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return X(() => {
      t = Mt(t);
      let s = DG(t, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);
      return this.useBias && (s = ls(s, this.bias.read(), this.dataFormat)), this.activation != null && (s = this.activation.apply(s)), s;
    });
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], o = this.dataFormat === "channelsFirst" ? t[1] * this.depthMultiplier : t[3] * this.depthMultiplier, r = ss(e, this.kernelSize[0], this.padding, this.strides[0]), i = ss(s, this.kernelSize[1], this.padding, this.strides[1]);
    return this.dataFormat === "channelsFirst" ? [t[0], o, r, i] : [t[0], r, i, o];
  }
  getConfig() {
    const t = super.getConfig();
    return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = pe(this.depthwiseInitializer), t.depthwiseRegularizer = Jt(this.depthwiseRegularizer), t.depthwiseConstraint = $e(this.depthwiseRegularizer), t;
  }
}
Hx.className = "DepthwiseConv2D";
et(Hx);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function _x(n, t, e, s) {
  if (Array.isArray(n)) {
    if (t != null || e != null)
      throw new F("When inputs is an array, neither initialState or constants should be provided");
    s != null && (e = n.slice(n.length - s, n.length), n = n.slice(0, n.length - s)), n.length > 1 && (t = n.slice(1, n.length)), n = n[0];
  }
  function o(r) {
    return r == null || Array.isArray(r) ? r : [r];
  }
  return t = o(t), e = o(e), { inputs: n, initialState: t, constants: e };
}
function Ux(n, t, e, s = !1, o, r, i = !1, a = !1) {
  return X(() => {
    const l = t.shape.length;
    if (l < 3)
      throw new F(`Input should be at least 3D, but is ${l}D.`);
    const c = [1, 0].concat(os(2, l));
    if (t = zt(t, c), r != null)
      throw new Wt("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
    i && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), o != null && (o = ht(ht(o, "bool"), "float32"), o.rank === l - 1 && (o = Mn(o, -1)), o = zt(o, c)), s && (t = Lo(t, 0), o != null && (o = Lo(o, 0)));
    const u = [];
    let h, d = e;
    const p = t.shape[0], f = lr(t);
    let g;
    o != null && (g = lr(o));
    for (let b = 0; b < p; ++b) {
      const x = f[b], w = X(() => n(x, d));
      if (o == null)
        h = w[0], d = w[1];
      else {
        const y = X(() => {
          const I = g[b], v = wt(_n(I), I), T = ot(D(w[0], I), D(d[0], v)), k = d.map(($, G) => ot(D(w[1][G], I), D($, v)));
          return { output: T, newStates: k };
        });
        h = y.output, d = y.newStates;
      }
      a && u.push(h);
    }
    let m;
    return a && (m = Ns(u, 1)), [h, m, d];
  });
}
class so extends Vt {
  constructor(t) {
    super(t);
    let e;
    if (t.cell == null)
      throw new F("cell property is missing for the constructor of RNN.");
    if (Array.isArray(t.cell) ? e = new Af({ cells: t.cell }) : e = t.cell, e.stateSize == null)
      throw new F("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
    this.cell = e, this.returnSequences = t.returnSequences == null ? !1 : t.returnSequences, this.returnState = t.returnState == null ? !1 : t.returnState, this.goBackwards = t.goBackwards == null ? !1 : t.goBackwards, this._stateful = t.stateful == null ? !1 : t.stateful, this.unroll = t.unroll == null ? !1 : t.unroll, this.supportsMasking = !0, this.inputSpec = [new Ne({ ndim: 3 })], this.stateSpec = null, this.states_ = null, this.numConstants = null, this.keptStates = [];
  }
  // Porting Note: This is the equivalent of `RNN.states` property getter in
  //   PyKeras.
  getStates() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      return os(0, t).map((e) => null);
    } else
      return this.states_;
  }
  // Porting Note: This is the equivalent of the `RNN.states` property setter in
  //   PyKeras.
  setStates(t) {
    this.states_ = t;
  }
  computeOutputShape(t) {
    $h(t) && (t = t[0]), t = t;
    let e = this.cell.stateSize;
    Array.isArray(e) || (e = [e]);
    const s = e[0];
    let o;
    if (this.returnSequences ? o = [t[0], t[1], s] : o = [t[0], s], this.returnState) {
      const r = [];
      for (const i of e)
        r.push([t[0], i]);
      return [o].concat(r);
    } else
      return o;
  }
  computeMask(t, e) {
    return X(() => {
      Array.isArray(e) && (e = e[0]);
      const s = this.returnSequences ? e : null;
      if (this.returnState) {
        const o = this.states.map((r) => null);
        return [s].concat(o);
      } else
        return s;
    });
  }
  /**
   * Get the current state tensors of the RNN.
   *
   * If the state hasn't been set, return an array of `null`s of the correct
   * length.
   */
  get states() {
    if (this.states_ == null) {
      const t = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, e = [];
      for (let s = 0; s < t; ++s)
        e.push(null);
      return e;
    } else
      return this.states_;
  }
  set states(t) {
    this.states_ = t;
  }
  build(t) {
    if (this.numConstants != null)
      throw new Wt("Constants support is not implemented in RNN yet.");
    $h(t) && (t = t[0]), t = t;
    const e = this.stateful ? t[0] : null, s = t.slice(2);
    this.inputSpec[0] = new Ne({ shape: [e, null, ...s] });
    const o = [t[0]].concat(t.slice(2));
    this.cell.build(o);
    let r;
    if (Array.isArray(this.cell.stateSize) ? r = this.cell.stateSize : r = [this.cell.stateSize], this.stateSpec != null) {
      if (!At(this.stateSpec.map((i) => i.shape[i.shape.length - 1]), r))
        throw new F(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`);
    } else
      this.stateSpec = r.map((i) => new Ne({ shape: [null, i] }));
    this.stateful && this.resetStates();
  }
  /**
   * Reset the state tensors of the RNN.
   *
   * If the `states` argument is `undefined` or `null`, will set the
   * state tensor(s) of the RNN to all-zero tensors of the appropriate
   * shape(s).
   *
   * If `states` is provided, will set the state tensors of the RNN to its
   * value.
   *
   * @param states Optional externally-provided initial states.
   * @param training Whether this call is done during training. For stateful
   *   RNNs, this affects whether the old states are kept or discarded. In
   *   particular, if `training` is `true`, the old states will be kept so
   *   that subsequent backpropgataion through time (BPTT) may work properly.
   *   Else, the old states will be discarded.
   */
  resetStates(t, e = !1) {
    X(() => {
      if (!this.stateful)
        throw new us("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape[0];
      if (s == null)
        throw new F("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.states_ == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => Me([s, o])) : this.states_ = [Me([s, this.cell.stateSize])];
      else if (t == null)
        Et(this.states_), this.keptStates != null && (Et(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map((o) => Me([s, o])) : this.states_[0] = Me([s, this.cell.stateSize]);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new F(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e === !0 ? this.keptStates.push(this.states_.slice()) : Et(this.states_);
        for (let o = 0; o < this.states_.length; ++o) {
          const r = t[o], i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize[o] : this.cell.stateSize, a = [s, i];
          if (!At(r.shape, a))
            throw new F(`State ${o} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);
          this.states_[o] = r;
        }
      }
      this.states_ = this.states_.map((o) => vn(o.clone()));
    });
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, o = e == null ? null : e.constants;
    e == null && (e = {});
    const r = _x(t, s, o, this.numConstants);
    t = r.inputs, s = r.initialState, o = r.constants;
    let i = [], a = [];
    if (s != null) {
      e.initialState = s, i = i.concat(s), this.stateSpec = [];
      for (const c of s)
        this.stateSpec.push(new Ne({ shape: c.shape }));
      a = a.concat(this.stateSpec);
    }
    if (o != null && (e.constants = o, i = i.concat(o), this.numConstants = o.length), i[0] instanceof ps) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  // tslint:disable-next-line:no-any
  call(t, e) {
    return X(() => {
      const s = e == null ? null : e.mask, o = e == null ? null : e.training;
      let r = e == null ? null : e.initialState;
      t = Mt(t), r == null && (this.stateful ? r = this.states_ : r = this.getInitialState(t));
      const i = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1;
      if (r.length !== i)
        throw new F(`RNN Layer has ${i} state(s) but was passed ${r.length} initial state(s).`);
      this.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
      const a = { training: o }, c = Ux((f, g) => {
        const m = this.cell.call([f].concat(g), a);
        return [m[0], m.slice(1)];
      }, t, r, this.goBackwards, s, null, this.unroll, this.returnSequences), u = c[0], h = c[1], d = c[2];
      this.stateful && this.resetStates(d, o);
      const p = this.returnSequences ? h : u;
      return this.returnState ? [p].concat(d) : p;
    });
  }
  getInitialState(t) {
    return X(() => {
      let e = Me(t.shape);
      return e = yt(e, [1, 2]), e = ba(e), Array.isArray(this.cell.stateSize) ? this.cell.stateSize.map((s) => s > 1 ? Th(e, [1, s]) : e) : this.cell.stateSize > 1 ? [Th(e, [1, this.cell.stateSize])] : [e];
    });
  }
  get trainableWeights() {
    return this.trainable ? this.cell.trainableWeights : [];
  }
  get nonTrainableWeights() {
    return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.cell != null && this.cell.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = super.getConfig(), e = {
      returnSequences: this.returnSequences,
      returnState: this.returnState,
      goBackwards: this.goBackwards,
      stateful: this.stateful,
      unroll: this.unroll
    };
    this.numConstants != null && (e.numConstants = this.numConstants);
    const s = this.cell.getConfig();
    return this.getClassName() === so.className && (e.cell = {
      className: this.cell.getClassName(),
      config: s
    }), Object.assign({}, s, t, e);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = e.cell, r = ns(o, s);
    return new t(Object.assign(e, { cell: r }));
  }
}
so.className = "RNN";
et(so);
class cu extends Vt {
}
class Xf extends cu {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, De(this.units, "units"), this.activation = Us(t.activation == null ? this.DEFAULT_ACTIVATION : t.activation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = ce(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ce(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ce(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = ue(t.kernelRegularizer), this.recurrentRegularizer = ue(t.recurrentRegularizer), this.biasRegularizer = ue(t.biasRegularizer), this.kernelConstraint = Re(t.kernelConstraint), this.recurrentConstraint = Re(t.recurrentConstraint), this.biasConstraint = Re(t.biasConstraint), this.dropout = cr([1, Hs([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = cr([
      1,
      Hs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Ut(t), this.kernel = this.addWeight("kernel", [t[t.length - 1], this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  // Porting Note: PyKeras' equivalent of this method takes two tensor inputs:
  //   `inputs` and `states`. Here, the two tensors are combined into an
  //   `Tensor[]` Array as the first input argument.
  //   Similarly, PyKeras' equivalent of this method returns two values:
  //    `output` and `[output]`. Here the two are combined into one length-2
  //    `Tensor[]`, consisting of `output` repeated.
  call(t, e) {
    return X(() => {
      if (t = t, t.length !== 2)
        throw new F(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);
      let s = t[1];
      t = t[0];
      const o = e.training == null ? !1 : e.training;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ys({
        ones: () => _n(t),
        rate: this.dropout,
        training: o,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ys({
        ones: () => _n(s),
        rate: this.recurrentDropout,
        training: o,
        dropoutFunc: this.dropoutFunc
      }));
      let r;
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      i != null ? r = gs(D(t, i), this.kernel.read()) : r = gs(t, this.kernel.read()), this.bias != null && (r = ls(r, this.bias.read())), a != null && (s = D(s, a));
      let l = ot(r, gs(s, this.recurrentKernel.read()));
      return this.activation != null && (l = this.activation.apply(l)), [l, l];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: _s(this.activation),
      useBias: this.useBias,
      kernelInitializer: pe(this.kernelInitializer),
      recurrentInitializer: pe(this.recurrentInitializer),
      biasInitializer: pe(this.biasInitializer),
      kernelRegularizer: Jt(this.kernelRegularizer),
      recurrentRegularizer: Jt(this.recurrentRegularizer),
      biasRegularizer: Jt(this.biasRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      kernelConstraint: $e(this.kernelConstraint),
      recurrentConstraint: $e(this.recurrentConstraint),
      biasConstraint: $e(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout
    };
    return Object.assign({}, t, e);
  }
}
Xf.className = "SimpleRNNCell";
et(Xf);
class Yx extends so {
  constructor(t) {
    t.cell = new Xf(t), super(t);
  }
  call(t, e) {
    return X(() => {
      this.cell.dropoutMask != null && (Et(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Et(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
Yx.className = "SimpleRNN";
et(Yx);
class Of extends cu {
  constructor(t) {
    if (super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.resetAfter)
      throw new F("GRUCell does not support reset_after parameter set to true.");
    this.units = t.units, De(this.units, "units"), this.activation = Us(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = Us(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = ce(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ce(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ce(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelRegularizer = ue(t.kernelRegularizer), this.recurrentRegularizer = ue(t.recurrentRegularizer), this.biasRegularizer = ue(t.biasRegularizer), this.kernelConstraint = Re(t.kernelConstraint), this.recurrentConstraint = Re(t.recurrentConstraint), this.biasConstraint = Re(t.biasConstraint), this.dropout = cr([1, Hs([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = cr([
      1,
      Hs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = this.units, this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    t = Ut(t);
    const e = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [e, this.units * 3], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 3], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [this.units * 3], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
  }
  call(t, e) {
    return X(() => {
      if (t = t, t.length !== 2)
        throw new F(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training == null ? !1 : e.training;
      let o = t[1];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ys({
        ones: () => _n(t),
        rate: this.dropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ys({
        ones: () => _n(o),
        rate: this.recurrentDropout,
        training: s,
        count: 3,
        dropoutFunc: this.dropoutFunc
      }));
      const r = this.dropoutMask, i = this.recurrentDropoutMask;
      let a, l, c;
      0 < this.dropout && this.dropout < 1 && (t = D(t, r[0]));
      let u = gs(t, this.kernel.read());
      this.useBias && (u = ls(u, this.bias.read())), 0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = D(o, i[0]));
      const h = this.recurrentKernel.read(), [d, p] = Sn(h, [2 * this.units, this.units], h.rank - 1), f = gs(o, d), [g, m, b] = Sn(u, 3, u.rank - 1), [x, w] = Sn(f, 2, f.rank - 1);
      a = this.recurrentActivation.apply(ot(g, x)), l = this.recurrentActivation.apply(ot(m, w));
      const y = gs(D(l, o), p);
      c = this.activation.apply(ot(b, y));
      const I = ot(D(a, o), D(ot(1, fe(a)), c));
      return [I, I];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: _s(this.activation),
      recurrentActivation: _s(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: pe(this.kernelInitializer),
      recurrentInitializer: pe(this.recurrentInitializer),
      biasInitializer: pe(this.biasInitializer),
      kernelRegularizer: Jt(this.kernelRegularizer),
      recurrentRegularizer: Jt(this.recurrentRegularizer),
      biasRegularizer: Jt(this.biasRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      kernelConstraint: $e(this.kernelConstraint),
      recurrentConstraint: $e(this.recurrentConstraint),
      biasConstraint: $e(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation,
      resetAfter: !1
    };
    return Object.assign({}, t, e);
  }
}
Of.className = "GRUCell";
et(Of);
class jx extends so {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new Of(t), super(t);
  }
  call(t, e) {
    return X(() => {
      this.cell.dropoutMask != null && (Et(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Et(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
jx.className = "GRU";
et(jx);
class uu extends cu {
  constructor(t) {
    super(t), this.DEFAULT_ACTIVATION = "tanh", this.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", this.DEFAULT_BIAS_INITIALIZER = "zeros", this.units = t.units, De(this.units, "units"), this.activation = Us(t.activation === void 0 ? this.DEFAULT_ACTIVATION : t.activation), this.recurrentActivation = Us(t.recurrentActivation === void 0 ? this.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), this.useBias = t.useBias == null ? !0 : t.useBias, this.kernelInitializer = ce(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.recurrentInitializer = ce(t.recurrentInitializer || this.DEFAULT_RECURRENT_INITIALIZER), this.biasInitializer = ce(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.unitForgetBias = t.unitForgetBias, this.kernelRegularizer = ue(t.kernelRegularizer), this.recurrentRegularizer = ue(t.recurrentRegularizer), this.biasRegularizer = ue(t.biasRegularizer), this.kernelConstraint = Re(t.kernelConstraint), this.recurrentConstraint = Re(t.recurrentConstraint), this.biasConstraint = Re(t.biasConstraint), this.dropout = cr([1, Hs([0, t.dropout == null ? 0 : t.dropout])]), this.recurrentDropout = cr([
      1,
      Hs([0, t.recurrentDropout == null ? 0 : t.recurrentDropout])
    ]), this.dropoutFunc = t.dropoutFunc, this.implementation = t.implementation, this.stateSize = [this.units, this.units], this.dropoutMask = null, this.recurrentDropoutMask = null;
  }
  build(t) {
    var e;
    t = Ut(t);
    const s = t[t.length - 1];
    this.kernel = this.addWeight("kernel", [s, this.units * 4], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [this.units, this.units * 4], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint);
    let o;
    if (this.useBias) {
      if (this.unitForgetBias) {
        const r = this.biasInitializer, i = this.units;
        o = new (e = class extends Yn {
          apply(l, c) {
            const u = r.apply([i]), h = new kf().apply([i]), d = r.apply([i * 2]);
            return Dm(Dm(u, h), d);
          }
        }, /** @nocollapse */
        e.className = "CustomInit", e)();
      } else
        o = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.units * 4], null, o, this.biasRegularizer, !0, this.biasConstraint);
    } else
      this.bias = null;
    this.built = !0;
  }
  call(t, e) {
    return X(() => {
      const s = e.training == null ? !1 : e.training;
      if (t = t, t.length !== 3)
        throw new F(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      let o = t[1];
      const r = t[2];
      t = t[0], 0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ys({
        ones: () => _n(t),
        rate: this.dropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      })), 0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ys({
        ones: () => _n(o),
        rate: this.recurrentDropout,
        training: s,
        count: 4,
        dropoutFunc: this.dropoutFunc
      }));
      const i = this.dropoutMask, a = this.recurrentDropoutMask;
      let l, c, u, h;
      0 < this.dropout && this.dropout < 1 && (t = D(t, i[0]));
      let d = gs(t, this.kernel.read());
      0 < this.recurrentDropout && this.recurrentDropout < 1 && (o = D(o, a[0])), d = ot(d, gs(o, this.recurrentKernel.read())), this.useBias && (d = ls(d, this.bias.read()));
      const [p, f, g, m] = Sn(d, 4, d.rank - 1);
      l = this.recurrentActivation.apply(p), c = this.recurrentActivation.apply(f), u = ot(D(c, r), D(l, this.activation.apply(g))), h = this.recurrentActivation.apply(m);
      const b = D(h, this.activation.apply(u));
      return [b, b, u];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = {
      units: this.units,
      activation: _s(this.activation),
      recurrentActivation: _s(this.recurrentActivation),
      useBias: this.useBias,
      kernelInitializer: pe(this.kernelInitializer),
      recurrentInitializer: pe(this.recurrentInitializer),
      biasInitializer: pe(this.biasInitializer),
      unitForgetBias: this.unitForgetBias,
      kernelRegularizer: Jt(this.kernelRegularizer),
      recurrentRegularizer: Jt(this.recurrentRegularizer),
      biasRegularizer: Jt(this.biasRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      kernelConstraint: $e(this.kernelConstraint),
      recurrentConstraint: $e(this.recurrentConstraint),
      biasConstraint: $e(this.biasConstraint),
      dropout: this.dropout,
      recurrentDropout: this.recurrentDropout,
      implementation: this.implementation
    };
    return Object.assign({}, t, e);
  }
}
uu.className = "LSTMCell";
et(uu);
class Qx extends so {
  constructor(t) {
    t.implementation === 0 && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new uu(t), super(t);
  }
  call(t, e) {
    return X(() => {
      this.cell.dropoutMask != null && (Et(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Et(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null);
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return e.implmentation === 0 && (e.implementation = 1), new t(e);
  }
}
Qx.className = "LSTM";
et(Qx);
class Af extends cu {
  constructor(t) {
    super(t), this.cells = t.cells;
  }
  get stateSize() {
    const t = [];
    for (const e of this.cells.slice().reverse())
      Array.isArray(e.stateSize) ? t.push(...e.stateSize) : t.push(e.stateSize);
    return t;
  }
  call(t, e) {
    return X(() => {
      t = t;
      let s = t.slice(1);
      const o = [];
      for (const a of this.cells.slice().reverse())
        Array.isArray(a.stateSize) ? o.push(s.splice(0, a.stateSize.length)) : o.push(s.splice(0, 1));
      o.reverse();
      const r = [];
      let i;
      for (let a = 0; a < this.cells.length; ++a) {
        const l = this.cells[a];
        s = o[a], a === 0 ? i = [t[0]].concat(s) : i = [i[0]].concat(s), i = l.call(i, e), r.push(i.slice(1));
      }
      s = [];
      for (const a of r.slice().reverse())
        s.push(...a);
      return [i[0]].concat(s);
    });
  }
  build(t) {
    $h(t) && (t = t[0]), t = t;
    let e;
    this.cells.forEach((s, o) => {
      Io(`RNNCell_${o}`, () => {
        s.build(t), Array.isArray(s.stateSize) ? e = s.stateSize[0] : e = s.stateSize, t = [t[0], e];
      });
    }), this.built = !0;
  }
  getConfig() {
    const t = super.getConfig(), e = (r) => ({
      className: r.getClassName(),
      config: r.getConfig()
    }), o = { cells: this.cells.map(e) };
    return Object.assign({}, t, o);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = [];
    for (const r of e.cells)
      o.push(ns(r, s));
    return new t({ cells: o });
  }
  get trainableWeights() {
    if (!this.trainable)
      return [];
    const t = [];
    for (const e of this.cells)
      t.push(...e.trainableWeights);
    return t;
  }
  get nonTrainableWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.nonTrainableWeights);
    if (!this.trainable) {
      const e = [];
      for (const s of this.cells)
        e.push(...s.trainableWeights);
      return e.concat(t);
    }
    return t;
  }
  /**
   * Retrieve the weights of a the model.
   *
   * @returns A flat `Array` of `tf.Tensor`s.
   */
  getWeights() {
    const t = [];
    for (const e of this.cells)
      t.push(...e.weights);
    return Rh(t);
  }
  /**
   * Set the weights of the model.
   *
   * @param weights An `Array` of `tf.Tensor`s with shapes and types matching
   *     the output of `getWeights()`.
   */
  setWeights(t) {
    const e = [];
    for (const s of this.cells) {
      const o = s.weights.length, r = t.splice(o);
      for (let i = 0; i < s.weights.length; ++i)
        e.push([s.weights[i], r[i]]);
    }
    Ef(e);
  }
}
Af.className = "StackedRNNCells";
et(Af);
function Ys(n) {
  const { ones: t, rate: e, training: s = !1, count: o = 1, dropoutFunc: r } = n, i = () => r != null ? r(t(), e) : K0(t(), e), a = () => ya(i, t, s);
  return !o || o <= 1 ? vn(a().clone()) : Array(o).fill(void 0).map(a).map((c) => vn(c.clone()));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
var FG = globalThis && globalThis.__rest || function(n, t) {
  var e = {};
  for (var s in n)
    Object.prototype.hasOwnProperty.call(n, s) && t.indexOf(s) < 0 && (e[s] = n[s]);
  if (n != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, s = Object.getOwnPropertySymbols(n); o < s.length; o++)
      t.indexOf(s[o]) < 0 && Object.prototype.propertyIsEnumerable.call(n, s[o]) && (e[s[o]] = n[s[o]]);
  return e;
};
class Jx extends so {
  constructor(t) {
    if (t.unroll)
      throw new Wt("Unrolling is not possible with convolutional RNNs.");
    if (Array.isArray(t.cell))
      throw new Wt("It is not possible at the moment to stack convolutional cells.");
    super(t), this.inputSpec = [new Ne({ ndim: 5 })];
  }
  call(t, e) {
    return X(() => {
      if (this.cell.dropoutMask != null && (Et(this.cell.dropoutMask), this.cell.dropoutMask = null), this.cell.recurrentDropoutMask != null && (Et(this.cell.recurrentDropoutMask), this.cell.recurrentDropoutMask = null), e && e.constants)
        throw new F("ConvRNN2D cell does not support constants");
      const s = e == null ? null : e.mask, o = e == null ? null : e.training, r = e == null ? null : e.initialState;
      return super.call(t, { mask: s, training: o, initialState: r });
    });
  }
  computeOutputShape(t) {
    let e = this.computeSingleOutputShape(t);
    return this.returnSequences || (e = [e[0], ...e.slice(2)]), this.returnState && (e = [e, ...Array(2).fill([t[0], ...e.slice(-3)])]), e;
  }
  getInitialState(t) {
    return X(() => {
      const { stateSize: e } = this.cell, s = t.shape, o = this.computeSingleOutputShape(s), r = [o[0], ...o.slice(2)], i = Me(r);
      return Array.isArray(e) ? Array(e.length).fill(i) : [i];
    });
  }
  resetStates(t, e = !1) {
    X(() => {
      if (!this.stateful)
        throw new us("Cannot call resetStates() on an RNN Layer that is not stateful.");
      const s = this.inputSpec[0].shape, o = this.computeSingleOutputShape(s), r = [o[0], ...o.slice(2)];
      if (s[0] == null)
        throw new F("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
      if (this.getStates() == null)
        Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Me(r)) : this.states_ = [Me(r)];
      else if (t == null)
        Et(this.states_), this.keptStates != null && (Et(this.keptStates), this.keptStates = []), Array.isArray(this.cell.stateSize) ? this.states_ = this.cell.stateSize.map(() => Me(r)) : this.states_[0] = Me(r);
      else {
        if (Array.isArray(t) || (t = [t]), t.length !== this.states_.length)
          throw new F(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);
        e ? this.keptStates.push(this.states_.slice()) : Et(this.states_);
        for (let a = 0; a < this.states_.length; ++a) {
          const l = t[a], c = r;
          if (!At(l.shape, c))
            throw new F(`State ${a} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${l.shape}`);
          this.states_[a] = l;
        }
      }
      this.states_ = this.states_.map((a) => vn(a.clone()));
    });
  }
  computeSingleOutputShape(t) {
    const { dataFormat: e, filters: s, kernelSize: o, padding: r, strides: i, dilationRate: a } = this.cell, l = e === "channelsFirst", c = t[l ? 3 : 2], u = t[l ? 4 : 3], h = ss(c, o[0], r, i[0], a[0]), d = ss(u, o[1], r, i[1], a[1]);
    return [
      ...t.slice(0, 2),
      ...l ? [s, h, d] : [h, d, s]
    ];
  }
}
Jx.className = "ConvRNN2D";
class Zf extends uu {
  constructor(t) {
    const { filters: e, kernelSize: s, strides: o, padding: r, dataFormat: i, dilationRate: a } = t;
    super(Object.assign({}, t, { units: e })), this.filters = e, De(this.filters, "filters"), this.kernelSize = sr(s, 2, "kernelSize"), this.kernelSize.forEach((l) => De(l, "kernelSize")), this.strides = sr(o || 1, 2, "strides"), this.strides.forEach((l) => De(l, "strides")), this.padding = r || "valid", Nn(this.padding), this.dataFormat = i || "channelsLast", Ce(this.dataFormat), this.dilationRate = sr(a || 1, 2, "dilationRate"), this.dilationRate.forEach((l) => De(l, "dilationRate"));
  }
  build(t) {
    var e;
    t = Ut(t);
    const s = this.dataFormat === "channelsFirst" ? 1 : t.length - 1;
    if (t[s] == null)
      throw new F(`The channel dimension of the input should be defined. Found ${t[s]}`);
    const o = t[s], r = 4, i = this.kernelSize.concat([o, this.filters * r]);
    this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint);
    const a = this.kernelSize.concat([this.filters, this.filters * r]);
    if (this.recurrentKernel = this.addWeight("recurrent_kernel", a, null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
      let l;
      if (this.unitForgetBias) {
        const c = this.biasInitializer, u = this.filters;
        l = new (e = class extends Yn {
          apply(d, p) {
            const f = c.apply([u]), g = eo([u]), m = c.apply([u * 2]);
            return Sf([f, g, m]);
          }
        }, /** @nocollapse */
        e.className = "CustomInit", e)();
      } else
        l = this.biasInitializer;
      this.bias = this.addWeight("bias", [this.filters * r], null, l, this.biasRegularizer, !0, this.biasConstraint);
    }
    this.built = !0;
  }
  call(t, e) {
    return X(() => {
      if (t.length !== 3)
        throw new F(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);
      const s = e.training || !1, o = t[0], r = t[1], i = t[2], a = 4;
      0 < this.dropout && this.dropout < 1 && this.dropoutMask == null && (this.dropoutMask = Ys({
        ones: () => _n(o),
        rate: this.dropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const l = this.dropoutMask, c = (nt, st, at) => !st || !st[at] ? nt : D(st[at], nt);
      let u = c(o, l, 0), h = c(o, l, 1), d = c(o, l, 2), p = c(o, l, 3);
      0 < this.recurrentDropout && this.recurrentDropout < 1 && this.recurrentDropoutMask == null && (this.recurrentDropoutMask = Ys({
        ones: () => _n(r),
        rate: this.recurrentDropout,
        training: s,
        count: a,
        dropoutFunc: this.dropoutFunc
      }));
      const f = this.recurrentDropoutMask;
      let g = c(r, f, 0), m = c(r, f, 1), b = c(r, f, 2), x = c(r, f, 3);
      const w = 3, [y, I, v, T] = Sn(this.kernel.read(), a, w), [k, $, G, z] = this.useBias ? Sn(this.bias.read(), a) : [null, null, null, null];
      u = this.inputConv(u, y, k, this.padding), h = this.inputConv(h, I, $, this.padding), d = this.inputConv(d, v, G, this.padding), p = this.inputConv(p, T, z, this.padding);
      const [A, Z, _, K] = Sn(this.recurrentKernel.read(), a, w);
      g = this.recurrentConv(g, A), m = this.recurrentConv(m, Z), b = this.recurrentConv(b, _), x = this.recurrentConv(x, K);
      const U = this.recurrentActivation.apply(ot(u, g)), q = this.recurrentActivation.apply(ot(h, m)), j = ot(D(q, i), D(U, this.activation.apply(ot(d, b)))), tt = D(this.recurrentActivation.apply(ot(p, x)), this.activation.apply(j));
      return [tt, tt, j];
    });
  }
  getConfig() {
    const t = super.getConfig(), e = FG(t, ["units"]), s = {
      filters: this.filters,
      kernelSize: this.kernelSize,
      padding: this.padding,
      dataFormat: this.dataFormat,
      dilationRate: this.dilationRate,
      strides: this.strides
    };
    return Object.assign({}, e, s);
  }
  inputConv(t, e, s, o) {
    const r = Ro(t, e, this.strides, o || "valid", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC", this.dilationRate);
    return s ? ls(r, s, this.dataFormat) : r;
  }
  recurrentConv(t, e) {
    return Ro(t, e, 1, "same", this.dataFormat === "channelsFirst" ? "NCHW" : "NHWC");
  }
}
Zf.className = "ConvLSTM2DCell";
et(Zf);
class qx extends Jx {
  constructor(t) {
    const e = new Zf(t);
    super(Object.assign({}, t, { cell: e }));
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    return new t(e);
  }
}
qx.className = "ConvLSTM2D";
et(qx);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Kf extends Vt {
  constructor(t) {
    super(t), this.rate = Math.max(Math.min(t.rate, 1), 0), this.noiseShape = t.noiseShape, this.seed = t.seed, this.supportsMasking = !0;
  }
  getNoiseShape(t) {
    if (this.noiseShape == null)
      return this.noiseShape;
    const e = t.shape, s = [];
    for (let o = 0; o < this.noiseShape.length; ++o)
      s.push(this.noiseShape[o] == null ? e[o] : this.noiseShape[o]);
    return s;
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t);
      if (0 < this.rate && this.rate < 1) {
        const o = e.training == null ? !1 : e.training, r = this.getNoiseShape(s);
        return ya(() => K0(s, this.rate, r, this.seed), () => s, o);
      }
      return t;
    });
  }
  getConfig() {
    const t = {
      rate: this.rate,
      noiseShape: this.noiseShape,
      seed: this.seed
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  dispose() {
    return super.dispose();
  }
}
Kf.className = "Dropout";
et(Kf);
class ty extends Kf {
  constructor(t) {
    super(t), this.inputSpec = [{ ndim: 3 }];
  }
  getNoiseShape(t) {
    const e = t.shape;
    return [e[0], 1, e[2]];
  }
}
ty.className = "SpatialDropout1D";
et(ty);
class ey extends Vt {
  constructor(t) {
    if (super(t), this.activation = null, this.useBias = !0, this.kernel = null, this.bias = null, this.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", this.DEFAULT_BIAS_INITIALIZER = "zeros", t.batchInputShape == null && t.inputShape == null && t.inputDim != null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), this.batchInputShape = [e, t.inputDim];
    }
    this.units = t.units, De(this.units, "units"), this.activation = Us(t.activation), t.useBias != null && (this.useBias = t.useBias), this.kernelInitializer = ce(t.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER), this.biasInitializer = ce(t.biasInitializer || this.DEFAULT_BIAS_INITIALIZER), this.kernelConstraint = Re(t.kernelConstraint), this.biasConstraint = Re(t.biasConstraint), this.kernelRegularizer = ue(t.kernelRegularizer), this.biasRegularizer = ue(t.biasRegularizer), this.activityRegularizer = ue(t.activityRegularizer), this.supportsMasking = !0, this.inputSpec = [{ minNDim: 2 }];
  }
  build(t) {
    t = Ut(t);
    const e = t[t.length - 1];
    this.kernel == null && (this.kernel = this.addWeight("kernel", [e, this.units], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [this.units], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [{ minNDim: 2, axes: { [-1]: e } }], this.built = !0;
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = t.slice();
    return e[e.length - 1] = this.units, e;
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t), o = z0(this.activation.getClassName());
      let r;
      return o != null ? r = gs(s, this.kernel.read(), o, this.bias ? this.bias.read() : null) : (r = gs(s, this.kernel.read()), this.bias != null && (r = ls(r, this.bias.read())), this.activation != null && (r = this.activation.apply(r))), r;
    });
  }
  getConfig() {
    const t = {
      units: this.units,
      activation: _s(this.activation),
      useBias: this.useBias,
      kernelInitializer: pe(this.kernelInitializer),
      biasInitializer: pe(this.biasInitializer),
      kernelRegularizer: Jt(this.kernelRegularizer),
      biasRegularizer: Jt(this.biasRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      kernelConstraint: $e(this.kernelConstraint),
      biasConstraint: $e(this.biasConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ey.className = "Dense";
et(ey);
class ny extends Vt {
  constructor(t) {
    t = t || {}, super(t), this.inputSpec = [{ minNDim: 3 }], this.dataFormat = t.dataFormat;
  }
  computeOutputShape(t) {
    t = Ut(t);
    for (const e of t.slice(1))
      if (e == null)
        throw new F(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);
    return [t[0], Zs(t, 1)];
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      let s = Mt(t);
      if (this.dataFormat === "channelsFirst" && s.rank > 1) {
        const o = [0];
        for (let r = 2; r < s.rank; ++r)
          o.push(r);
        o.push(1), s = zt(s, o);
      }
      return gR(s);
    });
  }
  getConfig() {
    const t = {};
    this.dataFormat != null && (t.dataFormat = this.dataFormat);
    const e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ny.className = "Flatten";
et(ny);
class sy extends Vt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.activation = Us(t.activation);
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t);
      return this.activation.apply(s);
    });
  }
  getConfig() {
    const t = { activation: _s(this.activation) }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
sy.className = "Activation";
et(sy);
class oy extends Vt {
  constructor(t) {
    super(t), this.n = t.n, this.inputSpec = [{ ndim: 2 }];
  }
  computeOutputShape(t) {
    return [t[0], this.n, t[1]];
  }
  call(t, e) {
    return X(() => (t = Mt(t), fR(t, this.n)));
  }
  getConfig() {
    const t = {
      n: this.n
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
oy.className = "RepeatVector";
et(oy);
class ry extends Vt {
  constructor(t) {
    super(t), this.targetShape = t.targetShape;
    for (let e = 0; e < this.targetShape.length; ++e)
      this.isUnknown(this.targetShape[e]) && (this.targetShape[e] = null);
  }
  isUnknown(t) {
    return t < 0 || t == null;
  }
  /**
   * Finds and replaces a missing dimension in output shape.
   *
   * This is a near direct port of the internal Numpy function
   * `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`.
   *
   * @param inputShape: Original shape of array begin reshape.
   * @param outputShape: Target shape of the array, with at most a single
   * `null` or negative number, which indicates an underdetermined dimension
   * that should be derived from `inputShape` and the known dimensions of
   *   `outputShape`.
   * @returns: The output shape with `null` replaced with its computed value.
   * @throws: ValueError: If `inputShape` and `outputShape` do not match.
   */
  fixUnknownDimension(t, e) {
    const s = "Total size of new array must be unchanged.", o = e.slice();
    let r = 1, i = null;
    for (let l = 0; l < o.length; ++l) {
      const c = o[l];
      if (this.isUnknown(c))
        if (i === null)
          i = l;
        else
          throw new F("Can only specifiy one unknown dimension.");
      else
        r *= c;
    }
    const a = Zs(t);
    if (i !== null) {
      if (r === 0 || a % r !== 0)
        throw new F(s);
      o[i] = a / r;
    } else if (a !== r)
      throw new F(s);
    return o;
  }
  computeOutputShape(t) {
    let e = !1;
    for (let s = 0; s < t.length; ++s)
      if (this.isUnknown(t[s])) {
        e = !0;
        break;
      }
    return e ? t.slice(0, 1).concat(this.targetShape) : t.slice(0, 1).concat(this.fixUnknownDimension(t.slice(1), this.targetShape));
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t), o = s.shape, r = o.slice(0, 1).concat(this.fixUnknownDimension(o.slice(1), this.targetShape));
      return P(s, r);
    });
  }
  getConfig() {
    const t = {
      targetShape: this.targetShape
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ry.className = "Reshape";
et(ry);
class iy extends Vt {
  constructor(t) {
    if (super(t), t.dims == null)
      throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
    if (!Array.isArray(t.dims))
      throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${t.dims} instead.`);
    const e = os(1, t.dims.length + 1);
    if (!At(t.dims.slice().sort(), e))
      throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
    this.dims = t.dims, this.dimsIncludingBatch = [0].concat(this.dims), this.inputSpec = [new Ne({ ndim: this.dims.length + 1 })];
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = t.slice();
    return this.dims.forEach((s, o) => {
      e[o + 1] = t[s];
    }), e;
  }
  call(t, e) {
    return zt(Mt(t), this.dimsIncludingBatch);
  }
  getConfig() {
    const t = {
      dims: this.dims
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
iy.className = "Permute";
et(iy);
class ay extends Vt {
  constructor(t) {
    super(t ?? {}), this.supportsMasking = !0, t != null ? this.maskValue = t.maskValue == null ? 0 : t.maskValue : this.maskValue = 0;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { maskValue: this.maskValue };
    return Object.assign(e, t), e;
  }
  computeMask(t, e) {
    const s = Mt(t), o = -1;
    return fh(Jr(s, this.maskValue), o);
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t), o = -1, r = !0, i = fh(Jr(s, this.maskValue), o, r);
      return D(s, ht(i, s.dtype));
    });
  }
}
ay.className = "Masking";
et(ay);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class ly extends Vt {
  constructor(t) {
    if (super(t), this.embeddings = null, this.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", t.batchInputShape == null && t.inputShape == null) {
      let e = null;
      t.batchSize != null && (e = t.batchSize), t.inputLength == null ? this.batchInputShape = [e, null] : this.batchInputShape = [e].concat(oe(t.inputLength));
    }
    this.inputDim = t.inputDim, De(this.inputDim, "inputDim"), this.outputDim = t.outputDim, De(this.outputDim, "outputDim"), this.embeddingsInitializer = ce(t.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER), this.embeddingsRegularizer = ue(t.embeddingsRegularizer), this.activityRegularizer = ue(t.activityRegularizer), this.embeddingsConstraint = Re(t.embeddingsConstraint), this.maskZero = t.maskZero, this.supportsMasking = t.maskZero, this.inputLength = t.inputLength;
  }
  build(t) {
    this.embeddings = this.addWeight("embeddings", [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
  }
  // Override warnOnIncompatibleInputShape because an embedding layer allows
  // the input to have varying ranks.
  warnOnIncompatibleInputShape(t) {
  }
  computeMask(t, e) {
    return X(() => this.maskZero ? (t = Mt(t), Jr(t, Pt(t))) : null);
  }
  computeOutputShape(t) {
    if (t = Ut(t), this.inputLength == null)
      return [...t, this.outputDim];
    const e = oe(this.inputLength);
    if (e.length !== t.length - 1)
      throw new F(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
    {
      let s = 0;
      for (let o = 0; o < e.length; ++o) {
        const r = e[o], i = t[o + 1];
        if (r != null && i != null && r !== i)
          throw new F(`"inputLength" is ${this.inputLength}, but received input shape has shape ${t}`);
        r == null && (e[s] = i), s++;
      }
    }
    return [t[0], ...e, this.outputDim];
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      let s = Mt(t);
      s.dtype !== "int32" && (s = ga(s, "int32"));
      const o = Z0(this.embeddings.read(), P(s, [s.size]));
      return P(o, Ut(this.computeOutputShape(s.shape)));
    });
  }
  getConfig() {
    const t = {
      inputDim: this.inputDim,
      outputDim: this.outputDim,
      embeddingsInitializer: pe(this.embeddingsInitializer),
      embeddingsRegularizer: Jt(this.embeddingsRegularizer),
      activityRegularizer: Jt(this.activityRegularizer),
      embeddingsConstraint: $e(this.embeddingsConstraint),
      maskZero: this.maskZero,
      inputLength: this.inputLength
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
ly.className = "Embedding";
et(ly);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Xo extends Vt {
  constructor(t) {
    super(t || {}), this.supportsMasking = !0;
  }
  /**
   * Logic for merging multiple tensors, to be overridden by subclasses.
   * @param inputs
   */
  mergeFunction(t) {
    throw new Wt();
  }
  /**
   * Computes the shape of the result of an elementwise operation.
   *
   * @param shape1: Shape of the first tensor.
   * @param shape2: Shape of the second tensor.
   * @returns Expected output shape when an elementwise operation is carried
   *   out on 2 tensors with shapes `shape1` and `shape2`.
   * @throws ValueError: If `shape1` and `shape2` are not compatible for
   *   element-wise operations.
   */
  computeElementwiseOpOutputShape(t, e) {
    if (t == null || e == null)
      return null;
    if (t.length < e.length)
      return this.computeElementwiseOpOutputShape(e, t);
    if (e.length === 0)
      return t;
    const s = t.slice(0, t.length - e.length);
    for (let o = 0; o < e.length; ++o) {
      const r = t[t.length - e.length + o], i = e[o];
      if (r == null || i == null || r < 0 || i < 0)
        s.push(null);
      else if (r === 1)
        s.push(i);
      else if (i === 1)
        s.push(r);
      else {
        if (r !== i)
          throw new F("Operands could not be broadcast together with shapes " + JSON.stringify(t) + " " + JSON.stringify(e));
        s.push(r);
      }
    }
    return s;
  }
  build(t) {
    if (Array.isArray(t) && !Array.isArray(t[0]) && (t = [Ut(t)]), t = t, t.length < 2)
      throw new F(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);
    let e = [];
    for (const r of t)
      r != null && r[0] !== null && e.push(r[0]);
    if (e = As(e), e.length > 1)
      throw new F(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);
    let s = t[0] == null ? null : t[0].slice(1);
    for (let r = 1; r < t.length; ++r) {
      const i = t[r] == null ? null : t[r].slice(1);
      s = this.computeElementwiseOpOutputShape(s, i);
    }
    const o = t.map((r) => r.length);
    t.indexOf(null) === -1 && As(o).length === 1 ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
  }
  call(t, e) {
    return X(() => {
      if (t = t, this.reshapeRequired) {
        const s = [], o = t.map((r) => r.rank);
        if (o.indexOf(null) === -1) {
          const r = Hs(o);
          for (let i of t) {
            const a = i.rank;
            for (let l = 0; l < r - a; ++l)
              i = ba(i, 1);
            s.push(i);
          }
          return this.mergeFunction(s);
        } else {
          let r = !1;
          for (const l of t) {
            const c = l.rank;
            if (c == null) {
              const u = l.shape, h = u[0], d = u.slice(1).concat([h]);
              let p = P(l, [h].concat(Zs(u.slice(1))));
              p = zt(p, [1, 0]), p = P(p, d), s.push(p), r = !0;
            } else if (c > 1) {
              const u = os(1, c).concat([0]);
              s.push(zt(l, u)), r = !0;
            } else
              s.push(l);
          }
          let i = this.mergeFunction(s);
          const a = i.rank;
          if (r) {
            if (a == null) {
              const l = i.shape, c = l.length, u = l[c - 1], h = [u].concat(l.slice(0, l.length - 1));
              i = P(zt(P(i, [-1, u]), [1, 0]), h);
            } else if (a > 1) {
              const l = [a - 1].concat(os(0, a - 1));
              i = zt(i, l);
            }
          }
          return i;
        }
      } else
        return this.mergeFunction(t);
    });
  }
  computeOutputShape(t) {
    t = t;
    let e;
    t[0] == null ? e = null : e = t[0].slice(1);
    for (let o = 1; o < t.length; ++o) {
      const r = t[o] == null ? null : t[o].slice(1);
      e = this.computeElementwiseOpOutputShape(e, r);
    }
    let s = [];
    for (const o of t)
      o != null && o[0] !== null && s.push(o[0]);
    return s = As(s), s.length === 1 ? e = s.concat(e) : e = [null].concat(e), e;
  }
  computeMask(t, e) {
    return X(() => {
      if (e == null)
        return null;
      if (!Array.isArray(e))
        throw new F("`mask` should be an Array");
      if (!Array.isArray(t))
        throw new F("`inputs` should be an Array");
      if (e.length !== t.length)
        throw new F(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);
      if (e.every((o) => o == null))
        return null;
      e = e.map((o) => o == null ? o : Mn(o, 0));
      let s = e[0];
      for (let o = 1; o < e.length - 1; ++o)
        s = bs(s, e[o]);
      return s;
    });
  }
}
class cy extends Xo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return X(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = ot(e, t[s]);
      return e;
    });
  }
}
cy.className = "Add";
et(cy);
class uy extends Xo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return X(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = D(e, t[s]);
      return e;
    });
  }
}
uy.className = "Multiply";
et(uy);
class hy extends Xo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return X(() => {
      let e = t[0].clone();
      for (let s = 1; s < t.length; ++s)
        e = ot(e, t[s]);
      return D(1 / t.length, e);
    });
  }
}
hy.className = "Average";
et(hy);
class dy extends Xo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return X(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = to(e, t[s]);
      return e;
    });
  }
}
dy.className = "Maximum";
et(dy);
class py extends Xo {
  constructor(t) {
    super(t);
  }
  mergeFunction(t) {
    return X(() => {
      let e = t[0];
      for (let s = 1; s < t.length; ++s)
        e = Uc(e, t[s]);
      return e;
    });
  }
}
py.className = "Minimum";
et(py);
class fy extends Xo {
  constructor(t) {
    super(t), this.DEFAULT_AXIS = -1, t == null && (t = {}), this.axis = t.axis == null ? this.DEFAULT_AXIS : t.axis, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])) || t.length === 1)
      throw new F("A `Concatenate` layer should be called on a list of at least 2 inputs");
    t = t;
    let e = !0;
    for (const o of t)
      if (o != null) {
        e = !1;
        break;
      }
    if (e)
      return;
    const s = [];
    for (let o = 0; o < t.length; ++o) {
      const r = t[o].slice();
      r.splice(this.axis, 1);
      let i = !1;
      for (const a of s)
        if (At(a, r)) {
          i = !0;
          break;
        }
      i || s.push(r);
    }
    if (s.length > 1)
      throw new F("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(t));
  }
  mergeFunction(t) {
    return X(() => Sf(t, this.axis));
  }
  computeOutputShape(t) {
    if (!(Array.isArray(t) && Array.isArray(t[0])))
      throw new F("A `Concatenate` layer should be called on a list of inputs.");
    const e = t, s = e[0].slice(), o = this.axis < 0 ? s.length + this.axis : this.axis;
    for (const r of e.slice(1)) {
      if (s[o] == null || r[o] == null) {
        s[o] = null;
        break;
      }
      s[o] += r[o];
    }
    return s;
  }
  computeMask(t, e) {
    if (e == null)
      return null;
    if (!Array.isArray(e))
      throw new F("`mask` should be an array for Concatenate");
    if (!Array.isArray(t))
      throw new F("`inputs` should be an array for Concatenate");
    if (e.length !== t.length)
      throw new F(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);
    return X(() => {
      let s = !0;
      if (e.forEach((i) => {
        if (i != null) {
          s = !1;
          return;
        }
      }), s)
        return null;
      const o = [];
      for (let i = 0; i < t.length; ++i)
        e[i] == null ? o.push(ht(_n(t[i]), "bool")) : e[i].rank < t[i].rank ? o.push(Mn(e[i], -1)) : o.push(e[i]);
      const r = Ze(o, this.axis);
      return Ub(r, -1, !1);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
fy.className = "Concatenate";
et(fy);
function zr(n, t) {
  for (; n < 0; )
    n += t;
  return n;
}
function zG(n, t, e) {
  if (n.shape.length > 3 || t.shape.length > 3)
    throw new Wt("batchDot is not implemented for tensors of 4D or higher rank yet");
  if (S(n.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`), S(n.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`), typeof e == "number" && (e = [e, e]), n.dtype === "complex64" || t.dtype === "complex64")
    throw new Wt("batchDot is not implemented for complex64-type Tensors yet.");
  const s = n.shape.length, o = t.shape.length;
  e == null && (e = [s - 1, o - 2]);
  const r = e;
  return X(() => {
    let i;
    if (s > o) {
      i = s - o;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      t = P(t, t.shape.concat(l));
    } else if (o > s) {
      i = o - s;
      const l = [];
      for (let c = 0; c < i; ++c)
        l.push(1);
      n = P(n, n.shape.concat(l));
    } else
      i = 0;
    let a;
    if (n.shape.length === 2 && t.shape.length === 2)
      r[0] === r[1] ? a = yt(D(n, t), r[0]) : a = yt(D(zt(n, [1, 0]), t), r[1]);
    else {
      const l = r[0] !== n.shape.length - 1, c = r[1] === t.shape.length - 1;
      a = Kt(n, t, l, c);
    }
    if (i > 0) {
      let l;
      s > o ? l = s + o - 3 : l = s - 1;
      const c = [];
      for (let u = l; u < l + i; ++u)
        c.push(u);
      a = ua(a, c);
    }
    return a.shape.length === 1 && (a = Mn(a, 1)), a;
  });
}
class my extends Xo {
  constructor(t) {
    super(t), this.axes = t.axes, this.normalize = t.normalize == null ? !1 : t.normalize, this.supportsMasking = !0, this.reshapeRequired = !1;
  }
  build(t) {
    S(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0], s = t[1];
    if (e.length > 3 || s.length > 3)
      throw new Wt("Dot layer does not support tensors of 4D or higher rank yet.");
    const o = this.interpretAxes(e, s);
    if (e[o[0]] !== s[o[1]])
      throw new F(`Dimension incompatibility: ${e[o[0]]} !== ${s[o[1]]}`);
  }
  mergeFunction(t) {
    if (t.length !== 2)
      throw new F(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);
    let e = t[0], s = t[1], o;
    return Array.isArray(this.axes) ? o = this.axes.map((r, i) => zr(r, t[i].shape.length)) : o = [
      zr(this.axes, e.shape.length),
      zr(this.axes, s.shape.length)
    ], this.normalize && (e = xl(e, o[0]), s = xl(s, o[1])), zG(e, s, o);
  }
  interpretAxes(t, e) {
    let s;
    return Array.isArray(this.axes) ? s = this.axes : s = [
      zr(this.axes, t.length),
      zr(this.axes, e.length)
    ], s;
  }
  computeOutputShape(t) {
    S(Array.isArray(t) && t.length === 2 && Array.isArray(t[0]) && Array.isArray(t[1]), () => "A `Dot` layer should be called on a list of exactly 2 inputs.");
    const e = t[0].slice(), s = t[1].slice();
    if (e.length > 3 || s.length > 3)
      throw new Wt("Dot layer does not support tensors of 4D or higher rank yet.");
    const o = this.interpretAxes(e, s);
    e.splice(o[0], 1), s.splice(o[1], 1), s.splice(0, 1);
    const r = e.concat(s);
    return r.length === 1 && r.push(1), r;
  }
  computeMask(t, e) {
    return null;
  }
  getConfig() {
    const t = {
      axes: this.axes,
      normalize: this.normalize
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
my.className = "Dot";
et(my);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class gy extends Vt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.stddev = t.stddev;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { stddev: this.stddev };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t);
      return ya(() => ot(nu(s.shape, 0, this.stddev), s), () => s, e.training || !1);
    });
  }
}
gy.className = "GaussianNoise";
et(gy);
class by extends Vt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e);
      const s = Mt(t);
      return this.rate > 0 && this.rate < 1 ? ya(() => {
        const r = Math.sqrt(this.rate / (1 - this.rate));
        return D(s, nu(s.shape, 1, r));
      }, () => s, e.training || !1) : s;
    });
  }
}
by.className = "GaussianDropout";
et(by);
class xy extends Vt {
  constructor(t) {
    super(t), this.supportsMasking = !0, this.rate = t.rate, this.noiseShape = t.noiseShape;
  }
  _getNoiseShape(t) {
    return this.noiseShape || Mt(t).shape;
  }
  computeOutputShape(t) {
    return t;
  }
  getConfig() {
    const t = super.getConfig(), e = { rate: this.rate };
    return Object.assign(e, t), e;
  }
  call(t, e) {
    return X(() => {
      if (this.rate < 1 && this.rate > 0) {
        const s = this._getNoiseShape(t);
        return ya(() => {
          const r = Mt(t), i = 1.6732632423543772, a = 1.0507009873554805, l = -i * a;
          let c = Cr(Yc(s), this.rate);
          c = ga(c, "float32");
          const u = ((1 - this.rate) * (1 + this.rate * l ** 2)) ** -0.5, h = -u * l * this.rate, d = ot(D(r, c), D(ot(c, -1), l));
          return ot(D(d, u), h);
        }, () => Mt(t), e.training || !1);
      }
      return t;
    });
  }
}
xy.className = "AlphaDropout";
et(xy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function oi(n, t, e, s, o, r = 1e-3) {
  let i;
  if (n.rank === 2)
    i = q2(n, t, e, s, o, r);
  else if (n.rank === 3)
    i = eC(n, t, e, s, o, r);
  else if (n.rank === 4)
    i = sC(n, t, e, s, o, r);
  else
    throw new Wt(`batchNormalization is not implemented for array of rank ${n.rank} yet`);
  return i;
}
function VG(n, t, e, s, o = 1e-3) {
  return X(() => {
    const r = fp(n, s), i = r.mean, a = r.variance;
    return [oi(n, i, a, e, t, o), i, a];
  });
}
function PG(n, t, e, s, o = 1e-3) {
  return X(() => {
    const r = fp(n, s), i = r.mean, a = r.variance, l = [];
    for (const f of os(0, n.rank))
      s.indexOf(f) !== -1 ? l.push(1) : l.push(n.shape[f]);
    const c = P(i, l), u = P(a, l), h = t == null ? null : P(t, l), d = e == null ? null : P(e, l);
    return [oi(n, c, u, d, h, o), i, a];
  });
}
function XG(n, t, e, s, o = 1e-3) {
  return At(s.slice().sort(), os(0, n.rank - 1)) ? VG(n, t, e, s, o) : PG(n, t, e, s, o);
}
class yy extends Vt {
  constructor(t) {
    t == null && (t = {}), super(t), this.supportsMasking = !0, this.axis = t.axis == null ? -1 : t.axis, this.momentum = t.momentum == null ? 0.99 : t.momentum, this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = ce(t.betaInitializer || "zeros"), this.gammaInitializer = ce(t.gammaInitializer || "ones"), this.movingMeanInitializer = ce(t.movingMeanInitializer || "zeros"), this.movingVarianceInitializer = ce(t.movingVarianceInitializer || "ones"), this.betaConstraint = Re(t.betaConstraint), this.gammaConstraint = Re(t.gammaConstraint), this.betaRegularizer = ue(t.betaRegularizer), this.gammaRegularizer = ue(t.gammaRegularizer);
  }
  build(t) {
    t = Ut(t);
    const e = this.axis >= 0 ? this.axis : this.axis + t.length, s = t[e];
    if (s == null)
      throw new F(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);
    this.inputSpec = [new Ne({ ndim: t.length, axes: { [e]: s } })];
    const o = [s];
    this.scale && (this.gamma = this.addWeight("gamma", o, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", o, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", o, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", o, null, this.movingVarianceInitializer, null, !1), this.built = !0;
  }
  call(t, e) {
    return X(() => {
      const s = e.training == null ? !1 : e.training, o = Mt(t), r = o.shape, i = r.length, a = os(0, i), l = this.axis >= 0 ? this.axis : this.axis + i;
      a.splice(l, 1);
      const c = Eo(1, i);
      c[l] = r[l];
      const u = a.slice();
      u.sort();
      const h = !At(u, os(0, i).slice(0, i - 1)), d = () => {
        if (h) {
          const x = P(this.movingMean.read(), c), w = P(this.movingVariance.read(), c), y = this.center ? P(this.beta.read(), c) : null, I = this.scale ? P(this.gamma.read(), c) : null;
          return oi(o, x, w, y, I, this.epsilon);
        } else
          return oi(o, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);
      };
      if (!s)
        return d();
      const [p, f, g] = XG(o, this.gamma.read(), this.beta.read(), a, this.epsilon), m = (x, w, y) => {
        X(() => {
          const I = 1 - y, v = x.read(), T = D(wt(v, w), I);
          x.write(wt(v, T));
        });
      };
      return (() => {
        m(this.movingMean, f, this.momentum), m(this.movingVariance, g, this.momentum);
      })(), p;
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      momentum: this.momentum,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: pe(this.betaInitializer),
      gammaInitializer: pe(this.gammaInitializer),
      movingMeanInitializer: pe(this.movingMeanInitializer),
      movingVarianceInitializer: pe(this.movingVarianceInitializer),
      betaRegularizer: Jt(this.betaRegularizer),
      gammaRegularizer: Jt(this.gammaRegularizer),
      betaConstraint: $e(this.betaConstraint),
      gammaConstraint: $e(this.gammaConstraint)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
yy.className = "BatchNormalization";
et(yy);
class wy extends Vt {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.axis = t.axis == null ? -1 : t.axis, typeof this.axis == "number") {
      if (!Number.isInteger(this.axis))
        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);
    } else if (Array.isArray(this.axis)) {
      for (const e of this.axis)
        if (!Number.isInteger(e))
          throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`);
    } else
      throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);
    this.epsilon = t.epsilon == null ? 1e-3 : t.epsilon, this.center = t.center == null ? !0 : t.center, this.scale = t.scale == null ? !0 : t.scale, this.betaInitializer = ce(t.betaInitializer || "zeros"), this.gammaInitializer = ce(t.gammaInitializer || "ones"), this.betaRegularizer = ue(t.betaRegularizer), this.gammaRegularizer = ue(t.gammaRegularizer), this.supportsMasking = !0;
  }
  build(t) {
    t = Ut(t);
    const e = t.length;
    typeof this.axis == "number" && (this.axis = [this.axis]);
    for (let r = 0; r < this.axis.length; ++r)
      this.axis[r] < 0 && (this.axis[r] += e);
    for (const r of this.axis)
      if (r < 0 || r >= e)
        throw new Error(`Invalid axis: ${r}`);
    if (this.axis.length !== As(this.axis).length)
      throw new Error(`Found duplicate axes in: ${this.axis}`);
    const s = this.axis.map((r) => t[r]), o = !0;
    this.scale ? this.gamma = this.addWeight("gamma", s, "float32", this.gammaInitializer, this.gammaRegularizer, o) : this.gamma = null, this.center ? this.beta = this.addWeight("beta", s, "float32", this.betaInitializer, this.betaRegularizer, o) : this.beta = null, this.built = !0;
  }
  call(t, e) {
    const s = Mt(t), o = s.shape, r = o.length;
    return X(() => {
      let { mean: a, variance: l } = fp(s, this.axis, !0);
      const c = Eo(1, r);
      for (const g of this.axis)
        c[g] = o[g];
      const u = (g) => g != null && g.shape.length !== r ? P(g, c) : g;
      let h = this.scale ? u(this.gamma.read()) : null, d = this.center ? u(this.beta.read()) : null;
      const p = [], f = [];
      for (let g = 0; g < r; ++g)
        this.axis.indexOf(g) !== -1 ? (p.push(o[g]), f.push(1)) : (p.push(1), f.push(o[g]));
      return a = es(a, p), l = es(l, p), h != null && (h = es(h, f)), d != null && (d = es(d, f)), oi(s, a, l, d, h, this.epsilon);
    });
  }
  getConfig() {
    const t = {
      axis: this.axis,
      epsilon: this.epsilon,
      center: this.center,
      scale: this.scale,
      betaInitializer: pe(this.betaInitializer),
      gammaInitializer: pe(this.gammaInitializer),
      betaRegularizer: Jt(this.betaRegularizer),
      gammaRegularizer: Jt(this.gammaRegularizer)
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
wy.className = "LayerNormalization";
et(wy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function OG(n, t, e) {
  return X(() => {
    if (n.rank !== 4)
      throw new F(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);
    if (t == null && (t = [[1, 1], [1, 1]]), t.length !== 2 || t[0].length !== 2 || t[1].length !== 2)
      throw new F("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
    if (e == null && (e = rs()), e !== "channelsLast" && e !== "channelsFirst")
      throw new F(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);
    let s;
    return e === "channelsFirst" ? s = [[0, 0], [0, 0], t[0], t[1]] : s = [[0, 0], t[0], t[1], [0, 0]], mp(n, s);
  });
}
class Iy extends Vt {
  constructor(t) {
    if (t == null && (t = {}), super(t), this.dataFormat = t.dataFormat == null ? rs() : t.dataFormat, t.padding == null)
      this.padding = [[1, 1], [1, 1]];
    else if (typeof t.padding == "number")
      this.padding = [[t.padding, t.padding], [t.padding, t.padding]];
    else {
      if (t.padding = t.padding, t.padding.length !== 2)
        throw new F(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);
      let e, s;
      if (typeof t.padding[0] == "number")
        e = [t.padding[0], t.padding[0]], s = [t.padding[1], t.padding[1]];
      else {
        if (t.padding = t.padding, t.padding[0].length !== 2)
          throw new F(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);
        if (e = t.padding[0], t.padding[1].length !== 2)
          throw new F(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);
        s = t.padding[1];
      }
      this.padding = [e, s];
    }
    this.inputSpec = [new Ne({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Ut(t);
    let e, s;
    return this.dataFormat === "channelsFirst" ? (t[2] != null && t[2] >= 0 ? e = t[2] + this.padding[0][0] + this.padding[0][1] : e = null, t[3] != null && t[3] >= 0 ? s = t[3] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], t[1], e, s]) : (t[1] != null && t[1] >= 0 ? e = t[1] + this.padding[0][0] + this.padding[0][1] : e = null, t[2] != null && t[2] >= 0 ? s = t[2] + this.padding[1][0] + this.padding[1][1] : s = null, [t[0], e, s, t[3]]);
  }
  call(t, e) {
    return X(() => OG(Mt(t), this.padding, this.dataFormat));
  }
  getConfig() {
    const t = {
      padding: this.padding,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
Iy.className = "ZeroPadding2D";
et(Iy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
function hu(n, t, e, s, o, r) {
  return X(() => {
    Ce(o), P0(r), Nn(s), e == null && (e = [1, 1]), s == null && (s = "valid"), o == null && (o = rs()), r == null && (r = "max"), n = Pf(n, o);
    let i;
    const a = s === "same" ? "same" : "valid";
    return r === "max" ? i = pp(n, t, e, a) : i = np(
      // TODO(cais): Rank check?
      n,
      t,
      e,
      a
    ), o === "channelsFirst" && (i = zt(i, [0, 3, 1, 2])), i;
  });
}
function Cy(n, t, e, s, o, r) {
  return X(() => {
    Ce(o), P0(r), Nn(s), e == null && (e = [1, 1, 1]), s == null && (s = "valid"), o == null && (o = rs()), r == null && (r = "max"), n = Px(n, o);
    let i;
    const a = s === "same" ? "same" : "valid";
    return r === "max" ? i = Vv(n, t, e, a) : i = K2(n, t, e, a), o === "channelsFirst" && (i = zt(i, [0, 4, 1, 2, 3])), i;
  });
}
class vy extends Vt {
  /**
   *
   * @param args Parameters for the Pooling layer.
   *
   * config.poolSize defaults to 2.
   */
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = 2), super(t), typeof t.poolSize == "number")
      this.poolSize = [t.poolSize];
    else if (Array.isArray(t.poolSize) && t.poolSize.length === 1 && typeof t.poolSize[0] == "number")
      this.poolSize = t.poolSize;
    else
      throw new F(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);
    if (De(this.poolSize, "poolSize"), t.strides == null)
      this.strides = this.poolSize;
    else if (typeof t.strides == "number")
      this.strides = [t.strides];
    else if (Array.isArray(t.strides) && t.strides.length === 1 && typeof t.strides[0] == "number")
      this.strides = t.strides;
    else
      throw new F(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);
    De(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, Nn(this.padding), this.inputSpec = [new Ne({ ndim: 3 })];
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = ss(t[1], this.poolSize[0], this.padding, this.strides[0]);
    return [t[0], e, t[2]];
  }
  call(t, e) {
    return X(() => {
      this.invokeCallHook(t, e), t = ba(Mt(t), 2);
      const s = this.poolingFunction(Mt(t), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, "channelsLast");
      return ua(s, [2]);
    });
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Sy extends vy {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), hu(t, e, s, o, r, "max");
  }
}
Sy.className = "MaxPooling1D";
et(Sy);
class ky extends vy {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), hu(t, e, s, o, r, "avg");
  }
}
ky.className = "AveragePooling1D";
et(ky);
class Ty extends Vt {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 2)
        throw new F(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides];
    De(this.poolSize, "poolSize"), De(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Ce(this.dataFormat), Nn(this.padding), this.inputSpec = [new Ne({ ndim: 4 })];
  }
  computeOutputShape(t) {
    t = Ut(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2];
    return e = ss(e, this.poolSize[0], this.padding, this.strides[0]), s = ss(s, this.poolSize[1], this.padding, this.strides[1]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s] : [t[0], e, s, t[3]];
  }
  call(t, e) {
    return X(() => (this.invokeCallHook(t, e), this.poolingFunction(Mt(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Ny extends Ty {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), hu(t, e, s, o, r, "max");
  }
}
Ny.className = "MaxPooling2D";
et(Ny);
class $y extends Ty {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), hu(t, e, s, o, r, "avg");
  }
}
$y.className = "AveragePooling2D";
et($y);
class Ry extends Vt {
  constructor(t) {
    if (t.poolSize == null && (t.poolSize = [2, 2, 2]), super(t), this.poolSize = Array.isArray(t.poolSize) ? t.poolSize : [t.poolSize, t.poolSize, t.poolSize], t.strides == null)
      this.strides = this.poolSize;
    else if (Array.isArray(t.strides)) {
      if (t.strides.length !== 3)
        throw new F(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);
      this.strides = t.strides;
    } else
      this.strides = [t.strides, t.strides, t.strides];
    De(this.poolSize, "poolSize"), De(this.strides, "strides"), this.padding = t.padding == null ? "valid" : t.padding, this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Ce(this.dataFormat), Nn(this.padding), this.inputSpec = [new Ne({ ndim: 5 })];
  }
  computeOutputShape(t) {
    t = Ut(t);
    let e = this.dataFormat === "channelsFirst" ? t[2] : t[1], s = this.dataFormat === "channelsFirst" ? t[3] : t[2], o = this.dataFormat === "channelsFirst" ? t[4] : t[3];
    return e = ss(e, this.poolSize[0], this.padding, this.strides[0]), s = ss(s, this.poolSize[1], this.padding, this.strides[1]), o = ss(o, this.poolSize[2], this.padding, this.strides[2]), this.dataFormat === "channelsFirst" ? [t[0], t[1], e, s, o] : [t[0], e, s, o, t[4]];
  }
  call(t, e) {
    return X(() => (this.invokeCallHook(t, e), this.poolingFunction(Mt(t), this.poolSize, this.strides, this.padding, this.dataFormat)));
  }
  getConfig() {
    const t = {
      poolSize: this.poolSize,
      padding: this.padding,
      strides: this.strides,
      dataFormat: this.dataFormat
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Gy extends Ry {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), Cy(t, e, s, o, r, "max");
  }
}
Gy.className = "MaxPooling3D";
et(Gy);
class Ly extends Ry {
  constructor(t) {
    super(t);
  }
  poolingFunction(t, e, s, o, r) {
    return Ce(r), Nn(o), Cy(t, e, s, o, r, "avg");
  }
}
Ly.className = "AveragePooling3D";
et(Ly);
class Ey extends Vt {
  constructor(t) {
    super(t), this.inputSpec = [new Ne({ ndim: 3 })];
  }
  computeOutputShape(t) {
    return [t[0], t[2]];
  }
  call(t, e) {
    throw new Wt();
  }
}
class Wy extends Ey {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return X(() => {
      const s = Mt(t);
      return ye(s, 1);
    });
  }
}
Wy.className = "GlobalAveragePooling1D";
et(Wy);
class My extends Ey {
  constructor(t) {
    super(t || {});
  }
  call(t, e) {
    return X(() => {
      const s = Mt(t);
      return fs(s, 1);
    });
  }
}
My.className = "GlobalMaxPooling1D";
et(My);
class Dy extends Vt {
  constructor(t) {
    super(t), this.dataFormat = t.dataFormat == null ? "channelsLast" : t.dataFormat, Ce(this.dataFormat), this.inputSpec = [new Ne({ ndim: 4 })];
  }
  computeOutputShape(t) {
    return t = t, this.dataFormat === "channelsLast" ? [t[0], t[3]] : [t[0], t[1]];
  }
  call(t, e) {
    throw new Wt();
  }
  getConfig() {
    const t = { dataFormat: this.dataFormat }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
}
class Fy extends Dy {
  call(t, e) {
    return X(() => {
      const s = Mt(t);
      return this.dataFormat === "channelsLast" ? ye(s, [1, 2]) : ye(s, [2, 3]);
    });
  }
}
Fy.className = "GlobalAveragePooling2D";
et(Fy);
class zy extends Dy {
  call(t, e) {
    return X(() => {
      const s = Mt(t);
      return this.dataFormat === "channelsLast" ? fs(s, [1, 2]) : fs(s, [2, 3]);
    });
  }
}
zy.className = "GlobalMaxPooling2D";
et(zy);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Vy extends Vt {
  constructor(t) {
    super(t), this.layer = t.layer;
  }
  build(t) {
    this.built = !0;
  }
  // TODO(cais): Implement activityRegularizer getter.
  get trainable() {
    return this.layer != null ? this.layer.trainable : !1;
  }
  set trainable(t) {
    this.layer != null && (this.layer.trainable = t);
  }
  get trainableWeights() {
    return this.layer.trainableWeights;
  }
  // TODO(cais): Implement setter for trainableWeights.
  get nonTrainableWeights() {
    return this.layer.nonTrainableWeights;
  }
  // TODO(cais): Implement setter for nonTrainableWeights.
  get updates() {
    return this.layer._updates;
  }
  // TODO(cais): Implement getUpdatesFor().
  get losses() {
    return this.layer.losses;
  }
  // TODO(cais): Implement getLossesFor().
  getWeights() {
    return this.layer.getWeights();
  }
  setWeights(t) {
    this.layer.setWeights(t);
  }
  getConfig() {
    const t = {
      layer: {
        className: this.layer.getClassName(),
        config: this.layer.getConfig()
      }
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.layer != null && this.layer.setFastWeightInitDuringBuild(t);
  }
  /** @nocollapse */
  static fromConfig(t, e, s = {}) {
    const o = e.layer, r = ns(o, s);
    delete e.layer;
    const i = { layer: r };
    return Object.assign(i, e), new t(i);
  }
}
class Py extends Vy {
  constructor(t) {
    super(t), this.supportsMasking = !0;
  }
  build(t) {
    if (t = Ut(t), t.length < 3)
      throw new F(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);
    this.inputSpec = [{ shape: t }];
    const e = [t[0]].concat(t.slice(2));
    this.layer.built || (this.layer.build(e), this.layer.built = !0), super.build(t);
  }
  computeOutputShape(t) {
    t = Ut(t);
    const e = [t[0]].concat(t.slice(2)), s = this.layer.computeOutputShape(e), o = t[1];
    return [s[0], o].concat(s.slice(1));
  }
  call(t, e) {
    return X(() => (t = Mt(t), Ux(
      (i, a) => [Mt(this.layer.call(i, e)), []],
      t,
      [],
      !1,
      null,
      null,
      !1,
      !0
      /* needPerStepOutputs */
    )[1]));
  }
}
Py.className = "TimeDistributed";
et(Py);
function AG(n) {
  Po(cR, "BidirectionalMergeMode", n);
}
const ZG = "concat";
class Xy extends Vy {
  constructor(t) {
    super(t);
    const e = t.layer.getConfig(), s = {};
    s.className = t.layer.getClassName(), s.config = e, this.forwardLayer = ns(s), e.goBackwards = e.goBackwards !== !0;
    const o = {};
    if (o.className = t.layer.getClassName(), o.config = e, this.backwardLayer = ns(o), this.forwardLayer.name = "forward_" + this.forwardLayer.name, this.backwardLayer.name = "backward_" + this.backwardLayer.name, this.mergeMode = t.mergeMode === void 0 ? ZG : t.mergeMode, AG(this.mergeMode), t.weights)
      throw new Wt("weights support is not implemented for Bidirectional layer yet.");
    this._stateful = t.layer.stateful, this.returnSequences = t.layer.returnSequences, this.returnState = t.layer.returnState, this.supportsMasking = !0, this._trainable = !0, this.inputSpec = t.layer.inputSpec, this.numConstants = null;
  }
  get trainable() {
    return this._trainable;
  }
  set trainable(t) {
    this._trainable = t, this.forwardLayer != null && (this.forwardLayer.trainable = t), this.backwardLayer != null && (this.backwardLayer.trainable = t);
  }
  getWeights() {
    return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
  }
  setWeights(t) {
    const e = t.length, s = Math.floor(e / 2);
    this.forwardLayer.setWeights(t.slice(0, s)), this.backwardLayer.setWeights(t.slice(s));
  }
  computeOutputShape(t) {
    let e = this.forwardLayer.computeOutputShape(t);
    Array.isArray(e) && Array.isArray(e[0]) || (e = [e]), e = e;
    let s, o, r;
    return this.returnState && (r = e.slice(1)), s = e[0], s = s, this.mergeMode === "concat" ? (s[s.length - 1] *= 2, o = [s]) : this.mergeMode == null ? o = [s, s.slice()] : o = [s], this.returnState ? this.mergeMode == null ? o.concat(r).concat(r.slice()) : [s].concat(r).concat(r.slice()) : tn(o);
  }
  apply(t, e) {
    let s = e == null ? null : e.initialState, o = e == null ? null : e.constants;
    e == null && (e = {});
    const r = _x(t, s, o, this.numConstants);
    if (t = r.inputs, s = r.initialState, o = r.constants, Array.isArray(t) && (s = t.slice(1), t = t[0]), (s == null || s.length === 0) && o == null)
      return super.apply(t, e);
    const i = [], a = [];
    if (s != null) {
      const c = s.length;
      if (c % 2 > 0)
        throw new F("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
      e.initialState = s, i.push(...s);
      const u = s.map((h) => new Ne({ shape: h.shape }));
      this.forwardLayer.stateSpec = u.slice(0, c / 2), this.backwardLayer.stateSpec = u.slice(c / 2), a.push(...u);
    }
    if (o != null)
      throw new Wt("Support for constants in Bidirectional layers is not implemented yet.");
    const l = i[0] instanceof ps;
    for (const c of i)
      if (c instanceof ps !== l)
        throw new F("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
    if (l) {
      const c = [t].concat(i), u = this.inputSpec.concat(a), h = this.inputSpec;
      this.inputSpec = u;
      const d = super.apply(c, e);
      return this.inputSpec = h, d;
    } else
      return super.apply(t, e);
  }
  call(t, e) {
    return X(() => {
      const s = e.initialState;
      let o, r;
      if (s == null)
        o = this.forwardLayer.call(t, e), r = this.backwardLayer.call(t, e);
      else {
        const l = s.slice(0, s.length / 2), c = s.slice(s.length / 2);
        o = this.forwardLayer.call(t, Object.assign(e, { initialState: l })), r = this.backwardLayer.call(t, Object.assign(e, { initialState: c }));
      }
      let i;
      this.returnState && (Array.isArray(o) && (i = o.slice(1).concat(r.slice(1))), o = o[0], r = r[0]), this.returnSequences && (r = Lo(r, 1));
      let a;
      return this.mergeMode === "concat" ? a = Sf([o, r]) : this.mergeMode === "sum" ? a = ot(o, r) : this.mergeMode === "ave" ? a = D(0.5, ot(o, r)) : this.mergeMode === "mul" ? a = D(o, r) : this.mergeMode == null && (a = [o, r]), this.returnState ? this.mergeMode == null ? a.concat(i) : [a].concat(i) : a;
    });
  }
  resetStates(t) {
    this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
  }
  build(t) {
    Io(this.forwardLayer.name, () => {
      this.forwardLayer.build(t);
    }), Io(this.backwardLayer.name, () => {
      this.backwardLayer.build(t);
    }), this.built = !0;
  }
  computeMask(t, e) {
    Array.isArray(e) && (e = e[0]);
    let s;
    if (this.returnSequences ? this.mergeMode == null ? s = [e, e] : s = e : this.mergeMode == null ? s = [null, null] : s = null, this.returnState) {
      const r = this.forwardLayer.states.map((i) => null);
      return Array.isArray(s) ? s.concat(r).concat(r) : [s].concat(r).concat(r);
    } else
      return s;
  }
  get trainableWeights() {
    return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
  }
  get nonTrainableWeights() {
    return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
  }
  // TODO(cais): Implement constraints().
  setFastWeightInitDuringBuild(t) {
    super.setFastWeightInitDuringBuild(t), this.forwardLayer != null && this.forwardLayer.setFastWeightInitDuringBuild(t), this.backwardLayer != null && this.backwardLayer.setFastWeightInitDuringBuild(t);
  }
  getConfig() {
    const t = {
      mergeMode: this.mergeMode
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  /** @nocollapse */
  static fromConfig(t, e) {
    const s = ns(e.layer);
    if (delete e.layer, e.numConstants != null)
      throw new Wt("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
    const o = e;
    return o.layer = s, new t(o);
  }
}
Xy.className = "Bidirectional";
et(Xy);
/**
 * @license
 * Copyright 2022 CodeSmith LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
class Oy extends Vt {
  constructor(t) {
    super(t), this.scale = t.scale, t.offset ? this.offset = t.offset : this.offset = 0;
  }
  getConfig() {
    const t = {
      scale: this.scale,
      offset: this.offset
    }, e = super.getConfig();
    return Object.assign(t, e), t;
  }
  call(t, e) {
    return X(() => (t = Mt(t), t.dtype !== "float32" && (t = ga(t, "float32")), ot(D(t, this.scale), this.offset)));
  }
}
Oy.className = "Rescaling";
et(Oy);
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KG = B();
KG.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => !1, (n) => {
  n && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
var qm;
(function(n) {
  n[n.DT_INVALID = 0] = "DT_INVALID", n[n.DT_FLOAT = 1] = "DT_FLOAT", n[n.DT_DOUBLE = 2] = "DT_DOUBLE", n[n.DT_INT32 = 3] = "DT_INT32", n[n.DT_UINT8 = 4] = "DT_UINT8", n[n.DT_INT16 = 5] = "DT_INT16", n[n.DT_INT8 = 6] = "DT_INT8", n[n.DT_STRING = 7] = "DT_STRING", n[n.DT_COMPLEX64 = 8] = "DT_COMPLEX64", n[n.DT_INT64 = 9] = "DT_INT64", n[n.DT_BOOL = 10] = "DT_BOOL", n[n.DT_QINT8 = 11] = "DT_QINT8", n[n.DT_QUINT8 = 12] = "DT_QUINT8", n[n.DT_QINT32 = 13] = "DT_QINT32", n[n.DT_BFLOAT16 = 14] = "DT_BFLOAT16", n[n.DT_QINT16 = 15] = "DT_QINT16", n[n.DT_QUINT16 = 16] = "DT_QUINT16", n[n.DT_UINT16 = 17] = "DT_UINT16", n[n.DT_COMPLEX128 = 18] = "DT_COMPLEX128", n[n.DT_HALF = 19] = "DT_HALF", n[n.DT_RESOURCE = 20] = "DT_RESOURCE", n[n.DT_VARIANT = 21] = "DT_VARIANT", n[n.DT_UINT32 = 22] = "DT_UINT32", n[n.DT_UINT64 = 23] = "DT_UINT64", n[n.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", n[n.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", n[n.DT_INT32_REF = 103] = "DT_INT32_REF", n[n.DT_UINT8_REF = 104] = "DT_UINT8_REF", n[n.DT_INT16_REF = 105] = "DT_INT16_REF", n[n.DT_INT8_REF = 106] = "DT_INT8_REF", n[n.DT_STRING_REF = 107] = "DT_STRING_REF", n[n.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", n[n.DT_INT64_REF = 109] = "DT_INT64_REF", n[n.DT_BOOL_REF = 110] = "DT_BOOL_REF", n[n.DT_QINT8_REF = 111] = "DT_QINT8_REF", n[n.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", n[n.DT_QINT32_REF = 113] = "DT_QINT32_REF", n[n.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", n[n.DT_QINT16_REF = 115] = "DT_QINT16_REF", n[n.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", n[n.DT_UINT16_REF = 117] = "DT_UINT16_REF", n[n.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", n[n.DT_HALF_REF = 119] = "DT_HALF_REF", n[n.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", n[n.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", n[n.DT_UINT32_REF = 122] = "DT_UINT32_REF", n[n.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(qm || (qm = {}));
var tg;
(function(n) {
  (function(t) {
    t[t.LEGACY = 0] = "LEGACY", t[t.V1 = 1] = "V1", t[t.V2 = 2] = "V2";
  })(n.CheckpointFormatVersion || (n.CheckpointFormatVersion = {}));
})(tg || (tg = {}));
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function BG(n, t) {
  return vl(n, t);
}
function vl(n, t, e = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Set()) {
  if (n == null)
    return null;
  if (typeof Blob == "function" && n instanceof Blob)
    return n.slice();
  if (s.has(n))
    throw new Error("Circular references are not supported.");
  if (e.has(n))
    return e.get(n);
  const o = t(n);
  if (o.recurse && o.value !== null)
    throw new Error("A deep map function may not return both a value and recurse=true.");
  if (o.recurse)
    if (ur(n)) {
      const r = Array.isArray(n) ? [] : {};
      s.add(n);
      for (const i in n) {
        const a = n[i], l = vl(a, t, e, s);
        r[i] = l;
      }
      return s.delete(n), n.__proto__ && (r.__proto__ = n.__proto__), r;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${n}`);
  else
    return e.set(n, o.value), o.value;
}
function HG(n, t = Zy) {
  return Ay(n, t);
}
function Ay(n, t, e = /* @__PURE__ */ new Set()) {
  const s = n[0];
  if (e.has(s))
    throw new Error("Circular references are not supported.");
  const o = t(n);
  if (o.recurse && o.value !== null)
    throw new Error("A deep zip function may not return both a value and recurse=true.");
  if (o.recurse)
    if (ur(s)) {
      const r = Array.isArray(s) ? [] : {};
      e.add(s);
      for (const i in s) {
        const a = n.map((c) => c[i]), l = Ay(a, t, e);
        r[i] = l;
      }
      return e.delete(s), r;
    } else
      throw new Error(`Can't recurse into non-iterable type: ${s}`);
  else
    return o.value;
}
function Zy(n) {
  return n === null ? null : ur(n[0]) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
async function Ky(n, t) {
  const e = /* @__PURE__ */ new Map();
  vl(n, t, e);
  for (const o of Array.from(e.keys())) {
    const r = e.get(o);
    if (zl(r)) {
      const i = await r;
      e.set(o, i);
    }
  }
  return vl(n, t, e);
}
function ur(n) {
  let t = !1;
  if (B().get("IS_BROWSER"))
    t = n instanceof TextDecoder;
  else {
    const { StringDecoder: e } = require("string_decoder");
    t = n instanceof e;
  }
  return n != null && !ArrayBuffer.isView(n) && (Array.isArray(n) || typeof n == "object" && !(n instanceof _t) && !(n instanceof Promise) && !t);
}
function _G(n) {
  return n == null || UG(n) || Array.isArray(n) || typeof n == "object" && n instanceof _t || Zn(n);
}
function UG(n) {
  return n === null || typeof n != "object" && typeof n != "function";
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function YG(n) {
  return BG(n, jG);
}
function jG(n) {
  return n instanceof _t ? { value: n.clone(), recurse: !1 } : ur(n) ? { value: null, recurse: !0 } : { value: n, recurse: !1 };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class By {
  /**
   * Constructs a `RingBuffer`.
   * @param capacity The number of items that the buffer can accomodate.
   */
  constructor(t) {
    if (this.capacity = t, this.begin = 0, this.end = 0, t == null)
      throw new RangeError("Can't create a ring buffer of unknown capacity.");
    if (t < 1)
      throw new RangeError("Can't create ring buffer of capacity < 1.");
    this.data = new Array(t), this.doubledCapacity = 2 * t;
  }
  /**
   * Map any index into the range 0 <= index < 2*capacity.
   */
  wrap(t) {
    for (; t < 0; )
      t += this.doubledCapacity;
    return t % this.doubledCapacity;
  }
  get(t) {
    if (t < 0)
      throw new RangeError("Can't get item at a negative index.");
    return this.data[t % this.capacity];
  }
  set(t, e) {
    if (t < 0)
      throw new RangeError("Can't set item at a negative index.");
    this.data[t % this.capacity] = e;
  }
  /**
   * Returns the current number of items in the buffer.
   */
  length() {
    let t = this.end - this.begin;
    return t < 0 && (t = this.doubledCapacity + t), t;
  }
  /**
   * Reports whether the buffer is full.
   * @returns true if the number of items in the buffer equals its capacity, and
   *   false otherwise.
   */
  isFull() {
    return this.length() === this.capacity;
  }
  /**
   * Reports whether the buffer is empty.
   * @returns true if the number of items in the buffer equals zero, and
   *   false otherwise.
   */
  isEmpty() {
    return this.length() === 0;
  }
  /**
   * Adds an item to the end of the buffer.
   */
  push(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.set(this.end, t), this.end = this.wrap(this.end + 1);
  }
  /**
   * Adds many items to the end of the buffer, in order.
   */
  pushAll(t) {
    for (const e of t)
      this.push(e);
  }
  /**
   * Removes and returns the last item in the buffer.
   */
  pop() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    this.end = this.wrap(this.end - 1);
    const t = this.get(this.end);
    return this.set(this.end, void 0), t;
  }
  /**
   * Adds an item to the beginning of the buffer.
   */
  unshift(t) {
    if (this.isFull())
      throw new RangeError("Ring buffer is full.");
    this.begin = this.wrap(this.begin - 1), this.set(this.begin, t);
  }
  /**
   * Removes and returns the first item in the buffer.
   */
  shift() {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const t = this.get(this.begin);
    return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t;
  }
  /**
   * Removes and returns a specific item in the buffer, and moves the last item
   * to the vacated slot.  This is useful for implementing a shuffling stream.
   * Note that this operation necessarily scrambles the original order.
   *
   * @param relativeIndex: the index of the item to remove, relative to the
   *   first item in the buffer (e.g., hiding the ring nature of the underlying
   *   storage).
   */
  shuffleExcise(t) {
    if (this.isEmpty())
      throw new RangeError("Ring buffer is empty.");
    const e = this.wrap(this.begin + t), s = this.get(e);
    return this.set(e, this.pop()), s;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class du extends By {
  /**
   * Constructs a `GrowingRingBuffer`.
   */
  constructor() {
    super(du.INITIAL_CAPACITY);
  }
  isFull() {
    return !1;
  }
  push(t) {
    super.isFull() && this.expand(), super.push(t);
  }
  unshift(t) {
    super.isFull() && this.expand(), super.unshift(t);
  }
  /**
   * Doubles the capacity of the buffer.
   */
  expand() {
    const t = this.capacity * 2, e = new Array(t), s = this.length();
    for (let o = 0; o < s; o++)
      e[o] = this.get(this.wrap(this.begin + o));
    this.data = e, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = s;
  }
}
du.INITIAL_CAPACITY = 32;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
function Hy(n) {
  return new tL(n);
}
function QG(n) {
  return new eL(n);
}
function JG(n, t) {
  return new _y(n, t);
}
function qG(n, t = Xs.FAIL) {
  return new hL(n, t);
}
class on {
  /**
   * Collect all remaining elements of a bounded stream into an array.
   * Obviously this will succeed only for small streams that fit in memory.
   * Useful for testing.
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArray() {
    const t = [];
    let e = await this.next();
    for (; !e.done; )
      t.push(e.value), e = await this.next();
    return t;
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of stream elements, which will resolve
   *   when the stream is exhausted.
   */
  async toArrayForTest() {
    const t = this.prefetch(100), e = [];
    let s = await t.next();
    for (; !s.done; )
      e.push(s.value), s = await t.next();
    return e;
  }
  /**
   * Draw items from the stream until it is exhausted.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveFully() {
    let t = await this.next();
    for (; !t.done; )
      t = await this.next();
  }
  /**
   * Draw items from the stream until it is exhausted, or a predicate fails.
   *
   * This can be useful when the stream has side effects but no output.  In
   * that case, calling this function guarantees that the stream will be
   * fully processed.
   */
  async resolveWhile(t) {
    let e = await this.next(), s = t(e.value);
    for (; !e.done && s; )
      e = await this.next(), s = t(e.value);
  }
  /**
   * Handles errors thrown on this stream using a provided handler function.
   *
   * @param handler A function that handles any `Error` thrown during a `next()`
   *   call and returns true if the stream should continue (dropping the failed
   *   call) or false if the stream should quietly terminate.  If the handler
   *   itself throws (or rethrows) an `Error`, that will be propagated.
   *
   * @returns A `LazyIterator` of elements passed through from upstream,
   *   possibly filtering or terminating on upstream `next()` calls that
   *   throw an `Error`.
   */
  handleErrors(t) {
    return new lL(this, t);
  }
  // TODO(soergel): Implement reduce() etc.
  /**
   * Filters this stream according to `predicate`.
   *
   * @param predicate A function mapping a stream element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `LazyIterator` of elements for which the predicate was true.
   */
  filter(t) {
    return new iL(this, t);
  }
  /**
   * Maps this stream through a 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  map(t) {
    return new aL(this, t);
  }
  /**
   * Maps this stream through an async 1-to-1 transform.
   *
   * @param transform A function mapping a stream element to a `Promise` for a
   *   transformed stream element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  mapAsync(t) {
    return new eg(this, t);
  }
  /**
   * Maps this stream through a 1-to-1 transform, forcing serial execution.
   *
   * @param transform A function mapping a stream element to a transformed
   *   element.
   *
   * @returns A `LazyIterator` of transformed elements.
   */
  serialMapAsync(t) {
    return new eg(this, t).serial();
  }
  /**
   * Maps this stream through a 1-to-many transform.
   *
   * @param transform A function mapping a stream element to an array of
   *   transformed elements.
   *
   * @returns A `DataStream` of transformed elements.
   */
  flatmap(t) {
    return new uL(this, t);
  }
  /**
   * Apply a function to every element of the stream.
   *
   * @param f A function to apply to each stream element.
   */
  async forEachAsync(t) {
    return this.map(t).resolveFully();
  }
  /**
   * Apply a function to every element of the stream, forcing serial execution.
   *
   * @param f A function to apply to each stream element.  Should return 'true'
   *   to indicate that the stream should continue, or 'false' to cause it to
   *   terminate.
   */
  async serialForEach(t) {
    return this.serialMapAsync(t).resolveWhile((e) => e === !0);
  }
  /**
   * Groups elements into batches, represented as arrays of elements.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "Row-major" means that the resulting batch is simply a collection of
   * rows: `[row1, row2, row3, ...]`.  This is contrast to the column-major
   * form, which is needed for vectorized computation.
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `LazyIterator` of batches of elements, represented as arrays
   *   of the original element type.
   */
  rowMajorBatch(t, e = !0) {
    return new rL(this, t, e);
  }
  /**
   * Groups elements into batches, represented in column-major form.
   *
   * We can think of the elements of this iterator as 'rows' (even if they are
   * nested structures).  By the same token, consecutive values for a given
   * key within the elements form a 'column'.  This matches the usual sense of
   * 'row' and 'column' when processing tabular data (e.g., parsing a CSV).
   *
   * Thus, "column-major" means that the resulting batch is a (potentially
   * nested) structure representing the columns.  Each column entry, then,
   * contains a collection of the values found in that column for a range of
   * input elements.  This representation allows for vectorized computation, in
   * contrast to the row-major form.
   *
   * The inputs should all have the same nested structure (i.e., of arrays and
   * dicts).  The result is a single object with the same nested structure,
   * where the leaves are arrays collecting the values of the inputs at that
   * location (or, optionally, the result of a custom function applied to those
   * arrays).
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @param zipFn: (optional) A function that expects an array of elements at a
   *   single node of the object tree, and returns a `DeepMapResult`.  The
   *   `DeepMapResult` either provides a result value for that node (i.e.,
   *   representing the subtree), or indicates that the node should be processed
   *   recursively.  The default zipFn recurses as far as possible and places
   *   arrays at the leaves.
   * @returns A `LazyIterator` of batches of elements, represented as an object
   *   with collections at the leaves.
   */
  columnMajorBatch(t, e = !0, s = Zy) {
    return this.rowMajorBatch(t, e).map((r) => HG(r, s));
  }
  /**
   * Concatenate this `LazyIterator` with another.
   *
   * @param iterator A `LazyIterator` to be concatenated onto this one.
   * @param baseErrorHandler An optional function that can intercept `Error`s
   *   raised during a `next()` call on the base stream.  This function can
   *   decide whether the error should be propagated, whether the error should
   *   be ignored, or whether the base stream should be terminated.
   * @returns A `LazyIterator`.
   */
  concatenate(t, e) {
    return new _y(Hy([this, t]), e);
  }
  /**
   * Limits this stream to return at most `count` items.
   *
   * @param count The maximum number of items to provide from the stream. If
   * a negative or undefined value is given, the entire stream is returned
   *   unaltered.
   */
  take(t) {
    return t < 0 || t == null ? this : new oL(this, t);
  }
  /**
   * Skips the first `count` items in this stream.
   *
   * @param count The number of items to skip.  If a negative or undefined
   * value is given, the entire stream is returned unaltered.
   */
  skip(t) {
    return t < 0 || t == null ? this : new sL(this, t);
  }
  /**
   * Prefetch the first `bufferSize` items in this stream.
   *
   * Note this prefetches Promises, but makes no guarantees about when those
   * Promises resolve.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   */
  prefetch(t) {
    return new Uy(this, t);
  }
  // TODO(soergel): deep sharded shuffle, where supported
  /**
   * Randomly shuffles the elements of this stream.
   *
   * @param bufferSize: An integer specifying the number of elements from
   * this stream from which the new stream will sample.
   * @param seed: (Optional.) An integer specifying the random seed that
   * will be used to create the distribution.
   */
  shuffle(t, e) {
    return new dL(this, t, e);
  }
  /**
   * Force an iterator to execute serially: each next() call will await the
   * prior one, so that they cannot execute concurrently.
   */
  serial() {
    return new nL(this);
  }
}
class tL extends on {
  constructor(t) {
    super(), this.items = t, this.trav = 0;
  }
  summary() {
    return `Array of ${this.items.length} items`;
  }
  async next() {
    if (this.trav >= this.items.length)
      return { value: null, done: !0 };
    const t = this.items[this.trav];
    return this.trav++, { value: YG(t), done: !1 };
  }
}
class eL extends on {
  constructor(t) {
    super(), this.nextFn = t;
  }
  summary() {
    return "Function call";
  }
  async next() {
    try {
      return this.nextFn();
    } catch (t) {
      throw t.message = `Error thrown while iterating through a dataset: ${t.message}`, t;
    }
  }
}
class nL extends on {
  constructor(t) {
    super(), this.upstream = t, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Serial`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    return this.upstream.next();
  }
}
class sL extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Skip`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.count++ < this.maxCount; ) {
      const t = await this.upstream.next();
      if (t.done)
        return t;
      Et(t.value);
    }
    return this.upstream.next();
  }
}
class oL extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.maxCount = e, this.count = 0;
  }
  summary() {
    return `${this.upstream.summary()} -> Take`;
  }
  async next() {
    return this.count++ >= this.maxCount ? { value: null, done: !0 } : this.upstream.next();
  }
}
class rL extends on {
  constructor(t, e, s = !0) {
    super(), this.upstream = t, this.batchSize = e, this.enableSmallLastBatch = s, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> RowMajorBatch`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    const t = [];
    for (; t.length < this.batchSize; ) {
      const e = await this.upstream.next();
      if (e.done)
        return this.enableSmallLastBatch && t.length > 0 ? { value: t, done: !1 } : { value: null, done: !0 };
      t.push(e.value);
    }
    return { value: t, done: !1 };
  }
}
class iL extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.predicate = e, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> Filter`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; ) {
      const t = await this.upstream.next();
      if (t.done || this.predicate(t.value))
        return t;
      Et(t.value);
    }
  }
}
class aL extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Map`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = ks(t.value), s = this.transform(t.value), o = ks(s);
    for (const r of e)
      Vc(r, o) || r.dispose();
    return { value: s, done: !1 };
  }
}
class lL extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.handler = e, this.count = 0, this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  summary() {
    return `${this.upstream.summary()} -> handleErrors`;
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; ; )
      try {
        return await this.upstream.next();
      } catch (t) {
        if (!this.handler(t))
          return { value: null, done: !0 };
      }
  }
}
class eg extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> AsyncMap`;
  }
  async next() {
    const t = await this.upstream.next();
    if (t.done)
      return { value: null, done: !0 };
    const e = ks(t.value), s = await this.transform(t.value), o = ks(s);
    for (const r of e)
      Vc(r, o) || r.dispose();
    return { value: s, done: !1 };
  }
}
class cL extends on {
  constructor() {
    super(), this.outputQueue = new du(), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  async serialNext() {
    for (; this.outputQueue.length() === 0; )
      if (!await this.pump())
        return { value: null, done: !0 };
    return { value: this.outputQueue.shift(), done: !1 };
  }
}
class uL extends cL {
  constructor(t, e) {
    super(), this.upstream = t, this.transform = e;
  }
  summary() {
    return `${this.upstream.summary()} -> Flatmap`;
  }
  async pump() {
    const t = await this.upstream.next();
    if (t.done)
      return !1;
    const e = ks(t.value), s = this.transform(t.value), o = ks(s);
    this.outputQueue.pushAll(s);
    for (const r of e)
      Vc(r, o) || r.dispose();
    return !0;
  }
}
class _y extends on {
  constructor(t, e) {
    super(), this.baseErrorHandler = e, this.lastRead = null, this.iterator = null, this.moreIterators = t;
  }
  summary() {
    return "TODO: fill in upstream of chained summaries -> Chained";
  }
  async next() {
    return this.lastRead = this.readFromChain(this.lastRead), this.lastRead;
  }
  async readFromChain(t) {
    if (await t, this.iterator == null) {
      const s = await this.moreIterators.next();
      if (s.done)
        return { value: null, done: !0 };
      this.iterator = s.value, this.baseErrorHandler != null && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler));
    }
    const e = await this.iterator.next();
    return e.done ? (this.iterator = null, this.readFromChain(t)) : e;
  }
}
var Xs;
(function(n) {
  n[n.FAIL = 0] = "FAIL", n[n.SHORTEST = 1] = "SHORTEST", n[n.LONGEST = 2] = "LONGEST";
})(Xs || (Xs = {}));
class hL extends on {
  constructor(t, e = Xs.FAIL) {
    super(), this.iterators = t, this.mismatchMode = e, this.count = 0, this.currentPromise = null;
  }
  summary() {
    return "{TODO: fill in upstream of zip summaries} -> Zip";
  }
  async nextState(t) {
    await t;
    let e = 0, s = 0;
    function o(i) {
      return i instanceof on ? {
        value: i.next().then((l) => (e++, l.done && s++, l.value)),
        recurse: !1
      } : { value: null, recurse: !0 };
    }
    const r = await Ky(this.iterators, o);
    if (e === s)
      return { value: null, done: !0 };
    if (s > 0)
      switch (this.mismatchMode) {
        case Xs.FAIL:
          throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);
        case Xs.SHORTEST:
          return { value: null, done: !0 };
        case Xs.LONGEST:
      }
    return this.count++, { value: r, done: !1 };
  }
  async next() {
    return this.currentPromise = this.nextState(this.currentPromise), this.currentPromise;
  }
}
class Uy extends on {
  constructor(t, e) {
    super(), this.upstream = t, this.bufferSize = e, this.buffer = new By(e);
  }
  summary() {
    return `${this.upstream.summary()} -> Prefetch`;
  }
  /**
   * Refill the prefetch buffer.  Returns only after the buffer is full, or
   * the upstream source is exhausted.
   */
  refill() {
    for (; !this.buffer.isFull(); ) {
      const t = this.upstream.next();
      this.buffer.push(t);
    }
  }
  next() {
    return this.refill(), this.buffer.shift();
  }
}
class dL extends Uy {
  constructor(t, e, s) {
    super(t, e), this.upstream = t, this.windowSize = e, this.upstreamExhausted = !1, this.random = Sr.alea(s || Ve().toString()), this.lastRead = Promise.resolve({ value: null, done: !1 });
  }
  async next() {
    return this.lastRead = this.lastRead.then(() => this.serialNext()), this.lastRead;
  }
  randomInt(t) {
    return Math.floor(this.random() * t);
  }
  chooseIndex() {
    return this.randomInt(this.buffer.length());
  }
  async serialNext() {
    for (this.upstreamExhausted || this.refill(); !this.buffer.isEmpty(); ) {
      const t = this.chooseIndex(), e = await this.buffer.shuffleExcise(t);
      if (e.done)
        this.upstreamExhausted = !0;
      else
        return this.refill(), e;
    }
    return { value: null, done: !0 };
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * =============================================================================
 */
class Bf {
  constructor() {
    this.size = null;
  }
  // TODO(soergel): Make Datasets report whether repeated iterator() calls
  // produce the same result (e.g., reading from a file) or different results
  // (e.g., from the webcam).  Currently we don't make this distinction but it
  // could be important for the user to know.
  // abstract isDeterministic(): boolean;
  /**
   * Groups elements into batches.
   *
   * It is assumed that each of the incoming dataset elements has the same
   * structure -- i.e. the same set of keys at each location in an object
   * hierarchy.  For each key, the resulting `Dataset` provides a batched
   * element collecting all of the incoming values for that key.
   *
   *  * Incoming primitives are grouped into a 1-D Tensor.
   *  * Incoming Tensors are grouped into a new Tensor where the 0th axis is
   *    the batch dimension.
   *  * Incoming arrays are converted to Tensor and then batched.
   *  * A nested array is interpreted as an n-D Tensor, so the batched result
   *    has n+1 dimensions.
   *  * An array that cannot be converted to Tensor produces an error.
   *
   * If an array should not be batched as a unit, it should first be converted
   * to an object with integer keys.
   *
   * Here are a few examples:
   *
   * Batch a dataset of numbers:
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);
   * await a.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of arrays:
   * ```js
   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);
   * await b.forEachAsync(e => e.print());
   * ```
   *
   * Batch a dataset of objects:
   * ```js
   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},
   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},
   *   {a: 8, b: 18}]).batch(4);
   * await c.forEachAsync(e => {
   *   console.log('{');
   *   for(var key in e) {
   *     console.log(key+':');
   *     e[key].print();
   *   }
   *   console.log('}');
   * })
   * ```
   *
   * @param batchSize The number of elements desired per batch.
   * @param smallLastBatch Whether to emit the final batch when it has fewer
   *   than batchSize elements. Default true.
   * @returns A `Dataset`, from which a stream of batches can be obtained.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  batch(t, e = !0) {
    const s = this;
    S(t > 0, () => `batchSize needs to be positive, but it is
      ${t}`);
    let o;
    return this.size === 1 / 0 || this.size == null ? o = this.size : e ? o = Math.ceil(this.size / t) : o = Math.floor(this.size / t), En(async () => (await s.iterator()).columnMajorBatch(t, e, pL), o);
  }
  /**
   * Concatenates this `Dataset` with another.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * const b = tf.data.array([4, 5, 6]);
   * const c = a.concatenate(b);
   * await c.forEachAsync(e => console.log(e));
   * ```
   *
   * @param dataset A `Dataset` to be concatenated onto this one.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  concatenate(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 || t.size === 1 / 0 ? s = 1 / 0 : this.size != null && t.size != null ? s = this.size + t.size : s = null, En(async () => (await e.iterator()).concatenate(await t.iterator()), s);
  }
  /**
   * Filters this dataset according to `predicate`.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
   *   .filter(x => x%2 === 0);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param predicate A function mapping a dataset element to a boolean or a
   * `Promise` for one.
   *
   * @returns A `Dataset` of elements for which the predicate was true.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  filter(t) {
    const e = this;
    let s;
    return this.size === 1 / 0 ? s = 1 / 0 : s = null, En(async () => (await e.iterator()).filter((o) => X(() => t(o))), s);
  }
  /**
   * Apply a function to every element of the dataset.
   *
   * After the function is applied to a dataset element, any Tensors contained
   * within that element are disposed.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param f A function to apply to each dataset element.
   * @returns A `Promise` that resolves after all elements have been processed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async forEachAsync(t) {
    return (await this.iterator()).forEachAsync(t);
  }
  /**
   * Maps this dataset through a 1-to-1 transform.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).map(x => x*x);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param transform A function mapping a dataset element to a transformed
   *   dataset element.
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  map(t) {
    const e = this;
    return En(async () => (await e.iterator()).map((s) => X(() => t(s))), this.size);
  }
  /**
   * Maps this dataset through an async 1-to-1 transform.
   *
   * ```js
   * const a =
   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){
   *    setTimeout(() => {
   *      resolve(x * x);
   *    }, Math.random()*1000 + 500);
   *  }));
   * console.log(await a.toArray());
   * ```
   *
   * @param transform A function mapping a dataset element to a `Promise` for a
   *   transformed dataset element.  This transform is responsible for disposing
   *   any intermediate `Tensor`s, i.e. by wrapping its computation in
   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous
   *   `map()` case).
   *
   * @returns A `Dataset` of transformed elements.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  mapAsync(t) {
    const e = this;
    return En(async () => (await e.iterator()).mapAsync(t), this.size);
  }
  /**
   *  Creates a `Dataset` that prefetches elements from this dataset.
   *
   * @param bufferSize: An integer specifying the number of elements to be
   *   prefetched.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  prefetch(t) {
    if (t == null)
      throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");
    const e = this;
    return En(async () => (await e.iterator()).prefetch(t), this.size);
  }
  /**
   * Repeats this dataset `count` times.
   *
   * NOTE: If this dataset is a function of global state (e.g. a random number
   * generator), then different repetitions may produce different elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3]).repeat(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: (Optional) An integer, representing the number of times
   *   the dataset should be repeated. The default behavior (if `count` is
   *   `undefined` or negative) is for the dataset be repeated indefinitely.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  repeat(t) {
    const e = this;
    let s;
    return this.size != null && t > 0 ? s = this.size * t : t === 0 ? s = 0 : this.size != null && (t === void 0 || t < 0) ? s = 1 / 0 : s = null, En(async () => {
      const o = QG(async () => ({ value: await e.iterator(), done: !1 }));
      return JG(o.take(t));
    }, s);
  }
  /**
   * Creates a `Dataset` that skips `count` initial elements from this dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be skipped
   *   to form the new dataset.  If `count` is greater than the size of this
   *   dataset, the new dataset will contain no elements.  If `count`
   *   is `undefined` or negative, skips the entire dataset.
   *
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  skip(t) {
    const e = this;
    let s;
    return this.size != null && t >= 0 && this.size >= t ? s = this.size - t : this.size != null && (this.size < t || t === void 0 || t < 0) ? s = 0 : s = null, En(async () => (await e.iterator()).skip(t), s);
  }
  /**
   * Pseudorandomly shuffles the elements of this dataset. This is done in a
   * streaming manner, by sampling from a given number of prefetched elements.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param bufferSize: An integer specifying the number of elements from this
   *   dataset from which the new dataset will sample.
   * @param seed: (Optional) An integer specifying the random seed that will
   *   be used to create the distribution.
   * @param reshuffleEachIteration: (Optional) A boolean, which if true
   *   indicates that the dataset should be pseudorandomly reshuffled each time
   *   it is iterated over. If false, elements will be returned in the same
   *   shuffled order on each iteration. (Defaults to `true`.)
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  shuffle(t, e, s = !0) {
    if (t == null || t < 0)
      throw this.size == null ? new RangeError("`Dataset.shuffle()` requires bufferSize to be specified.") : new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);
    const o = this, r = Sr.alea(e || Ve().toString());
    return En(async () => {
      let i = r.int32();
      return s && (i += r.int32()), (await o.iterator()).shuffle(t, i.toString());
    }, this.size);
  }
  /**
   * Creates a `Dataset` with at most `count` initial elements from this
   * dataset.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);
   * await a.forEachAsync(e => console.log(e));
   * ```
   *
   * @param count: The number of elements of this dataset that should be taken
   *   to form the new dataset.  If `count` is `undefined` or negative, or if
   *   `count` is greater than the size of this dataset, the new dataset will
   *   contain all elements of this dataset.
   * @returns A `Dataset`.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  take(t) {
    const e = this;
    let s;
    return this.size != null && this.size > t ? s = t : this.size != null && this.size <= t ? s = this.size : s = null, En(async () => (await e.iterator()).take(t), s);
  }
  /**
   * Collect all elements of this dataset into an array.
   *
   * Obviously this will succeed only for small datasets that fit in memory.
   * Useful for testing and generally should be avoided if possible.
   *
   * ```js
   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);
   * console.log(await a.toArray());
   * ```
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   *
   * @doc {heading: 'Data', subheading: 'Classes'}
   */
  async toArray() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArray();
  }
  /**
   * Collect all elements of this dataset into an array with prefetching 100
   * elements. This is useful for testing, because the prefetch changes the
   * order in which the Promises are resolved along the processing pipeline.
   * This may help expose bugs where results are dependent on the order of
   * Promise resolution rather than on the logical order of the stream (i.e.,
   * due to hidden mutable state).
   *
   * @returns A Promise for an array of elements, which will resolve
   *   when a new stream has been obtained and fully consumed.
   */
  async toArrayForTest() {
    if (this.size === 1 / 0)
      throw new Error("Can not convert infinite data stream to array.");
    return (await this.iterator()).toArrayForTest();
  }
}
Bf.MAX_BUFFER_SIZE = 1e4;
function En(n, t = null) {
  return new class extends Bf {
    constructor() {
      super(...arguments), this.size = t;
    }
    /*
     * Provide a new stream of elements.  Note this will also start new streams
     * from any underlying `Dataset`s.
     */
    async iterator() {
      return n();
    }
  }();
}
function pY(n) {
  return En(async () => Hy(n), n.length);
}
function fY(n) {
  if (!ur(n))
    throw new Error("The argument to zip() must be an object or array.");
  let t;
  if (Array.isArray(n))
    for (let e = 0; e < n.length; e++)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  else if (n instanceof Object)
    for (const e in n)
      t = t == null ? n[e].size : Math.min(t, n[e].size);
  return En(async () => {
    const e = await Ky(n, (s) => {
      if (s instanceof Bf)
        return { value: s.iterator(), recurse: !1 };
      if (ur(s))
        return { value: null, recurse: !0 };
      throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
    });
    return qG(e, Xs.SHORTEST);
  }, t);
}
function pL(n) {
  if (n === null)
    return null;
  const t = n[0];
  return _G(t) ? { value: fL(n), recurse: !1 } : { value: null, recurse: !0 };
}
function fL(n) {
  if (n.length === 0)
    throw new Error("Can't make a batch of zero elements.");
  return n[0] instanceof _t ? Ns(n) : _e(n);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bt(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && S(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the CPU backend.`);
  });
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mL = y0;
class pu extends Zh {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = !0, this.data = new Zg(this, le());
  }
  nextDataId() {
    return pu.nextDataId++;
  }
  write(t, e, s) {
    this.firstUse && (this.firstUse = !1, B().get("IS_NODE") && wn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    const o = { id: this.nextDataId() };
    return this.data.set(o, { values: t, dtype: s, refCount: 1 }), o;
  }
  /**
   * Create a data bucket in cpu backend.
   * @param shape Shape of the `TensorInfo`.
   * @param dtype DType of the `TensorInfo`.
   * @param values The value of the `TensorInfo` stored as a flattened array.
   */
  makeTensorInfo(t, e, s) {
    let o;
    if (e === "string" && s != null && s.length > 0 && br(s[0])) {
      const r = s.map((i) => An(i));
      o = this.write(r, t, e);
    } else
      o = this.write(s, t, e);
    return { dataId: o, shape: t, dtype: e };
  }
  /** Return refCount of a `TensorData`. */
  refCount(t) {
    return this.data.has(t) ? this.data.get(t).refCount : 0;
  }
  /** Increase refCount of a `TensorData`. */
  incRef(t) {
    const e = this.data.get(t);
    e.refCount++;
  }
  /** Decrease refCount of a `TensorData`. */
  decRef(t) {
    if (this.data.has(t)) {
      const e = this.data.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, o, r) {
    this.data.set(t, { values: e, dtype: o, refCount: r });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t) {
    return this.readSync(t);
  }
  readSync(t) {
    const { dtype: e, complexTensorInfos: s } = this.data.get(t);
    if (e === "complex64") {
      const o = this.readSync(s.real.dataId), r = this.readSync(s.imag.dataId);
      return $s(o, r);
    }
    return this.data.get(t).values;
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((o) => Ss(o));
        return Nt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Nt(t.shape, t.dtype, e);
  }
  makeOutput(t, e, s) {
    return le().makeTensorFromTensorInfo(this.makeTensorInfo(e, s, t), this);
  }
  /**
   * Dispose the memory if the dataId has 0 refCount. Return true if the memory
   * is released or memory is not managed in this backend, false if memory is
   * not cleared.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(t, e = !1) {
    if (this.data.has(t)) {
      if (this.data.get(t).refCount--, !e && this.data.get(t).refCount > 0)
        return !1;
      const { complexTensorInfos: s } = this.data.get(t);
      s != null && (this.disposeData(s.real.dataId, !0), this.disposeData(s.imag.dataId, !0)), this.data.delete(t);
    }
    return !0;
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  async time(t) {
    const e = Ve();
    return t(), { kernelMs: Ve() - e };
  }
  memory() {
    return {
      // Unreliable due to automatic gc. The numbers above are cumulative.
      unreliable: !0,
      reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]
    };
  }
  where(t) {
    bt([t], "where");
    const e = this.readSync(t.dataId);
    return mL(t.shape, e);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return super.epsilon();
  }
}
pu.nextDataId = 0;
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gL(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
const bL = (n) => {
  const { x: t } = n.inputs, e = n.backend;
  bt(t, "abs");
  let s = new Float32Array(H(t.shape));
  const o = e.data.get(t.dataId).values;
  return s = gL(o), e.makeOutput(s, t.shape, t.dtype);
}, xL = {
  kernelName: Vl,
  backendName: "cpu",
  kernelFunc: bL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Se(n) {
  return (t, e, s, o, r) => {
    const i = Rt(t, e), a = i.length, l = gt(i), c = H(i), u = he(r, c), h = t.length, d = e.length, p = gt(t), f = gt(e), g = Ts(t, i), m = Ts(e, i);
    if (g.length + m.length === 0)
      for (let b = 0; b < u.length; ++b)
        u[b] = n(s[b % s.length], o[b % o.length]);
    else
      for (let b = 0; b < u.length; ++b) {
        const x = ys(b, a, l), w = x.slice(-h);
        g.forEach((T) => w[T] = 0);
        const y = pn(w, h, p), I = x.slice(-d);
        m.forEach((T) => I[T] = 0);
        const v = pn(I, d, f);
        u[b] = n(s[y], o[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function un(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: o } = t, r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, a = e.makeTensorInfo(s.shape, "complex64"), l = e.data.get(a.dataId);
  return l.complexTensorInfos = {
    real: e.makeTensorInfo(s.shape, "float32", r),
    imag: e.makeTensorInfo(o.shape, "float32", i)
  }, a;
}
const yL = {
  kernelName: nd,
  backendName: "cpu",
  kernelFunc: un
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sl(n, t, e = "float32") {
  if (e === "complex64") {
    const o = Sl(n, t, "float32"), r = Sl(n, t, "float32");
    return un({ inputs: { real: o, imag: r }, backend: n });
  }
  const s = be(H(t), e);
  return n.makeTensorInfo(t, e, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xs(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const wL = {
  kernelName: Ri,
  backendName: "cpu",
  kernelFunc: xs
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Wo(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.data.get(s.dataId).complexTensorInfos.real, r = e.data.get(o.dataId).values;
  return e.makeTensorInfo(o.shape, o.dtype, r);
}
const IL = {
  kernelName: Sd,
  backendName: "cpu",
  kernelFunc: Wo
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CL(n, t, e, s) {
  if (s === "int32") {
    const o = Int32Array.from(n);
    return [t, "int32", o];
  }
  if (s === "bool") {
    const o = Ls([0], e), [r, i] = Se((a, l) => a !== l ? 1 : 0)(t, [], n, o, "bool");
    return [i, "bool", r];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
function js(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dtype: r } = s;
  if (r === "complex64") {
    if (o.dtype === "complex64")
      return xs({ inputs: { x: o }, backend: e });
    const u = Sl(e, o.shape, o.dtype), h = js({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } }), d = un({ inputs: { real: h, imag: u }, backend: e });
    return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), d;
  }
  if (o.dtype === "complex64") {
    const u = Wo({ inputs: { input: o }, backend: e }), h = js({ inputs: { x: u }, backend: e, attrs: { dtype: r } });
    return e.disposeIntermediateTensorInfo(u), h;
  }
  if (!Hh(o.dtype, r)) {
    const u = xs({ inputs: { x: o }, backend: e });
    return { dataId: u.dataId, shape: u.shape, dtype: r };
  }
  const i = e.data.get(o.dataId).values, [a, l, c] = CL(i, o.shape, o.dtype, r);
  return e.makeTensorInfo(a, l, c);
}
const vL = {
  kernelName: gi,
  backendName: "cpu",
  kernelFunc: js
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ze(n, t, e, s) {
  return e == null ? ({ inputs: o, backend: r }) => {
    const { a: i, b: a } = o, l = r;
    bt([i, a], n);
    const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = i.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      Rs(c)
    ) : c, d = i.dtype === "string" ? (
      // tslint:disable-next-line: no-any
      Rs(u)
    ) : u, p = s || i.dtype, [f, g] = t(i.shape, a.shape, h, d, p);
    return l.makeTensorInfo(g, p, f);
  } : ({ inputs: o, backend: r }) => {
    const { a: i, b: a } = o, l = r;
    if (i.dtype === "complex64" || a.dtype === "complex64") {
      const c = js({ inputs: { x: i }, backend: l, attrs: { dtype: "complex64" } }), u = l.data.get(c.dataId), h = u.complexTensorInfos.real, d = u.complexTensorInfos.imag, p = l.data.get(h.dataId).values, f = l.data.get(d.dataId).values, g = js({ inputs: { x: a }, backend: l, attrs: { dtype: "complex64" } }), m = l.data.get(g.dataId), b = m.complexTensorInfos.real, x = m.complexTensorInfos.imag, w = l.data.get(b.dataId).values, y = l.data.get(x.dataId).values, [I, v, T] = e(i.shape, a.shape, p, f, w, y), k = l.makeTensorInfo(T, "float32", I), $ = l.makeTensorInfo(T, "float32", v), G = un({ inputs: { real: k, imag: $ }, backend: l });
      return l.disposeIntermediateTensorInfo(c), l.disposeIntermediateTensorInfo(g), l.disposeIntermediateTensorInfo(k), l.disposeIntermediateTensorInfo($), G;
    } else {
      const c = l.data.get(i.dataId).values, u = l.data.get(a.dataId).values, h = s || i.dtype, [d, p] = t(i.shape, a.shape, c, u, h);
      return l.makeTensorInfo(p, h, d);
    }
  };
}
function Hf(n) {
  return (t, e, s, o, r, i) => {
    const a = Rt(t, e), l = H(a), c = a.length, u = gt(a), h = he("float32", l), d = he("float32", l), p = Ts(t, a), f = Ts(e, a), g = $s(s, o), m = $s(r, i), b = t.length, x = gt(t), w = e.length, y = gt(e);
    if (p.length + f.length === 0)
      for (let I = 0; I < h.length; I++) {
        const v = I % g.length, T = I % m.length, k = n(g[v * 2], g[v * 2 + 1], m[T * 2], m[T * 2 + 1]);
        h[I] = k.real, d[I] = k.imag;
      }
    else
      for (let I = 0; I < h.length; I++) {
        const v = ys(I, c, u), T = v.slice(-b);
        p.forEach((A) => T[A] = 0);
        const k = pn(T, b, x), $ = v.slice(-w);
        f.forEach((A) => $[A] = 0);
        const G = pn($, w, y), z = n(g[k * 2], g[k * 2 + 1], m[G * 2], m[G * 2 + 1]);
        h[I] = z.real, d[I] = z.imag;
      }
    return [h, d, a];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SL = Se((n, t) => n + t), kL = Hf((n, t, e, s) => ({ real: n + e, imag: t + s })), hr = ze(yr, SL, kL), TL = {
  kernelName: yr,
  backendName: "cpu",
  kernelFunc: hr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yy(n, t, e, s, o) {
  const r = H(s), i = be(o, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= o || (r > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function NL(n, t, e, s = !1) {
  const o = n.shape[0], r = n.shape[1], i = Nt([o, e], t.dtype);
  for (let a = 0; a < o; a++)
    for (let l = 0; l < r; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nr(n) {
  return (t, e, s) => {
    const o = he(e, t.length);
    for (let r = 0; r < t.length; ++r)
      o[r] = n(t[r], s);
    return o;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Yt(n, t, e) {
  return ({ inputs: s, attrs: o, backend: r }) => {
    const { x: i } = s;
    if (bt(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = r, l = a.data.get(i.dataId).values, c = H(i.shape), u = e || i.dtype, h = Ot(u, c);
    for (let d = 0; d < c; ++d)
      h[d] = t(l[d], o);
    return a.makeTensorInfo(i.shape, u, h);
  };
}
function $r(n, t, e) {
  return ({ inputs: s, attrs: o, backend: r }) => {
    const { x: i } = s;
    if (bt(i, n), i.dtype === "string" || e === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    const a = r, l = a.data.get(i.dataId).values, c = e || i.dtype, u = t(l, c, o);
    return a.makeTensorInfo(i.shape, c, u);
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $L = Nr((n) => Math.ceil(n)), RL = $r(bi, $L), GL = {
  kernelName: bi,
  backendName: "cpu",
  kernelFunc: RL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LL(n, t, e, s) {
  const o = Ot(e, H(t));
  if (s && e !== "string") {
    let r = 0;
    n.forEach((i) => {
      const a = H(i.shape);
      o.set(i.vals, r), r += a;
    });
  } else {
    let r = 0;
    n.forEach((i) => {
      const a = e === "string" ? Rs(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + r;
        for (let h = 0; h < i.shape[1]; ++h)
          o[u + h] = a[l++];
      }
      r += i.shape[1];
    });
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EL = Se((n, t) => n === t ? 1 : 0), jy = ze(ql, EL, null, "bool"), WL = {
  kernelName: ql,
  backendName: "cpu",
  kernelFunc: jy
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ML = Nr((n) => Math.exp(n)), Qy = $r(Si, ML, "float32"), DL = {
  kernelName: Si,
  backendName: "cpu",
  kernelFunc: Qy
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const FL = Nr((n) => Math.expm1(n)), zL = $r(ki, FL), VL = {
  kernelName: ki,
  backendName: "cpu",
  kernelFunc: zL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PL = Nr((n) => Math.floor(n)), XL = $r(Ti, PL), OL = {
  kernelName: Ti,
  backendName: "cpu",
  kernelFunc: XL
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AL(n, t, e, s, o, r, i, a, l) {
  const c = Nt([s, r], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < o; p++) {
      const f = n[u * o + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / r)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < r; p++)
      c.values[u * r + p] = t.get(...t.indexToLoc(d * r + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZL(n, t, e) {
  const s = Nt(e, n.dtype);
  for (let o = 0; o < s.size; ++o) {
    const i = s.indexToLoc(o).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[o] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KL = Se((n, t) => n > t ? 1 : 0), BL = ze(sc, KL, null, "bool"), HL = {
  kernelName: sc,
  backendName: "cpu",
  kernelFunc: BL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _L = Se((n, t) => n >= t ? 1 : 0), UL = ze($i, _L, null, "bool"), YL = {
  kernelName: $i,
  backendName: "cpu",
  kernelFunc: UL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jL = Se((n, t) => n < t ? 1 : 0), QL = ze(rc, jL, null, "bool"), JL = {
  kernelName: rc,
  backendName: "cpu",
  kernelFunc: QL
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const qL = Se((n, t) => n <= t ? 1 : 0), tE = ze(ic, qL, null, "bool"), eE = {
  kernelName: ic,
  backendName: "cpu",
  kernelFunc: tE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nE(n, t, e) {
  const s = (t - n) / (e - 1), o = be(e, "float32");
  o[0] = n;
  for (let r = 1; r < o.length; r++)
    o[r] = o[r - 1] + s;
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const sE = Nr((n) => Math.log(n)), oE = $r(Wi, sE), rE = {
  kernelName: Wi,
  backendName: "cpu",
  kernelFunc: oE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iE(n, t, e, s) {
  const o = he(s, H(e));
  for (let r = 0; r < o.length; ++r) {
    const i = r * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    o[r] = a;
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aE = Se((n, t) => Math.max(n, t)), lE = ze(Di, aE), cE = {
  kernelName: Di,
  backendName: "cpu",
  kernelFunc: lE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uE = Se((n, t) => Math.min(n, t)), hE = ze(Fi, uE), dE = {
  kernelName: Fi,
  backendName: "cpu",
  kernelFunc: hE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Jy = Se((n, t) => n * t), pE = Hf((n, t, e, s) => ({
  real: n * e - t * s,
  imag: n * s + t * e
})), fu = ze(Vi, Jy, pE), fE = {
  kernelName: Vi,
  backendName: "cpu",
  kernelFunc: fu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mE(n, t, e) {
  const s = ws(-1, e);
  return Jy([], t, s, n, e);
}
function gE(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  bt(s, "neg");
  const o = e.data.get(s.dataId).values, [r, i] = mE(o, s.shape, s.dtype);
  return e.makeTensorInfo(i, s.dtype, r);
}
const bE = {
  kernelName: bc,
  backendName: "cpu",
  kernelFunc: gE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xE = Se((n, t) => n !== t ? 1 : 0), yE = ze(xc, xE, null, "bool"), wE = {
  kernelName: xc,
  backendName: "cpu",
  kernelFunc: yE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qy(n, t, e, s, o) {
  const r = t.length, i = H(t), a = gt(t), l = gt(o), c = he(e, H(o));
  for (let u = 0; u < i; ++u) {
    const h = ys(u, r, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = pn(d, r, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rn(n) {
  const { inputs: t, attrs: e, backend: s } = n, { x: o } = t, { perm: r } = e;
  bt(o, "transpose");
  const i = o.shape.length, a = new Array(i);
  for (let h = 0; h < a.length; h++)
    a[h] = o.shape[r[h]];
  const l = s.data.get(o.dataId).values, c = qy(l, o.shape, o.dtype, r, a);
  return { dataId: s.write(c, a, o.dtype), shape: a, dtype: o.dtype };
}
const IE = {
  kernelName: Jo,
  backendName: "cpu",
  kernelFunc: rn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function CE(n, t, e, s) {
  const [o, r] = Ge(n, s), i = nn(t, "int32"), a = be(H(o), i), l = H(r);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: o, outDtype: i };
}
function vE(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  bt(o, "prod");
  const a = o.shape.length, l = Dt(r, o.shape), c = me(l, a);
  let u = l, h = o;
  const d = [];
  c != null && (h = rn({ inputs: { x: o }, backend: e, attrs: { perm: c } }), d.push(h), u = Ie(u.length, a));
  const p = e.data.get(h.dataId).values, { outVals: f, outShape: g, outDtype: m } = CE(h.shape, h.dtype, p, u);
  let b = g;
  return i && (b = we(g, l)), d.forEach((x) => e.disposeIntermediateTensorInfo(x)), e.makeTensorInfo(b, m, f);
}
const SE = {
  kernelName: Sc,
  backendName: "cpu",
  kernelFunc: vE
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kE(n, t, e) {
  n.forEach((s, o) => {
    if (s < 0 || s >= e) {
      const r = ys(o, t.length, gt(t)).join(",");
      throw new Error(`indices[${r}] = ${s} is not in [0, ${e})`);
    }
  });
}
function TE(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], o = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > o)
      throw new Error("Ragged splits must not point past values");
    for (let r = 1; r < s.length; ++r)
      if (s[r - 1] > s[r])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function NE(n, t, e, s) {
  const o = [];
  let r = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  TE(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const g = a[f], m = g[g.length - 1] - p[u];
        for (let b = u; b < h; ++b)
          a[f].push(p[b + 1] + m);
      }
      u = p[u], h = p[h];
    }
    h !== u && (o.push([u, h]), r += h - u);
  }
  return { outSplits: a, valueSlices: o, numValues: r };
}
function $E(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, o = Ot("int32", s);
    t.push(o), n[e].forEach((r, i) => o[i] = r);
  }
  return t;
}
function ng(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function RE(n, t, e, s, o, r) {
  const i = ng(t, 2)[1], a = ng(r, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        o[l * a + h] = n[u * i + h];
      ++l;
    }
}
function GE(n, t, e, s, o) {
  const r = t.slice();
  r[0] = o;
  const i = Ot(e, H(r)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return RE(n, t, s, l, i, r), [i, r];
}
function LE(n, t, e, s, o, r, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (kE(r, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = NE(r, i, n, c), p = $E(u), f = GE(e, s, o, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Gn = Dn;
let EE = class Dh {
  constructor(t, e, s, o, r, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = o, this.valuesDType = r, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Op(u), this.raggedRank = Ap(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === Gn.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === Gn.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case Gn.VALUE_ROWIDS:
        return Dh.getMaxWidthValueRowID(e);
      case Gn.ROW_SPLITS:
        return Dh.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${Gn[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let o = 0; o < e - 1; ++o) {
      const r = t[o + 1] - t[o];
      r > s && (s = r);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, o = t[0], r = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== o && (o = a, r = Math.max(i - s, r), s = i);
    }
    return Math.max(e - s, r);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return og(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    Zp(s, e);
    const o = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = Xp(this.raggedRank, o, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(t, e, s) {
    const o = Math.min(t, s), r = [];
    let i = 0;
    for (let a = 0; a < o; ++a, i += e)
      r.push(i);
    for (let a = o; a < t; ++a)
      r.push(-1);
    return S(r.length === t, () => "Final length of result must be equal to firstDimension."), r;
  }
  calculateOutputIndexRowSplit(t, e, s, o) {
    const r = t.length, i = [];
    for (let a = 0; a < r - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(o, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (r > 0 && i.length !== t[r - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(t, e, s, o) {
    const r = t.length, i = [];
    if (r === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < r; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < o ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, o) {
    const r = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case Gn.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(r, e, s, o);
      case Gn.ROW_SPLITS:
        if (r.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${r.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(r, e, s, o);
      default:
        throw new Error(`Unsupported partition type: ${Gn[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case Gn.FIRST_DIM_SIZE:
        return t[0];
      case Gn.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Gn.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Gn[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), o = new Array(this.raggedRank + 1);
    o[o.length - 1] = 1;
    for (let l = o.length - 2; l >= 0; --l)
      o[l] = o[l + 1] * s[l + 1];
    const r = og(s, !1), i = Ot(this.valuesDType, H(r));
    if (o[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, o[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, o[c], s[c]);
      this.setOutput(this.raggedRank, l, i, r);
    }
    return [r, i];
  }
  setOutput(t, e, s, o) {
    if (s.length === 0)
      return;
    const r = this.values, i = s;
    let a = o.slice();
    a = a.slice(t + 1);
    const l = H(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      X(() => {
        const g = P(u, f);
        u = er(g, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let g = f < c ? e[f] : -1;
      if (g === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const m = r.subarray(h * l), b = i.subarray(d * l), x = (p - d) * l;
        sg(b, m, x);
      }
      if (f >= c) {
        const m = s.length;
        g = Math.floor(m / l);
      }
      if (g > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, g * l).fill(this.defaultValue[0]), p = g;
        else
          for (; g > p; ) {
            const m = i.slice(p * l);
            sg(m, u, l), ++p;
          }
      g < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
};
function sg(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function og(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function WE(n, t, e, s, o, r, i, a, l, c) {
  return new EE(n, t, e, s, o, r, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ME(n, t, e, s) {
  const o = n === t, r = n < t && e < 0, i = t < n && e > 1;
  if (o || r || i)
    return be(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = be(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DE = Nr((n) => 1 / Math.sqrt(n)), FE = $r(Ki, DE), zE = {
  kernelName: Ki,
  backendName: "cpu",
  kernelFunc: FE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Kr(n, t, e, s, o, r, i, a, l, c) {
  const u = [s / o, o], h = n.values, d = t.values;
  if (s === 0)
    return Nt(e, t.dtype);
  const p = Nt(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < r; f++) {
    const g = [];
    let m = 0;
    for (let b = 0; b < i; b++) {
      const x = h[f * i + b];
      g.push(x), m += x * a[b];
    }
    if (m < 0 || m >= s / o)
      throw new Error(`Invalid indices: ${g} does not index into ${e}`);
    for (let b = 0; b < o; b++)
      c ? p.values[m * o + b] += d[f * o + b] : p.values[m * o + b] = t.rank === 0 ? d[0] : d[f * o + b];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t1 = Yt(Yi, (n) => 1 / (1 + Math.exp(-n))), VE = {
  kernelName: Yi,
  backendName: "cpu",
  kernelFunc: t1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PE(n, t, e, s, o) {
  const r = Xc(s, t, e), i = H(e), a = gt(s);
  if (r) {
    const h = Oc(t, a);
    return o === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = o === "string" ? Rs(n) : n, c = Nt(s, o, l), u = Nt(e, o);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, g) => f + t[g]);
    u.set(c.get(...p), ...d);
  }
  return o === "string" ? wf(u.values) : u.values;
}
function Mo(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, size: i } = s;
  bt(o, "slice");
  const [a, l] = Ac(o, r, i);
  Jd(o, a, l);
  const c = e.data.get(o.dataId).values, u = PE(c, a, l, o.shape, o.dtype);
  return e.makeTensorInfo(l, o.dtype, u);
}
const XE = {
  kernelName: Gc,
  backendName: "cpu",
  kernelFunc: Mo
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OE(n, t, e, s, o, r, i) {
  const a = t[0], l = r[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(lf(a));
    const m = Ot(e, 0), b = Ot(o, 0);
    return [
      m,
      [0, h],
      b,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let m = 0; m < a; ++m) {
    const b = n[m * h];
    if (b < 0)
      throw new Error(cf(m, b));
    if (b >= l)
      throw new Error(uf(m, b, l));
    ++f[b], d = d && b >= p, p = b;
  }
  let g = !0;
  for (let m = 0; m < l; ++m) {
    const b = f[m] === 0;
    c[m] = b, g = g && !b, f[m] = Math.max(f[m], 1), m > 0 && (f[m] += f[m - 1]);
  }
  if (g && d) {
    const m = n, b = s;
    for (let x = 0; x < a; ++x)
      u[x] = x;
    return [
      m,
      [a, h],
      b,
      c,
      u
    ];
  } else {
    const m = f[l - 1], b = Ot(e, m * h), x = Ot(o, m), w = new Array(l).fill(0);
    for (let y = 0; y < a; ++y) {
      const I = n[y * h], v = w[I], T = (I === 0 ? 0 : f[I - 1]) + v;
      w[I]++;
      for (let k = 0; k < h; ++k)
        b[T * h + k] = n[y * h + k];
      x[T] = s[y], u[y] = T;
    }
    for (let y = 0; y < l; ++y)
      if (w[y] === 0) {
        const v = y === 0 ? 0 : f[y - 1];
        b[v * h + 0] = y;
        for (let T = 1; T < h; ++T)
          b[v * h + T] = 0;
        x[v] = i;
      }
    return [
      b,
      [m, h],
      x,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AE(n, t, e, s, o) {
  const r = H(s), i = t[0], a = o.length, l = [];
  let c = 1, u = -1;
  for (let m = 0; m < a; ++m) {
    const b = o[m];
    if (b === -1) {
      if (u !== -1)
        throw new Error(hf(u, m));
      u = m, l.push(1);
    } else {
      if (b < 0)
        throw new Error(df(m, b));
      c *= b, l.push(b);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(pf());
    const m = Math.trunc(r / c);
    if (c * m !== r)
      throw new Error(ff(s, l));
    l[u] = m;
  }
  if (H(l) !== r)
    throw new Error(mf(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let m = d - 2; m >= 0; --m)
      p[m] = p[m + 1] * s[m + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let m = a - 2; m >= 0; --m)
      f[m] = f[m + 1] * l[m + 1];
  }
  const g = Ot(e, i * a);
  for (let m = 0; m < i; ++m) {
    let b = 0;
    for (let x = 0; x < d; ++x)
      b += n[m * d + x] * p[x];
    for (let x = 0; x < a; ++x)
      g[m * a + x] = Math.trunc(b / f[x]), b %= f[x];
  }
  return [g, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function e1(n, t, e, s, o, r = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? o[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(qr());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, y) => w * y, 1), f = Ot(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(qr());
  let g = 0, m = 1, b = 0, x = o[g];
  for (; ; ) {
    let w = 0;
    if (m < a) {
      if (w = o[m], x === w) {
        ++m;
        continue;
      }
      if (x >= w)
        throw new Error(gf());
    }
    if (x < 0 || x >= h)
      throw new Error(bf(x, h));
    x > b && f.fill(i, b * c, x * c);
    for (let y = g; y < m; ++y) {
      const I = s[y];
      if (I < 0 || I >= l[0])
        throw new Error(xf(y, s[y], l[0]));
      for (let v = 0; v < c; v++)
        f[x * c + v] += n[I * c + v];
    }
    if (r)
      for (let y = 0; y < c; y++)
        f[x * c + y] /= m - g;
    if (g = m, ++m, b = x + 1, x = w, m > a)
      break;
  }
  return b < h && f.fill(i, b * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZE = Yt(Qi, (n) => Math.sqrt(n)), KE = {
  kernelName: Qi,
  backendName: "cpu",
  kernelFunc: ZE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BE = Se((n, t) => {
  const e = n - t;
  return e * e;
}), HE = ze(Ji, BE), _E = {
  kernelName: Ji,
  backendName: "cpu",
  kernelFunc: HE
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UE(n, t, e, s) {
  const o = Nt(n, t.dtype);
  for (let r = 0; r < o.size; r++) {
    const i = o.indexToLoc(r), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    o.set(t.get(...a), ...i);
  }
  return o;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let YE = class {
  constructor(t, e, s, o, r, i) {
    this.separator = An(t), this.nGramWidths = e, this.leftPad = An(s), this.rightPad = An(o), this.padWidth = r, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, o, r, i) {
    for (let a = 0; a < r; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (r - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let x = 0; x < h; ++x)
        p += t[d + x].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[o + a] = new Uint8Array(p);
      const g = s[o + a];
      let m = 0;
      const b = (x) => x.forEach((w) => g[m++] = w);
      for (let x = 0; x < c; ++x)
        b(this.leftPad), b(this.separator);
      for (let x = 0; x < h - 1; ++x)
        b(t[d + x]), b(this.separator);
      if (h > 0) {
        b(t[d + h - 1]);
        for (let x = 0; x < u; ++x)
          b(this.separator), b(this.rightPad);
      } else {
        for (let x = 0; x < u - 1; ++x)
          b(this.rightPad), b(this.separator);
        b(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(t, e) {
    const s = t.length, o = e.length;
    if (o > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < o; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const r = o - 1, i = Ot("int32", o);
    if (s === 0 || o === 0) {
      const l = new Array(s);
      for (let c = 0; c <= r; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= r; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[r]);
    for (let l = 0; l < r; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
};
function jE(n, t, e, s, o, r, i, a) {
  return new YE(e, s, o, r, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QE(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let r = 0; r < n.length; ++r)
      s.push(n.subarray(r, r + 1));
    return;
  }
  if (t.length === 1) {
    const r = t[0];
    let i = n.indexOf(r);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(r);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let o = 0;
  for (let r = 0; r < n.length + 1; r++)
    if (r === n.length || t.indexOf(n[r]) !== -1) {
      const i = n.subarray(o, r);
      (!e || i.length !== 0) && s.push(i), o = r + 1;
    }
}
function JE(n, t, e) {
  const s = n.length, o = [];
  let r = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = o.length;
    QE(n[d], t, e, o);
    const f = o.length - p;
    a[d] = f, r += f, i = Math.max(i, f);
  }
  const l = Ot("int32", r * 2), c = new Array(r), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = o[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qE(n, t) {
  const e = Ot("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = Ad(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t3 = Se((n, t) => n - t), e3 = Hf((n, t, e, s) => ({ real: n - e, imag: t - s })), _f = ze(qi, t3, e3), n3 = {
  kernelName: qi,
  backendName: "cpu",
  kernelFunc: _f
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s3(n, t) {
  const e = new Array(n.rank);
  for (let o = 0; o < e.length; o++)
    e[o] = n.shape[o] * t[o];
  const s = Nt(e, n.dtype);
  for (let o = 0; o < s.values.length; ++o) {
    const r = s.indexToLoc(o), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = r[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[o] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Br = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function n1(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      n1(n, t, d, p);
    }
    const o = n[t];
    let r = e, i = s;
    for (cn(n, e, t), Br(n[s], o) > 0 && cn(n, e, s); r < i; ) {
      for (cn(n, r, i), r++, i--; Br(n[r], o) < 0; )
        r = r + 1;
      for (; Br(n[i], o) > 0; )
        i = i - 1;
    }
    Br(n[e], o) === 0 ? cn(n, e, i) : (i = i + 1, cn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function o3(n, t, e, s, o) {
  const r = t[t.length - 1], [i, a] = [n.length / r, r], l = he(e, i * s), c = he("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((x, w) => f[w] = { value: x, index: w }), s < f.length && (n1(f, s), f = f.slice(0, s)), o && f.sort(Br);
    const g = h * s, m = l.subarray(g, g + s), b = c.subarray(g, g + s);
    for (let x = 0; x < s; x++)
      m[x] = f[x].value, b[x] = f[x].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    Nt(u, e, l),
    Nt(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function r3(n, t, e, s) {
  const o = Dt(t, e)[0], r = [1, e[0], 1];
  for (let f = 0; f < o; f++)
    r[0] *= e[f];
  r[1] = e[o];
  for (let f = o + 1; f < e.length; f++)
    r[2] *= e[f];
  const i = {}, a = new Int32Array(e[o]), l = new Fe(r, s, n), c = [], u = r[0] === 1 && r[2] === 1;
  for (let f = 0; f < e[o]; f++) {
    let g;
    if (u)
      g = n[f].toString();
    else {
      const m = [];
      for (let b = 0; b < r[0]; b++)
        for (let x = 0; x < r[2]; x++)
          m.push(l.get(b, f, x));
      g = m.join(",");
    }
    if (i[g] !== void 0)
      a[f] = i[g];
    else {
      const m = Object.keys(i).length;
      i[g] = m, a[f] = m, c.push(f);
    }
  }
  const h = r.slice();
  h[1] = Object.keys(i).length;
  const d = new Fe(h, s);
  c.forEach((f, g) => {
    for (let m = 0; m < r[0]; m++)
      for (let b = 0; b < r[2]; b++)
        d.set(l.get(m, f, b), m, g, b);
  });
  const p = e.slice();
  return p[o] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Db(
  "cpu",
  () => new pu(),
  1
  /* priority */
);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const s1 = Yt(Ci, (n) => n >= 0 ? n : Math.exp(n) - 1), i3 = {
  kernelName: Ci,
  backendName: "cpu",
  kernelFunc: s1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function o1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { alpha: r } = s;
  bt([o], "leakyRelu");
  const i = H(o.shape), a = e.data.get(o.dataId).values, l = he("float32", i);
  for (let c = 0; c < a.length; c++)
    l[c] = a[c] < 0 ? r * a[c] : a[c];
  return e.makeTensorInfo(o.shape, "float32", l);
}
const a3 = {
  kernelName: oc,
  backendName: "cpu",
  kernelFunc: o1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const l3 = Se((n, t) => n < 0 ? t * n : n);
function r1(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: o } = t;
  bt([s, o], "prelu");
  const r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, [a, l] = l3(s.shape, o.shape, r, i, "float32");
  return e.makeTensorInfo(l, "float32", a);
}
const c3 = {
  kernelName: vc,
  backendName: "cpu",
  kernelFunc: r1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const i1 = Yt(Oi, (n) => Math.max(0, n)), u3 = {
  kernelName: Oi,
  backendName: "cpu",
  kernelFunc: i1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a1 = Yt(Ai, (n) => Math.min(Math.max(0, n), 6)), h3 = {
  kernelName: Ai,
  backendName: "cpu",
  kernelFunc: a1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kl(n, t, e, s, o) {
  if (e === "linear")
    return xs({ inputs: { x: t }, backend: n });
  if (e === "relu")
    return i1({ inputs: { x: t }, backend: n });
  if (e === "elu")
    return s1({ inputs: { x: t }, backend: n });
  if (e === "relu6")
    return a1({ inputs: { x: t }, backend: n });
  if (e === "prelu")
    return r1({ inputs: { x: t, alpha: s }, backend: n });
  if (e === "leakyrelu")
    return o1({ inputs: { x: t }, backend: n, attrs: { alpha: o } });
  if (e === "sigmoid")
    return t1({ inputs: { x: t }, backend: n });
  throw new Error(`Activation ${e} has not been implemented for the CPU backend.`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ne(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { shape: r } = s, i = H(o.shape), a = Bh(r, i), l = H(a);
  S(i === l, () => `The new shape (${a}) has ${l} elements and the old shape (${o.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`), e.incRef(o.dataId);
  const c = e.data.get(o.dataId);
  if (c.complexTensorInfos != null) {
    const u = c.complexTensorInfos.real, h = c.complexTensorInfos.imag;
    u.shape = a, h.shape = a;
  }
  return { dataId: o.dataId, shape: a, dtype: o.dtype };
}
const d3 = {
  kernelName: kc,
  backendName: "cpu",
  kernelFunc: ne
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function l1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r } = t, { transposeA: i, transposeB: a } = s;
  bt([o, r], "matMul");
  const l = o.shape.length, c = r.shape.length, u = i ? o.shape[l - 2] : o.shape[l - 1], h = a ? r.shape[c - 1] : r.shape[c - 2], d = i ? o.shape[l - 1] : o.shape[l - 2], p = a ? r.shape[c - 2] : r.shape[c - 1], f = o.shape.slice(0, -2), g = r.shape.slice(0, -2), m = H(f), b = H(g), w = Rt(o.shape.slice(0, -2), r.shape.slice(0, -2)).concat([d, p]);
  S(u === h, () => `Error in matMul: inner shapes (${u}) and (${h}) of Tensors with shapes ${o.shape} and ${r.shape} and transposeA=${i} and transposeB=${a} must match.`);
  const y = i ? [m, u, d] : [m, d, u], I = a ? [b, p, h] : [b, h, p], v = ne({ inputs: { x: o }, backend: e, attrs: { shape: y } }), T = ne({ inputs: { x: r }, backend: e, attrs: { shape: I } }), k = i ? v.shape[1] : v.shape[2], $ = i ? v.shape[2] : v.shape[1], G = a ? T.shape[1] : T.shape[2], z = Math.max(m, b), A = e.data.get(v.dataId).values, Z = e.data.get(T.dataId).values, _ = gt(v.shape), K = gt(T.shape), [U, q, j] = i ? [_[0], 1, _[1]] : [_[0], _[1], 1], [tt, nt, st] = a ? [1, K[1], K[0]] : [K[1], 1, K[0]], at = $ * G, rt = Nt([z, $, G], v.dtype), ct = rt.values, lt = e.blockSize;
  for (let pt = 0; pt < z; pt++)
    for (let ft = 0; ft < $; ft += lt)
      for (let vt = 0; vt < G; vt += lt)
        for (let kt = 0; kt < k; kt += lt) {
          const Lt = Math.min(ft + lt, $), Gt = Math.min(vt + lt, G), Zt = Math.min(kt + lt, k);
          for (let jt = ft; jt < Lt; jt++)
            for (let Ht = vt; Ht < Gt; Ht++) {
              let qt = 0;
              for (let Bt = kt; Bt < Zt; Bt++) {
                const ae = Math.min(pt, m - 1) * U, de = Math.min(pt, b - 1) * st, Qn = A[ae + jt * q + Bt * j], M = Z[Bt * tt + Ht * nt + de];
                qt += Qn * M;
              }
              ct[pt * at + (jt * G + Ht)] += qt;
            }
        }
  return e.disposeIntermediateTensorInfo(v), e.disposeIntermediateTensorInfo(T), e.makeTensorInfo(w, rt.dtype, rt.values);
}
const p3 = {
  kernelName: Zl,
  backendName: "cpu",
  kernelFunc: l1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  let d, p, f;
  const g = [];
  d = l1({ inputs: { a: o, b: r }, attrs: { transposeA: l, transposeB: c }, backend: e }), i && (p = hr({ inputs: { a: d, b: i }, backend: e }), g.push(d), d = p), u && (f = kl(e, d, u, a, h), g.push(d), d = f);
  for (const b of g)
    e.disposeIntermediateTensorInfo(b);
  return d;
}
const m3 = {
  kernelName: sl,
  backendName: "cpu",
  kernelFunc: f3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const g3 = Yt(ci, (n) => Math.acos(n)), b3 = {
  kernelName: ci,
  backendName: "cpu",
  kernelFunc: g3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const x3 = Yt(ui, (n) => Math.acosh(n)), y3 = {
  kernelName: ui,
  backendName: "cpu",
  kernelFunc: x3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w3(n) {
  const { inputs: t, backend: e } = n, s = t;
  bt(t, "addN");
  const o = s.map((a) => e.data.get(a.dataId).values), r = Nt(s[0].shape, s[0].dtype), i = r.values;
  for (let a = 0; a < s.length; a++) {
    const l = o[a];
    for (let c = 0; c < i.length; c++)
      i[c] += l[c];
  }
  return e.makeTensorInfo(r.shape, r.dtype, r.values);
}
const I3 = {
  kernelName: jh,
  backendName: "cpu",
  kernelFunc: w3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function C3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  bt(o, "all");
  const a = Dt(r, o.shape);
  let l = a;
  const c = me(l, o.shape.length);
  let u = o;
  c != null && (u = rn({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = Ie(l.length, o.shape.length)), Oe("all", l, u.shape.length);
  const [h, d] = Ge(u.shape, l), p = H(d), f = be(H(h), u.dtype), g = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = g[x];
    for (let y = 0; y < p; ++y) {
      const I = g[x + y];
      w = w && I;
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const m = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const b = we(h, a), x = ne({ inputs: { x: m }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(m), x;
  }
  return m;
}
const v3 = {
  kernelName: Qh,
  backendName: "cpu",
  kernelFunc: C3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function S3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  bt(o, "any");
  const a = Dt(r, o.shape);
  let l = a;
  const c = me(l, o.shape.length);
  let u = o;
  c != null && (u = rn({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = Ie(l.length, o.shape.length)), Oe("any", l, u.shape.length);
  const [h, d] = Ge(u.shape, l), p = H(d), f = be(H(h), u.dtype), g = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = g[x];
    for (let y = 0; y < p; ++y) {
      const I = g[x + y];
      w = w || I;
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const m = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const b = we(h, a), x = ne({ inputs: { x: m }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(m), x;
  }
  return m;
}
const k3 = {
  kernelName: Jh,
  backendName: "cpu",
  kernelFunc: S3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function T3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  bt(o, "argMax");
  let i = Dt(r, o.shape);
  const a = me(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = rn({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = Ie(i.length, l.shape.length)), i = [i[0]], Oe("argMax", i, l.shape.length);
  const [u, h] = Ge(l.shape, i), d = H(u), p = be(d, "int32"), f = H(h), g = e.data.get(l.dataId).values;
  for (let m = 0; m < p.length; ++m) {
    const b = m * f;
    let x = g[b], w = 0;
    for (let y = 0; y < f; ++y) {
      const I = g[b + y];
      I > x && (x = I, w = y);
    }
    p[m] = w;
  }
  return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), e.makeTensorInfo(u, "int32", p);
}
const N3 = {
  kernelName: Pl,
  backendName: "cpu",
  kernelFunc: T3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  bt(o, "argMin");
  let i = Dt(r, o.shape);
  const a = me(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = rn({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = Ie(i.length, l.shape.length)), i = [i[0]], Oe("argMin", i, l.shape.length);
  const [u, h] = Ge(l.shape, i), d = H(u), p = be(d, "int32"), f = H(h), g = e.data.get(l.dataId).values;
  for (let m = 0; m < p.length; ++m) {
    const b = m * f;
    let x = g[b], w = 0;
    for (let y = 0; y < f; ++y) {
      const I = g[b + y];
      I < x && (x = I, w = y);
    }
    p[m] = w;
  }
  return c.forEach((m) => e.disposeIntermediateTensorInfo(m)), e.makeTensorInfo(u, "int32", p);
}
const R3 = {
  kernelName: Xl,
  backendName: "cpu",
  kernelFunc: $3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G3 = Yt(hi, (n) => Math.asin(n)), L3 = {
  kernelName: hi,
  backendName: "cpu",
  kernelFunc: G3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E3 = Yt(di, (n) => Math.asinh(n)), W3 = {
  kernelName: di,
  backendName: "cpu",
  kernelFunc: E3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M3 = Yt(pi, (n) => Math.atan(n)), D3 = {
  kernelName: pi,
  backendName: "cpu",
  kernelFunc: M3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const F3 = Se((n, t) => Math.atan2(n, t)), z3 = ze(mi, F3), V3 = {
  kernelName: mi,
  backendName: "cpu",
  kernelFunc: z3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P3 = Yt(fi, (n) => Math.atanh(n)), X3 = {
  kernelName: fi,
  backendName: "cpu",
  kernelFunc: P3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Uf(n, t, e, s, o, r) {
  const i = o.strideHeight, a = o.strideWidth, l = o.dilationHeight, c = o.dilationWidth, u = o.effectiveFilterHeight, h = o.effectiveFilterWidth, d = o.padInfo.top, p = o.padInfo.left, f = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, g = Nt(o.outShape, e), m = g.values, b = o.outShape[1] * o.outShape[2] * o.outShape[3], x = o.outShape[2] * o.outShape[3], w = o.outShape[3];
  for (let y = 0; y < o.batchSize; ++y) {
    const I = y * b, v = y * s[0];
    for (let T = 0; T < o.inChannels; ++T)
      for (let k = 0; k < o.outHeight; ++k) {
        const $ = k * i - d, G = Math.max(0, $), z = Math.min(o.inHeight, u + $), A = I + k * x;
        for (let Z = 0; Z < o.outWidth; ++Z) {
          const _ = Z * a - p, K = Math.max(0, _), U = Math.min(o.inWidth, h + _);
          let q = f, j = 0, tt = 0;
          for (let st = G; st < z; st += l) {
            const at = v + st * s[1];
            for (let rt = K; rt < U; rt += c) {
              const ct = at + rt * s[2], lt = n[ct + T];
              r === "max" && lt > q ? q = lt : r === "avg" && (j += lt, tt++);
            }
            if (isNaN(q))
              break;
          }
          const nt = A + Z * w + T;
          m[nt] = r === "avg" ? j / tt : q;
        }
      }
  }
  return g;
}
function c1(n, t, e, s, o = !1, r = !1) {
  const i = Nt(s.outShape, "int32"), a = s.strideHeight, l = s.strideWidth, c = s.dilationHeight, u = s.dilationWidth, h = s.effectiveFilterHeight, d = s.effectiveFilterWidth, p = s.padInfo.top, f = s.padInfo.left, g = Nt(t, e, n);
  for (let m = 0; m < s.batchSize; ++m)
    for (let b = 0; b < s.inChannels; ++b)
      for (let x = 0; x < s.outHeight; ++x) {
        const w = x * a - p;
        let y = w;
        for (; y < 0; )
          y += c;
        const I = Math.min(s.inHeight, h + w);
        for (let v = 0; v < s.outWidth; ++v) {
          const T = v * l - f;
          let k = T;
          for (; k < 0; )
            k += u;
          const $ = Math.min(s.inWidth, d + T);
          let G = Number.NEGATIVE_INFINITY, z = -1;
          for (let A = y; A < I; A += c) {
            const Z = A - w;
            for (let _ = k; _ < $; _ += u) {
              const K = _ - T, U = g.get(m, A, _, b);
              U > G && (G = U, o ? z = r ? ((m * s.inHeight + A) * s.inWidth + _) * s.inChannels + b : (A * s.inWidth + _) * s.inChannels + b : z = Z * d + K);
            }
          }
          i.set(z, m, x, v, b);
        }
      }
  return i;
}
function u1(n, t, e, s, o, r) {
  const i = o.strideDepth, a = o.strideHeight, l = o.strideWidth, c = o.dilationDepth, u = o.dilationHeight, h = o.dilationWidth, d = o.effectiveFilterDepth, p = o.effectiveFilterHeight, f = o.effectiveFilterWidth, g = o.padInfo.front, m = o.padInfo.top, b = o.padInfo.left, x = r === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, w = Nt(o.outShape, e), y = w.values, I = o.outShape[1] * o.outShape[2] * o.outShape[3] * o.outShape[4], v = o.outShape[2] * o.outShape[3] * o.outShape[4], T = o.outShape[3] * o.outShape[4], k = o.outShape[4];
  for (let $ = 0; $ < o.batchSize; ++$) {
    const G = $ * I, z = $ * s[0];
    for (let A = 0; A < o.inChannels; ++A)
      for (let Z = 0; Z < o.outDepth; ++Z) {
        const _ = Z * i - g;
        let K = _;
        for (; K < 0; )
          K += c;
        const U = Math.min(o.inDepth, d + _), q = G + Z * v;
        for (let j = 0; j < o.outHeight; ++j) {
          const tt = j * a - m;
          let nt = tt;
          for (; nt < 0; )
            nt += u;
          const st = Math.min(o.inHeight, p + tt), at = q + j * T;
          for (let rt = 0; rt < o.outWidth; ++rt) {
            const ct = rt * l - b;
            let lt = ct;
            for (; lt < 0; )
              lt += h;
            const pt = Math.min(o.inWidth, f + ct), ft = at + rt * k;
            let vt = x, kt = 0, Lt = 0;
            for (let Zt = K; Zt < U; Zt += c) {
              const jt = z + Zt * s[1];
              for (let Ht = nt; Ht < st; Ht += u) {
                const qt = jt + Ht * s[2];
                for (let Bt = lt; Bt < pt; Bt += h) {
                  const ae = qt + Bt * s[3], de = n[ae + A];
                  if (r === "max" && de > vt ? vt = de : r === "avg" && (kt += de, Lt++), isNaN(vt))
                    break;
                }
                if (isNaN(vt))
                  break;
              }
              if (isNaN(vt))
                break;
            }
            const Gt = ft + A;
            y[Gt] = r === "avg" ? kt / Lt : vt;
          }
        }
      }
  }
  return w;
}
function O3(n, t) {
  const e = Nt(t.outShape, "int32"), s = t.strideDepth, o = t.strideHeight, r = t.strideWidth, i = t.dilationDepth, a = t.dilationHeight, l = t.dilationWidth, c = t.effectiveFilterDepth, u = t.effectiveFilterHeight, h = t.effectiveFilterWidth, d = t.padInfo.front, p = t.padInfo.top, f = t.padInfo.left;
  for (let g = 0; g < t.batchSize; ++g)
    for (let m = 0; m < t.inChannels; ++m)
      for (let b = 0; b < t.outDepth; ++b) {
        const x = b * s - d;
        let w = x;
        for (; w < 0; )
          w += i;
        const y = Math.min(t.inDepth, c + x);
        for (let I = 0; I < t.outHeight; ++I) {
          const v = I * o - p;
          let T = v;
          for (; T < 0; )
            T += a;
          const k = Math.min(t.inHeight, u + v);
          for (let $ = 0; $ < t.outWidth; ++$) {
            const G = $ * r - f;
            let z = G;
            for (; z < 0; )
              z += l;
            const A = Math.min(t.inWidth, h + G);
            let Z = Number.NEGATIVE_INFINITY, _ = -1;
            for (let K = w; K < y; K += i) {
              const U = K - x;
              for (let q = T; q < k; q += a) {
                const j = q - v;
                for (let tt = z; tt < A; tt += l) {
                  const nt = tt - G, st = n.get(g, K, q, tt, m);
                  st >= Z && (Z = st, _ = U * u * h + j * u + nt);
                }
              }
            }
            e.set(_, g, b, I, $, m);
          }
        }
      }
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function A3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  bt(o, "avgPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  S(Ke(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Un(o.shape, r, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && At(u.inShape, u.outShape))
    h = xs({ inputs: { x: o }, backend: e });
  else {
    const d = e.data.get(o.dataId).values, p = gt(o.shape), f = Uf(d, o.shape, o.dtype, p, u, "avg");
    h = e.makeTensorInfo(u.outShape, o.dtype, f.values);
  }
  return h;
}
const Z3 = {
  kernelName: Ol,
  backendName: "cpu",
  kernelFunc: A3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function K3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  bt(o, "avgPool3d");
  const u = Es(o.shape, r, i, 1, a, l, c), h = e.data.get(o.dataId).values, d = u1(h, o.shape, o.dtype, gt(o.shape), u, "avg");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const B3 = {
  kernelName: Al,
  backendName: "cpu",
  kernelFunc: K3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  bt([o, r], "avgPool3DGrad");
  const u = Es(r.shape, i, a, 1, l, c), h = u.strideDepth, d = u.strideHeight, p = u.strideWidth, f = u.filterDepth, g = u.filterHeight, m = u.filterWidth, b = u.dilationDepth, x = u.dilationHeight, w = u.dilationWidth, y = u.effectiveFilterDepth, I = u.effectiveFilterHeight, v = u.effectiveFilterWidth, T = y - 1 - u.padInfo.front, k = v - 1 - u.padInfo.left, $ = I - 1 - u.padInfo.top, G = Nt(r.shape, "float32"), z = 1 / (f * g * m), A = e.bufferSync(o);
  for (let Z = 0; Z < u.batchSize; ++Z)
    for (let _ = 0; _ < u.inChannels; ++_)
      for (let K = 0; K < u.inDepth; ++K)
        for (let U = 0; U < u.inHeight; ++U)
          for (let q = 0; q < u.inWidth; ++q) {
            const j = K - T, tt = U - $, nt = q - k;
            let st = 0;
            for (let at = 0; at < y; at += b) {
              const rt = (j + at) / h;
              if (!(rt < 0 || rt >= u.outDepth || Math.floor(rt) !== rt))
                for (let ct = 0; ct < I; ct += x) {
                  const lt = (tt + ct) / d;
                  if (!(lt < 0 || lt >= u.outHeight || Math.floor(lt) !== lt))
                    for (let pt = 0; pt < v; pt += w) {
                      const ft = (nt + pt) / p;
                      if (ft < 0 || ft >= u.outWidth || Math.floor(ft) !== ft)
                        continue;
                      const vt = A.get(Z, rt, lt, ft, _);
                      st += vt;
                    }
                }
            }
            G.set(st * z, Z, K, U, q, _);
          }
  return e.makeTensorInfo(G.shape, G.dtype, G.values);
}
const _3 = {
  kernelName: td,
  backendName: "cpu",
  kernelFunc: H3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r;
  bt([o, r], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = Un(i.shape, a, l, 1, c), h = u.strideHeight, d = u.strideWidth, p = u.filterHeight, f = u.filterWidth, g = u.dilationHeight, m = u.dilationWidth, b = u.effectiveFilterHeight, x = u.effectiveFilterWidth, w = x - 1 - u.padInfo.left, y = b - 1 - u.padInfo.top, I = Nt(i.shape, "float32"), v = 1 / (p * f), T = e.data.get(o.dataId).values, k = Nt(o.shape, "float32", T);
  for (let $ = 0; $ < u.batchSize; ++$)
    for (let G = 0; G < u.inChannels; ++G)
      for (let z = 0; z < u.inHeight; ++z)
        for (let A = 0; A < u.inWidth; ++A) {
          const Z = z - y, _ = A - w;
          let K = 0;
          for (let U = 0; U < b; U += g) {
            const q = (Z + U) / h;
            if (!(q < 0 || q >= u.outHeight || Math.floor(q) !== q))
              for (let j = 0; j < x; j += m) {
                const tt = (_ + j) / d;
                if (tt < 0 || tt >= u.outWidth || Math.floor(tt) !== tt)
                  continue;
                const nt = k.get($, q, tt, G);
                K += nt;
              }
          }
          I.set(K * v, $, z, A, G);
        }
  return e.makeTensorInfo(I.shape, I.dtype, I.values);
}
const Y3 = {
  kernelName: qh,
  backendName: "cpu",
  kernelFunc: U3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, scale: r, offset: i, mean: a, variance: l } = t;
  S(a.shape.length === l.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), S(i == null || a.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), S(r == null || a.shape.length === r.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), bt([o, a, l, r, i], "batchNorm");
  let { varianceEpsilon: c } = s;
  c == null && (c = 1e-3);
  const u = e.data.get(o.dataId).values, h = e.data.get(a.dataId).values, d = e.data.get(l.dataId).values, p = r ? e.data.get(r.dataId).values : new Float32Array([1]), f = i ? e.data.get(i.dataId).values : new Float32Array([0]), g = new Float32Array(u.length), m = f.length, b = p.length, x = d.length, w = h.length;
  let y = 0, I = 0, v = 0, T = 0;
  for (let k = 0; k < u.length; ++k)
    g[k] = f[y++] + (u[k] - h[I++]) * p[v++] / Math.sqrt(d[T++] + c), y >= m && (y = 0), I >= w && (I = 0), v >= b && (v = 0), T >= x && (T = 0);
  return e.makeTensorInfo(o.shape, o.dtype, g);
}
const Q3 = {
  kernelName: ec,
  backendName: "cpu",
  kernelFunc: j3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J3(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, crops: i } = s;
  bt([o], "batchToSpaceND");
  const a = r.reduce((b, x) => b * x), l = da(o.shape, r, a), c = pa(l.length, r.length), u = fa(o.shape, r, a), h = Hp(i, r.length), d = _p(u, i, r.length), p = ne({ inputs: { x: o }, backend: e, attrs: { shape: l } }), f = rn({ inputs: { x: p }, backend: e, attrs: { perm: c } }), g = ne({ inputs: { x: f }, backend: e, attrs: { shape: u } }), m = Mo({
    inputs: { x: g },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(g), m;
}
const q3 = {
  kernelName: Kl,
  backendName: "cpu",
  kernelFunc: J3
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i } = s, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, c = Yy(a, l, r.dtype, r.shape, i);
  return e.makeTensorInfo([i], r.dtype, c);
}
const eW = {
  kernelName: ed,
  backendName: "cpu",
  kernelFunc: tW
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nW(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: o } = t, r = e.data.get(s.dataId).values, i = e.data.get(o.dataId).values, a = Rt(Array.from(r), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const sW = {
  kernelName: Jg,
  backendName: "cpu",
  kernelFunc: nW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oW = Yt(xi, (n, t) => {
  const e = t;
  return n > e.clipValueMax ? e.clipValueMax : n < e.clipValueMin ? e.clipValueMin : n;
}), rW = {
  kernelName: xi,
  backendName: "cpu",
  kernelFunc: oW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iW = (n) => {
  const { x: t } = n.inputs, e = n.backend, s = new Float32Array(H(t.shape)), o = e.data.get(t.dataId), r = o.complexTensorInfos.real, i = o.complexTensorInfos.imag, a = e.data.get(r.dataId).values, l = e.data.get(i.dataId).values;
  for (let c = 0; c < a.length; c++) {
    const u = a[c], h = l[c];
    s[c] = Math.hypot(u, h);
  }
  return e.makeOutput(s, t.shape, "float32");
}, aW = {
  kernelName: Bl,
  backendName: "cpu",
  kernelFunc: iW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dr(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.data.get(s.dataId).complexTensorInfos.imag, r = e.data.get(o.dataId).values;
  return e.makeTensorInfo(o.shape, o.dtype, r);
}
const lW = {
  kernelName: gd,
  backendName: "cpu",
  kernelFunc: dr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pr(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s, r = Dt(o, t[0].shape)[0], i = t.map((g) => g.shape);
  Pp(i, r);
  let a = ms(t.map((g) => g.shape), r);
  if (H(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((g) => H(g.shape) > 0);
  if (l.length === 1)
    return xs({ inputs: { x: l[0] }, backend: e });
  if (l[0].dtype === "complex64") {
    const g = l.map((y) => Wo({ inputs: { input: y }, backend: e })), m = l.map((y) => dr({ inputs: { input: y }, backend: e })), b = pr({ inputs: g, backend: e, attrs: { axis: r } }), x = pr({ inputs: m, backend: e, attrs: { axis: r } }), w = un({ inputs: { real: b, imag: x }, backend: e });
    return g.forEach((y) => e.disposeIntermediateTensorInfo(y)), m.forEach((y) => e.disposeIntermediateTensorInfo(y)), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(x), w;
  }
  const c = l.map((g) => {
    const b = [-1, H(g.shape.slice(r))];
    return ne({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  }), u = c.map((g) => ({ vals: e.data.get(g.dataId).values, shape: g.shape }));
  a = ms(
    c.map((g) => g.shape),
    1
    /* axis */
  );
  const h = c[0].shape[0] === 1, d = LL(u, a, t[0].dtype, h), p = ms(l.map((g) => g.shape), r), f = e.makeTensorInfo(p, t[0].dtype, d);
  return c.forEach((g) => e.disposeIntermediateTensorInfo(g)), f;
}
const cW = {
  kernelName: Hl,
  backendName: "cpu",
  kernelFunc: pr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function h1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s;
  bt([o, r], "conv2d");
  const h = Ws(l), d = Xe(o.shape, r.shape, i, c, a, u, !1, h), p = d.filterHeight, f = d.filterWidth, g = d.dilationHeight, m = d.dilationWidth, b = d.padInfo.left, x = d.padInfo.top, w = d.dataFormat === "channelsLast", y = new Fe(d.outShape, o.dtype), I = gt(o.shape), v = gt(r.shape), T = I[0], k = w ? I[1] : I[2], $ = w ? I[2] : 1, G = w ? 1 : I[1], z = y.strides[0], A = w ? y.strides[1] : y.strides[2], Z = w ? y.strides[2] : 1, _ = w ? 1 : y.strides[1], K = e.data.get(o.dataId).values, U = e.data.get(r.dataId).values, q = y.values;
  for (let j = 0; j < d.batchSize; ++j) {
    const tt = j * T, nt = j * z;
    for (let st = 0; st < d.outHeight; ++st) {
      const at = nt + st * A, rt = st * d.strideHeight - x;
      for (let ct = 0; ct < p; ++ct) {
        const lt = rt + ct * g;
        if (lt < 0 || lt >= d.inHeight)
          continue;
        const pt = ct * v[0], ft = tt + lt * k;
        for (let vt = 0; vt < d.outWidth; ++vt) {
          const kt = at + vt * Z, Lt = vt * d.strideWidth - b;
          for (let Gt = 0; Gt < f; ++Gt) {
            const Zt = Lt + Gt * m;
            if (Zt < 0 || Zt >= d.inWidth)
              continue;
            const jt = pt + Gt * v[1], Ht = ft + Zt * $;
            let qt = jt;
            for (let Bt = 0; Bt < d.inChannels; ++Bt) {
              const ae = K[Ht + Bt * G];
              for (let de = 0; de < d.outChannels; ++de)
                q[kt + de * _] += ae * U[qt + de];
              qt += d.outChannels;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, q);
}
const uW = {
  kernelName: _l,
  backendName: "cpu",
  kernelFunc: h1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s;
  bt([o, r], "conv2dBackpropFilter");
  const h = Ws(l), d = Xe(o.shape, u, i, 1, a, c, !1, h), { strideHeight: p, strideWidth: f, filterHeight: g, filterWidth: m } = d, b = d.dataFormat === "channelsLast", x = new Fe(d.filterShape, "float32"), w = d.padInfo.left, y = d.padInfo.top, I = e.data.get(o.dataId).values, v = e.data.get(r.dataId).values, T = new Fe(o.shape, o.dtype, I), k = new Fe(r.shape, r.dtype, v);
  for (let $ = 0; $ < g; ++$) {
    const G = Math.max(0, Math.ceil((y - $) / p)), z = Math.min(d.outHeight, (d.inHeight + y - $) / p);
    for (let A = 0; A < m; ++A) {
      const Z = Math.max(0, Math.ceil((w - A) / f)), _ = Math.min(d.outWidth, (d.inWidth + w - A) / f);
      for (let K = 0; K < d.inChannels; ++K)
        for (let U = 0; U < d.outChannels; ++U) {
          let q = 0;
          for (let j = 0; j < d.batchSize; ++j)
            for (let tt = G; tt < z; ++tt) {
              const nt = $ + tt * p - y;
              for (let st = Z; st < _; ++st) {
                const at = A + st * f - w;
                b ? q += T.get(j, nt, at, K) * k.get(j, tt, st, U) : q += T.get(j, K, nt, at) * k.get(j, U, tt, st);
              }
            }
          x.set(q, $, A, K, U);
        }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const dW = {
  kernelName: sd,
  backendName: "cpu",
  kernelFunc: hW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function pW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s;
  bt([o, r], "conv2dBackpropInput");
  const h = gt(r.shape), d = gt(o.shape);
  let p = Ws(c);
  const f = Xe(i, r.shape, a, 1, l, u, !1, p), g = new Fe(f.inShape, "float32"), m = g.values, b = e.data.get(o.dataId).values, x = e.data.get(r.dataId).values, [w, y, I] = h, { batchSize: v, filterHeight: T, filterWidth: k, inChannels: $, inHeight: G, inWidth: z, outChannels: A, outHeight: Z, outWidth: _, strideHeight: K, strideWidth: U } = f;
  p = f.dataFormat;
  const q = T - 1 - f.padInfo.top, j = k - 1 - f.padInfo.left, tt = p === "channelsLast", nt = g.strides[0], st = tt ? g.strides[1] : g.strides[2], at = tt ? g.strides[2] : 1, rt = tt ? 1 : g.strides[1], ct = d[0], lt = tt ? d[1] : d[2], pt = tt ? d[2] : 1, ft = tt ? 1 : d[1];
  for (let vt = 0; vt < v; ++vt)
    for (let kt = 0; kt < $; ++kt)
      for (let Lt = 0; Lt < G; ++Lt) {
        const Gt = Lt - q, Zt = Math.max(0, Math.ceil(Gt / K)), jt = Math.min(Z, (T + Gt) / K);
        for (let Ht = 0; Ht < z; ++Ht) {
          const qt = Ht - j, Bt = Math.max(0, Math.ceil(qt / U)), ae = Math.min(_, (k + qt) / U);
          let de = 0;
          for (let M = Zt; M < jt; ++M) {
            const C = M * K - Gt;
            for (let R = Bt; R < ae; ++R) {
              const E = R * U - qt, L = ct * vt + lt * M + pt * R, Q = w * (T - 1 - C) + y * (k - 1 - E) + I * kt;
              for (let O = 0; O < A; ++O) {
                const it = b[L + ft * O], mt = x[Q + O];
                de += it * mt;
              }
            }
          }
          const Qn = nt * vt + st * Lt + at * Ht + rt * kt;
          m[Qn] = de;
        }
      }
  return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
const fW = {
  kernelName: Ul,
  backendName: "cpu",
  kernelFunc: pW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s;
  bt([o, r], "conv3d");
  const c = Js(o.shape, r.shape, i, l, a), { filterDepth: u, filterHeight: h, filterWidth: d, dilationDepth: p, dilationHeight: f, dilationWidth: g, padInfo: m } = c, b = m.front, x = m.left, w = m.top, y = new Fe(c.outShape, o.dtype), I = e.data.get(o.dataId).values, v = e.data.get(r.dataId).values, T = y.values, k = gt(o.shape), $ = gt(r.shape);
  for (let G = 0; G < c.batchSize; ++G) {
    const z = G * k[0], A = G * y.strides[0];
    for (let Z = 0; Z < c.outDepth; ++Z) {
      const _ = A + Z * y.strides[1], K = Z * c.strideDepth - b;
      for (let U = 0; U < u; ++U) {
        const q = K + U * p;
        if (q < 0 || q >= c.inDepth)
          continue;
        const j = U * $[0], tt = z + q * k[1];
        for (let nt = 0; nt < c.outHeight; ++nt) {
          const st = _ + nt * y.strides[2], at = nt * c.strideHeight - w;
          for (let rt = 0; rt < h; ++rt) {
            const ct = at + rt * f;
            if (ct < 0 || ct >= c.inHeight)
              continue;
            const lt = j + rt * $[1], pt = tt + ct * k[2];
            for (let ft = 0; ft < c.outWidth; ++ft) {
              const vt = st + ft * c.outChannels, kt = ft * c.strideWidth - x;
              for (let Lt = 0; Lt < d; ++Lt) {
                const Gt = kt + Lt * g;
                if (Gt < 0 || Gt >= c.inWidth)
                  continue;
                const Zt = lt + Lt * $[2], jt = pt + Gt * c.inChannels;
                let Ht = Zt;
                for (let qt = 0; qt < c.inChannels; ++qt) {
                  const Bt = I[jt + qt];
                  for (let ae = 0; ae < c.outChannels; ++ae)
                    T[vt + ae] += Bt * v[Ht + ae];
                  Ht += c.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(y.shape, y.dtype, y.values);
}
const gW = {
  kernelName: Yl,
  backendName: "cpu",
  kernelFunc: mW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, filterShape: l } = s;
  bt([o, r], "conv3dBackpropFilterV2");
  const c = gt(o.shape), u = gt(r.shape), h = Js(o.shape, l, i, 1, a), d = h.strideDepth, p = h.strideHeight, f = h.strideWidth, g = h.filterDepth, m = h.filterHeight, b = h.filterWidth, x = new Fe(h.filterShape, "float32"), w = x.values, [y, I, v, T] = x.strides, k = e.data.get(r.dataId).values, [$, G, z, A] = u, Z = e.data.get(o.dataId).values, [_, K, U, q] = c, j = h.padInfo.front, tt = h.padInfo.left, nt = h.padInfo.top;
  for (let st = 0; st < g; ++st) {
    const at = Math.max(0, Math.ceil((j - st) / d)), rt = Math.min(h.outDepth, (h.inDepth + j - st) / d), ct = st * y;
    for (let lt = 0; lt < m; ++lt) {
      const pt = Math.max(0, Math.ceil((nt - lt) / p)), ft = Math.min(h.outHeight, (h.inHeight + nt - lt) / p), vt = lt * I + ct;
      for (let kt = 0; kt < b; ++kt) {
        const Lt = Math.max(0, Math.ceil((tt - kt) / f)), Gt = Math.min(h.outWidth, (h.inWidth + tt - kt) / f), Zt = kt * v + vt;
        for (let jt = 0; jt < h.inChannels; ++jt) {
          const Ht = jt * T + Zt;
          for (let qt = 0; qt < h.outChannels; ++qt) {
            let Bt = 0;
            for (let ae = 0; ae < h.batchSize; ++ae) {
              const de = ae * _, Qn = ae * $;
              for (let M = at; M < rt; ++M) {
                const R = (st + M * d - j) * K + de, E = M * G + Qn;
                for (let L = pt; L < ft; ++L) {
                  const O = (lt + L * p - nt) * U + R, it = L * z + E;
                  for (let mt = Lt; mt < Gt; ++mt) {
                    const Y = (kt + mt * f - tt) * q + O, Tt = mt * A + it;
                    Bt += Z[Y + jt] * k[Tt + qt];
                  }
                }
              }
            }
            w[Ht + qt] = Bt;
          }
        }
      }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
const xW = {
  kernelName: od,
  backendName: "cpu",
  kernelFunc: bW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { pad: i, strides: a, inputShape: l } = s;
  bt([o], "conv3dBackpropInputV2");
  const c = gt(o.shape), u = gt(r.shape), h = Js(l, r.shape, a, 1, i), d = new Fe(h.inShape, "float32"), p = d.values, [f, g, m, b] = d.strides, x = e.data.get(o.dataId).values, [w, y, I, v] = c, T = e.data.get(r.dataId).values, [k, $, G, z] = u, { batchSize: A, filterDepth: Z, filterHeight: _, filterWidth: K, inChannels: U, inDepth: q, inHeight: j, inWidth: tt, outChannels: nt, outDepth: st, outHeight: at, outWidth: rt, strideDepth: ct, strideHeight: lt, strideWidth: pt } = h, ft = Z - 1 - h.padInfo.front, vt = _ - 1 - h.padInfo.top, kt = K - 1 - h.padInfo.left;
  for (let Lt = 0; Lt < A; ++Lt)
    for (let Gt = 0; Gt < U; ++Gt)
      for (let Zt = 0; Zt < q; ++Zt) {
        const jt = Zt - ft, Ht = Math.max(0, Math.ceil(jt / ct)), qt = Math.min(st, (Z + jt) / ct);
        for (let Bt = 0; Bt < j; ++Bt) {
          const ae = Bt - vt, de = Math.max(0, Math.ceil(ae / lt)), Qn = Math.min(at, (_ + ae) / lt);
          for (let M = 0; M < tt; ++M) {
            const C = M - kt, R = Math.max(0, Math.ceil(C / pt)), E = Math.min(rt, (K + C) / pt);
            let L = 0;
            for (let Q = Ht; Q < qt; ++Q) {
              const O = Q * ct - jt;
              for (let it = de; it < Qn; ++it) {
                const mt = it * lt - ae;
                for (let Ct = R; Ct < E; ++Ct) {
                  const Y = Ct * pt - C, Tt = w * Lt + y * Q + I * it + v * Ct, Ft = k * (Z - 1 - O) + $ * (_ - 1 - mt) + G * (K - 1 - Y) + z * Gt;
                  for (let Le = 0; Le < nt; ++Le) {
                    const ke = x[Tt + Le], Ea = T[Ft + Le];
                    L += ke * Ea;
                  }
                }
              }
            }
            p[f * Lt + g * Zt + m * Bt + b * M + Gt] = L;
          }
        }
      }
  return e.makeTensorInfo(d.shape, d.dtype, d.values);
}
const wW = {
  kernelName: rd,
  backendName: "cpu",
  kernelFunc: yW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IW = Yt(yi, (n) => Math.cos(n)), CW = {
  kernelName: yi,
  backendName: "cpu",
  kernelFunc: IW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vW = Yt(wi, (n) => Math.cosh(n)), SW = {
  kernelName: wi,
  backendName: "cpu",
  kernelFunc: vW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, boxes: r, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, [u, h, d, p] = o.shape, f = r.shape[0], [g, m] = a, b = Nt([f, g, m, p], "float32"), x = e.data.get(r.dataId).values, w = e.data.get(i.dataId).values, y = e.data.get(o.dataId).values, I = gt(o.shape), v = gt(b.shape);
  for (let T = 0; T < f; T++) {
    const k = T * 4, $ = x[k], G = x[k + 1], z = x[k + 2], A = x[k + 3], Z = w[T];
    if (Z >= u)
      continue;
    const _ = g > 1 ? (z - $) * (h - 1) / (g - 1) : 0, K = m > 1 ? (A - G) * (d - 1) / (m - 1) : 0;
    for (let U = 0; U < g; U++) {
      const q = g > 1 ? $ * (h - 1) + U * _ : 0.5 * ($ + z) * (h - 1);
      if (q < 0 || q > h - 1) {
        for (let j = 0; j < m; j++)
          for (let tt = 0; tt < p; tt++) {
            const nt = tt + j * v[2] + U * v[1] + T * v[0];
            b.values[nt] = c;
          }
        continue;
      }
      if (l === "bilinear") {
        const j = Math.floor(q), tt = Math.ceil(q), nt = q - j;
        for (let st = 0; st < m; st++) {
          const at = m > 1 ? G * (d - 1) + st * K : 0.5 * (G + A) * (d - 1);
          if (at < 0 || at > d - 1) {
            for (let pt = 0; pt < p; pt++) {
              const ft = pt + st * v[2] + U * v[1] + T * v[0];
              b.values[ft] = c;
            }
            continue;
          }
          const rt = Math.floor(at), ct = Math.ceil(at), lt = at - rt;
          for (let pt = 0; pt < p; pt++) {
            let ft = pt + rt * I[2] + j * I[1] + Z * I[0];
            const vt = y[ft];
            ft = pt + ct * I[2] + j * I[1] + Z * I[0];
            const kt = y[ft];
            ft = pt + rt * I[2] + tt * I[1] + Z * I[0];
            const Lt = y[ft];
            ft = pt + ct * I[2] + tt * I[1] + Z * I[0];
            const Gt = y[ft], Zt = vt + (kt - vt) * lt, jt = Lt + (Gt - Lt) * lt;
            ft = pt + st * v[2] + U * v[1] + T * v[0], b.values[ft] = Zt + (jt - Zt) * nt;
          }
        }
      } else
        for (let j = 0; j < m; ++j) {
          const tt = m > 1 ? G * (d - 1) + j * K : 0.5 * (G + A) * (d - 1);
          if (tt < 0 || tt > d - 1) {
            for (let at = 0; at < p; at++) {
              const rt = at + j * v[2] + U * v[1] + T * v[0];
              b.values[rt] = c;
            }
            continue;
          }
          const nt = Math.round(tt), st = Math.round(q);
          for (let at = 0; at < p; at++) {
            const rt = at + nt * I[2] + st * I[1] + Z * I[0], ct = at + j * v[2] + U * v[1] + T * v[0];
            b.values[ct] = y[rt];
          }
        }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
const TW = {
  kernelName: ad,
  backendName: "cpu",
  kernelFunc: kW
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  bt(o, "cumprod");
  const l = me([r], o.shape.length);
  let c = o;
  l != null && (c = rn({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
  const u = Ie(1, o.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = nn(c.dtype, "int32"), d = Fl(H(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], g = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
  for (let b = 0; b < p.length; b += f)
    for (let x = 0; x < f; x++) {
      const w = g(b, x);
      if (x === 0)
        d[w] = i ? 1 : p[w];
      else {
        const y = g(b, x - 1);
        d[w] = i ? p[y] * d[y] : p[w] * d[y];
      }
    }
  const m = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const b = qs(l), x = rn({ inputs: { x: m }, backend: e, attrs: { perm: b } });
    return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(c), x;
  }
  return m;
}
const $W = {
  kernelName: id,
  backendName: "cpu",
  kernelFunc: NW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  bt(o, "cumsum");
  const l = me([r], o.shape.length);
  let c = o;
  l != null && (c = rn({ inputs: { x: o }, backend: e, attrs: { perm: l } }));
  const u = Ie(1, o.shape.length)[0];
  if (u !== c.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length - 1} but got axis=${u}`);
  const h = nn(c.dtype, "int32"), d = be(H(c.shape), h), p = e.data.get(c.dataId).values, f = c.shape[c.shape.length - 1], g = a ? (b, x) => b + f - x - 1 : (b, x) => b + x;
  for (let b = 0; b < p.length; b += f)
    for (let x = 0; x < f; x++) {
      const w = g(b, x);
      if (x === 0)
        d[w] = i ? 0 : p[w];
      else {
        const y = g(b, x - 1);
        d[w] = i ? p[y] + d[y] : p[w] + d[y];
      }
    }
  const m = e.makeTensorInfo(c.shape, h, d);
  if (l != null) {
    const b = qs(l), x = rn({ inputs: { x: m }, backend: e, attrs: { perm: b } });
    return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(c), x;
  }
  return m;
}
const GW = {
  kernelName: jl,
  backendName: "cpu",
  kernelFunc: RW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i, binaryOutput: a } = s;
  if (o.shape.length === 1) {
    const l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = Yy(l, c, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, u);
  } else if (o.shape.length === 2) {
    const l = e.bufferSync(o), c = e.bufferSync(r), u = NL(l, c, i, a);
    return e.makeTensorInfo(u.shape, r.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
const EW = {
  kernelName: qg,
  backendName: "cpu",
  kernelFunc: LW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockSize: r, dataFormat: i } = s;
  S(i === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);
  const a = o.shape[0], l = o.shape[1], c = o.shape[2], u = o.shape[3], h = l * r, d = c * r, p = u / (r * r), f = e.data.get(o.dataId).values, g = new Float32Array(a * h * d * p);
  let m = 0;
  for (let b = 0; b < a; ++b)
    for (let x = 0; x < h; ++x) {
      const w = Math.floor(x / r), y = x % r;
      for (let I = 0; I < d; ++I) {
        const v = Math.floor(I / r), T = I % r, k = (y * r + T) * p;
        for (let $ = 0; $ < p; ++$) {
          const z = $ + k + u * (v + c * (w + l * b));
          g[m++] = f[z];
        }
      }
    }
  return e.makeTensorInfo([a, h, d, p], o.dtype, g);
}
const MW = {
  kernelName: ld,
  backendName: "cpu",
  kernelFunc: WW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function d1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  bt([o, r], "depthwiseConv2DNative");
  const u = gt(o.shape), h = gt(r.shape);
  let d = l;
  d == null && (d = [1, 1]), S(Ke(i, d), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);
  const p = Xe(
    o.shape,
    r.shape,
    i,
    d,
    a,
    c,
    !0
    /* depthwise */
  ), { filterHeight: f, filterWidth: g, dilationHeight: m, dilationWidth: b, padInfo: x } = p, w = x.left, y = x.top, I = p.outChannels / p.inChannels, v = new Fe(p.outShape, o.dtype), T = e.data.get(o.dataId).values, k = e.data.get(r.dataId).values, $ = v.values;
  for (let G = 0; G < p.batchSize; ++G) {
    const z = G * u[0], A = G * v.strides[0];
    for (let Z = 0; Z < p.outHeight; ++Z) {
      const _ = A + Z * v.strides[1], K = Z * p.strideHeight - y;
      for (let U = 0; U < f; ++U) {
        const q = K + U * m;
        if (q < 0 || q >= p.inHeight)
          continue;
        const j = U * h[0], tt = z + q * u[1];
        for (let nt = 0; nt < p.outWidth; ++nt) {
          const st = _ + nt * v.strides[2], at = nt * p.strideWidth - w;
          for (let rt = 0; rt < g; ++rt) {
            const ct = at + rt * b;
            if (ct < 0 || ct >= p.inWidth)
              continue;
            const lt = j + rt * h[1], pt = tt + ct * p.inChannels;
            let ft = st, vt = lt;
            for (let kt = 0; kt < p.inChannels; ++kt) {
              const Lt = T[pt + kt];
              for (let Gt = 0; Gt < I; ++Gt)
                $[ft + Gt] += Lt * k[vt + Gt];
              ft += I, vt += I;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(v.shape, v.dtype, v.values);
}
const DW = {
  kernelName: Ql,
  backendName: "cpu",
  kernelFunc: d1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s;
  bt([o, r], "depthwiseConv2dNativeBackpropFilter");
  const h = Xe(
    o.shape,
    u,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), { strideHeight: d, strideWidth: p, filterHeight: f, filterWidth: g } = h, m = new Fe(h.filterShape, "float32"), b = h.padInfo.left, x = h.padInfo.top, w = h.outChannels / h.inChannels, y = e.data.get(o.dataId).values, I = new Fe(o.shape, o.dtype, y), v = e.data.get(r.dataId).values, T = new Fe(r.shape, r.dtype, v);
  for (let k = 0; k < f; ++k) {
    const $ = Math.max(0, Math.ceil((x - k) / d)), G = Math.min(h.outHeight, (h.inHeight + x - k) / d);
    for (let z = 0; z < g; ++z) {
      const A = Math.max(0, Math.ceil((b - z) / p)), Z = Math.min(h.outWidth, (h.inWidth + b - z) / p);
      for (let _ = 0; _ < h.outChannels; ++_) {
        const K = Math.trunc(_ / w), U = _ % w;
        let q = 0;
        for (let j = 0; j < h.batchSize; ++j)
          for (let tt = $; tt < G; ++tt) {
            const nt = k + tt * d - x;
            for (let st = A; st < Z; ++st) {
              const at = z + st * p - b;
              q += I.get(j, nt, at, K) * T.get(j, tt, st, _);
            }
          }
        m.set(q, k, z, K, U);
      }
    }
  }
  return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
const zW = {
  kernelName: cd,
  backendName: "cpu",
  kernelFunc: FW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s;
  bt([o, r], "depthwiseConv2DNativeBackpropInput");
  const h = gt(o.shape), d = gt(r.shape), p = Xe(
    u,
    r.shape,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), f = new Fe(p.inShape, "float32"), g = f.values, [m, b, x] = f.strides, w = e.data.get(o.dataId).values, [y, I, v] = h, T = e.data.get(r.dataId).values, [k, $, G] = d, { batchSize: z, filterHeight: A, filterWidth: Z, inChannels: _, inHeight: K, inWidth: U, outChannels: q, outHeight: j, outWidth: tt, strideHeight: nt, strideWidth: st } = p, at = A - 1 - p.padInfo.top, rt = Z - 1 - p.padInfo.left, ct = q / _;
  for (let lt = 0; lt < z; ++lt)
    for (let pt = 0; pt < _; ++pt)
      for (let ft = 0; ft < K; ++ft) {
        const vt = ft - at, kt = Math.max(0, Math.ceil(vt / nt)), Lt = Math.min(j, (A + vt) / nt);
        for (let Gt = 0; Gt < U; ++Gt) {
          const Zt = Gt - rt, jt = Math.max(0, Math.ceil(Zt / st)), Ht = Math.min(tt, (Z + Zt) / st);
          let qt = 0;
          for (let Bt = kt; Bt < Lt; ++Bt) {
            const ae = Bt * nt - vt;
            for (let de = jt; de < Ht; ++de) {
              const Qn = de * st - Zt, M = y * lt + I * Bt + v * de, C = k * (A - 1 - ae) + $ * (Z - 1 - Qn) + G * pt;
              for (let R = 0; R < ct; ++R) {
                const E = pt * ct + R, L = w[M + E], Q = T[C + R];
                qt += L * Q;
              }
            }
          }
          g[m * lt + b * ft + x * Gt + pt] = qt;
        }
      }
  return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
const PW = {
  kernelName: ud,
  backendName: "cpu",
  kernelFunc: VW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XW(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = H(s.shape), r = e.data.get(s.dataId).values, i = Nt([o, o], s.dtype), a = i.values;
  for (let c = 0; c < r.length; c++)
    a[c * o + c] = r[c];
  const l = [...s.shape, ...s.shape];
  return e.makeTensorInfo(l, i.dtype, i.values);
}
const OW = {
  kernelName: tb,
  backendName: "cpu",
  kernelFunc: XW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AW = {
  kernelName: Jl,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o } = n, { strides: r, pad: i, dilations: a } = e, l = t, c = l.data.get(s.dataId).values, u = s.shape.length, h = l.data.get(o.dataId).values, d = o.shape.length, { batchSize: p, inHeight: f, inWidth: g, inChannels: m, outHeight: b, outWidth: x, padInfo: w, strideHeight: y, strideWidth: I, filterHeight: v, filterWidth: T, dilationHeight: k, dilationWidth: $, outShape: G } = aa(s.shape, o.shape, r, i, "NHWC", a), z = H(G), A = G.length, Z = Ot(s.dtype, z);
    for (let K = 0; K < p; ++K)
      for (let U = 0; U < b; ++U) {
        const q = U * y - w.top;
        for (let j = 0; j < x; ++j) {
          const tt = j * I - w.left;
          for (let nt = 0; nt < m; ++nt) {
            let st = Number.MIN_SAFE_INTEGER;
            for (let rt = 0; rt < v; ++rt) {
              const ct = q + rt * k;
              if (ct >= 0 && ct < f)
                for (let lt = 0; lt < T; ++lt) {
                  const pt = tt + lt * $;
                  if (pt >= 0 && pt < g) {
                    const ft = pn([K, ct, pt, nt], u, gt(s.shape)), vt = pn([rt, lt, nt], d, gt(o.shape)), kt = c[ft] + h[vt];
                    kt > st && (st = kt);
                  }
                }
            }
            const at = pn([K, U, j, nt], A, gt(G));
            Z[at] = st;
          }
        }
      }
    return { dataId: l.write(Ls(Z, s.dtype), G, s.dtype), shape: G, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ZW = {
  kernelName: Qu,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o, dy: r } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = On(s.shape, c.data.get(s.dataId).values), h = On(o.shape, c.data.get(o.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: g, outHeight: m, outWidth: b, padInfo: x, strideHeight: w, strideWidth: y, filterHeight: I, filterWidth: v, dilationHeight: T, dilationWidth: k, outShape: $ } = aa(s.shape, o.shape, i, a, "NHWC", l);
    S(r.rank === $.length, () => `Error in ${Qu}, dy must have the same rank as output ${$.length}, but got ${r.rank}`);
    const G = On($, c.data.get(r.dataId).values), z = _h(o.shape, o.dtype);
    for (let Z = 0; Z < d; ++Z)
      for (let _ = 0; _ < m; ++_) {
        const K = _ * w - x.top;
        for (let U = 0; U < b; ++U) {
          const q = U * y - x.left;
          for (let j = 0; j < g; ++j) {
            let tt = Number.MIN_SAFE_INTEGER, nt = 0, st = 0;
            for (let at = 0; at < I; ++at) {
              const rt = K + at * T;
              if (rt >= 0 && rt < p)
                for (let ct = 0; ct < v; ++ct) {
                  const lt = q + ct * k;
                  if (lt >= 0 && lt < f) {
                    const pt = u[Z][rt][lt][j] + h[at][ct][j];
                    pt > tt && (tt = pt, nt = at, st = ct);
                  }
                }
            }
            z[nt][st][j] += G[Z][_][U][j];
          }
        }
      }
    return { dataId: c.write(Ls(z, s.dtype), o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KW = {
  kernelName: ju,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t, attrs: e }) => {
    const { x: s, filter: o, dy: r } = n, { strides: i, pad: a, dilations: l } = e, c = t, u = On(s.shape, c.data.get(s.dataId).values), h = On(o.shape, c.data.get(o.dataId).values), { batchSize: d, inHeight: p, inWidth: f, inChannels: g, outHeight: m, outWidth: b, padInfo: x, strideHeight: w, strideWidth: y, filterHeight: I, filterWidth: v, dilationHeight: T, dilationWidth: k, outShape: $ } = aa(s.shape, o.shape, i, a, "NHWC", l);
    S(r.rank === $.length, () => `Error in ${ju}, dy must have the same rank as output ${$.length}, but got ${r.rank}`);
    const G = On($, c.data.get(r.dataId).values), z = _h(s.shape, s.dtype);
    for (let Z = 0; Z < d; ++Z)
      for (let _ = 0; _ < m; ++_) {
        const K = _ * w - x.top;
        for (let U = 0; U < b; ++U) {
          const q = U * y - x.left;
          for (let j = 0; j < g; ++j) {
            let tt = Number.MIN_SAFE_INTEGER, nt = K < 0 ? 0 : K, st = q < 0 ? 0 : q;
            for (let at = 0; at < I; ++at) {
              const rt = K + at * T;
              if (rt >= 0 && rt < p)
                for (let ct = 0; ct < v; ++ct) {
                  const lt = q + ct * k;
                  if (lt >= 0 && lt < f) {
                    const pt = u[Z][rt][lt][j] + h[at][ct][j];
                    pt > tt && (tt = pt, nt = rt, st = lt);
                  }
                }
            }
            z[Z][nt][st][j] += G[Z][_][U][j];
          }
        }
      }
    return { dataId: c.write(Ls(z, s.dtype), s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Sa(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  bt(o, "sum");
  let a;
  o.dtype === "bool" ? a = js({ inputs: { x: o }, backend: e, attrs: { dtype: "int32" } }) : a = xs({ inputs: { x: o }, backend: e });
  const l = a.shape.length, c = Dt(r, a.shape), u = me(c, l);
  let h = c, d = a;
  u != null && (d = rn({ inputs: { x: a }, backend: e, attrs: { perm: u } }), h = Ie(h.length, l)), Oe("sum", h, d.shape.length);
  const [p, f] = Ge(d.shape, h), g = nn(d.dtype, "int32");
  let m = Sl(e, p, g);
  const b = H(f), x = e.data.get(m.dataId).values, w = e.data.get(d.dataId).values;
  for (let y = 0; y < x.length; ++y) {
    const I = y * b;
    let v = 0;
    for (let T = 0; T < b; ++T)
      v += w[I + T];
    x[y] = v;
  }
  if (i) {
    const y = we(m.shape, c), I = m;
    m = ne({ inputs: { x: m }, backend: e, attrs: { shape: y } }), e.disposeIntermediateTensorInfo(I);
  }
  return e.disposeIntermediateTensorInfo(a), u != null && e.disposeIntermediateTensorInfo(d), m;
}
const BW = {
  kernelName: Lc,
  backendName: "cpu",
  kernelFunc: Sa
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HW(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: o } = s, r = t, { allDims: i, summedDims: a, idDims: l } = ef(o, r.length);
  sf(i.length, l, r);
  const { path: c, steps: u } = of(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let g = 0; g < h; ++g) {
    for (const m of u[g]) {
      const { permutationIndices: b, expandDims: x } = nf(p, l[m]);
      let w;
      rf(b) ? w = r[m] : (w = rn({ inputs: { x: r[m] }, backend: e, attrs: { perm: b } }), f.push(w));
      const y = w.shape.slice();
      for (let I = 0; I < x.length; ++I)
        y.splice(x[I], 0, 1);
      At(w.shape, y) || (w = ne({ inputs: { x: w }, backend: e, attrs: { shape: y } }), f.push(w)), d === null ? d = w : (d = fu({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    g < h - 1 && (c[g] >= 0 && (d = Sa({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[g] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const g of f)
    g !== d && e.disposeIntermediateTensorInfo(g);
  return d;
}
const _W = {
  kernelName: eb,
  backendName: "cpu",
  kernelFunc: HW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UW(n) {
  const { inputs: t, backend: e } = n, { dy: s, y: o } = t;
  bt([s, o], "eluGrad");
  const r = new Float32Array(H(o.shape)), i = e.data.get(o.dataId).values, a = e.data.get(s.dataId).values;
  for (let l = 0; l < i.length; ++l) {
    const c = i[l];
    c >= 1 ? r[l] = a[l] : r[l] = a[l] * (c + 1);
  }
  return e.makeTensorInfo(o.shape, "float32", r);
}
const YW = {
  kernelName: hd,
  backendName: "cpu",
  kernelFunc: UW
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jW = Up, QW = Yp, JW = jp, qW = Qp, tM = Jp, eM = qp, nM = Yt(vi, (n) => {
  const t = Math.sign(n), e = Math.abs(n), s = 1 / (1 + jW * e);
  return t * (1 - ((((eM * s + tM) * s + qW) * s + JW) * s + QW) * s * Math.exp(-e * e));
}), sM = {
  kernelName: vi,
  backendName: "cpu",
  kernelFunc: nM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Tl(n) {
  const { inputs: t, backend: e, attrs: s } = n, { input: o } = t, { dim: r } = s, i = o.shape.length, a = o.shape.slice();
  let l = r;
  return r < 0 && (S(-(i + 1) <= r, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + r + 1), a.splice(l, 0, 1), ne({ inputs: { x: o }, backend: e, attrs: { shape: a } });
}
const oM = {
  kernelName: tc,
  backendName: "cpu",
  kernelFunc: Tl
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rM = Se((n, t) => n / t), Yf = ze(Ii, rM), Fh = {
  kernelName: Ii,
  backendName: "cpu",
  kernelFunc: Yf
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function p1(n, t, e) {
  const s = n.shape, o = s[0], r = s[1], i = e.data.get(n.dataId), a = i.complexTensorInfos.real, l = i.complexTensorInfos.imag, c = [o, r], u = H(c), h = he("float32", u), d = he("float32", u);
  for (let m = 0; m < o; m++) {
    const b = Mo({
      inputs: { x: a },
      backend: e,
      attrs: { begin: [m, 0], size: [1, r] }
    }), x = Mo({
      inputs: { x: l },
      backend: e,
      attrs: { begin: [m, 0], size: [1, r] }
    }), w = un({ inputs: { real: b, imag: x }, backend: e }), { real: y, imag: I } = iM(w, t, e), v = $s(y, I);
    for (let T = 0; T < r; T++) {
      const k = tf(v, T);
      h[m * r + T] = k.real, d[m * r + T] = k.imag;
    }
    e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(x), e.disposeIntermediateTensorInfo(w);
  }
  const p = e.makeTensorInfo(c, "float32", h), f = e.makeTensorInfo(c, "float32", d), g = un({ inputs: { real: p, imag: f }, backend: e });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), g;
}
function iM(n, t, e) {
  const s = H(n.shape), o = e.data.get(n.dataId), r = e.data.get(o.complexTensorInfos.real.dataId).values, i = e.data.get(o.complexTensorInfos.imag.dataId).values;
  if (aM(s)) {
    const a = zh(r, i, s, t, e), l = [n.shape[0], n.shape[1]];
    if (t) {
      const c = e.makeTensorInfo(l, "float32", a.real), u = e.makeTensorInfo(l, "float32", a.imag), h = e.makeTensorInfo([], "float32", ws(s, "float32")), d = xs({ inputs: { x: h }, backend: e }), p = Fh.kernelFunc({ inputs: { a: c, b: h }, backend: e }), f = Fh.kernelFunc({ inputs: { a: u, b: d }, backend: e }), g = e.data.get(p.dataId).values, m = e.data.get(f.dataId).values;
      return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), { real: g, imag: m };
    }
    return a;
  } else {
    const a = $s(r, i), l = lM(a, s, t);
    return k0(l);
  }
}
function aM(n) {
  return (n & n - 1) === 0;
}
function zh(n, t, e, s, o) {
  if (e === 1)
    return { real: n, imag: t };
  const r = $s(n, t), i = e / 2, a = T0(r), l = a.real, c = a.imag, u = [l.length], h = o.makeTensorInfo(u, "float32", l), d = o.makeTensorInfo(u, "float32", c), p = un({ inputs: { real: h, imag: d }, backend: o }), f = N0(r), g = f.real, m = f.imag, b = [g.length], x = o.makeTensorInfo(b, "float32", g), w = o.makeTensorInfo(b, "float32", m), y = un({ inputs: { real: x, imag: w }, backend: o }), I = zh(l, c, i, s, o), v = I.real, T = I.imag, k = [v.length], $ = o.makeTensorInfo(k, "float32", v), G = o.makeTensorInfo(k, "float32", T), z = un({
    inputs: { real: $, imag: G },
    backend: o
  }), A = zh(g, m, i, s, o), Z = A.real, _ = A.imag, K = [Z.length], U = o.makeTensorInfo(K, "float32", Z), q = o.makeTensorInfo(K, "float32", _), j = un({ inputs: { real: U, imag: q }, backend: o }), tt = R0(e, s), nt = [tt.real.length], st = o.makeTensorInfo(nt, "float32", tt.real), at = o.makeTensorInfo(nt, "float32", tt.imag), rt = un({ inputs: { real: st, imag: at }, backend: o }), ct = fu({ inputs: { a: rt, b: j }, backend: o }), lt = hr({
    inputs: { a: z, b: ct },
    backend: o
  }), pt = _f({
    inputs: { a: z, b: ct },
    backend: o
  }), ft = Wo({ inputs: { input: lt }, backend: o }), vt = Wo({ inputs: { input: pt }, backend: o }), kt = dr({ inputs: { input: lt }, backend: o }), Lt = dr({ inputs: { input: pt }, backend: o }), Gt = pr({
    inputs: [ft, vt],
    backend: o,
    attrs: { axis: 0 }
  }), Zt = pr({
    inputs: [kt, Lt],
    backend: o,
    attrs: { axis: 0 }
  }), jt = o.data.get(Gt.dataId).values, Ht = o.data.get(Zt.dataId).values;
  return o.disposeIntermediateTensorInfo(h), o.disposeIntermediateTensorInfo(d), o.disposeIntermediateTensorInfo(p), o.disposeIntermediateTensorInfo(x), o.disposeIntermediateTensorInfo(w), o.disposeIntermediateTensorInfo(y), o.disposeIntermediateTensorInfo($), o.disposeIntermediateTensorInfo(G), o.disposeIntermediateTensorInfo(z), o.disposeIntermediateTensorInfo(U), o.disposeIntermediateTensorInfo(q), o.disposeIntermediateTensorInfo(j), o.disposeIntermediateTensorInfo(st), o.disposeIntermediateTensorInfo(at), o.disposeIntermediateTensorInfo(rt), o.disposeIntermediateTensorInfo(ct), o.disposeIntermediateTensorInfo(lt), o.disposeIntermediateTensorInfo(pt), o.disposeIntermediateTensorInfo(ft), o.disposeIntermediateTensorInfo(kt), o.disposeIntermediateTensorInfo(vt), o.disposeIntermediateTensorInfo(Lt), o.disposeIntermediateTensorInfo(Gt), o.disposeIntermediateTensorInfo(Zt), { real: jt, imag: Ht };
}
function lM(n, t, e) {
  const s = new Float32Array(t * 2);
  for (let o = 0; o < t; o++) {
    let r = 0, i = 0;
    for (let a = 0; a < t; a++) {
      const l = G0(o * a, t, e), c = tf(n, a);
      r += c.real * l.real - c.imag * l.imag, i += c.real * l.imag + c.imag * l.real;
    }
    e && (r /= t, i /= t), $0(s, r, i, o);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cM(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = H(s.shape), r = s.shape[s.shape.length - 1], i = o / r, a = ne({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, r] }
  }), l = p1(a, !1, e), c = ne({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const uM = {
  kernelName: dd,
  backendName: "cpu",
  kernelFunc: cM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jf(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: o, dtype: r } = e, i = r || xr(o), a = Ot(i, H(s));
  return dM(a, o, i), t.makeTensorInfo(s, i, a);
}
const hM = {
  kernelName: pd,
  backendName: "cpu",
  kernelFunc: jf
};
function dM(n, t, e) {
  n.fill(t);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const pM = {
  kernelName: fd,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, o = e, r = he(s.dtype, H(s.shape)), [i, a, l, c] = s.shape, u = o.data.get(s.dataId).values;
    for (let d = 0; d < i; d++) {
      const p = d * l * a * c;
      for (let f = 0; f < a; f++) {
        const g = f * (l * c);
        for (let m = 0; m < l; m++) {
          const b = m * c;
          for (let x = 0; x < c; x++) {
            const w = Math.round(l - m - 1), y = p + g + b + x;
            let I = u[y];
            if (w >= 0 && w < l) {
              const v = w * c, T = p + g + v + x;
              I = u[T];
            }
            r[y] = I;
          }
        }
      }
    }
    return { dataId: o.write(r, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fM = Se((n, t) => Math.floor(n / t)), mM = ze(Ni, fM, null, "int32"), gM = {
  kernelName: Ni,
  backendName: "cpu",
  kernelFunc: mM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let g = h1({
    inputs: { x: o, filter: r },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const m = g;
    if (u === "NCHW" && i.shape.length === 1 && i.shape[0] !== 1) {
      const b = ne({ inputs: { x: i }, backend: e, attrs: { shape: [i.shape[0], 1, 1] } });
      g = hr({ inputs: { a: g, b }, backend: e }), e.disposeIntermediateTensorInfo(b);
    } else
      g = hr({ inputs: { a: g, b: i }, backend: e });
    e.disposeIntermediateTensorInfo(m);
  }
  if (p) {
    const m = g;
    if (u === "NCHW" && p === "prelu" && a.shape.length === 1 && a.shape[0] !== 1) {
      const b = ne({
        inputs: { x: a },
        backend: e,
        attrs: { shape: [a.shape[0], 1, 1] }
      });
      g = kl(e, g, p, b, f), e.disposeIntermediateTensorInfo(b);
    } else
      g = kl(e, g, p, a, f);
    e.disposeIntermediateTensorInfo(m);
  }
  return g;
}
const xM = {
  kernelName: ol,
  backendName: "cpu",
  kernelFunc: bM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s;
  let g = d1({
    inputs: { x: o, filter: r },
    backend: e,
    attrs: { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d }
  });
  if (i) {
    const m = g;
    g = hr({ inputs: { a: g, b: i }, backend: e }), e.disposeIntermediateTensorInfo(m);
  }
  if (p) {
    const m = g;
    g = kl(e, g, p, a, f), e.disposeIntermediateTensorInfo(m);
  }
  return g;
}
const wM = {
  kernelName: hb,
  backendName: "cpu",
  kernelFunc: yM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IM(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: o } = t, r = H(s.shape), i = o.shape, a = i[i.length - 1], [l, c, u, h] = Pc(s, o);
  if (c === 0)
    return e.makeTensorInfo(l, s.dtype, []);
  const d = e.data.get(o.dataId).values, p = e.bufferSync(s), f = AL(d, p, s.dtype, c, a, u, h, s.shape, r);
  return e.makeTensorInfo(l, s.dtype, f.values);
}
const CM = {
  kernelName: nb,
  backendName: "cpu",
  kernelFunc: IM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, indices: r } = t, { axis: i, batchDims: a } = s;
  bt([o, r], "gatherV2");
  const l = Dt(i, o.shape)[0], c = e.data.get(r.dataId).values, u = o.shape[l];
  for (let y = 0; y < c.length; ++y) {
    const I = c[y];
    S(I <= u - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${u - 1}]`);
  }
  let h = a;
  a == null && (h = 0);
  const d = H(r.shape), p = yf(o, r, l, h), f = ne({
    inputs: { x: o },
    backend: e,
    attrs: {
      shape: [
        p.batchSize,
        p.outerSize,
        p.dimSize,
        p.sliceSize
      ]
    }
  }), g = ne({
    inputs: { x: r },
    backend: e,
    attrs: { shape: [p.batchSize, d / p.batchSize] }
  }), m = [
    p.batchSize,
    p.outerSize,
    d / p.batchSize,
    p.sliceSize
  ], b = e.bufferSync(g), x = e.bufferSync(f), w = ZL(x, b, m);
  return e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(g), e.makeTensorInfo(p.outputShape, w.dtype, w.values);
}
const SM = {
  kernelName: nc,
  backendName: "cpu",
  kernelFunc: vM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kM(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = H(s.shape), r = s.shape[s.shape.length - 1], i = o / r, a = ne({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [i, r] }
  }), l = p1(a, !0, e), c = ne({ inputs: { x: l }, backend: e, attrs: { shape: s.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(l), c;
}
const TM = {
  kernelName: md,
  backendName: "cpu",
  kernelFunc: kM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NM = Yt(Gi, (n) => Number.isFinite(n) ? 1 : 0, "bool"), $M = {
  kernelName: Gi,
  backendName: "cpu",
  kernelFunc: NM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RM = Yt(Li, (n) => Math.abs(n) === 1 / 0 ? 1 : 0, "bool"), GM = {
  kernelName: Li,
  backendName: "cpu",
  kernelFunc: RM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LM = Yt(Ei, (n) => Number.isNaN(n) ? 1 : 0, "bool"), EM = {
  kernelName: Ei,
  backendName: "cpu",
  kernelFunc: LM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WM(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, num: r } = e, i = nE(s, o, r);
  return t.makeTensorInfo([i.length], "float32", i);
}
const MM = {
  kernelName: sb,
  backendName: "cpu",
  kernelFunc: WM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DM = Yt(Mi, (n) => Math.log1p(n)), FM = {
  kernelName: Mi,
  backendName: "cpu",
  kernelFunc: DM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const zM = Se((n, t) => n && t), VM = ze(ac, zM, null, "bool"), PM = {
  kernelName: ac,
  backendName: "cpu",
  kernelFunc: VM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XM = Yt(lc, (n) => n ? 0 : 1, "bool"), OM = {
  kernelName: lc,
  backendName: "cpu",
  kernelFunc: XM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AM = Se((n, t) => n || t), ZM = ze(cc, AM, null, "bool"), KM = {
  kernelName: cc,
  backendName: "cpu",
  kernelFunc: ZM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { depthRadius: r, bias: i, alpha: a, beta: l } = s;
  bt(o, "LRN");
  const c = o.shape[3], u = c - 1, h = e.data.get(o.dataId).values, d = H(o.shape), p = new Float32Array(d);
  function f(g) {
    const m = g % c;
    let b = g - m + Math.max(0, m - r);
    const x = g - m + Math.min(m + r, u);
    let w = 0;
    for (; b <= x; b++) {
      const y = h[b];
      w += y * y;
    }
    return w;
  }
  for (let g = 0; g < d; g++) {
    const m = f(g), b = h[g] * Math.pow(i + a * m, -l);
    p[g] = b;
  }
  return e.makeTensorInfo(o.shape, o.dtype, p);
}
const HM = {
  kernelName: uc,
  backendName: "cpu",
  kernelFunc: BM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _M(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, y: r, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s;
  bt(i, "LRNGrad");
  const h = H(i.shape), d = i.shape[3], p = e.data.get(i.dataId).values, f = e.data.get(o.dataId).values, g = e.data.get(r.dataId).values, m = new Float32Array(h), b = h;
  for (let x = 0; x < b; x++) {
    const w = x % d, y = x - w + Math.max(0, w - a), I = x - w + Math.min(d, w + a + 1);
    let v = 0;
    for (let T = y; T < I; T++)
      v += Math.pow(f[T], 2);
    v = c * v + l;
    for (let T = y; T < I; T++) {
      let k = -2 * c * u * f[T] * g[x] / v;
      x === T && (k += Math.pow(v, -u)), k *= p[x], m[T] += k;
    }
  }
  return e.makeTensorInfo(i.shape, o.dtype, m);
}
const UM = {
  kernelName: bd,
  backendName: "cpu",
  kernelFunc: _M
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function f1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reductionIndices: r, keepDims: i } = s, a = e;
  let l = o.shape;
  const c = l.length, u = Dt(r, l);
  let h = u;
  const d = me(h, c);
  let p = a.data.get(o.dataId).values;
  if (d != null) {
    const y = new Array(c);
    for (let I = 0; I < y.length; I++)
      y[I] = l[d[I]];
    p = qy(p, l, o.dtype, d, y), h = Ie(h.length, c), l = y;
  }
  bt(o, "max"), Oe("max", h, c);
  const [f, g] = Ge(l, h), m = H(g), b = iE(p, m, f, o.dtype), x = a.write(b, f, o.dtype);
  let w = f;
  return i && (w = we(f, u)), { dataId: x, shape: w, dtype: o.dtype };
}
const YM = {
  kernelName: hc,
  backendName: "cpu",
  kernelFunc: f1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  bt(o, "maxPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  S(Ke(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Un(o.shape, r, i, c, a, l);
  let h;
  if (u.filterWidth === 1 && u.filterHeight === 1 && At(u.inShape, u.outShape))
    h = xs({ inputs: { x: o }, backend: e });
  else {
    const d = e.data.get(o.dataId).values, p = gt(o.shape), f = Uf(d, o.shape, o.dtype, p, u, "max");
    h = e.makeTensorInfo(u.outShape, o.dtype, f.values);
  }
  return h;
}
const QM = {
  kernelName: dc,
  backendName: "cpu",
  kernelFunc: jM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JM(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s;
  bt(o, "maxPool3d");
  const u = Es(o.shape, r, i, 1, a, l, c), h = e.data.get(o.dataId).values, d = u1(h, o.shape, o.dtype, gt(o.shape), u, "max");
  return e.makeTensorInfo(d.shape, "float32", d.values);
}
const qM = {
  kernelName: pc,
  backendName: "cpu",
  kernelFunc: JM
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, { filterSize: i, strides: a, pad: l, dimRoundingMode: c } = s;
  bt([o, r], "maxPool3DGrad");
  const u = Es(r.shape, i, a, 1, l, c), h = e.bufferSync(r), d = O3(h, u), p = u.strideDepth, f = u.strideHeight, g = u.strideWidth, m = u.dilationDepth, b = u.dilationHeight, x = u.dilationWidth, w = u.effectiveFilterDepth, y = u.effectiveFilterHeight, I = u.effectiveFilterWidth, v = w - 1 - u.padInfo.front, T = I - 1 - u.padInfo.left, k = y - 1 - u.padInfo.top, $ = Nt(r.shape, "float32"), G = e.bufferSync(o);
  for (let z = 0; z < u.batchSize; ++z)
    for (let A = 0; A < u.inChannels; ++A)
      for (let Z = 0; Z < u.inDepth; ++Z)
        for (let _ = 0; _ < u.inHeight; ++_)
          for (let K = 0; K < u.inWidth; ++K) {
            const U = Z - v, q = _ - k, j = K - T;
            let tt = 0;
            for (let nt = 0; nt < w; nt += m) {
              const st = (U + nt) / p;
              if (!(st < 0 || st >= u.outDepth || Math.floor(st) !== st))
                for (let at = 0; at < y; at += b) {
                  const rt = (q + at) / f;
                  if (!(rt < 0 || rt >= u.outHeight || Math.floor(rt) !== rt))
                    for (let ct = 0; ct < I; ct += x) {
                      const lt = (j + ct) / g;
                      if (lt < 0 || lt >= u.outWidth || Math.floor(lt) !== lt)
                        continue;
                      const pt = w * y * I - 1 - d.get(z, st, rt, lt, A), ft = nt * y * I + at * I + ct, vt = pt === ft ? 1 : 0;
                      if (vt === 0)
                        continue;
                      const kt = G.get(z, st, rt, lt, A);
                      tt += kt * vt;
                    }
                }
            }
            $.set(tt, z, Z, _, K, A);
          }
  return e.makeTensorInfo($.shape, $.dtype, $.values);
}
const eD = {
  kernelName: yd,
  backendName: "cpu",
  kernelFunc: tD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r, output: i } = t, a = r;
  bt([r, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = Un(a.shape, l, c, 1, u, h), p = e.data.get(a.dataId).values, f = Nt(d.outShape, a.dtype, c1(p, a.shape, a.dtype, d).values), g = d.strideHeight, m = d.strideWidth, b = d.dilationHeight, x = d.dilationWidth, w = d.effectiveFilterHeight, y = d.effectiveFilterWidth, I = y - 1 - d.padInfo.left, v = w - 1 - d.padInfo.top, T = Nt(a.shape, "float32"), k = e.data.get(o.dataId).values, $ = Nt(o.shape, "float32", k);
  for (let G = 0; G < d.batchSize; ++G)
    for (let z = 0; z < d.inChannels; ++z)
      for (let A = 0; A < d.inHeight; ++A)
        for (let Z = 0; Z < d.inWidth; ++Z) {
          const _ = A - v, K = Z - I;
          let U = 0;
          for (let q = 0; q < w; q += b) {
            const j = (_ + q) / g;
            if (!(j < 0 || j >= d.outHeight || Math.floor(j) !== j))
              for (let tt = 0; tt < y; tt += x) {
                const nt = (K + tt) / m;
                if (nt < 0 || nt >= d.outWidth || Math.floor(nt) !== nt)
                  continue;
                const st = w * y - 1 - f.get(G, j, nt, z), at = q * y + tt, rt = st === at ? 1 : 0;
                if (rt === 0)
                  continue;
                const ct = $.get(G, j, nt, z);
                U += ct * rt;
              }
          }
          T.set(U, G, A, Z, z);
        }
  return e.makeTensorInfo(T.shape, T.dtype, T.values);
}
const sD = {
  kernelName: xd,
  backendName: "cpu",
  kernelFunc: nD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oD(n, t, e, s, o) {
  const r = gt(t), i = Uf(n, t, e, r, o, "max"), a = c1(n, t, e, o, !0, s);
  return [i.values, a.values];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rD = {
  kernelName: ob,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t, l = e;
    bt(s, "MaxPoolWithArgmax");
    const c = l.data.get(s.dataId).values, u = Un(s.shape, o, r, [1, 1], i), [h, d] = oD(c, s.shape, s.dtype, a, u), p = l.write(h, u.outShape, s.dtype), f = l.write(d, u.outShape, s.dtype);
    return [
      { dataId: p, shape: u.outShape, dtype: s.dtype },
      { dataId: f, shape: u.outShape, dtype: "int32" }
    ];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = Dt(r, o.shape), c = Ge(o.shape, a)[1], u = H(c), h = [], d = e.makeTensorInfo([], "float32", new Float32Array([u]));
  h.push(d);
  const p = js({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } });
  h.push(p);
  const f = Yf({ inputs: { a: p, b: d }, backend: e });
  h.push(f);
  const g = Sa({ inputs: { x: f }, backend: e, attrs: { axis: r, keepDims: i } });
  return h.forEach((m) => e.disposeIntermediateTensorInfo(m)), g;
}
const aD = {
  kernelName: fc,
  backendName: "cpu",
  kernelFunc: iD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  bt(o, "min");
  const a = Dt(r, o.shape);
  let l = a;
  const c = me(l, o.shape.length);
  let u = o;
  c != null && (u = rn({ inputs: { x: o }, backend: e, attrs: { perm: c } }), l = Ie(l.length, o.shape.length)), Oe("min", l, u.shape.length);
  const [h, d] = Ge(u.shape, l), p = H(d), f = be(H(h), u.dtype), g = e.data.get(u.dataId).values;
  for (let b = 0; b < f.length; ++b) {
    const x = b * p;
    let w = g[x];
    for (let y = 0; y < p; ++y) {
      const I = g[x + y];
      (Number.isNaN(I) || I < w) && (w = I);
    }
    f[b] = w;
  }
  c != null && e.disposeIntermediateTensorInfo(u);
  const m = e.makeTensorInfo(h, u.dtype, f);
  if (i) {
    const b = we(h, a), x = ne({ inputs: { x: m }, backend: e, attrs: { shape: b } });
    return e.disposeIntermediateTensorInfo(m), x;
  }
  return m;
}
const cD = {
  kernelName: mc,
  backendName: "cpu",
  kernelFunc: lD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, mode: i } = s;
  bt(o, "mirrorPad");
  const a = r.map(
    (w, y) => w[0] + o.shape[y] + w[1]
    /* afterPad */
  ), l = r.map((w) => w[0]), c = r.map((w, y) => w[0] + o.shape[y]), u = i === "reflect" ? 0 : 1, h = e.data.get(o.dataId).values, d = o.shape.length, p = gt(o.shape), f = H(a), g = a.length, m = gt(a), b = he(o.dtype, f);
  for (let w = 0; w < f; w++) {
    let y = ys(w, g, m);
    for (let v = 0; v < g; v++)
      y[v] < l[v] ? y[v] = l[v] * 2 - y[v] - u : y[v] >= c[v] && (y[v] = (c[v] - 1) * 2 - y[v] + u);
    y = y.map((v, T) => v - l[T]);
    const I = pn(y, d, p);
    b[w] = h[I];
  }
  return { dataId: e.write(b, a, o.dtype), shape: a, dtype: o.dtype };
}
const hD = {
  kernelName: gc,
  backendName: "cpu",
  kernelFunc: uD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dD = Se((n, t) => {
  const e = n % t;
  return n < 0 && t < 0 || n >= 0 && t >= 0 ? e : (e + t) % t;
}), pD = ze(zi, dD), fD = {
  kernelName: zi,
  backendName: "cpu",
  kernelFunc: pD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function m1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { dim: r } = s, i = o.shape.length;
  let a = r;
  if (a === -1 && (a = i - 1), a !== i - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${a}`);
  const l = Dt([a], o.shape), c = f1({
    inputs: { x: o },
    backend: e,
    attrs: { reductionIndices: l, keepDims: !1 }
  }), u = we(c.shape, l), h = ne({ inputs: { x: c }, backend: e, attrs: { shape: u } }), d = _f({ inputs: { a: o, b: h }, backend: e }), p = Qy({ inputs: { x: d }, backend: e }), f = Sa({ inputs: { x: p }, backend: e, attrs: { axis: l, keepDims: !1 } }), g = ne({ inputs: { x: f }, backend: e, attrs: { shape: u } }), m = Yf({ inputs: { a: p, b: g }, backend: e });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(g), m;
}
const mD = {
  kernelName: Mc,
  backendName: "cpu",
  kernelFunc: m1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { numSamples: r, seed: i, normalized: a } = s;
  bt(o, "multinomial");
  const l = a ? o : m1({ inputs: { logits: o }, backend: e, attrs: { dim: -1 } }), c = l.shape[0], u = l.shape[1], h = e.data.get(l.dataId).values, d = [c, r], p = be(H(d), "int32");
  for (let f = 0; f < c; ++f) {
    const g = f * u, m = new Float32Array(u - 1);
    m[0] = h[g];
    for (let w = 1; w < m.length; ++w)
      m[w] = m[w - 1] + h[g + w];
    const b = Sr.alea(i.toString()), x = f * r;
    for (let w = 0; w < r; ++w) {
      const y = b();
      p[x + w] = m.length;
      for (let I = 0; I < m.length; I++)
        if (y < m[I]) {
          p[x + w] = I;
          break;
        }
    }
  }
  return a || e.disposeIntermediateTensorInfo(l), e.makeTensorInfo(d, "int32", p);
}
const bD = {
  kernelName: rb,
  backendName: "cpu",
  kernelFunc: gD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xD = Rp;
function yD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s;
  bt(o, "NonMaxSuppression");
  const c = e.data.get(o.dataId).values, u = e.data.get(r.dataId).values, { selectedIndices: h } = xD(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const wD = {
  kernelName: wd,
  backendName: "cpu",
  kernelFunc: yD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const ID = Gp;
function CD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s;
  bt(o, "NonMaxSuppressionPadded");
  const u = e.data.get(o.dataId).values, h = e.data.get(r.dataId).values, { selectedIndices: d, validOutputs: p } = ID(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const vD = {
  kernelName: Id,
  backendName: "cpu",
  kernelFunc: CD
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SD = Lp;
function kD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s;
  bt(o, "NonMaxSuppressionWithScore");
  const u = e.data.get(o.dataId).values, h = e.data.get(r.dataId).values, d = i, p = a, f = l, g = c, { selectedIndices: m, selectedScores: b } = SD(u, h, d, p, f, g);
  return [
    e.makeTensorInfo([m.length], "int32", new Int32Array(m)),
    e.makeTensorInfo([b.length], "float32", new Float32Array(b))
  ];
}
const TD = {
  kernelName: Cd,
  backendName: "cpu",
  kernelFunc: kD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ND(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o } = t, { dtype: r, depth: i, onValue: a, offValue: l } = s;
  bt(o, "oneHot");
  const c = H(o.shape), u = new Float32Array(c * i);
  u.fill(l);
  const h = e.data.get(o.dataId).values;
  for (let d = 0; d < c; ++d)
    h[d] >= 0 && h[d] < i && (u[d * i + h[d]] = a);
  return e.makeTensorInfo([...o.shape, i], r, u);
}
const $D = {
  kernelName: wc,
  backendName: "cpu",
  kernelFunc: ND
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Nl(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const o = Wo({ inputs: { input: s }, backend: e }), r = Nl({ inputs: { x: o }, backend: e }), i = dr({ inputs: { input: s }, backend: e }), a = Nl({ inputs: { x: i }, backend: e }), l = un({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return jf({ backend: e, attrs: { shape: s.shape, value: 0, dtype: s.dtype } });
}
const RD = {
  kernelName: zc,
  backendName: "cpu",
  kernelFunc: Nl
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function g1(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (s.dtype === "complex64") {
    const o = Wo({ inputs: { input: s }, backend: e }), r = g1({ inputs: { x: o }, backend: e }), i = dr({ inputs: { input: s }, backend: e }), a = Nl({ inputs: { x: i }, backend: e }), l = un({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return jf({ backend: e, attrs: { shape: s.shape, value: 1, dtype: s.dtype } });
}
const GD = {
  kernelName: yc,
  backendName: "cpu",
  kernelFunc: g1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s;
  if (t.length === 1)
    return Tl({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
  const r = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Qe(r, u.shape, "All tensors passed to stack must have matching shapes"), S(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = Tl({ inputs: { input: u }, backend: e, attrs: { dim: o } });
    return a.push(h), h;
  }), c = pr({ inputs: l, backend: e, attrs: { axis: o } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const LD = {
  kernelName: Ic,
  backendName: "cpu",
  kernelFunc: b1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ED(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, constantValue: i } = s;
  bt(o, "pad");
  const a = r.map(
    (x, w) => x[0] + o.shape[w] + x[1]
    /* afterPad */
  ), l = r.map((x) => x[0]), c = e.data.get(o.dataId).values, u = H(o.shape), h = o.shape.length, d = gt(o.shape), p = H(a), f = a.length, g = gt(a), m = he(o.dtype, p);
  i !== 0 && m.fill(i);
  for (let x = 0; x < u; x++) {
    const y = ys(x, h, d).map((v, T) => v + l[T]), I = pn(y, f, g);
    m[I] = c[x];
  }
  return { dataId: e.write(m, a, o.dtype), shape: a, dtype: o.dtype };
}
const x1 = {
  kernelName: Cc,
  backendName: "cpu",
  kernelFunc: ED
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const WD = Se((n, t) => Math.pow(n, t)), MD = ze(Pi, WD), DD = {
  kernelName: Pi,
  backendName: "cpu",
  kernelFunc: MD
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t, a = o.map((m) => e.data.get(m.dataId).values), l = o.map((m) => m.shape), c = e.data.get(r.dataId).values, u = e.data.get(i.dataId).values, [h, d, p] = LE(a, l, c, r.shape, r.dtype, u, i.shape), f = h.map((m) => e.makeTensorInfo([m.length], "int32", m)), g = e.makeTensorInfo(p, r.dtype, d);
  return f.concat([g]);
}
const zD = {
  kernelName: ib,
  backendName: "cpu",
  kernelFunc: FD
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.data.get(o.dataId).values, u = e.data.get(r.dataId).values, h = e.data.get(i.dataId).values, d = a.map((m) => e.data.get(m.dataId).values), p = a.map((m) => m.shape), [f, g] = WE(c, o.shape, u, r.shape, r.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, r.dtype, g);
}
const PD = {
  kernelName: ab,
  backendName: "cpu",
  kernelFunc: VD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XD(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, dtype: r, step: i } = e, a = ME(s, o, i, r);
  return t.makeTensorInfo([a.length], r, a);
}
const OD = {
  kernelName: vd,
  backendName: "cpu",
  kernelFunc: XD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AD = Yt(Xi, (n) => 1 / n), ZD = {
  kernelName: Xi,
  backendName: "cpu",
  kernelFunc: AD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s;
  bt(o, "resizeBilinear");
  const l = gt(o.shape), [c, u] = a, [h, d, p, f] = o.shape, g = e.data.get(o.dataId).values, m = new Float32Array(H([h, c, u, f])), b = [
    r && c > 1 ? d - 1 : d,
    r && u > 1 ? p - 1 : p
  ], x = [
    r && c > 1 ? c - 1 : c,
    r && u > 1 ? u - 1 : u
  ];
  let w = 0;
  const y = b[0] / x[0], I = b[1] / x[1];
  for (let v = 0; v < h; v++)
    for (let T = 0; T < c; T++) {
      let k;
      i ? k = y * (T + 0.5) - 0.5 : k = y * T;
      const $ = Math.max(0, Math.floor(k)), G = k - $, z = Math.min(d - 1, Math.ceil(k)), A = v * l[0] + $ * l[1], Z = v * l[0] + z * l[1];
      for (let _ = 0; _ < u; _++) {
        let K;
        i ? K = I * (_ + 0.5) - 0.5 : K = I * _;
        const U = Math.max(0, Math.floor(K)), q = K - U, j = Math.min(p - 1, Math.ceil(K)), tt = A + U * l[2], nt = Z + U * l[2], st = A + j * l[2], at = Z + j * l[2];
        for (let rt = 0; rt < f; rt++) {
          const ct = g[tt + rt], lt = g[nt + rt], pt = g[st + rt], ft = g[at + rt], vt = ct + (pt - ct) * q, kt = lt + (ft - lt) * q, Lt = vt + (kt - vt) * G;
          m[w++] = Lt;
        }
      }
    }
  return e.makeTensorInfo([h, c, u, f], "float32", m);
}
const BD = {
  kernelName: Nc,
  backendName: "cpu",
  kernelFunc: KD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s;
  bt([r, o], "resizeBilinearGrad");
  const a = gt(o.shape), [l, c, u, h] = o.shape, [, d, p] = r.shape, f = new Float32Array(l * c * u * h), g = [
    i && d > 1 ? c - 1 : c,
    i && p > 1 ? u - 1 : u
  ], m = [
    i && d > 1 ? d - 1 : d,
    i && p > 1 ? p - 1 : p
  ], b = g[0] / m[0], x = g[1] / m[1], w = e.data.get(r.dataId).values;
  let y = 0;
  for (let I = 0; I < l; I++) {
    const v = I * a[0];
    for (let T = 0; T < d; T++) {
      const k = T * b, $ = Math.floor(k), G = Math.min(Math.ceil(k), c - 1), z = v + $ * a[1], A = v + G * a[1], Z = k - $, _ = 1 - Z;
      for (let K = 0; K < p; K++) {
        const U = K * x, q = Math.floor(U), j = Math.min(Math.ceil(U), u - 1), tt = U - q, nt = 1 - tt, st = z + q * a[2], at = z + j * a[2], rt = A + q * a[2], ct = A + j * a[2], lt = _ * nt, pt = _ * tt, ft = Z * nt, vt = Z * tt;
        for (let kt = 0; kt < h; kt++) {
          const Lt = w[y++];
          f[st + kt] += Lt * lt, f[at + kt] += Lt * pt, f[rt + kt] += Lt * ft, f[ct + kt] += Lt * vt;
        }
      }
    }
  }
  return e.makeTensorInfo([l, u, c, h], "float32", f);
}
const _D = {
  kernelName: Td,
  backendName: "cpu",
  kernelFunc: HD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s;
  bt(o, "resizeNearestNeighbor");
  const l = gt(o.shape), [c, u] = a, [h, d, p, f] = o.shape, g = e.data.get(o.dataId).values, m = new Float32Array(h * c * u * f), b = [
    r && c > 1 ? d - 1 : d,
    r && u > 1 ? p - 1 : p
  ], x = [
    r && c > 1 ? c - 1 : c,
    r && u > 1 ? u - 1 : u
  ], w = b[0] / x[0], y = b[1] / x[1];
  let I = 0;
  for (let v = 0; v < h; v++) {
    const T = v * l[0];
    for (let k = 0; k < c; k++) {
      const $ = i ? w * (k + 0.5) : w * k;
      let G = Math.min(d - 1, r ? Math.round($) : Math.floor($));
      i && (G = Math.max(0, G));
      const z = T + G * l[1];
      for (let A = 0; A < u; A++) {
        const Z = i ? y * (A + 0.5) : y * A;
        let _ = Math.min(p - 1, r ? Math.round(Z) : Math.floor(Z));
        i && (_ = Math.max(0, _));
        const K = z + _ * l[2];
        for (let U = 0; U < f; U++) {
          const q = g[K + U];
          m[I++] = q;
        }
      }
    }
  }
  return e.makeTensorInfo([h, c, u, f], o.dtype, m);
}
const YD = {
  kernelName: Tc,
  backendName: "cpu",
  kernelFunc: UD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s;
  bt([r, o], "resizeNearestNeighborGrad");
  const a = gt(o.shape), l = gt(r.shape), [c, u, h, d] = o.shape, [, p, f] = r.shape, g = new Float32Array(c * u * h * d), m = e.data.get(r.dataId).values, b = [
    i && p > 1 ? u - 1 : u,
    i && f > 1 ? h - 1 : h
  ], x = [
    i && p > 1 ? p - 1 : p,
    i && f > 1 ? f - 1 : f
  ], w = b[0] / x[0], y = b[1] / x[1], I = 1 / w, v = 1 / y, T = Math.ceil(I) * 2 + 2, k = Math.ceil(v) * 2 + 2;
  for (let $ = 0; $ < c; $++) {
    const G = $ * a[0];
    for (let z = 0; z < u; z++) {
      const A = G + z * a[1], Z = Math.floor(z * I), _ = Math.floor(Z - T / 2);
      for (let K = 0; K < h; K++) {
        const U = A + K * a[2], q = Math.floor(K * v), j = Math.floor(q - k / 2);
        for (let tt = 0; tt < d; tt++) {
          let nt = 0;
          for (let st = 0; st < T; st++) {
            const at = st + _;
            if (at < 0 || at >= p)
              continue;
            const rt = G + at * l[1], ct = at * w, lt = Math.min(u - 1, i ? Math.round(ct) : Math.floor(ct));
            if (z === lt)
              for (let pt = 0; pt < k; pt++) {
                const ft = pt + j;
                if (ft < 0 || ft >= f)
                  continue;
                const vt = rt + ft * l[2], kt = ft * y, Lt = Math.min(h - 1, i ? Math.round(kt) : Math.floor(kt));
                K === Lt && (nt += m[vt + tt]);
              }
          }
          g[U + tt] = nt;
        }
      }
    }
  }
  return e.makeTensorInfo(o.shape, o.dtype, g);
}
const QD = {
  kernelName: kd,
  backendName: "cpu",
  kernelFunc: jD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JD(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dims: r } = s;
  bt(o, "reverse");
  const i = o.shape.length, a = Dt(r, o.shape);
  if (i === 0)
    return xs({ inputs: { x: o }, backend: e });
  const l = new Fe(o.shape, o.dtype), c = e.bufferSync(o);
  for (let u = 0; u < l.size; u++) {
    const h = l.indexToLoc(u), d = h.slice();
    a.forEach((p) => d[p] = o.shape[p] - 1 - d[p]), l.set(c.get(...d), ...h);
  }
  return e.makeTensorInfo(l.shape, l.dtype, l.values);
}
const qD = {
  kernelName: $c,
  backendName: "cpu",
  kernelFunc: JD
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tF = {
  kernelName: Pd,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: o, fillValue: r, center: i } = t, a = e, l = he(s.dtype, H(s.shape)), [c, u, h, d] = s.shape, [p, f] = Bp(i, u, h), g = 255, m = Math.sin(o), b = Math.cos(o), x = a.data.get(s.dataId).values;
    for (let y = 0; y < c; y++) {
      const I = y * h * u * d;
      for (let v = 0; v < u; v++) {
        const T = v * (h * d);
        for (let k = 0; k < h; k++) {
          const $ = k * d;
          for (let G = 0; G < d; G++) {
            const z = [c, v, k, G], A = z[2], Z = z[1];
            let _ = (A - p) * b - (Z - f) * m, K = (A - p) * m + (Z - f) * b;
            _ = Math.round(_ + p), K = Math.round(K + f);
            let U = r;
            if (typeof r != "number" && (G === 3 ? U = g : U = r[G]), _ >= 0 && _ < h && K >= 0 && K < u) {
              const j = K * (h * d), tt = _ * d, nt = I + j + tt + G;
              U = x[nt];
            }
            const q = I + T + $ + G;
            l[q] = U;
          }
        }
      }
    }
    return { dataId: a.write(l, s.shape, s.dtype), shape: s.shape, dtype: s.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eF = Yt(Zi, (n) => {
  const t = Math.floor(n);
  return n - t < 0.5 ? Math.floor(n) : n - t > 0.5 ? Math.ceil(n) : t % 2 === 0 ? t : t + 1;
}), nF = {
  kernelName: Zi,
  backendName: "cpu",
  kernelFunc: eF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o, updates: r } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = wr(r, o, i), d = !0, p = e.bufferSync(o), f = e.bufferSync(r), g = Kr(p, f, i, h, c, l, a, u, 0, d);
  return e.makeTensorInfo(i, g.dtype, g.values);
}
const oF = {
  kernelName: lb,
  backendName: "cpu",
  kernelFunc: sF
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function rF(n, t) {
  let e = 0, s = n.length, o = 0;
  for (; e < s; )
    o = Math.floor((e + s) / 2), n[o] < t ? e = o + 1 : s = o;
  return s;
}
function iF(n, t) {
  let e = 0, s = n.length, o = 0;
  for (; e < s; )
    o = Math.floor((e + s) / 2), n[o] <= t ? e = o + 1 : s = o;
  return s;
}
function aF(n, t, e, s, o, r) {
  const i = Ot("int32", e * o);
  for (let a = 0; a < e; ++a) {
    const l = n.slice(a * s, (a + 1) * s), c = a * o;
    for (let u = 0; u < o; ++u)
      i[c + u] = r === "left" ? rF(l, t[u + c]) : iF(l, t[u + c]);
  }
  return i;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: o, values: r } = t, { side: i } = s, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, c = aF(a, l, o.shape[0], o.shape[1], r.shape[1], i);
  return e.makeTensorInfo(r.shape, "int32", c);
}
const cF = {
  kernelName: cb,
  backendName: "cpu",
  kernelFunc: lF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uF(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: o, e: r } = t;
  bt([s, o, r], "select");
  const i = s.shape.length, a = e.data.get(s.dataId).values, l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = nn(o.dtype, r.dtype), h = be(H(o.shape), u);
  let d = 0;
  const p = i === 0 || i > 1 || o.shape.length === 1 ? 1 : H(o.shape.slice(1));
  for (let f = 0; f < a.length; f++)
    for (let g = 0; g < p; g++)
      a[f] === 1 ? h[d++] = l[f] : h[d++] = c[f];
  return e.makeTensorInfo(o.shape, u, h);
}
const hF = {
  kernelName: Rc,
  backendName: "cpu",
  kernelFunc: uF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dF = qc, pF = tu, fF = Yt(Bi, (n) => n >= 0 ? pF * n : dF * (Math.exp(n) - 1)), mF = {
  kernelName: Bi,
  backendName: "cpu",
  kernelFunc: fF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gF = Yt(Ui, (n) => n < 0 ? -1 : n > 0 ? 1 : 0), bF = {
  kernelName: Ui,
  backendName: "cpu",
  kernelFunc: gF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xF = Yt(Hi, (n) => Math.sin(n)), yF = {
  kernelName: Hi,
  backendName: "cpu",
  kernelFunc: xF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wF = Yt(_i, (n) => Math.sinh(n)), IF = {
  kernelName: _i,
  backendName: "cpu",
  kernelFunc: wF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CF = 11920928955078125e-23, rg = Math.log(CF) + 2, vF = Yt(ji, (n) => {
  const t = n > -rg, e = n < rg, s = Math.exp(n);
  let o;
  return e ? o = s : t ? o = n : o = Math.log(1 + s), o;
}), SF = {
  kernelName: ji,
  backendName: "cpu",
  kernelFunc: vF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, paddings: i } = s;
  bt([o], "spaceToBatchND");
  const a = H(r), l = [[0, 0]];
  l.push(...i);
  for (let v = 1 + r.length; v < o.shape.length; ++v)
    l.push([0, 0]);
  const c = x1.kernelFunc({
    inputs: { x: o },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), u = da(c.shape, r, a, !1), h = pa(u.length, r.length, !1), d = fa(c.shape, r, a, !1), g = ne({ inputs: { x: c }, backend: e, attrs: { shape: u } }), x = rn({ inputs: { x: g }, backend: e, attrs: { perm: h } }), I = ne({ inputs: { x }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(x), I;
}
const TF = {
  kernelName: Ec,
  backendName: "cpu",
  kernelFunc: kF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function NF(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: o, denseShape: r, defaultValue: i } = t;
  if (r.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${r.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.data.get(s.dataId).values, l = e.data.get(o.dataId).values, c = e.data.get(r.dataId).values, u = e.data.get(i.dataId).values[0], [h, d, p, f, g] = OE(a, s.shape, s.dtype, l, o.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], o.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((m) => Number(m)))),
    e.makeTensorInfo([g.length], s.dtype, new Int32Array(g))
  ];
}
const $F = {
  kernelName: Nd,
  backendName: "cpu",
  kernelFunc: NF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RF(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: o, newShape: r } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${r.shape}`);
  const i = Array.from(e.data.get(o.dataId).values), a = e.data.get(s.dataId).values, l = Array.from(e.data.get(r.dataId).values), [c, u, h] = AE(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], r.dtype, new Int32Array(h))
  ];
}
const GF = {
  kernelName: $d,
  backendName: "cpu",
  kernelFunc: RF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LF(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${r.shape}`);
  if (o.shape[0] !== r.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, [c, u] = e1(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const EF = {
  kernelName: Rd,
  backendName: "cpu",
  kernelFunc: LF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WF(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${r.shape}`);
  if (o.shape[0] !== r.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  const i = e.data.get(s.dataId).values, a = e.data.get(o.dataId).values, l = e.data.get(r.dataId).values, [c, u] = e1(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const MF = {
  kernelName: Gd,
  backendName: "cpu",
  kernelFunc: WF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: o, sparseValues: r, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = wr(r, o, a), p = !1, f = e.bufferSync(o);
  let g;
  switch (r.dtype) {
    case "bool": {
      const m = e.bufferSync(r), b = Boolean(e.data.get(i.dataId).values[0]);
      g = Kr(f, m, a, d, u, c, l, h, b, p);
      break;
    }
    case "float32": {
      const m = e.bufferSync(r), b = e.data.get(i.dataId).values[0];
      g = Kr(f, m, a, d, u, c, l, h, b, p);
      break;
    }
    case "int32": {
      const m = e.bufferSync(r), b = e.data.get(i.dataId).values[0];
      g = Kr(f, m, a, d, u, c, l, h, b, p);
      break;
    }
    case "string": {
      const m = e.bufferSync(r), b = Ss(e.data.get(i.dataId).values[0]);
      g = Kr(f, m, a, d, u, c, l, h, b, p);
      break;
    }
    default:
      throw new Error(`Unsupported type ${r.dtype}`);
  }
  return e.makeTensorInfo(a, g.dtype, g.values);
}
const FF = {
  kernelName: ub,
  backendName: "cpu",
  kernelFunc: DF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { numOrSizeSplits: r, axis: i } = s, a = Dt(i, o.shape)[0], l = af(o, r, a), c = new Array(o.shape.length).fill(0), u = o.shape.slice();
  return l.map((h) => {
    const d = [...u];
    d[a] = h;
    const p = Mo({ inputs: { x: o }, backend: e, attrs: { begin: c, size: d } });
    return c[a] += h, p;
  });
}
const VF = {
  kernelName: Wc,
  backendName: "cpu",
  kernelFunc: zF
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PF = {
  kernelName: Ld,
  backendName: "cpu",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { x: e } = n, s = t;
    bt(e, "square");
    const o = s.data.get(e.dataId).values, r = new Float32Array(o.length);
    for (let a = 0; a < o.length; ++a) {
      const l = o[a];
      r[a] = l * l;
    }
    return { dataId: s.write(r, e.shape, e.dtype), shape: e.shape, dtype: e.dtype };
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XF = Yt(sa, (n, t) => {
  const e = t;
  return isNaN(n) ? NaN : n > 0 ? 1 : e.alpha;
}), OF = {
  kernelName: sa,
  backendName: "cpu",
  kernelFunc: XF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function AF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s;
  bt(o, "stridedSlice");
  const { finalShapeSparse: p, finalShape: f, isIdentity: g, sliceDim0: m, isSimpleSlice: b, begin: x, end: w, strides: y } = tp(o.shape, r, i, a, l, c, u, h, d);
  let I;
  if (g)
    I = ne({ inputs: { x: o }, backend: e, attrs: { shape: f } });
  else if (m || b) {
    S(o.shape.length >= 1, () => `Input must have rank at least 1, got: ${o.shape.length}`);
    const v = qd(x, w, y), T = Mo({ inputs: { x: o }, backend: e, attrs: { begin: x, size: v } });
    I = ne({ inputs: { x: T }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(T);
  } else {
    const v = e.bufferSync(o), T = UE(p, v, y, x);
    I = e.makeTensorInfo(f, T.dtype, T.values);
  }
  return I;
}
const ZF = {
  kernelName: Ed,
  backendName: "cpu",
  kernelFunc: AF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function KF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: o, nGramWidths: r, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.data.get(u.dataId).values, p = e.data.get(h.dataId).values, [f, g] = jE(d, p, o, r, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", g)
  ];
}
const BF = {
  kernelName: Wd,
  backendName: "cpu",
  kernelFunc: KF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: o } = s, { input: r, delimiter: i } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.data.get(r.dataId).values, l = e.data.get(i.dataId).values[0], [c, u, h] = JE(a, l, o), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const _F = {
  kernelName: Md,
  backendName: "cpu",
  kernelFunc: HF
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UF(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: o } = s, { input: r } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.data.get(r.dataId).values, a = qE(i, o);
  return e.makeTensorInfo(r.shape, "int32", a);
}
const YF = {
  kernelName: Dd,
  backendName: "cpu",
  kernelFunc: UF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const jF = Yt(ta, (n) => Math.tan(n)), QF = {
  kernelName: ta,
  backendName: "cpu",
  kernelFunc: jF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JF = Yt(ea, (n) => Math.tanh(n)), qF = {
  kernelName: ea,
  backendName: "cpu",
  kernelFunc: JF
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tz(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reps: r } = s;
  bt(o, "tile");
  const i = s3(e.bufferSync(o), r);
  return e.makeTensorInfo(i.shape, i.dtype, i.values);
}
const ez = {
  kernelName: na,
  backendName: "cpu",
  kernelFunc: tz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nz(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { k: r, sorted: i } = s;
  bt(o, "topk");
  const a = e.data.get(o.dataId).values, [l, c] = o3(a, o.shape, o.dtype, r, i);
  return [
    e.makeTensorInfo(l.shape, l.dtype, l.values),
    e.makeTensorInfo(c.shape, c.dtype, c.values)
  ];
}
const sz = {
  kernelName: Fd,
  backendName: "cpu",
  kernelFunc: nz
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oz(n) {
  const { inputs: t, attrs: e, backend: s } = n, { image: o, transforms: r } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = e, [u, h, d, p] = o.shape, [f, g] = c ?? [h, d], m = [u, f, g, p], b = gt(o.shape), x = b[0], w = b[1], y = b[2], I = gt(m), v = I[0], T = I[1], k = I[2], $ = he(o.dtype, H(m));
  $.fill(l);
  const G = s.data.get(o.dataId).values, z = s.data.get(r.dataId).values;
  for (let Z = 0; Z < u; ++Z) {
    const _ = r.shape[0] === 1 ? z : z.subarray(Z * 8, Z * 8 + 8);
    for (let K = 0; K < f; ++K)
      for (let U = 0; U < g; ++U)
        for (let q = 0; q < p; ++q) {
          let j;
          const tt = _[6] * U + _[7] * K + 1;
          if (tt === 0)
            continue;
          const nt = (_[0] * U + _[1] * K + _[2]) / tt, st = (_[3] * U + _[4] * K + _[5]) / tt, at = ig(nt, d, a), rt = ig(st, h, a);
          switch (i) {
            case "nearest":
              j = uz(G, h, d, x, w, y, Z, rt, at, q, l);
              break;
            case "bilinear":
              j = hz(G, h, d, x, w, y, Z, rt, at, q, l);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`);
          }
          const ct = Z * v + K * T + U * k + q;
          $[ct] = j;
        }
    return s.makeTensorInfo(m, o.dtype, $);
  }
  return { dataId: s.write($, m, o.dtype), shape: o.shape, dtype: o.dtype };
}
const rz = {
  kernelName: zd,
  backendName: "cpu",
  kernelFunc: oz
};
function ig(n, t, e) {
  switch (e) {
    case "reflect":
      return iz(n, t);
    case "wrap":
      return az(n, t);
    case "nearest":
      return cz(n, t);
    case "constant":
    default:
      return lz(n);
  }
}
function iz(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e < s && (e = s * Math.trunc(-e / s) + e), e = e < -t ? e + s : -e - 1;
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = 2 * t;
      e -= s * Math.trunc(e / s), e >= t && (e = s - e - 1);
    }
  return Ks(0, e, t - 1);
}
function az(n, t) {
  let e = n;
  if (e < 0)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e += t * (Math.trunc(-e / s) + 1);
    }
  else if (e > t - 1)
    if (t <= 1)
      e = 0;
    else {
      const s = t - 1;
      e -= t * Math.trunc(e / s);
    }
  return Ks(0, e, t - 1);
}
function lz(n, t) {
  return n;
}
function cz(n, t) {
  return Ks(0, n, t - 1);
}
function Hr(n, t, e, s, o, r, i, a, l, c, u) {
  const h = i * s + a * o + l * r + c;
  return 0 <= a && a < t && 0 <= l && l < e ? n[h] : u;
}
function uz(n, t, e, s, o, r, i, a, l, c, u) {
  const h = Math.round(a), d = Math.round(l);
  return Hr(n, t, e, s, o, r, i, h, d, c, u);
}
function hz(n, t, e, s, o, r, i, a, l, c, u) {
  const h = Math.floor(a), d = Math.floor(l), p = h + 1, f = d + 1, g = (f - l) * Hr(n, t, e, s, o, r, i, h, d, c, u) + (l - d) * Hr(n, t, e, s, o, r, i, h, f, c, u), m = (f - l) * Hr(n, t, e, s, o, r, i, p, d, c, u) + (l - d) * Hr(n, t, e, s, o, r, i, p, f, c, u);
  return (p - a) * g + (a - h) * m;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dz(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: o } = e, { x: r } = t;
  bt(r, "unique");
  const i = s.data.get(r.dataId).values, { outputValues: a, outputShape: l, indices: c } = r3(i, o, r.shape, r.dtype);
  return [
    s.makeTensorInfo(l, r.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const pz = {
  kernelName: Vd,
  backendName: "cpu",
  kernelFunc: dz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fz(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: o } = t;
  let { axis: r } = s;
  r < 0 && (r += o.shape.length);
  const i = o.shape.length, a = o.shape[r], l = new Array(i - 1);
  let c = 0;
  for (let p = 0; p < i; p++)
    p !== r && (l[c++] = o.shape[p]);
  const u = new Array(i).fill(0), h = o.shape.slice();
  h[r] = 1;
  const d = new Array(a);
  for (let p = 0; p < d.length; p++) {
    u[r] = p;
    const f = Mo({ inputs: { x: o }, backend: e, attrs: { begin: u, size: h } });
    d[p] = ne({ inputs: { x: f }, backend: e, attrs: { shape: l } }), e.disposeIntermediateTensorInfo(f);
  }
  return d;
}
const mz = {
  kernelName: Dc,
  backendName: "cpu",
  kernelFunc: fz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gz(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, segmentIds: r } = t, { numSegments: i } = s;
  bt(o, "unsortedSegmentSum");
  const a = o.shape.length, l = r.shape.length, c = [], u = [], h = a - l;
  let d = r;
  for (let f = 0; f < h; ++f) {
    const g = Tl({ inputs: { input: d }, backend: e, attrs: { dim: f + 1 } });
    d = g, u.push(g);
  }
  for (let f = 0; f < i; ++f) {
    const g = ws(f, "int32"), m = e.makeTensorInfo([], "int32", g), b = jy({ inputs: { a: m, b: d }, backend: e }), x = js({ inputs: { x: b }, backend: e, attrs: { dtype: "float32" } }), w = fu({ inputs: { a: x, b: o }, backend: e }), y = Sa({ inputs: { x: w }, backend: e, attrs: { axis: 0, keepDims: !1 } });
    c.push(y), u.push(m), u.push(b), u.push(x), u.push(w), u.push(y);
  }
  const p = b1({ inputs: c, backend: e, attrs: { axis: 0 } });
  return u.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const bz = {
  kernelName: Fc,
  backendName: "cpu",
  kernelFunc: gz
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xz = [
  m3,
  xL,
  b3,
  y3,
  TL,
  I3,
  v3,
  k3,
  N3,
  R3,
  L3,
  W3,
  D3,
  V3,
  X3,
  Z3,
  B3,
  _3,
  Y3,
  p3,
  Q3,
  q3,
  eW,
  sW,
  vL,
  GL,
  rW,
  yL,
  aW,
  cW,
  uW,
  dW,
  fW,
  gW,
  xW,
  wW,
  CW,
  SW,
  TW,
  $W,
  GW,
  EW,
  MW,
  DW,
  zW,
  PW,
  OW,
  AW,
  ZW,
  KW,
  _W,
  i3,
  YW,
  WL,
  sM,
  DL,
  oM,
  VL,
  uM,
  hM,
  pM,
  OL,
  gM,
  xM,
  wM,
  CM,
  SM,
  HL,
  YL,
  wL,
  TM,
  lW,
  $M,
  GM,
  EM,
  a3,
  JL,
  eE,
  MM,
  rE,
  FM,
  PM,
  OM,
  KM,
  HM,
  UM,
  YM,
  cE,
  QM,
  qM,
  eD,
  sD,
  rD,
  aD,
  cD,
  dE,
  hD,
  fD,
  bD,
  fE,
  bE,
  wD,
  vD,
  TD,
  wE,
  $D,
  GD,
  LD,
  x1,
  DD,
  c3,
  SE,
  zD,
  PD,
  OD,
  IL,
  Fh,
  ZD,
  u3,
  h3,
  d3,
  BD,
  _D,
  YD,
  QD,
  qD,
  tF,
  nF,
  zE,
  oF,
  cF,
  hF,
  mF,
  VE,
  bF,
  yF,
  IF,
  XE,
  mD,
  SF,
  TF,
  $F,
  GF,
  EF,
  MF,
  FF,
  VF,
  KE,
  PF,
  _E,
  OF,
  ZF,
  BF,
  _F,
  YF,
  n3,
  BW,
  QF,
  qF,
  ez,
  sz,
  rz,
  IE,
  pz,
  mz,
  bz,
  RD
];
for (const n of xz)
  bn(n);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fo = {}, Pa = {
  alpha: !1,
  antialias: !1,
  premultipliedAlpha: !1,
  preserveDrawingBuffer: !1,
  depth: !1,
  stencil: !1,
  failIfMajorPerformanceCaveat: !0
};
function yz(n, t) {
  fo[n] = t;
}
function is(n, t) {
  if (!(n in fo) || t != null) {
    const s = Iz(n, t);
    if (s !== null)
      fo[n] = s;
    else
      return console.log("Could not get context for WebGL version", n), null;
  }
  const e = fo[n];
  return e == null || e.isContextLost() ? (delete fo[n], is(n)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), fo[n]);
}
function wz(n) {
  if (typeof OffscreenCanvas < "u" && n === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document < "u")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function Iz(n, t) {
  if (n !== 1 && n !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  const e = t ?? wz(n);
  return e.addEventListener("webglcontextlost", (s) => {
    s.preventDefault(), delete fo[n];
  }, !1), B().getBool("SOFTWARE_WEBGL_ENABLED") && (Pa.failIfMajorPerformanceCaveat = !1), n === 1 ? e.getContext("webgl", Pa) || e.getContext("experimental-webgl", Pa) : e.getContext("webgl2", Pa);
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var ri;
(function(n) {
  n[n.DENSE = 0] = "DENSE", n[n.SHARED_BATCH = 1] = "SHARED_BATCH";
})(ri || (ri = {}));
var Cn;
(function(n) {
  n[n.RENDER = 0] = "RENDER", n[n.UPLOAD = 1] = "UPLOAD", n[n.PIXELS = 2] = "PIXELS", n[n.DOWNLOAD = 3] = "DOWNLOAD";
})(Cn || (Cn = {}));
var Pe;
(function(n) {
  n[n.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", n[n.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", n[n.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", n[n.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", n[n.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Pe || (Pe = {}));
function ka(n, t) {
  return [t, n];
}
function Cz(n, t) {
  return n * t;
}
function Xa(n) {
  const t = H(n), e = Math.ceil(t / 4);
  return qa(e);
}
function Rr(n, t) {
  return [
    Math.max(1, Math.ceil(t / 2)),
    Math.max(1, Math.ceil(n / 2))
  ];
}
function vz(n, t) {
  const [e, s] = Rr(n, t);
  return e * s * 4;
}
function Qf(n, t) {
  const e = n;
  let s, o, r, i, a, l, c, u, h, d;
  return B().getNumber("WEBGL_VERSION") === 2 ? (s = e.R32F, o = e.R16F, r = e.RGBA16F, i = e.RGBA32F, a = e.RED, c = 4, u = 1, h = e.HALF_FLOAT, d = e.FLOAT, l = e.RGBA8) : (s = n.RGBA, o = n.RGBA, r = n.RGBA, i = e.RGBA, a = n.RGBA, c = 4, u = 4, h = t != null ? t.HALF_FLOAT_OES : null, d = n.FLOAT, l = n.RGBA), {
    internalFormatFloat: s,
    internalFormatHalfFloat: o,
    internalFormatPackedHalfFloat: r,
    internalFormatPackedFloat: i,
    textureFormatFloat: a,
    downloadTextureFormat: l,
    downloadUnpackNumChannels: c,
    defaultNumChannels: u,
    textureTypeHalfFloat: h,
    textureTypeFloat: d
  };
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xt(n, t) {
  const e = t();
  return B().getBool("DEBUG") && Sz(n), e;
}
function Sz(n) {
  const t = n.getError();
  if (t !== n.NO_ERROR)
    throw new Error("WebGL Error: " + $z(n, t));
}
const kz = 596e-10, Tz = 65504;
function Nz(n) {
  return !!(B().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || n === 0 || kz < Math.abs(n) && Math.abs(n) < Tz);
}
function $z(n, t) {
  switch (t) {
    case n.NO_ERROR:
      return "NO_ERROR";
    case n.INVALID_ENUM:
      return "INVALID_ENUM";
    case n.INVALID_VALUE:
      return "INVALID_VALUE";
    case n.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case n.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case n.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case n.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t}`;
  }
}
function Oa(n, t) {
  return Fs(n, () => n.getExtension(t), 'Extension "' + t + '" not supported on this browser.');
}
function Rz(n, t) {
  const e = Fs(n, () => n.createShader(n.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (xt(n, () => n.shaderSource(e, t)), xt(n, () => n.compileShader(e)), n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw console.log(n.getShaderInfoLog(e)), new Error("Failed to compile vertex shader.");
  return e;
}
function Gz(n, t) {
  const e = Fs(n, () => n.createShader(n.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (xt(n, () => n.shaderSource(e, t)), xt(n, () => n.compileShader(e)), B().get("ENGINE_COMPILE_ONLY"))
    return e;
  if (n.getShaderParameter(e, n.COMPILE_STATUS) === !1)
    throw y1(t, n.getShaderInfoLog(e)), new Error("Failed to compile fragment shader.");
  return e;
}
const Lz = /ERROR: [0-9]+:([0-9]+):/g;
function y1(n, t) {
  const e = Lz.exec(t);
  if (e == null) {
    console.log(`Couldn't parse line number in error: ${t}`), console.log(n);
    return;
  }
  const s = +e[1], o = n.split(`
`), r = o.length.toString().length + 2, i = o.map((h, d) => xo((d + 1).toString(), r) + h);
  let a = 0;
  for (let h = 0; h < i.length; h++)
    a = Math.max(i[h].length, a);
  const l = i.slice(0, s - 1), c = i.slice(s - 1, s), u = i.slice(s);
  console.log(l.join(`
`)), console.log(t.split(`
`)[0]), console.log(`%c ${xo(c[0], a)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(u.join(`
`));
}
function Ez(n) {
  return Fs(n, () => n.createProgram(), "Unable to create WebGLProgram.");
}
function Wz(n, t) {
  if (xt(n, () => n.linkProgram(t)), !B().get("ENGINE_COMPILE_ONLY") && n.getProgramParameter(t, n.LINK_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function Ru(n, t) {
  if (xt(n, () => n.validateProgram(t)), n.getProgramParameter(t, n.VALIDATE_STATUS) === !1)
    throw console.log(n.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function Mz(n, t) {
  const e = Fs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return xt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), xt(n, () => n.bufferData(n.ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function Dz(n, t) {
  const e = Fs(n, () => n.createBuffer(), "Unable to create WebGLBuffer");
  return xt(n, () => n.bindBuffer(n.ELEMENT_ARRAY_BUFFER, e)), xt(n, () => n.bufferData(n.ELEMENT_ARRAY_BUFFER, t, n.STATIC_DRAW)), e;
}
function Fz(n) {
  return Fs(n, () => n.createTexture(), "Unable to create WebGLTexture.");
}
function zz(n, t) {
  const e = B().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (n <= 0 || t <= 0) {
    const s = `[${n}x${t}]`;
    throw new Error("Requested texture size " + s + " is invalid.");
  }
  if (n > e || t > e) {
    const s = `[${n}x${t}]`, o = `[${e}x${e}]`;
    throw new Error("Requested texture size " + s + " greater than WebGL maximum on this browser / GPU " + o + ".");
  }
}
function Vz(n) {
  return Fs(n, () => n.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function ag(n, t, e, s, o, r, i) {
  const a = n.getAttribLocation(t, e);
  return a === -1 ? !1 : (xt(n, () => n.bindBuffer(n.ARRAY_BUFFER, s)), xt(n, () => n.vertexAttribPointer(a, o, n.FLOAT, !1, r, i)), xt(n, () => n.enableVertexAttribArray(a)), !0);
}
function Pz(n, t, e) {
  Kz(n, e), xt(n, () => n.activeTexture(n.TEXTURE0 + e)), xt(n, () => n.bindTexture(n.TEXTURE_2D, t));
}
function Xz(n, t, e) {
  return Fs(n, () => n.getUniformLocation(t, e), 'uniform "' + e + '" not present in program.');
}
function Oz(n, t, e) {
  return n.getUniformLocation(t, e);
}
function Az(n, t, e, s) {
  xt(n, () => Pz(n, t, s)), xt(n, () => n.uniform1i(e, s));
}
function Gu(n, t, e) {
  xt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, e)), xt(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, t, 0));
}
function lg(n, t) {
  xt(n, () => n.bindFramebuffer(n.FRAMEBUFFER, t)), xt(n, () => n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, null, 0));
}
function Aa(n) {
  const t = n.checkFramebufferStatus(n.FRAMEBUFFER);
  if (t !== n.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + Zz(n, t));
}
function Zz(n, t) {
  switch (t) {
    case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case n.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t}`;
  }
}
function Fs(n, t, e) {
  const s = xt(n, () => t());
  if (s == null)
    throw new Error(e);
  return s;
}
function Kz(n, t) {
  const e = n.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, s = t + n.TEXTURE0;
  if (s < n.TEXTURE0 || s > e) {
    const o = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
    throw new Error(`textureUnit must be in ${o}.`);
  }
}
function fr(n, t = 2) {
  return H(n.slice(0, n.length - t));
}
function mr(n) {
  if (n.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [
    n.length > 1 ? n[n.length - 2] : 1,
    n[n.length - 1]
  ];
}
function Lu(n) {
  let t = [1, 1, 1];
  return n.length === 0 || n.length === 1 && n[0] === 1 || (t = [fr(n), ...mr(n)]), t;
}
function Bz(n, t = !1) {
  let e = B().getNumber("WEBGL_MAX_TEXTURE_SIZE"), s = B().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  s === 1 / 0 && B().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (s = e / 2), t && (e = e * 2, s = s * 2, n = n.map((a, l) => l >= n.length - 2 ? Ml(n[l]) : n[l]), n.length === 1 && (n = [2, n[0]])), n.length !== 2 && (n = Gs(n).newShape);
  let o = H(n), r = null;
  n.length <= 1 && o <= e ? r = [1, o] : n.length === 2 && n[0] <= e && n[1] <= e ? r = n : n.length === 3 && n[0] * n[1] <= e && n[2] <= e ? r = [n[0] * n[1], n[2]] : n.length === 3 && n[0] <= e && n[1] * n[2] <= e ? r = [n[0], n[1] * n[2]] : n.length === 4 && n[0] * n[1] * n[2] <= e && n[3] <= e ? r = [n[0] * n[1] * n[2], n[3]] : n.length === 4 && n[0] <= e && n[1] * n[2] * n[3] <= e && (r = [n[0], n[1] * n[2] * n[3]]);
  const i = r != null && Math.max(...r) > s && Math.min(...r) <= (t ? 2 : 1) && Math.min(...r) > 0;
  if (r == null || i)
    if (t) {
      const a = fr(n);
      let l = 2, c = 2;
      n.length && ([l, c] = mr(n)), o = a * (l / 2) * (c / 2), r = qa(o).map((u) => u * 2);
    } else
      r = qa(o);
  return r;
}
function Za(n) {
  return n % 2 === 0;
}
function $l(n, t) {
  if (n = n.slice(-2), t = t.slice(-2), At(n, t) || !n.length || !t.length || n[0] === 0 || n[1] === 0 || t[0] === 0 || t[1] === 0)
    return !0;
  if (n.length !== t.length) {
    const e = n.slice(-1)[0], s = t.slice(-1)[0];
    if (e === s || Za(e) && Za(s) && (n[0] === 1 || t[0] === 1))
      return !0;
  }
  return n[1] === t[1] && Za(n[0]) && Za(t[0]);
}
let Eu, Wu;
function Hz(n) {
  if (Eu == null) {
    const t = is(n);
    Eu = t.getParameter(t.MAX_TEXTURE_SIZE);
  }
  return Eu;
}
function _z(n) {
  if (Wu == null) {
    const t = is(n);
    Wu = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Wu);
}
function Uz(n) {
  if (n === 0)
    return 0;
  let t;
  const e = is(n);
  return Xn(e, "EXT_disjoint_timer_query_webgl2") && n === 2 ? t = 2 : Xn(e, "EXT_disjoint_timer_query") ? t = 1 : t = 0, t;
}
function Xn(n, t) {
  return n.getExtension(t) != null;
}
function cg(n) {
  try {
    if (is(n) != null)
      return !0;
  } catch (t) {
    return console.log("Error when getting WebGL context: ", t), !1;
  }
  return !1;
}
function Yz(n) {
  if (n === 0)
    return !1;
  const t = is(n);
  if (n === 1) {
    if (!Xn(t, "OES_texture_float"))
      return !1;
  } else if (!Xn(t, "EXT_color_buffer_float"))
    return !1;
  return Vh(t);
}
function jz(n) {
  if (n === 0)
    return !1;
  const t = is(n);
  if (n === 1) {
    if (!Xn(t, "OES_texture_float") || !Xn(t, "WEBGL_color_buffer_float"))
      return !1;
  } else {
    if (Xn(t, "EXT_color_buffer_float"))
      return Vh(t);
    const s = "EXT_color_buffer_half_float";
    if (Xn(t, s)) {
      const o = t.getExtension(s);
      return Qz(t, o);
    }
    return !1;
  }
  return Vh(t);
}
function Vh(n) {
  const t = Qf(n), e = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, e);
  const s = 1, o = 1;
  n.texImage2D(n.TEXTURE_2D, 0, t.internalFormatFloat, s, o, 0, t.textureFormatFloat, t.textureTypeFloat, null);
  const r = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, r), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, e, 0);
  const i = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(e), n.deleteFramebuffer(r), i;
}
function Qz(n, t) {
  const e = Qf(n, t), s = n.createTexture();
  n.bindTexture(n.TEXTURE_2D, s);
  const o = 1, r = 1;
  n.texImage2D(n.TEXTURE_2D, 0, e.internalFormatHalfFloat, o, r, 0, e.textureFormatFloat, e.textureTypeHalfFloat, null);
  const i = n.createFramebuffer();
  n.bindFramebuffer(n.FRAMEBUFFER, i), n.framebufferTexture2D(n.FRAMEBUFFER, n.COLOR_ATTACHMENT0, n.TEXTURE_2D, s, 0);
  const a = n.checkFramebufferStatus(n.FRAMEBUFFER) === n.FRAMEBUFFER_COMPLETE;
  return n.bindTexture(n.TEXTURE_2D, null), n.bindFramebuffer(n.FRAMEBUFFER, null), n.deleteTexture(s), n.deleteFramebuffer(i), a;
}
function Jz(n) {
  return n !== 2 ? !1 : is(n).fenceSync != null;
}
function Ta(n, t) {
  Array.isArray(n) || (n = [n]), n.forEach((e) => {
    e != null && S(e.dtype !== "complex64", () => `${t} does not support complex64 tensors in the WebGL backend.`);
  });
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const It = B();
It.registerFlag("HAS_WEBGL", () => It.getNumber("WEBGL_VERSION") > 0);
It.registerFlag("WEBGL_VERSION", () => cg(2) ? 2 : cg(1) ? 1 : 0);
It.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => !1);
It.registerFlag("WEBGL_BUFFER_SUPPORTED", () => It.get("WEBGL_VERSION") === 2);
It.registerFlag("WEBGL_CPU_FORWARD", () => !0);
It.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => !1);
It.registerFlag("WEBGL_PACK", () => It.getBool("HAS_WEBGL"));
It.registerFlag("WEBGL_PACK_NORMALIZATION", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_CLIP", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_PACK_REDUCE", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_LAZILY_UNPACK", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_CONV_IM2COL", () => It.getBool("WEBGL_PACK"));
It.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => Hz(It.getNumber("WEBGL_VERSION")));
It.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => _z(It.getNumber("WEBGL_VERSION")));
It.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  const n = It.getNumber("WEBGL_VERSION");
  return n === 0 ? 0 : Uz(n);
});
It.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => It.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !Kd());
It.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => Yz(It.getNumber("WEBGL_VERSION")));
It.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => It.getBool("WEBGL_FORCE_F16_TEXTURES") ? !1 : It.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
It.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => jz(It.getNumber("WEBGL_VERSION")));
It.registerFlag("WEBGL_FENCE_API_ENABLED", () => Jz(It.getNumber("WEBGL_VERSION")));
It.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => It.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
It.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`);
});
It.registerFlag("WEBGL_FLUSH_THRESHOLD", () => Kd() ? 1 : -1, (n) => {
  if (n < 0 && n !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`);
});
It.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
It.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => !1);
It.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
It.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
It.registerFlag("WEBGL_EXP_CONV", () => !1);
It.registerFlag("SOFTWARE_WEBGL_ENABLED", () => It.getBool("IS_TEST"));
It.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
It.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => !1);
It.registerFlag("WEBGL2_ISNAN_CUSTOM", () => !1);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Je() {
  let n, t, e, s, o, r, i, a, l, c;
  return B().getNumber("WEBGL_VERSION") === 2 ? (n = "#version 300 es", t = "in", e = "out", s = "in", o = "texture", r = "outputColor", i = "out vec4 outputColor;", a = B().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", l = "", c = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (n = "", t = "attribute", e = "varying", s = "varying", o = "texture2D", r = "gl_FragColor", i = "", a = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, l = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, c = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), {
    version: n,
    attribute: t,
    varyingVs: e,
    varyingFs: s,
    texture2D: o,
    output: r,
    defineOutput: i,
    defineSpecialNaN: a,
    defineSpecialInf: l,
    defineRound: c
  };
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oo(n, t, e = "index") {
  const s = gt(t);
  return s.map((o, r) => {
    const i = `int ${n[r]} = ${e} / ${o}`, a = r === s.length - 1 ? `int ${n[r + 1]} = ${e} - ${n[r]} * ${o}` : `index -= ${n[r]} * ${o}`;
    return `${i}; ${a};`;
  }).join("");
}
function mu(n, t, e = "index") {
  const s = gt(t);
  return s.map((o, r) => {
    const i = `int ${n[r]} = ${e} / outShapeStrides[${r}]`, a = r === s.length - 1 ? `int ${n[r + 1]} = ${e} - ${n[r]} * outShapeStrides[${r}]` : `index -= ${n[r]} * outShapeStrides[${r}]`;
    return `${i}; ${a};`;
  }).join("");
}
function qz(n, t) {
  const e = n.length, s = n.map((r) => `${t}[${r}]`), o = new Array(e - 1);
  o[e - 2] = s[e - 1];
  for (let r = e - 3; r >= 0; --r)
    o[r] = `(${o[r + 1]} * ${s[r + 1]})`;
  return o;
}
function tV(n, t, e = "index") {
  const s = n.map((r, i) => i), o = qz(s, t);
  return o.map((r, i) => {
    const a = `int ${n[i]} = ${e} / ${o[i]}`, l = i === o.length - 1 ? `int ${n[i + 1]} = ${e} - ${n[i]} * ${o[i]}` : `index -= ${n[i]} * ${o[i]}`;
    return `${a}; ${l};`;
  }).join("");
}
function Jf(n) {
  const t = gt(n).map((e) => e.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`;
}
function qf() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
const w1 = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { getBroadcastDims: I1 } = jT;
function eV(n, t, e) {
  const s = [];
  if (n.forEach((p) => {
    const f = H(p.shapeInfo.logicalShape);
    if (p.shapeInfo.isUniform ? s.push(`uniform float ${p.name}${f > 1 ? `[${f}]` : ""};`) : (s.push(`uniform sampler2D ${p.name};`), s.push(`uniform int offset${p.name};`)), e.enableShapeUniforms) {
      const { uniformShape: g } = tm(e.packedInputs, p.shapeInfo.logicalShape, p.shapeInfo.texShape);
      switch (g.length) {
        case 1:
          s.push(`uniform int ${p.name}Shape;`);
          break;
        case 2:
          s.push(`uniform ivec2 ${p.name}Shape;`);
          break;
        case 3:
          s.push(`uniform ivec3 ${p.name}Shape;`);
          break;
        case 4:
          s.push(`uniform ivec4 ${p.name}Shape;`);
          break;
      }
      s.push(`uniform ivec2 ${p.name}TexShape;`);
    }
  }), e.enableShapeUniforms) {
    switch (t.logicalShape.length) {
      case 1:
        s.push("uniform int outShape;");
        break;
      case 2:
        s.push("uniform ivec2 outShape;"), s.push("uniform int outShapeStrides;");
        break;
      case 3:
        s.push("uniform ivec3 outShape;"), s.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        s.push("uniform ivec4 outShape;"), s.push("uniform ivec3 outShapeStrides;");
        break;
    }
    s.push("uniform ivec2 outTexShape;");
  }
  e.customUniforms && e.customUniforms.forEach((p) => {
    s.push(`uniform ${p.type} ${p.name}${p.arrayIndex ? `[${p.arrayIndex}]` : ""};`);
  });
  const o = s.join(`
`), r = n.map((p) => nV(p, t, e.packedInputs, e.enableShapeUniforms)).join(`
`), i = t.texShape, a = Je(), l = rV(a);
  let c, u, h = lV(a);
  return t.isPacked ? (c = sV(t.logicalShape, i, e.enableShapeUniforms), u = aV(a)) : (c = oV(t.logicalShape, i, e.enableShapeUniforms), u = iV(a)), e.packedInputs && (h += dV), [
    h,
    l,
    u,
    o,
    c,
    r,
    e.userCode
  ].join(`
`);
}
function Gr(n, t = !1) {
  const e = n.shapeInfo.logicalShape;
  switch (e.length) {
    case 0:
      return SV(n, t);
    case 1:
      return TV(n, t);
    case 2:
      return $V(n, t);
    case 3:
      return GV(n, t);
    case 4:
      return EV(n, t);
    case 5:
      return WV(n);
    case 6:
      return MV(n);
    default:
      throw new Error(`${e.length}-D input sampling is not yet supported`);
  }
}
function C1(n, t) {
  switch (n.shapeInfo.logicalShape.length) {
    case 0:
      return vV(n);
    case 1:
      return kV(n, t);
    case 2:
      return NV(n, t);
    case 3:
      return RV(n, t);
    default:
      return LV(n, t);
  }
}
function nV(n, t, e = !1, s) {
  let o = "";
  e ? o += C1(n, s) : o += Gr(n, s);
  const r = n.shapeInfo.logicalShape, i = t.logicalShape;
  return r.length <= i.length && (e ? o += DV(n, t) : o += FV(n, t)), o;
}
function sV(n, t, e) {
  switch (n.length) {
    case 0:
      return v1();
    case 1:
      return pV(n, t, e);
    case 2:
      return IV(n, t, e);
    case 3:
      return mV(n, t, e);
    default:
      return bV(n, t, e);
  }
}
function oV(n, t, e) {
  switch (n.length) {
    case 0:
      return v1();
    case 1:
      return fV(n, t, e);
    case 2:
      return CV(n, t, e);
    case 3:
      return gV(n, t, e);
    case 4:
      return xV(n, t, e);
    case 5:
      return yV(n, t);
    case 6:
      return wV(n, t);
    default:
      throw new Error(`${n.length}-D output sampling is not yet supported`);
  }
}
function rV(n) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${n.texture2D}(textureSampler, uv).r;
    }
  `;
}
function iV(n) {
  return `
    void setOutput(float val) {
      ${n.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function aV(n) {
  return `
    void setOutput(vec4 val) {
      ${n.output} = val;
    }
  `;
}
function lV(n) {
  return `${n.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${n.varyingFs} vec2 resultUV;
    ${n.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${n.defineSpecialNaN}
    ${n.defineSpecialInf}
    ${n.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${cV}
    ${uV}
    ${hV}
  `;
}
const cV = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, uV = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, hV = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`, dV = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function v1() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function pV(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  return s[0] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${s[1]}.0);
      }
    ` : s[1] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${s[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);
    }
  `;
}
function fV(n, t, e) {
  return t[0] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    ` : t[1] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;
}
function mV(n, t, e) {
  if (e)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], o = Math.ceil(n[2] / 2), r = o * Math.ceil(n[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function gV(n, t, e) {
  if (e)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${mu(["r", "c", "d"], n)}
    return ivec3(r, c, d);
  }
`;
  const s = Oo(["r", "c", "d"], n);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec3(r, c, d);
    }
  `;
}
function bV(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)], o = Math.ceil(n[n.length - 1] / 2), r = o * Math.ceil(n[n.length - 2] / 2);
  let i = r, a = "", l = "b, r, c";
  for (let c = 2; c < n.length - 1; c++)
    i *= n[n.length - c - 1], a = `
      int b${c} = index / ${i};
      index -= b${c} * ${i};
    ` + a, l = `b${c}, ` + l;
  return `
    ivec${n.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));
      int index = resTexRC.x * ${s[1]} + resTexRC.y;

      ${a}

      int b = index / ${r};
      index -= b * ${r};

      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec${n.length}(${l});
    }
  `;
}
function xV(n, t, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${mu(["r", "c", "d", "d2"], n)}
      return ivec4(r, c, d, d2);
    }
  `;
  const s = Oo(["r", "c", "d", "d2"], n);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${s}
      return ivec4(r, c, d, d2);
    }
  `;
}
function yV(n, t) {
  const e = Oo(["r", "c", "d", "d2", "d3"], n);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function wV(n, t) {
  const e = Oo(["r", "c", "d", "d2", "d3", "d4"], n);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function IV(n, t, e) {
  const s = [Math.ceil(t[0] / 2), Math.ceil(t[1] / 2)];
  if (At(n, t))
    return e ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));
      }
    `;
  const o = Math.ceil(n[1] / 2);
  return e ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${s[0]}, ${s[1]}));

      int index = resTexRC.x * ${s[1]} + resTexRC.y;
      int r = 2 * (index / ${o});
      int c = imod(index, ${o}) * 2;

      return ivec2(r, c);
    }
  `;
}
function CV(n, t, e) {
  return At(n, t) ? e ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    ` : n[1] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : n[0] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : e ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${n[1]};
      int c = index - r * ${n[1]};
      return ivec2(r, c);
    }
  `;
}
function Ao(n) {
  return `offset${n}`;
}
function vV(n) {
  const t = n.name, e = "get" + t.charAt(0).toUpperCase() + t.slice(1), s = Je();
  return `
    vec4 ${e}() {
      return ${s.texture2D}(${t}, halfCR);
    }
  `;
}
function SV(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `float ${s}() {return ${e};}`;
  const [o, r] = n.shapeInfo.texShape;
  if (o === 1 && r === 1)
    return `
      float ${s}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const i = Ao(e);
  if (t)
    return `
    float ${s}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});
      return sampleTexture(${e}, uv);
    }
  `;
  const [a, l] = n.shapeInfo.texShape;
  return `
    float ${s}() {
      vec2 uv = uvFromFlat(${a}, ${l}, ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function kV(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = n.shapeInfo.texShape, r = Je();
  if (t)
    return `
    vec4 ${s}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
  const i = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
  return `
    vec4 ${s}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${r.texture2D}(${e}, uv);
    }
  `;
}
function TV(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int index) {
        ${Lr(n)}
      }
    `;
  const o = n.shapeInfo.texShape, r = o[0], i = o[1];
  if (i === 1 && r === 1)
    return `
      float ${s}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
  const a = Ao(e);
  return i === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${a}) + 0.5) / ${r}.0);
        return sampleTexture(${e}, uv);
      }
    ` : r === 1 ? t ? `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${s}(int index) {
        vec2 uv = vec2((float(index + ${a}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : t ? `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${a});
      return sampleTexture(${e}, uv);
    }
  ` : `
    float ${s}(int index) {
      vec2 uv = uvFromFlat(${r}, ${i}, index + ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function NV(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape, i = r[0], a = r[1], l = Je();
  if (r != null && At(e, r))
    return t ? `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);

        return ${l.texture2D}(${s}, uv);
      }
    ` : `
      vec4 ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}.0, ${i}.0);

        return ${l.texture2D}(${s}, uv);
      }
    `;
  if (t)
    return `
    vec4 ${o}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
  const c = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)], u = Math.ceil(e[1] / 2);
  return `
    vec4 ${o}(int row, int col) {
      vec2 uv = packedUVfrom2D(${u}, ${c[0]}, ${c[1]}, row, col);
      return ${l.texture2D}(${s}, uv);
    }
  `;
}
function $V(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape;
  if (r != null && At(e, r)) {
    if (t)
      return `
      float ${o}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    `;
    const d = r[0], p = r[1];
    return `
    float ${o}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${p}.0, ${d}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  }
  const { newShape: i, keptDims: a } = Gs(e), l = i;
  if (l.length < e.length) {
    const d = Er(n, l), p = ["row", "col"];
    return `
      ${Gr(d, t)}
      float ${o}(int row, int col) {
        return ${o}(${Wr(p, a)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Lr(n)}
      }
    `;
  const c = r[0], u = r[1], h = Ao(s);
  return u === 1 ? t ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);
      return sampleTexture(${s}, uv);
    }
  ` : c === 1 ? t ? `
      float ${o}(int row, int col) {
        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col) {
      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);
      return sampleTexture(${s}, uv);
    }
  ` : t ? `
      float ${o}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s}Shape[1] + col + ${h};
        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
        return sampleTexture(${s}, uv);
      }
    ` : `
  float ${o}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${h};
    vec2 uv = uvFromFlat(${c}, ${u}, index);
    return sampleTexture(${s}, uv);
  }
`;
}
function RV(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = n.shapeInfo.texShape, i = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)];
  if (e[0] === 1) {
    const d = e.slice(1), p = [1, 2], f = Er(n, d), g = ["b", "row", "col"];
    return `
        ${C1(f, t)}
        vec4 ${o}(int b, int row, int col) {
          return ${o}(${Wr(g, p)});
        }
      `;
  }
  const a = Je();
  if (t)
    return `
    vec4 ${o}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
  const l = i[0], c = i[1], u = Math.ceil(e[2] / 2), h = u * Math.ceil(e[1] / 2);
  return `
    vec4 ${o}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${l}, ${c}, ${h}, ${u}, b, row, col);
      return ${a.texture2D}(${s}, uv);
    }
  `;
}
function GV(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = e[1] * e[2], i = e[2], { newShape: a, keptDims: l } = Gs(e), c = a;
  if (c.length < e.length) {
    const g = Er(n, c), m = ["row", "col", "depth"];
    return `
        ${Gr(g, t)}
        float ${o}(int row, int col, int depth) {
          return ${o}(${Wr(m, l)});
        }
      `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${r}, ${i}, 1)));
        ${Lr(n)}
      }
    `;
  const u = n.shapeInfo.texShape, h = u[0], d = u[1], p = n.shapeInfo.flatOffset;
  if (d === r && p == null)
    return t ? `
      float ${o}(int row, int col, int depth) {
        int stride1 = ${s}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
        float ${o}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${i}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${h}.0);
          return sampleTexture(${s}, uv);
        }
      `;
  if (d === i && p == null)
    return t ? `
      float ${o}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
    float ${o}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);
      return sampleTexture(${s}, uv);
    }
  `;
  const f = Ao(s);
  return t ? `
    float ${o}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${s}Shape[1] * ${s}Shape[2];
      int stride1 = ${s}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);
      return sampleTexture(${s}, uv);
    }
    ` : `
      float ${o}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${r} + col * ${i} + depth + ${f};
        vec2 uv = uvFromFlat(${h}, ${d}, index);
        return sampleTexture(${s}, uv);
      }
  `;
}
function LV(n, t) {
  const e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = Je();
  if (t)
    return `
    vec4 ${s}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${o.texture2D}(${e}, uv);
    }
  `;
  const r = n.shapeInfo.logicalShape, i = r.length, a = n.shapeInfo.texShape, l = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)], c = l[0], u = l[1], h = Math.ceil(r[i - 1] / 2);
  let d = h * Math.ceil(r[i - 2] / 2), p = "int b, int row, int col", f = `b * ${d} + (row / 2) * ${h} + (col / 2)`;
  for (let g = 2; g < i - 1; g++)
    p = `int b${g}, ` + p, d *= r[i - g - 1], f = `b${g} * ${d} + ` + f;
  return `
    vec4 ${s}(${p}) {
      int index = ${f};
      int texR = index / ${u};
      int texC = index - texR * ${u};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${c});
      return ${o.texture2D}(${e}, uv);
    }
  `;
}
function EV(n, t) {
  const e = n.shapeInfo.logicalShape, s = n.name, o = "get" + s.charAt(0).toUpperCase() + s.slice(1), r = e[3], i = e[2] * r, a = e[1] * i, { newShape: l, keptDims: c } = Gs(e);
  if (l.length < e.length) {
    const x = Er(n, l), w = ["row", "col", "depth", "depth2"];
    return `
      ${Gr(x, t)}
      float ${o}(int row, int col, int depth, int depth2) {
        return ${o}(${Wr(w, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${a}, ${i}, ${r}, 1)));
        ${Lr(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1], f = `int stride2 = ${s}Shape[3];`, g = `int stride1 = ${s}Shape[2] * stride2;`, m = `int stride0 = ${s}Shape[1] * stride1;`;
  if (p === a && u == null)
    return t ? `
      float ${o}(int row, int col, int depth, int depth2) {
        ${f}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${i}, ${r}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  if (p === r && u == null)
    return t ? `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${s}TexShape[1], ${s}TexShape[0]);
        return sampleTexture(${s}, uv);
      }
    ` : `
      float ${o}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${s}, uv);
      }
    `;
  const b = Ao(s);
  return t ? `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${g}
      ${m}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${b});
      return sampleTexture(${s}, uv);
    }
  ` : `
    float ${o}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} +
          depth * ${r} + depth2;
      vec2 uv = uvFromFlat(${d}, ${p}, index + ${b});
      return sampleTexture(${s}, uv);
    }
  `;
}
function WV(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = t[4], r = t[3] * o, i = t[2] * r, a = t[1] * i, { newShape: l, keptDims: c } = Gs(t);
  if (l.length < t.length) {
    const g = Er(n, l), m = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${Gr(g)}
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        return ${s}(${Wr(m, c)});
      }
    `;
  }
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${a}, ${i}, ${r}, ${o})) +
          depth3;
        ${Lr(n)}
      }
    `;
  const u = n.shapeInfo.flatOffset, h = n.shapeInfo.texShape, d = h[0], p = h[1];
  if (p === a && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${i}, ${r}, ${o}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (p === o && u == null)
    return `
      float ${s}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3]},
               ${t[2] * t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${p}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const f = Ao(e);
  return `
    float ${s}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${a} + col * ${i} + depth * ${r} +
          depth2 * ${o} + depth3 + ${f};
      vec2 uv = uvFromFlat(${d}, ${p}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function MV(n) {
  const t = n.shapeInfo.logicalShape, e = n.name, s = "get" + e.charAt(0).toUpperCase() + e.slice(1), { newShape: o, keptDims: r } = Gs(t);
  if (o.length < t.length) {
    const m = Er(n, o), b = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${Gr(m)}
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${s}(${Wr(b, r)});
      }
    `;
  }
  const i = t[5], a = t[4] * i, l = t[3] * a, c = t[2] * l, u = t[1] * c;
  if (n.shapeInfo.isUniform)
    return `
      float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${u}, ${c}, ${l}, ${a})) +
          dot(
            vec2(depth3, depth4),
            vec2(${i}, 1)));
        ${Lr(n)}
      }
    `;
  const h = n.shapeInfo.flatOffset, d = n.shapeInfo.texShape, p = d[0], f = d[1];
  if (f === u && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${c}, ${l}, ${a}, ${i})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (f === i && h == null)
    return `
      float ${s}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1] * t[2] * t[3] * t[4]},
               ${t[2] * t[3] * t[4]},
               ${t[3] * t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${p}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  const g = Ao(e);
  return `
    float ${s}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${u} + col * ${c} + depth * ${l} +
          depth2 * ${a} + depth3 * ${i} + depth4 + ${g};
      vec2 uv = uvFromFlat(${p}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function Lr(n) {
  const t = n.name, e = H(n.shapeInfo.logicalShape);
  return e < 2 ? `return ${t};` : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `;
}
function DV(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), o = "get" + s + "AtOutCoords", r = n.shapeInfo.logicalShape.length, i = t.logicalShape.length, a = I1(n.shapeInfo.logicalShape, t.logicalShape), l = se(i), c = i - r;
  let u;
  const h = ["x", "y", "z", "w", "u", "v"];
  r === 0 ? u = "" : i < 2 && a.length >= 1 ? u = "coords = 0;" : u = a.map((x) => `coords.${h[x + c]} = 0;`).join(`
`);
  let d = "";
  i < 2 && r > 0 ? d = "coords" : d = n.shapeInfo.logicalShape.map((x, w) => `coords.${h[w + c]}`).join(", ");
  let p = "return outputValue;";
  const g = H(n.shapeInfo.logicalShape) === 1, b = H(t.logicalShape) === 1;
  if (r === 1 && !g && !b)
    p = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (g && !b)
    i === 1 ? p = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : p = `
        return vec4(outputValue.x);
      `;
  else if (a.length) {
    const x = r - 2, w = r - 1;
    a.indexOf(x) > -1 && a.indexOf(w) > -1 ? p = "return vec4(outputValue.x);" : a.indexOf(x) > -1 ? p = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : a.indexOf(w) > -1 && (p = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${o}() {
      ${l} coords = getOutputCoords();
      ${u}
      vec4 outputValue = get${s}(${d});
      ${p}
    }
  `;
}
function FV(n, t) {
  const e = n.name, s = e.charAt(0).toUpperCase() + e.slice(1), o = "get" + s + "AtOutCoords", r = t.texShape, i = n.shapeInfo.texShape, a = n.shapeInfo.logicalShape.length, l = t.logicalShape.length;
  if (!n.shapeInfo.isUniform && a === l && n.shapeInfo.flatOffset == null && At(i, r))
    return `
      float ${o}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
  const c = se(l), u = I1(n.shapeInfo.logicalShape, t.logicalShape), h = l - a;
  let d;
  const p = ["x", "y", "z", "w", "u", "v"];
  a === 0 ? d = "" : l < 2 && u.length >= 1 ? d = "coords = 0;" : d = u.map((g) => `coords.${p[g + h]} = 0;`).join(`
`);
  let f = "";
  return l < 2 && a > 0 ? f = "coords" : f = n.shapeInfo.logicalShape.map((g, m) => `coords.${p[m + h]}`).join(", "), `
    float ${o}() {
      ${c} coords = getOutputCoords();
      ${d}
      return get${s}(${f});
    }
  `;
}
function se(n) {
  if (n <= 1)
    return "int";
  if (n === 2)
    return "ivec2";
  if (n === 3)
    return "ivec3";
  if (n === 4)
    return "ivec4";
  if (n === 5)
    return "ivec5";
  if (n === 6)
    return "ivec6";
  throw Error(`GPU for rank ${n} is not yet supported`);
}
function tm(n, t, e) {
  const { newShape: s, keptDims: o } = Gs(t), r = t.length, i = n && r === 3 && t[0] === 1, a = i ? t.slice(1) : s, l = !n && r > 1 && !At(t, e) && s.length < r || i;
  return { useSqueezeShape: l, uniformShape: l ? a : t, keptDims: o };
}
function Er(n, t) {
  const e = JSON.parse(JSON.stringify(n));
  return e.shapeInfo.logicalShape = t, e;
}
function Wr(n, t) {
  return t.map((e) => n[e]).join(", ");
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zV(n, t, e, s) {
  const o = e.map((u, h) => {
    const d = {
      logicalShape: u.shape,
      texShape: u.isUniform ? null : u.texData.texShape,
      isUniform: u.isUniform,
      isPacked: u.isUniform ? !1 : u.texData.isPacked,
      flatOffset: null
    };
    return u.texData != null && u.texData.slice != null && u.texData.slice.flatOffset > 0 && (d.flatOffset = u.texData.slice.flatOffset), { name: t.variableNames[h], shapeInfo: d };
  }), r = o.map((u) => u.shapeInfo), i = {
    logicalShape: s.shape,
    texShape: s.texData.texShape,
    isUniform: !1,
    isPacked: s.texData.isPacked,
    flatOffset: null
  }, a = eV(o, i, t), l = Gz(n.gl, a), c = n.createProgram(l);
  return B().get("ENGINE_COMPILE_ONLY") ? {
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: r,
    outShapeInfo: i,
    uniformLocations: null,
    customUniformLocations: null,
    infLoc: null,
    nanLoc: null,
    inShapesLocations: null,
    inTexShapesLocations: null,
    outShapeLocation: null,
    outShapeStridesLocation: null,
    outTexShapeLocation: null
  } : Object.assign({
    program: t,
    fragmentShader: l,
    source: a,
    webGLProgram: c,
    inShapeInfos: r,
    outShapeInfo: i
  }, S1(n, t, c));
}
function S1(n, t, e) {
  const s = {}, o = {}, r = {}, i = [];
  let a, l, c, u = null, h = null;
  h = n.getUniformLocation(e, "NAN", !1), B().getNumber("WEBGL_VERSION") === 1 && (u = n.getUniformLocation(e, "INFINITY", !1));
  const d = !1;
  for (let p = 0; p < t.variableNames.length; p++) {
    const f = t.variableNames[p];
    s[f] = n.getUniformLocation(e, f, d), s[`offset${f}`] = n.getUniformLocation(e, `offset${f}`, d), t.enableShapeUniforms && (o[`${f}Shape`] = n.getUniformLocation(e, `${f}Shape`, d), r[`${f}TexShape`] = n.getUniformLocation(e, `${f}TexShape`, d));
  }
  return t.enableShapeUniforms && (a = n.getUniformLocation(e, "outShape", d), c = n.getUniformLocation(e, "outShapeStrides", d), l = n.getUniformLocation(e, "outTexShape", d)), t.customUniforms && t.customUniforms.forEach((p, f) => {
    i[f] = n.getUniformLocation(e, p.name, d);
  }), {
    uniformLocations: s,
    customUniformLocations: i,
    infLoc: u,
    nanLoc: h,
    inShapesLocations: o,
    inTexShapesLocations: r,
    outShapeLocation: a,
    outShapeStridesLocation: c,
    outTexShapeLocation: l
  };
}
function ug(n, t) {
  if (n.length !== t.length)
    throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);
  n.forEach((e, s) => {
    const o = e.logicalShape, r = t[s], i = r.shape;
    if (!At(o, i))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${o} and ${i} must match`);
    if (e.isUniform && r.isUniform)
      return;
    const a = e.texShape, l = r.isUniform ? null : r.texData.texShape;
    if (!At(a, l))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${l} must match`);
  });
}
function VV(n, t, e, s, o) {
  t.program.enableShapeUniforms || (ug(t.inShapeInfos, e), ug([t.outShapeInfo], [s]));
  const r = s.texData.texture, i = s.texData.texShape;
  s.texData.isPacked ? n.setOutputPackedMatrixTexture(r.texture, i[0], i[1]) : n.setOutputMatrixTexture(r.texture, i[0], i[1]), n.setProgram(t.webGLProgram), B().getNumber("WEBGL_VERSION") === 1 && t.infLoc !== null && n.gl.uniform1f(t.infLoc, 1 / 0), t.nanLoc !== null && n.gl.uniform1f(t.nanLoc, NaN), e.forEach((l, c) => {
    const u = t.program.variableNames[c], h = t.uniformLocations[u], d = t.uniformLocations[`offset${u}`], p = t.inShapesLocations[`${u}Shape`], f = t.inTexShapesLocations[`${u}TexShape`];
    if (p) {
      const { uniformShape: g } = tm(t.program.packedInputs, l.shape, l.texData.texShape);
      switch (g.length) {
        case 1:
          n.gl.uniform1iv(p, new Int32Array(g));
          break;
        case 2:
          n.gl.uniform2iv(p, new Int32Array(g));
          break;
        case 3:
          n.gl.uniform3iv(p, new Int32Array(g));
          break;
        case 4:
          n.gl.uniform4iv(p, new Int32Array(g));
          break;
      }
    }
    if (f && n.gl.uniform2i(f, l.texData.texShape[0], l.texData.texShape[1]), h != null) {
      if (l.isUniform) {
        if (H(l.shape) < 2)
          n.gl.uniform1f(h, l.uniformValues[0]);
        else {
          let g = l.uniformValues;
          g instanceof Float32Array || (g = new Float32Array(g)), n.gl.uniform1fv(h, g);
        }
        return;
      }
      l.texData.slice != null && d != null && n.gl.uniform1i(d, l.texData.slice.flatOffset), n.setInputMatrixTexture(l.texData.texture.texture, h, c);
    }
  });
  const a = t.outShapeLocation;
  if (a)
    switch (s.shape.length) {
      case 1:
        n.gl.uniform1iv(a, new Int32Array(s.shape));
        break;
      case 2:
        n.gl.uniform2iv(a, new Int32Array(s.shape));
        break;
      case 3:
        n.gl.uniform3iv(a, new Int32Array(s.shape));
        break;
      case 4:
        n.gl.uniform4iv(a, new Int32Array(s.shape));
        break;
    }
  if (t.outShapeStridesLocation) {
    const l = gt(s.shape);
    switch (s.shape.length) {
      case 2:
        n.gl.uniform1iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 3:
        n.gl.uniform2iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
      case 4:
        n.gl.uniform3iv(t.outShapeStridesLocation, new Int32Array(l));
        break;
    }
  }
  t.outTexShapeLocation && n.gl.uniform2i(t.outTexShapeLocation, s.texData.texShape[0], s.texData.texShape[1]), t.program.customUniforms && o && t.program.customUniforms.forEach((l, c) => {
    const u = t.customUniformLocations[c], h = o[c];
    if (l.type === "float")
      n.gl.uniform1fv(u, h);
    else if (l.type === "vec2")
      n.gl.uniform2fv(u, h);
    else if (l.type === "vec3")
      n.gl.uniform3fv(u, h);
    else if (l.type === "vec4")
      n.gl.uniform4fv(u, h);
    else if (l.type === "int")
      n.gl.uniform1iv(u, h);
    else if (l.type === "ivec2")
      n.gl.uniform2iv(u, h);
    else if (l.type === "ivec3")
      n.gl.uniform3iv(u, h);
    else if (l.type === "ivec4")
      n.gl.uniform4iv(u, h);
    else
      throw Error(`uniform type ${l.type} is not supported yet.`);
  }), n.executeProgram();
}
function PV(n, t, e) {
  let s = "";
  t.concat(e).forEach((i) => {
    const a = i.texData != null && i.texData.slice != null && i.texData.slice.flatOffset > 0;
    if (n.enableShapeUniforms && !i.isUniform) {
      const l = i.texData.texShape, { useSqueezeShape: c, uniformShape: u, keptDims: h } = tm(n.packedInputs, i.shape, l);
      let d = "", p = "", f = "";
      if (u.length === 1 && n.packedInputs) {
        const I = [Math.ceil(l[0] / 2), Math.ceil(l[1] / 2)];
        d = `${I[0] > 1}_${I[1] > 1}`;
      } else if (u.length === 2 && !n.packedInputs)
        p = `${u[0] > 1}_${u[1] > 1}`;
      else if (u.length > 2 && !n.packedInputs) {
        const I = gt(u);
        f = `${I[0] === l[1]}_${I[I.length - 1] === l[1]}`;
      }
      const g = i.shape.length, m = u.length === 2 && At(i.shape, l), b = H(i.shape) === 1, x = Ts(i.shape, e.shape), w = !n.packedInputs && g === e.shape.length && At(l, e.texData.texShape), y = n.packedInputs || u.length > 2 ? "" : `${l[0] > 1}_${l[1] > 1}`;
      s += `${g}_${w}_${c ? h : ""}_${u.length}_${b}_${x}_${m}_${d}_${p}_${f}_${y}_${a}`;
    } else {
      const l = i.isUniform ? "uniform" : i.texData.texShape;
      s += `${i.shape}_${l}_${a}`;
    }
  });
  const o = n.userCode;
  let r = n.constructor.name;
  return r += "_" + s + "_" + o + `${B().getNumber("WEBGL_VERSION")}`, r;
}
function qe(n) {
  return B().getBool("WEBGL_USE_SHAPES_UNIFORMS") && n <= 4;
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class XV {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = ri.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = Je();
    this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? mu(["r", "c", "d"], t) : Oo(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OV {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = ri.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const e = Je();
    this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? mu(["r", "c", "d"], t) : Oo(["r", "c", "d"], t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AV {
  constructor(t) {
    this.variableNames = ["A"], this.outTexUsage = Cn.DOWNLOAD;
    const e = Je();
    this.outputShape = t, this.userCode = `
      ${w1}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ZV {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = Cn.DOWNLOAD;
    const e = Je();
    this.outputShape = t, this.userCode = `
      ${w1}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class KV {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = Je();
    this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length);
    let o = "result";
    e && (o = "floor(result * 255. + 0.5)"), this.userCode = `
      ${this.enableShapeUniforms ? qf() : Jf(t)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${s.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${s.output} = vec4(${o}, 0., 0., 0.);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BV {
  constructor(t, e = !1) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    const s = Je();
    this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length);
    let o = "", r = "result";
    e && (r = "floor(result * 255. + 0.5)");
    for (let i = 0; i <= 1; i++)
      for (let a = 0; a <= 1; a++) {
        const l = i * 2 + a;
        o += `
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms ? "outShape[2]" : `${t[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${i} < ${this.enableShapeUniforms ? "outShape[1]" : `${t[1]}`}) {
            localCoords[1] += ${i};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${s.texture2D}(A, uv);

            if (offset == 0) {
              result[${l}] = values[0];
            } else if (offset == 1) {
              result[${l}] = values[1];
            } else if (offset == 2) {
              result[${l}] = values[2];
            } else {
              result[${l}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? qf() : Jf(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${o}

          ${s.output} = ${r};
        }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function HV(n) {
  const t = Je(), e = `${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return Rz(n, e);
}
function _V(n) {
  const t = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return Mz(n, t);
}
function UV(n) {
  const t = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return Dz(n, t);
}
function Na(n, t, e, s, o, r) {
  zz(t, e);
  const i = Fz(n), a = n.TEXTURE_2D;
  return xt(n, () => n.bindTexture(a, i)), xt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_S, n.CLAMP_TO_EDGE)), xt(n, () => n.texParameteri(a, n.TEXTURE_WRAP_T, n.CLAMP_TO_EDGE)), xt(n, () => n.texParameteri(a, n.TEXTURE_MIN_FILTER, n.NEAREST)), xt(n, () => n.texParameteri(a, n.TEXTURE_MAG_FILTER, n.NEAREST)), B().getNumber("WEBGL_VERSION") === 1 ? xt(n, () => n.texImage2D(a, 0, s, t, e, 0, o, r, null)) : xt(n, () => n.texStorage2D(a, 1, s, t, e)), xt(n, () => n.bindTexture(n.TEXTURE_2D, null)), { texture: i, texShape: [e, t] };
}
function k1(n) {
  return n.internalFormatFloat;
}
function YV(n, t, e, s) {
  const [o, r] = ka(t, e);
  return Na(n, o, r, k1(s), s.textureFormatFloat, n.FLOAT);
}
function T1(n) {
  return n.internalFormatHalfFloat;
}
function jV(n, t, e, s) {
  const [o, r] = ka(t, e);
  return Na(n, o, r, T1(s), s.textureFormatFloat, s.textureTypeHalfFloat);
}
function N1(n) {
  return n.downloadTextureFormat;
}
function QV(n, t, e, s) {
  const [o, r] = ka(t, e);
  return Na(n, o, r, N1(s), n.RGBA, n.UNSIGNED_BYTE);
}
function $1(n) {
  return n.internalFormatPackedFloat;
}
function JV(n, t, e, s) {
  const [o, r] = Rr(t, e);
  return Na(n, o, r, $1(s), n.RGBA, n.FLOAT);
}
function R1(n) {
  return n.internalFormatPackedHalfFloat;
}
function qV(n, t, e, s) {
  const [o, r] = Rr(t, e);
  return Na(n, o, r, R1(s), n.RGBA, s.textureTypeHalfFloat);
}
function tP(n, t, e) {
  return xt(n, () => n.bindBuffer(n.ARRAY_BUFFER, e)), ag(n, t, "clipSpacePos", e, 3, 20, 0) && ag(n, t, "uv", e, 2, 20, 12);
}
function eP(n, t, e, s, o, r) {
  xt(n, () => n.bindTexture(n.TEXTURE_2D, t));
  let i, a, l;
  o instanceof Uint8Array ? (i = new Uint8Array(e * s * 4), a = n.UNSIGNED_BYTE, l = n.RGBA) : (i = new Float32Array(e * s * 4), a = n.FLOAT, l = r.internalFormatPackedFloat), i.set(o), B().getNumber("WEBGL_VERSION") === 2 ? xt(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e, s, n.RGBA, a, i)) : xt(n, () => n.texImage2D(n.TEXTURE_2D, 0, l, e, s, 0, n.RGBA, a, i)), xt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function nP(n, t, e) {
  xt(n, () => n.bindTexture(n.TEXTURE_2D, t)), e.data instanceof Uint8Array ? B().getNumber("WEBGL_VERSION") === 2 ? xt(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, e.width, e.height, n.RGBA, n.UNSIGNED_BYTE, e.data)) : xt(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, e.width, e.height, 0, n.RGBA, n.UNSIGNED_BYTE, e.data)) : B().getNumber("WEBGL_VERSION") === 2 ? xt(n, () => n.texSubImage2D(n.TEXTURE_2D, 0, 0, 0, n.RGBA, n.UNSIGNED_BYTE, e)) : xt(n, () => n.texImage2D(n.TEXTURE_2D, 0, n.RGBA, n.RGBA, n.UNSIGNED_BYTE, e)), xt(n, () => n.bindTexture(n.TEXTURE_2D, null));
}
function sP(n, t, e, s) {
  const o = n.createBuffer();
  xt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, o));
  const a = 4 * 4 * t * e;
  return xt(n, () => n.bufferData(n.PIXEL_PACK_BUFFER, a, n.STREAM_READ)), xt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, 0)), xt(n, () => n.bindBuffer(n.PIXEL_PACK_BUFFER, null)), o;
}
function oP(n, t, e) {
  const s = n, o = new Float32Array(e);
  return s.bindBuffer(s.PIXEL_PACK_BUFFER, t), s.getBufferSubData(s.PIXEL_PACK_BUFFER, 0, o), s.bindBuffer(s.PIXEL_PACK_BUFFER, null), o;
}
function rP(n, t, e, s) {
  const [o, r] = ka(t, e), i = 4, a = new Uint8Array(Cz(t * e, i));
  return xt(n, () => n.readPixels(0, 0, o, r, s.downloadTextureFormat, n.UNSIGNED_BYTE, a)), new Float32Array(a.buffer);
}
function iP(n, t, e, s, o, r, i, a) {
  const l = n, c = new Float32Array(vz(r, i));
  return l.bindBuffer(l.PIXEL_PACK_BUFFER, t), l.getBufferSubData(l.PIXEL_PACK_BUFFER, 0, c), l.bindBuffer(l.PIXEL_PACK_BUFFER, null), c;
}
function aP(n, t, e) {
  const s = new Float32Array(t * e * 4);
  return xt(n, () => n.readPixels(0, 0, e, t, n.RGBA, n.FLOAT, s)), s;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Mu {
  constructor(t) {
    this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];
    const e = B().getNumber("WEBGL_VERSION");
    t != null ? (this.gl = t, yz(e, t)) : this.gl = is(e);
    let s = "WEBGL_color_buffer_float";
    const o = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), B().getNumber("WEBGL_VERSION") === 1) {
      const r = "OES_texture_float", i = "OES_texture_half_float";
      if (this.textureFloatExtension = Oa(this.gl, r), Xn(this.gl, i))
        this.textureHalfFloatExtension = Oa(this.gl, i);
      else if (B().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(s), Xn(this.gl, o))
        this.colorBufferHalfFloatExtension = Oa(this.gl, o);
      else if (B().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (s = "EXT_color_buffer_float", Xn(this.gl, s))
      this.colorBufferFloatExtension = this.gl.getExtension(s);
    else if (Xn(this.gl, o))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(o);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = _V(this.gl), this.indexBuffer = UV(this.gl), this.framebuffer = Vz(this.gl), this.textureConfig = Qf(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return B().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    const t = this.gl;
    xt(t, () => t.finish()), xt(t, () => t.bindFramebuffer(t.FRAMEBUFFER, null)), xt(t, () => t.deleteFramebuffer(this.framebuffer)), xt(t, () => t.bindBuffer(t.ARRAY_BUFFER, null)), xt(t, () => t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null)), xt(t, () => t.deleteBuffer(this.indexBuffer)), this.disposed = !0;
  }
  createFloat32MatrixTexture(t, e) {
    return this.throwIfDisposed(), YV(this.gl, t, e, this.textureConfig);
  }
  createFloat16MatrixTexture(t, e) {
    return this.throwIfDisposed(), jV(this.gl, t, e, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(t, e) {
    return this.throwIfDisposed(), QV(this.gl, t, e, this.textureConfig);
  }
  uploadPixelDataToTexture(t, e) {
    this.throwIfDisposed(), nP(this.gl, t, e);
  }
  uploadDenseMatrixToTexture(t, e, s, o) {
    this.throwIfDisposed(), eP(this.gl, t, e, s, o, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), qV(this.gl, t, e, this.textureConfig);
  }
  createPackedMatrixTexture(t, e) {
    return this.throwIfDisposed(), JV(this.gl, t, e, this.textureConfig);
  }
  deleteMatrixTexture(t) {
    this.throwIfDisposed(), this.outputTexture === t && (lg(this.gl, this.framebuffer), this.outputTexture = null), xt(this.gl, () => this.gl.deleteTexture(t));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => rP(this.gl, e, s, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(t, e, s, o, r, i) {
    return iP(this.gl, t, e, s, o, r, i, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(t, e) {
    return oP(this.gl, t, e);
  }
  createBufferFromTexture(t, e, s) {
    this.bindTextureToFrameBuffer(t);
    const o = sP(this.gl, e, s, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), o;
  }
  createAndWaitForFence() {
    const t = this.createFence(this.gl);
    return this.pollFence(t);
  }
  createFence(t) {
    let e, s;
    if (B().getBool("WEBGL_FENCE_API_ENABLED")) {
      const o = t, r = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t.flush(), s = () => {
        const i = o.clientWaitSync(r, 0, 0);
        return i === o.ALREADY_SIGNALED || i === o.CONDITION_SATISFIED;
      }, e = r;
    } else
      B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e = this.beginQuery(), this.endQuery(), s = () => this.isQueryAvailable(e, B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : s = () => !0;
    return { query: e, isFencePassed: s };
  }
  downloadMatrixFromPackedTexture(t, e, s) {
    return this.downloadMatrixDriver(t, () => aP(this.gl, e, s));
  }
  createProgram(t) {
    this.throwIfDisposed();
    const e = this.gl;
    this.vertexShader == null && (this.vertexShader = HV(e));
    const s = Ez(e);
    return xt(e, () => e.attachShader(s, this.vertexShader)), xt(e, () => e.attachShader(s, t)), Wz(e, s), this.debug && Ru(e, s), this.vertexAttrsAreBound || (this.setProgram(s), this.vertexAttrsAreBound = tP(e, this.program, this.vertexBuffer)), s;
  }
  deleteProgram(t) {
    this.throwIfDisposed(), t === this.program && (this.program = null), t != null && xt(this.gl, () => this.gl.deleteProgram(t));
  }
  setProgram(t) {
    this.throwIfDisposed(), this.program = t, this.program != null && this.debug && Ru(this.gl, this.program), xt(this.gl, () => this.gl.useProgram(t));
  }
  getUniformLocation(t, e, s = !0) {
    return this.throwIfDisposed(), s ? Xz(this.gl, t, e) : Oz(this.gl, t, e);
  }
  getAttributeLocation(t, e) {
    return this.throwIfDisposed(), xt(this.gl, () => this.gl.getAttribLocation(t, e));
  }
  getUniformLocationNoThrow(t, e) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
  }
  setInputMatrixTexture(t, e, s) {
    this.throwIfDisposed(), this.throwIfNoProgram(), Az(this.gl, t, e, s);
  }
  setOutputMatrixTexture(t, e, s) {
    this.setOutputMatrixTextureDriver(t, s, e);
  }
  setOutputPackedMatrixTexture(t, e, s) {
    this.throwIfDisposed();
    const [o, r] = Rr(e, s);
    this.setOutputMatrixTextureDriver(t, o, r);
  }
  setOutputMatrixWriteRegion(t, e, s, o) {
    this.setOutputMatrixWriteRegionDriver(s, t, o, e);
  }
  setOutputPackedMatrixWriteRegion(t, e, s, o) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Ru(this.gl, this.program), Aa(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    const t = this.gl;
    this.debug && this.debugValidate(), xt(t, () => t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), xt(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Oa(this.gl, B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const s = this.gl, o = this.getQueryTimerExtensionWebGL2(), r = s.createQuery();
      return s.beginQuery(o.TIME_ELAPSED_EXT, r), r;
    }
    const t = this.getQueryTimerExtensionWebGL1(), e = t.createQueryEXT();
    return t.beginQueryEXT(t.TIME_ELAPSED_EXT, e), e;
  }
  endQuery() {
    if (B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      const e = this.gl, s = this.getQueryTimerExtensionWebGL2();
      e.endQuery(s.TIME_ELAPSED_EXT);
      return;
    }
    const t = this.getQueryTimerExtensionWebGL1();
    t.endQueryEXT(t.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(t) {
    return await Yu(() => this.disposed || // while testing contexts are created / disposed
    // in rapid succession, so without this check we
    // may poll for the query timer indefinitely
    this.isQueryAvailable(t, B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(t, B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(t, e) {
    if (e === 0)
      return null;
    if (e === 2) {
      const s = this.gl;
      return s.getQueryParameter(t, s.QUERY_RESULT) / 1e6;
    } else {
      const s = this.getQueryTimerExtensionWebGL1();
      return s.getQueryObjectEXT(t, s.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(t, e) {
    if (e === 0)
      return !0;
    if (e === 2) {
      const s = this.gl, o = this.getQueryTimerExtensionWebGL2(), r = s.getQueryParameter(t, s.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)), r && !this.disjoint;
    } else {
      const s = this.getQueryTimerExtensionWebGL1(), o = s.getQueryObjectEXT(t, s.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(s.GPU_DISJOINT_EXT)), o && !this.disjoint;
    }
  }
  pollFence(t) {
    return new Promise((e) => {
      this.addItemToPoll(() => t.isFencePassed(), () => e());
    });
  }
  pollItems() {
    const t = lP(this.itemsToPoll.map((e) => e.isDoneFn));
    for (let e = 0; e <= t; ++e) {
      const { resolveFn: s } = this.itemsToPoll[e];
      s();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t + 1);
  }
  addItemToPoll(t, e) {
    if (this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }), this.itemsToPoll.length > 1)
      return;
    let s;
    "setTimeoutCustom" in B().platform && (s = B().platform.setTimeoutCustom.bind(B().platform)), Yu(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, s);
  }
  bindTextureToFrameBuffer(t) {
    this.throwIfDisposed(), Gu(this.gl, t, this.framebuffer), this.debug && Aa(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Gu(this.gl, this.outputTexture, this.framebuffer), this.debug && Aa(this.gl)) : lg(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(t, e) {
    this.bindTextureToFrameBuffer(t);
    const s = e();
    return this.unbindTextureToFrameBuffer(), s;
  }
  setOutputMatrixTextureDriver(t, e, s) {
    this.throwIfDisposed();
    const o = this.gl;
    Gu(o, t, this.framebuffer), this.debug && Aa(o), this.outputTexture = t, xt(o, () => o.viewport(0, 0, e, s)), xt(o, () => o.scissor(0, 0, e, s));
  }
  setOutputMatrixWriteRegionDriver(t, e, s, o) {
    this.throwIfDisposed(), xt(this.gl, () => this.gl.scissor(t, e, s, o));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
}
function lP(n) {
  let t = 0;
  for (; t < n.length && n[t](); ++t)
    ;
  return t - 1;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cP(n) {
  const t = new Float32Array(n.length);
  for (let e = 0; e < n.length; ++e)
    t[e] = Math.abs(n[e]);
  return t;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $n(n) {
  return (t, e, s, o, r) => {
    const i = Rt(t, e), a = i.length, l = gt(i), c = H(i), u = he(r, c), h = t.length, d = e.length, p = gt(t), f = gt(e), g = Ts(t, i), m = Ts(e, i);
    if (g.length + m.length === 0)
      for (let b = 0; b < u.length; ++b)
        u[b] = n(s[b % s.length], o[b % o.length]);
    else
      for (let b = 0; b < u.length; ++b) {
        const x = ys(b, a, l), w = x.slice(-h);
        g.forEach((T) => w[T] = 0);
        const y = pn(w, h, p), I = x.slice(-d);
        m.forEach((T) => I[T] = 0);
        const v = pn(I, d, f);
        u[b] = n(s[y], o[v]);
      }
    return [u, i];
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uP(n, t, e, s) {
  if (s === "int32") {
    const o = Int32Array.from(n);
    return [t, "int32", o];
  }
  if (s === "bool") {
    const o = Ls([0], e), [r, i] = $n((a, l) => a !== l ? 1 : 0)(t, [], n, o, "bool");
    return [i, "bool", r];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${s}`);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const hP = $n((n, t) => n + t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dP(n, t, e, s, o) {
  const r = H(s), i = be(o, e);
  for (let a = 0; a < n.length; a++) {
    const l = n[a];
    if (l < 0)
      throw new Error("Input x must be non-negative!");
    l >= o || (r > 0 ? i[l] += t[a] : i[l] += 1);
  }
  return i;
}
function pP(n, t, e, s = !1) {
  const o = n.shape[0], r = n.shape[1], i = Nt([o, e], t.dtype);
  for (let a = 0; a < o; a++)
    for (let l = 0; l < r; l++) {
      const c = n.get(a, l);
      if (c < 0)
        throw new Error("Input x must be non-negative!");
      c >= e || (s ? i.set(1, a, c) : t.size > 0 ? i.set(i.get(a, c) + t.get(a, l), a, c) : i.set(i.get(a, c) + 1, a, c));
    }
  return i;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oo(n) {
  return (t, e, s) => {
    const o = he(e, t.length);
    for (let r = 0; r < t.length; ++r)
      o[r] = n(t[r], s);
    return o;
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fP = oo((n) => Math.ceil(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mP(n, t, e, s) {
  const o = Ot(e, H(t));
  if (s && e !== "string") {
    let r = 0;
    n.forEach((i) => {
      const a = H(i.shape);
      o.set(i.vals, r), r += a;
    });
  } else {
    let r = 0;
    n.forEach((i) => {
      const a = e === "string" ? Rs(i.vals) : i.vals;
      let l = 0;
      for (let c = 0; c < i.shape[0]; ++c) {
        const u = c * t[1] + r;
        for (let h = 0; h < i.shape[1]; ++h)
          o[u + h] = a[l++];
      }
      r += i.shape[1];
    });
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gP = $n((n, t) => n === t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const bP = oo((n) => Math.exp(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xP = oo((n) => Math.expm1(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yP = oo((n) => Math.floor(n));
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wP(n, t, e, s, o, r, i, a, l) {
  const c = Nt([s, r], e);
  for (let u = 0; u < s; u++) {
    const h = [];
    let d = 0;
    for (let p = 0; p < o; p++) {
      const f = n[u * o + p];
      d += f * i[p], h.push(f);
    }
    if (d < 0 || d >= l / r)
      throw new Error(`Invalid indices: ${h} does not index into ${a}`);
    for (let p = 0; p < r; p++)
      c.values[u * r + p] = t.get(...t.indexToLoc(d * r + p));
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function IP(n, t, e) {
  const s = Nt(e, n.dtype);
  for (let o = 0; o < s.size; ++o) {
    const i = s.indexToLoc(o).slice(), a = i[0], l = i[2], c = t.locToIndex([a, l]);
    i[2] = t.values[c];
    const u = n.locToIndex(i);
    0 <= u && u < n.values.length && (s.values[o] = n.values[u]);
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CP = $n((n, t) => n > t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vP = $n((n, t) => n >= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const SP = $n((n, t) => n < t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kP = $n((n, t) => n <= t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TP(n, t, e) {
  const s = (t - n) / (e - 1), o = be(e, "float32");
  o[0] = n;
  for (let r = 1; r < o.length; r++)
    o[r] = o[r - 1] + s;
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NP = oo((n) => Math.log(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $P(n, t, e, s) {
  const o = he(s, H(e));
  for (let r = 0; r < o.length; ++r) {
    const i = r * t;
    let a = n[i];
    for (let l = 0; l < t; ++l) {
      const c = n[i + l];
      (Number.isNaN(c) || c > a) && (a = c);
    }
    o[r] = a;
  }
  return o;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RP = $n((n, t) => Math.max(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const GP = $n((n, t) => Math.min(n, t));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const G1 = $n((n, t) => n * t);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LP(n, t, e) {
  const s = ws(-1, e);
  return G1([], t, s, n, e);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EP = $n((n, t) => n !== t ? 1 : 0);
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WP(n, t, e, s, o) {
  const r = t.length, i = H(t), a = gt(t), l = gt(o), c = he(e, H(o));
  for (let u = 0; u < i; ++u) {
    const h = ys(u, r, a), d = new Array(h.length);
    for (let f = 0; f < d.length; f++)
      d[f] = h[s[f]];
    const p = pn(d, r, l);
    c[p] = n[u];
  }
  return c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MP(n, t, e, s) {
  const [o, r] = Ge(n, s), i = nn(t, "int32"), a = be(H(o), i), l = H(r);
  for (let c = 0; c < a.length; ++c) {
    const u = c * l;
    let h = 1;
    for (let d = 0; d < l; ++d)
      h *= e[u + d];
    a[c] = h;
  }
  return { outVals: a, outShape: o, outDtype: i };
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DP(n, t, e) {
  n.forEach((s, o) => {
    if (s < 0 || s >= e) {
      const r = ys(o, t.length, gt(t)).join(",");
      throw new Error(`indices[${r}] = ${s} is not in [0, ${e})`);
    }
  });
}
function FP(n, t) {
  for (let e = 0; e < n.length; ++e) {
    const s = n[e], o = e === n.length - 1 ? t : n[e + 1].length;
    if (s.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (s[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (s[s.length - 1] > o)
      throw new Error("Ragged splits must not point past values");
    for (let r = 1; r < s.length; ++r)
      if (s[r - 1] > s[r])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function zP(n, t, e, s) {
  const o = [];
  let r = 0;
  const i = t.length - 1 + e.length, a = new Array(i).fill(null).map(() => [0]);
  FP(e, s);
  let l = 1;
  for (let c = 0; c < t.length - 1; ++c) {
    l *= t[c];
    const u = t[c + 1];
    for (let h = 1; h < l + 1; ++h)
      a[c].push(h * u);
  }
  for (let c = 0; c < n.length; ++c) {
    let u = n[c], h = n[c] + 1;
    for (let d = 0; d < e.length; ++d) {
      const p = e[d], f = d + t.length - 1;
      if (f >= 0) {
        const g = a[f], m = g[g.length - 1] - p[u];
        for (let b = u; b < h; ++b)
          a[f].push(p[b + 1] + m);
      }
      u = p[u], h = p[h];
    }
    h !== u && (o.push([u, h]), r += h - u);
  }
  return { outSplits: a, valueSlices: o, numValues: r };
}
function VP(n) {
  const t = [];
  for (let e = 0; e < n.length; ++e) {
    const s = n[e].length, o = Ot("int32", s);
    t.push(o), n[e].forEach((r, i) => o[i] = r);
  }
  return t;
}
function hg(n, t) {
  const e = n.slice(0, t);
  for (; e.length < t; )
    e.push(1);
  for (let s = t; s < n.length; s++)
    e[t - 1] *= n[s];
  return e;
}
function PP(n, t, e, s, o, r) {
  const i = hg(t, 2)[1], a = hg(r, 2)[1];
  let l = 0;
  for (const c of e)
    for (let u = c[0]; u < c[1]; ++u) {
      for (let h = 0; h < s; ++h)
        o[l * a + h] = n[u * i + h];
      ++l;
    }
}
function XP(n, t, e, s, o) {
  const r = t.slice();
  r[0] = o;
  const i = Ot(e, H(r)), a = n.length, l = a === 0 ? 0 : a / t[0];
  return PP(n, t, s, l, i, r), [i, r];
}
function OP(n, t, e, s, o, r, i, a) {
  if (n.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  const l = t[0][0] - 1;
  if (DP(r, i, l), s.length === 0)
    throw new Error("params.rank must be nonzero");
  const c = s[0], { outSplits: u, valueSlices: h, numValues: d } = zP(r, i, n, c), p = VP(u), f = XP(e, s, o, h, d);
  return [p, f[0], f[1]];
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Ln = Dn;
class Rl {
  constructor(t, e, s, o, r, i, a, l, c, u) {
    this.shape = t, this.shapeShape = e, this.values = s, this.valuesShape = o, this.valuesDType = r, this.defaultValue = i, this.defaultValueShape = a, this.rowPartitionValues = l, this.rowPartitionValuesShapes = c, this.rowPartitionTypes = Op(u), this.raggedRank = Ap(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t) {
    return this.rowPartitionTypes[0] === Ln.FIRST_DIM_SIZE ? this.rowPartitionTypes[t + 1] : this.rowPartitionTypes[t];
  }
  // Returns the relationship between dimension and dimension + 1.
  getRowPartitionTensor(t) {
    return this.rowPartitionTypes[0] === Ln.FIRST_DIM_SIZE ? this.rowPartitionValues[t + 1] : this.rowPartitionValues[t];
  }
  getMaxWidth(t) {
    const e = this.getRowPartitionTensor(t - 1);
    switch (this.getRowPartitionTypeByDimension(t - 1)) {
      case Ln.VALUE_ROWIDS:
        return Rl.getMaxWidthValueRowID(e);
      case Ln.ROW_SPLITS:
        return Rl.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${Ln[this.getRowPartitionTypeByDimension(t - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t) {
    const e = t.length;
    if (e === 0 || e === 1)
      return 0;
    let s = 0;
    for (let o = 0; o < e - 1; ++o) {
      const r = t[o + 1] - t[o];
      r > s && (s = r);
    }
    return s;
  }
  static getMaxWidthValueRowID(t) {
    const e = t.length;
    if (e === 0)
      return 0;
    let s = 0, o = t[0], r = 0;
    for (let i = 1; i < e; ++i) {
      const a = t[i];
      a !== o && (o = a, r = Math.max(i - s, r), s = i);
    }
    return Math.max(e - s, r);
  }
  tensorShapeFromTensor(t, e, s = !0) {
    if (e.length === 0) {
      if (t[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return pg(t, s);
  }
  calculateOutputSize(t) {
    const e = this.valuesShape, s = this.defaultValueShape;
    Zp(s, e);
    const o = this.tensorShapeFromTensor(this.shape, this.shapeShape), i = Xp(this.raggedRank, o, e);
    i[0] < 0 && (i[0] = t);
    for (let a = 1; a <= this.raggedRank; ++a)
      i[a] < 0 && (i[a] = this.getMaxWidth(a));
    return i;
  }
  /**
   * The outputIndex represents the index in the output tensor
   * where the first element of a particular dimension would be written.
   * If it is -1, it indicates that the index is out of scope.
   * Example, given firstDimension = 10, firstDimensionOutput = 6,
   * and outputIndexMultiplier = 100:
   * result = [0 100 200 300 400 500 -1 -1 -1 -1]
   * If firstDimensionOutput = 11 instead, then:
   * result = [0 100 200 300 400 500 600 700 800 900]
   */
  calculateFirstParentOutputIndex(t, e, s) {
    const o = Math.min(t, s), r = [];
    let i = 0;
    for (let a = 0; a < o; ++a, i += e)
      r.push(i);
    for (let a = o; a < t; ++a)
      r.push(-1);
    return S(r.length === t, () => "Final length of result must be equal to firstDimension."), r;
  }
  calculateOutputIndexRowSplit(t, e, s, o) {
    const r = t.length, i = [];
    for (let a = 0; a < r - 1; ++a) {
      const l = t[a + 1] - t[a];
      let c = Math.min(o, l), u = e[a];
      u === -1 && (c = 0);
      for (let h = 0; h < c; ++h)
        i.push(u), u += s;
      for (let h = 0; h < l - c; ++h)
        i.push(-1);
    }
    if (r > 0 && i.length !== t[r - 1])
      throw new Error("Invalid row split size.");
    return i;
  }
  // Calculate the output index of the first element of a list.
  // The parentOutputIndex is the same computation for the previous list.
  // -1 indicates an element or list that is out of range.
  // The outputIndexMultiplier is the number of output indices one moves
  // forward for each column.
  // E.g., given:
  // valueRowIds:[0 1 2 2 2 3 5 5 6]
  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]
  // outputIndexMultiplier: 10
  // outputSize: 2
  // You get:
  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]
  // result[0] = parentOutputIndex[valueRowIds[0]]
  // result[1] = parentOutputIndex[valueRowIds[1]]
  // result[2] = parentOutputIndex[valueRowIds[2]]
  // result[3] = parentOutputIndex[valueRowIds[2] + 10]
  // result[4] = -1 because it is the third element the size is 2.
  // result[5] = parentOutputIndex[valueRowIds[3]]
  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1
  // result[8] = parentOutputIndex[valueRowIds[7]]
  calculateOutputIndexValueRowID(t, e, s, o) {
    const r = t.length, i = [];
    if (r === 0)
      return [];
    let a = 0, l = t[0];
    if (l >= e.length)
      throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);
    let c = e[l];
    i.push(c);
    for (let u = 1; u < r; ++u) {
      const h = t[u];
      if (h === l)
        c >= 0 && (++a, a < o ? c += s : c = -1);
      else {
        if (a = 0, l = h, h >= e.length)
          throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);
        c = e[h];
      }
      i.push(c);
    }
    if (i.length !== t.length)
      throw new Error("Invalid row ids.");
    return i;
  }
  calculateOutputIndex(t, e, s, o) {
    const r = this.getRowPartitionTensor(t), i = this.getRowPartitionTypeByDimension(t);
    switch (i) {
      case Ln.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(r, e, s, o);
      case Ln.ROW_SPLITS:
        if (r.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${r.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(r, e, s, o);
      default:
        throw new Error(`Unsupported partition type: ${Ln[i]}`);
    }
  }
  getFirstDimensionSize() {
    const t = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    const e = this.rowPartitionTypes[0];
    switch (e) {
      case Ln.FIRST_DIM_SIZE:
        return t[0];
      case Ln.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Ln.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Ln[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    const e = this.getFirstDimensionSize(), s = this.calculateOutputSize(e), o = new Array(this.raggedRank + 1);
    o[o.length - 1] = 1;
    for (let l = o.length - 2; l >= 0; --l)
      o[l] = o[l + 1] * s[l + 1];
    const r = pg(s, !1), i = Ot(this.valuesDType, H(r));
    if (o[0] * s[0] > 0) {
      let l = this.calculateFirstParentOutputIndex(e, o[0], s[0]);
      for (let c = 1; c <= this.raggedRank; ++c)
        l = this.calculateOutputIndex(c - 1, l, o[c], s[c]);
      this.setOutput(this.raggedRank, l, i, r);
    }
    return [r, i];
  }
  setOutput(t, e, s, o) {
    if (s.length === 0)
      return;
    const r = this.values, i = s;
    let a = o.slice();
    a = a.slice(t + 1);
    const l = H(a), c = e.length;
    let u = this.defaultValue;
    if (u.length !== l && u.length !== 1) {
      const f = this.defaultValueShape;
      X(() => {
        const g = P(u, f);
        u = er(g, a).dataSync();
      });
    }
    let h = 0, d = 0, p = 0;
    for (let f = 0; f <= c; ++f) {
      let g = f < c ? e[f] : -1;
      if (g === p) {
        ++p;
        continue;
      }
      if (d < p) {
        const m = r.subarray(h * l), b = i.subarray(d * l), x = (p - d) * l;
        dg(b, m, x);
      }
      if (f >= c) {
        const m = s.length;
        g = Math.floor(m / l);
      }
      if (g > p)
        if (this.defaultValue.length === 1)
          i.subarray(p * l, g * l).fill(this.defaultValue[0]), p = g;
        else
          for (; g > p; ) {
            const m = i.slice(p * l);
            dg(m, u, l), ++p;
          }
      g < 0 ? (h = f + 1, d = p) : (h = f, d = p, p = d + 1);
    }
  }
}
function dg(n, t, e) {
  for (let s = 0; s < e; s++)
    n[s] = t[s];
}
function pg(n, t) {
  const e = [];
  for (let s of n) {
    if (s < 0) {
      if (!t)
        throw new Error(`Dimension ${s} must be >= 0`);
      if (s < -1)
        throw new Error(`Dimension ${s} must be >= -1`);
      s = -1;
    }
    e.push(s);
  }
  return e;
}
function AP(n, t, e, s, o, r, i, a, l, c) {
  return new Rl(n, t, e, s, o, r, i, a, l, c).compute();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZP(n, t, e, s) {
  const o = n === t, r = n < t && e < 0, i = t < n && e > 1;
  if (o || r || i)
    return be(0, s);
  const a = Math.abs(Math.ceil((t - n) / e)), l = be(a, s);
  t < n && e === 1 && (e = -1), l[0] = n;
  for (let c = 1; c < l.length; c++)
    l[c] = l[c - 1] + e;
  return l;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const KP = oo((n) => 1 / Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function BP(n, t, e, s, o, r, i, a, l, c) {
  const u = [s / o, o], h = n.values, d = t.values;
  if (s === 0)
    return Nt(e, t.dtype);
  const p = Nt(u, t.dtype);
  typeof l == "string" || typeof l == "number" ? p.values.fill(l) : typeof l == "boolean" && p.values.fill(+l);
  for (let f = 0; f < r; f++) {
    const g = [];
    let m = 0;
    for (let b = 0; b < i; b++) {
      const x = h[f * i + b];
      g.push(x), m += x * a[b];
    }
    if (m < 0 || m >= s / o)
      throw new Error(`Invalid indices: ${g} does not index into ${e}`);
    for (let b = 0; b < o; b++)
      c ? p.values[m * o + b] += d[f * o + b] : p.values[m * o + b] = t.rank === 0 ? d[0] : d[f * o + b];
  }
  return p;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HP = oo((n) => 1 / (1 + Math.exp(-n)));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _P(n, t, e, s, o) {
  const r = Xc(s, t, e), i = H(e), a = gt(s);
  if (r) {
    const h = Oc(t, a);
    return o === "string" ? n.slice(h, h + i) : n.subarray(h, h + i);
  }
  const l = o === "string" ? Rs(n) : n, c = Nt(s, o, l), u = Nt(e, o);
  for (let h = 0; h < u.size; ++h) {
    const d = u.indexToLoc(h), p = d.map((f, g) => f + t[g]);
    u.set(c.get(...p), ...d);
  }
  return o === "string" ? wf(u.values) : u.values;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UP(n, t, e, s, o, r, i) {
  const a = t[0], l = r[0], c = new Array(l), u = new Array(a), h = t[1];
  if (l === 0) {
    if (a !== 0)
      throw new Error(lf(a));
    const m = Ot(e, 0), b = Ot(o, 0);
    return [
      m,
      [0, h],
      b,
      c,
      u
    ];
  }
  let d = !0, p = 0;
  const f = new Array(l).fill(0);
  for (let m = 0; m < a; ++m) {
    const b = n[m * h];
    if (b < 0)
      throw new Error(cf(m, b));
    if (b >= l)
      throw new Error(uf(m, b, l));
    ++f[b], d = d && b >= p, p = b;
  }
  let g = !0;
  for (let m = 0; m < l; ++m) {
    const b = f[m] === 0;
    c[m] = b, g = g && !b, f[m] = Math.max(f[m], 1), m > 0 && (f[m] += f[m - 1]);
  }
  if (g && d) {
    const m = n, b = s;
    for (let x = 0; x < a; ++x)
      u[x] = x;
    return [
      m,
      [a, h],
      b,
      c,
      u
    ];
  } else {
    const m = f[l - 1], b = Ot(e, m * h), x = Ot(o, m), w = new Array(l).fill(0);
    for (let y = 0; y < a; ++y) {
      const I = n[y * h], v = w[I], T = (I === 0 ? 0 : f[I - 1]) + v;
      w[I]++;
      for (let k = 0; k < h; ++k)
        b[T * h + k] = n[y * h + k];
      x[T] = s[y], u[y] = T;
    }
    for (let y = 0; y < l; ++y)
      if (w[y] === 0) {
        const v = y === 0 ? 0 : f[y - 1];
        b[v * h + 0] = y;
        for (let T = 1; T < h; ++T)
          b[v * h + T] = 0;
        x[v] = i;
      }
    return [
      b,
      [m, h],
      x,
      c,
      u
    ];
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function YP(n, t, e, s, o) {
  const r = H(s), i = t[0], a = o.length, l = [];
  let c = 1, u = -1;
  for (let m = 0; m < a; ++m) {
    const b = o[m];
    if (b === -1) {
      if (u !== -1)
        throw new Error(hf(u, m));
      u = m, l.push(1);
    } else {
      if (b < 0)
        throw new Error(df(m, b));
      c *= b, l.push(b);
    }
  }
  if (u !== -1) {
    if (c <= 0)
      throw new Error(pf());
    const m = Math.trunc(r / c);
    if (c * m !== r)
      throw new Error(ff(s, l));
    l[u] = m;
  }
  if (H(l) !== r)
    throw new Error(mf(s, l));
  const d = s.length, p = [];
  if (d > 0) {
    p[d - 1] = 1;
    for (let m = d - 2; m >= 0; --m)
      p[m] = p[m + 1] * s[m + 1];
  }
  const f = [];
  if (a > 0) {
    f[a - 1] = 1;
    for (let m = a - 2; m >= 0; --m)
      f[m] = f[m + 1] * l[m + 1];
  }
  const g = Ot(e, i * a);
  for (let m = 0; m < i; ++m) {
    let b = 0;
    for (let x = 0; x < d; ++x)
      b += n[m * d + x] * p[x];
    for (let x = 0; x < a; ++x)
      g[m * a + x] = Math.trunc(b / f[x]), b %= f[x];
  }
  return [g, [i, a], l];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jP(n, t, e, s, o, r = !1, i = 0) {
  const a = s.length, l = [t[0], n.length / t[0]], c = l[1], h = a > 0 ? o[a - 1] + 1 : 0;
  if (h < 0)
    throw new Error(qr());
  const d = t.slice();
  d[0] = h;
  const p = d.reduce((w, y) => w * y, 1), f = Ot(e, p);
  if (a === 0)
    return h > 0 && f.fill(i), [f, d];
  if (h <= 0)
    throw new Error(qr());
  let g = 0, m = 1, b = 0, x = o[g];
  for (; ; ) {
    let w = 0;
    if (m < a) {
      if (w = o[m], x === w) {
        ++m;
        continue;
      }
      if (x >= w)
        throw new Error(gf());
    }
    if (x < 0 || x >= h)
      throw new Error(bf(x, h));
    x > b && f.fill(i, b * c, x * c);
    for (let y = g; y < m; ++y) {
      const I = s[y];
      if (I < 0 || I >= l[0])
        throw new Error(xf(y, s[y], l[0]));
      for (let v = 0; v < c; v++)
        f[x * c + v] += n[I * c + v];
    }
    if (r)
      for (let y = 0; y < c; y++)
        f[x * c + y] /= m - g;
    if (g = m, ++m, b = x + 1, x = w, m > a)
      break;
  }
  return b < h && f.fill(i, b * c, h * c), [f, d];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const QP = oo((n) => Math.sqrt(n));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JP = $n((n, t) => {
  const e = n - t;
  return e * e;
});
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qP(n, t, e, s) {
  const o = Nt(n, t.dtype);
  for (let r = 0; r < o.size; r++) {
    const i = o.indexToLoc(r), a = new Array(i.length);
    for (let l = 0; l < a.length; l++)
      a[l] = i[l] * e[l] + s[l];
    o.set(t.get(...a), ...i);
  }
  return o;
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tX {
  constructor(t, e, s, o, r, i) {
    this.separator = An(t), this.nGramWidths = e, this.leftPad = An(s), this.rightPad = An(o), this.padWidth = r, this.preserveShort = i;
  }
  getPadWidth(t) {
    return Math.min(this.padWidth < 0 ? t - 1 : this.padWidth, t - 1);
  }
  getNumNGrams(t, e) {
    const s = this.getPadWidth(e);
    return Math.max(0, t + 2 * s - e + 1);
  }
  createNGrams(t, e, s, o, r, i) {
    for (let a = 0; a < r; ++a) {
      const l = this.getPadWidth(i), c = Math.max(0, l - a), u = Math.max(0, l - (r - (a + 1))), h = i - (c + u), d = e + (c > 0 ? 0 : a - l);
      let p = 0;
      p += c * this.leftPad.length;
      for (let x = 0; x < h; ++x)
        p += t[d + x].length;
      p += u * this.rightPad.length;
      const f = c + u + h - 1;
      p += f * this.separator.length, s[o + a] = new Uint8Array(p);
      const g = s[o + a];
      let m = 0;
      const b = (x) => x.forEach((w) => g[m++] = w);
      for (let x = 0; x < c; ++x)
        b(this.leftPad), b(this.separator);
      for (let x = 0; x < h - 1; ++x)
        b(t[d + x]), b(this.separator);
      if (h > 0) {
        b(t[d + h - 1]);
        for (let x = 0; x < u; ++x)
          b(this.separator), b(this.rightPad);
      } else {
        for (let x = 0; x < u - 1; ++x)
          b(this.rightPad), b(this.separator);
        b(this.rightPad);
      }
    }
  }
  // Data and splits together form the definition of the ragged tensor,
  // where data is 1 dimensional and contains the values of the tensor
  // and splits denotes the indices at which each row starts.
  compute(t, e) {
    const s = t.length, o = e.length;
    if (o > 0) {
      let l = e[0];
      if (l !== 0)
        throw new Error(`First split value must be 0, got ${l}`);
      for (let c = 1; c < o; ++c) {
        let u = e[c] >= l;
        if (u = u && e[c] <= s, !u)
          throw new Error(`Invalid split value ${e[c]}, must be in [${l}, ${s}]`);
        l = e[c];
      }
      if (l !== s)
        throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`);
    }
    const r = o - 1, i = Ot("int32", o);
    if (s === 0 || o === 0) {
      const l = new Array(s);
      for (let c = 0; c <= r; ++c)
        i[c] = 0;
      return [l, i];
    }
    i[0] = 0;
    for (let l = 1; l <= r; ++l) {
      const c = e[l] - e[l - 1];
      let u = 0;
      this.nGramWidths.forEach((h) => {
        u += this.getNumNGrams(c, h);
      }), this.preserveShort && c > 0 && u === 0 && (u = 1), i[l] = i[l - 1] + u;
    }
    const a = new Array(i[r]);
    for (let l = 0; l < r; ++l) {
      const c = e[l];
      let u = i[l];
      if (this.nGramWidths.forEach((h) => {
        const d = e[l + 1] - e[l], p = this.getNumNGrams(d, h);
        this.createNGrams(t, c, a, u, p, h), u += p;
      }), this.preserveShort && u === i[l]) {
        const h = e[l + 1] - e[l];
        if (h === 0)
          continue;
        const d = h + 2 * this.padWidth, p = 1;
        this.createNGrams(t, c, a, u, p, d);
      }
    }
    return [a, i];
  }
}
function eX(n, t, e, s, o, r, i, a) {
  return new tX(e, s, o, r, i, a).compute(n, t);
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nX(n, t, e, s) {
  if (!n.length)
    return;
  if (t.length === 0) {
    for (let r = 0; r < n.length; ++r)
      s.push(n.subarray(r, r + 1));
    return;
  }
  if (t.length === 1) {
    const r = t[0];
    let i = n.indexOf(r);
    for (; i !== -1; ) {
      const a = n.subarray(0, i);
      (!e || a.length !== 0) && s.push(a), n = n.subarray(i + 1), i = n.indexOf(r);
    }
    (!e || n.length !== 0) && s.push(n);
    return;
  }
  let o = 0;
  for (let r = 0; r < n.length + 1; r++)
    if (r === n.length || t.indexOf(n[r]) !== -1) {
      const i = n.subarray(o, r);
      (!e || i.length !== 0) && s.push(i), o = r + 1;
    }
}
function sX(n, t, e) {
  const s = n.length, o = [];
  let r = 0, i = 0;
  const a = new Array(s);
  for (let d = 0; d < s; ++d) {
    const p = o.length;
    nX(n[d], t, e, o);
    const f = o.length - p;
    a[d] = f, r += f, i = Math.max(i, f);
  }
  const l = Ot("int32", r * 2), c = new Array(r), u = [s, i];
  let h = 0;
  for (let d = 0; d < s; ++d)
    for (let p = 0; p < a[d]; ++p)
      l[h * 2] = d, l[h * 2 + 1] = p, c[h] = o[h], ++h;
  return [l, c, u];
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oX(n, t) {
  const e = Ot("int32", n.length);
  for (let s = 0; s < n.length; ++s)
    e[s] = Ad(n[s]).modulo(t).getLowBitsUnsigned();
  return e;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const rX = $n((n, t) => n - t);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function iX(n, t) {
  const e = new Array(n.rank);
  for (let o = 0; o < e.length; o++)
    e[o] = n.shape[o] * t[o];
  const s = Nt(e, n.dtype);
  for (let o = 0; o < s.values.length; ++o) {
    const r = s.indexToLoc(o), i = new Array(n.rank);
    for (let l = 0; l < i.length; l++)
      i[l] = r[l] % n.shape[l];
    const a = n.locToIndex(i);
    s.values[o] = n.values[a];
  }
  return s;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _r = (n, t) => {
  const e = t.value - n.value;
  return e === 0 ? n.index - t.index : e;
};
function L1(n, t, e = 0, s = n.length - 1) {
  for (; s > e; ) {
    if (s - e > 600) {
      const a = s - e + 1, l = t - e + 1, c = Math.log(a), u = 0.5 * Math.exp(2 * c / 3), h = 0.5 * Math.sqrt(c * u * (a - u) / a) * Math.sign(l - a / 2), d = Math.max(e, Math.floor(t - l * u / a + h)), p = Math.min(s, Math.floor(t + (a - l) * u / a + h));
      L1(n, t, d, p);
    }
    const o = n[t];
    let r = e, i = s;
    for (cn(n, e, t), _r(n[s], o) > 0 && cn(n, e, s); r < i; ) {
      for (cn(n, r, i), r++, i--; _r(n[r], o) < 0; )
        r = r + 1;
      for (; _r(n[i], o) > 0; )
        i = i - 1;
    }
    _r(n[e], o) === 0 ? cn(n, e, i) : (i = i + 1, cn(n, i, s)), i <= t && (e = i + 1), t <= i && (s = i - 1);
  }
}
function aX(n, t, e, s, o) {
  const r = t[t.length - 1], [i, a] = [n.length / r, r], l = he(e, i * s), c = he("int32", i * s);
  for (let h = 0; h < i; h++) {
    const d = h * a, p = n.subarray(d, d + a);
    let f = new Array(p.length);
    p.forEach((x, w) => f[w] = { value: x, index: w }), s < f.length && (L1(f, s), f = f.slice(0, s)), o && f.sort(_r);
    const g = h * s, m = l.subarray(g, g + s), b = c.subarray(g, g + s);
    for (let x = 0; x < s; x++)
      m[x] = f[x].value, b[x] = f[x].index;
  }
  const u = t.slice();
  return u[u.length - 1] = s, [
    Nt(u, e, l),
    Nt(u, "int32", c)
  ];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lX(n, t, e, s) {
  const o = Dt(t, e)[0], r = [1, e[0], 1];
  for (let f = 0; f < o; f++)
    r[0] *= e[f];
  r[1] = e[o];
  for (let f = o + 1; f < e.length; f++)
    r[2] *= e[f];
  const i = {}, a = new Int32Array(e[o]), l = new Fe(r, s, n), c = [], u = r[0] === 1 && r[2] === 1;
  for (let f = 0; f < e[o]; f++) {
    let g;
    if (u)
      g = n[f].toString();
    else {
      const m = [];
      for (let b = 0; b < r[0]; b++)
        for (let x = 0; x < r[2]; x++)
          m.push(l.get(b, f, x));
      g = m.join(",");
    }
    if (i[g] !== void 0)
      a[f] = i[g];
    else {
      const m = Object.keys(i).length;
      i[g] = m, a[f] = m, c.push(f);
    }
  }
  const h = r.slice();
  h[1] = Object.keys(i).length;
  const d = new Fe(h, s);
  c.forEach((f, g) => {
    for (let m = 0; m < r[0]; m++)
      for (let b = 0; b < r[2]; b++)
        d.set(l.get(m, f, b), m, g, b);
  });
  const p = e.slice();
  return p[o] = h[1], {
    outputValues: d.values,
    outputShape: p,
    indices: a
  };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cX = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addImpl: hP,
  bincountImpl: dP,
  bincountReduceImpl: pP,
  castImpl: uP,
  ceilImpl: fP,
  concatImpl: mP,
  equalImpl: gP,
  expImpl: bP,
  expm1Impl: xP,
  floorImpl: yP,
  gatherNdImpl: wP,
  gatherV2Impl: IP,
  greaterEqualImpl: vP,
  greaterImpl: CP,
  lessEqualImpl: kP,
  lessImpl: SP,
  linSpaceImpl: TP,
  logImpl: NP,
  maxImpl: $P,
  maximumImpl: RP,
  minimumImpl: GP,
  multiplyImpl: G1,
  negImpl: LP,
  notEqualImpl: EP,
  prodImpl: MP,
  raggedGatherImpl: OP,
  raggedTensorToTensorImpl: AP,
  rangeImpl: ZP,
  rsqrtImpl: KP,
  scatterImpl: BP,
  sigmoidImpl: HP,
  simpleAbsImpl: cP,
  sliceImpl: _P,
  sparseFillEmptyRowsImpl: UP,
  sparseReshapeImpl: YP,
  sparseSegmentReductionImpl: jP,
  sqrtImpl: QP,
  squaredDifferenceImpl: JP,
  stridedSliceImpl: qP,
  stringNGramsImpl: eX,
  stringSplitImpl: sX,
  stringToHashBucketFastImpl: oX,
  subImpl: rX,
  tileImpl: iX,
  topKImpl: aX,
  transposeImpl: WP,
  uniqueImpl: lX
}, Symbol.toStringTag, { value: "Module" }));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const { addImpl: uX, bincountImpl: E1, bincountReduceImpl: hX, castImpl: dX, ceilImpl: pX, concatImpl: fX, equalImpl: mX, expImpl: gX, expm1Impl: bX, floorImpl: xX, gatherNdImpl: yX, gatherV2Impl: wX, greaterImpl: IX, greaterEqualImpl: CX, lessImpl: vX, lessEqualImpl: SX, linSpaceImpl: kX, logImpl: TX, maxImpl: NX, maximumImpl: $X, minimumImpl: RX, multiplyImpl: GX, negImpl: LX, notEqualImpl: EX, prodImpl: WX, raggedGatherImpl: MX, raggedTensorToTensorImpl: DX, rangeImpl: FX, rsqrtImpl: zX, scatterImpl: VX, sigmoidImpl: PX, simpleAbsImpl: W1, sliceImpl: XX, sparseFillEmptyRowsImpl: OX, sparseReshapeImpl: AX, sparseSegmentReductionImpl: M1, sqrtImpl: ZX, stridedSliceImpl: KX, stringNGramsImpl: BX, stringSplitImpl: HX, stringToHashBucketFastImpl: _X, subImpl: UX, tileImpl: YX, topKImpl: jX, transposeImpl: em, uniqueImpl: QX } = cX;
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function D1(n, t) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t).map((e) => `${n}.${e}`);
}
function Ue(n, t) {
  return t === 1 ? [n] : D1(n, t);
}
function JX(n, t) {
  if (n === 1)
    return "rc";
  let e = "";
  for (let s = 0; s < n; s++)
    e += t[s], s < n - 1 && (e += ",");
  return e;
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qX {
  constructor(t) {
    if (this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.enableShapeUniforms = qe(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      const e = Ue("rc", this.rank), s = se(this.rank), o = this.getOutOfBoundsCondition(e), r = this.getSetup(e), i = this.getOutput(e);
      this.userCode = `
        void main() {
          ${s} rc = getOutputCoords();

          if(${o}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${i}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(t) {
    const e = [];
    for (let s = 0; s <= 1; s++)
      for (let o = 0; o <= 1; o++) {
        let r = `${s === 0 ? "r" : "rp1"}, ${o === 0 ? "c" : "cp1"}`;
        for (let i = 2; i < this.rank; i++)
          r = `${t[t.length - 1 - i]},` + r;
        e.push(r);
      }
    return e;
  }
  getOutOfBoundsCondition(t) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let e = "";
    for (let s = this.rank - 2; s < this.rank; s++)
      e += `${t[s]} >= ${this.enableShapeUniforms ? `outShape[${s}]` : this.outputShape[s]}`, s < this.rank - 1 && (e += "||");
    return e;
  }
  getSetup(t) {
    if (this.rank === 1)
      return "";
    const e = t.slice(-2), s = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], o = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${s};
      bool rEdge = rp1 >= ${o};
    `;
  }
  getOutput(t) {
    const e = this.getSourceCoordsArr(t);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class F1 {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length);
    let s = "";
    for (let o = 0; o < 4; o++) {
      let r = "thisRC = rc;";
      o % 2 === 1 && (r += "thisRC.z += 1;"), o > 1 && (r += "thisRC.y += 1;"), s += `
        ${r}
        ${o > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${o}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${o > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${tO(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? qf() : Jf(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t[2]};

        ${s}

        setOutput(result);
      }
    `;
  }
}
function tO(n, t) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t ? tV(["r", "c", "d"], "inputShape") : Oo(["r", "c", "d"], n)}
      return ivec3(r, c, d);
    }
  `;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class eO {
  constructor(t) {
    this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};
  }
  acquireTexture(t, e, s) {
    const o = mg(e, s), r = gg(t, o, s);
    r in this.freeTextures || (this.freeTextures[r] = []), r in this.usedTextures || (this.usedTextures[r] = []);
    const i = fg(t, o, this.gpgpu.gl, this.gpgpu.textureConfig, s);
    if (this.freeTextures[r].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= i, this.log();
      const l = this.freeTextures[r].shift();
      return this.usedTextures[r].push(l), l;
    }
    let a;
    return o === Pe.PACKED_2X2_FLOAT32 ? a = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : o === Pe.PACKED_2X2_FLOAT16 ? a = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : o === Pe.UNPACKED_FLOAT32 ? a = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : o === Pe.UNPACKED_FLOAT16 ? a = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : o === Pe.PACKED_4X1_UNSIGNED_BYTE && (a = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[r].push(a), this.numUsedTextures++, this._numBytesAllocated += i, this.log(), a;
  }
  releaseTexture(t, e, s, o) {
    if (this.freeTextures == null)
      return;
    const r = mg(s, o), i = gg(e, r, o);
    i in this.freeTextures || (this.freeTextures[i] = []);
    const a = fg(e, r, this.gpgpu.gl, this.gpgpu.textureConfig, o), l = B().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    l !== -1 && this._numBytesAllocated > l ? (this.gpgpu.deleteMatrixTexture(t.texture), this._numBytesAllocated -= a) : (this.freeTextures[i].push(t), this.numFreeTextures++, this._numBytesFree += a), this.numUsedTextures--;
    const c = this.usedTextures[i], u = c.indexOf(t);
    if (u < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    c.splice(u, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    const t = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${t})`);
    const e = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (const t in this.freeTextures)
        this.freeTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      for (const t in this.usedTextures)
        this.usedTextures[t].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
}
function nO(n, t) {
  const e = n;
  if (t === e.R32F)
    return 4;
  if (t === e.R16F)
    return 2;
  if (t === e.RGBA32F)
    return 16;
  if (t === n.RGBA)
    return 16;
  if (t === e.RGBA16F)
    return 8;
  if (t === e.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t}`);
}
function fg(n, t, e, s, o) {
  const r = sO(t, s);
  let i;
  if (o) {
    const [l, c] = Rr(n[0], n[1]);
    i = l * c;
  } else {
    const [l, c] = ka(n[0], n[1]);
    i = l * c;
  }
  const a = nO(e, r);
  return i * a;
}
function sO(n, t) {
  switch (n) {
    case Pe.PACKED_2X2_FLOAT32:
      return $1(t);
    case Pe.PACKED_2X2_FLOAT16:
      return R1(t);
    case Pe.UNPACKED_FLOAT32:
      return k1(t);
    case Pe.UNPACKED_FLOAT16:
      return T1(t);
    case Pe.PACKED_4X1_UNSIGNED_BYTE:
      return N1(t);
    default:
      throw new Error(`Unknown physical texture type ${n}`);
  }
}
function oO(n) {
  return B().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? n ? Pe.PACKED_2X2_FLOAT32 : Pe.UNPACKED_FLOAT32 : n ? Pe.PACKED_2X2_FLOAT16 : Pe.UNPACKED_FLOAT16;
}
function mg(n, t) {
  if (n === Cn.UPLOAD)
    return Pe.PACKED_2X2_FLOAT32;
  if (n === Cn.RENDER || n == null)
    return oO(t);
  if (n === Cn.DOWNLOAD || n === Cn.PIXELS)
    return Pe.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${n}`);
}
function gg(n, t, e) {
  return `${n[0]}_${n[1]}_${t}_${e}`;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class vs {
  constructor(t, e) {
    this.variableNames = ["A"], this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
const jn = "if (isnan(x)) return x;", rO = "return x;", bg = "return abs(x);", iO = "return (x >= 0.0) ? x : (exp(x) - 1.0);", aO = jn + `
  return (x < 0.0) ? 0.0 : x;
`, lO = jn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, Ho = "return x;", cO = "return 1.0 / (1.0 + exp(-1.0 * x));";
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uO = "return x;", hO = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, dO = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, pO = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, fO = "return 1.0 / (1.0 + exp(-1.0 * x));";
class bo {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class mO {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length);
    const e = t.length, s = Ue("rc", e), o = se(e), r = JX(e, s), i = s.slice(-2), a = e <= 1 ? "rc" : `vec2(${i.join(",")})`;
    this.userCode = `
      void main() {
        ${o} rc = getOutputCoords();
        vec4 packedInput = getA(${r});

        setOutput(getChannel(packedInput, ${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gO = y0, bO = 1e-7, xO = 1e-4, Ka = {};
function yO(n) {
  return n in Ka || (Ka[n] = {}), Ka[n];
}
const wO = B().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"), IO = 600;
function CO() {
  return B().global.screen == null ? 1024 : B().global.screen.height * B().global.screen.width * window.devicePixelRatio * IO / 1024 / 1024;
}
class gu extends Zh {
  constructor(t) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = !1, this.pendingDeletes = 0, this.disposed = !1, !B().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let e;
    if (t != null) {
      if (t instanceof Mu)
        e = t;
      else {
        const s = is(B().getNumber("WEBGL_VERSION"), t);
        e = new Mu(s);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = !1;
    } else {
      const s = is(B().getNumber("WEBGL_VERSION"));
      e = new Mu(s), this.binaryCache = yO(B().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = !0;
    }
    this.gpgpu = e, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new eO(this.gpgpu), this.numMBBeforeWarning = CO(), this.texData = new Zg(this, le());
  }
  nextDataId() {
    return gu.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  write(t, e, s) {
    if ((B().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || B().getBool("DEBUG")) && this.checkNumericalProblems(t), s === "complex64" && t != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    const o = { id: this.nextDataId() };
    return this.texData.set(o, { shape: e, dtype: s, values: t, usage: Cn.UPLOAD, refCount: 1 }), o;
  }
  /** Return refCount of a `TensorData`. */
  refCount(t) {
    return this.texData.has(t) ? this.texData.get(t).refCount : 0;
  }
  /** Increase refCount of a `TextureData`. */
  incRef(t) {
    const e = this.texData.get(t);
    e.refCount++;
  }
  /** Decrease refCount of a `TextureData`. */
  decRef(t) {
    if (this.texData.has(t)) {
      const e = this.texData.get(t);
      e.refCount--;
    }
  }
  move(t, e, s, o, r) {
    if (B().getBool("DEBUG") && this.checkNumericalProblems(e), o === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t, { shape: s, dtype: o, values: e, usage: Cn.UPLOAD, refCount: r });
  }
  disposeIntermediateTensorInfo(t) {
    this.disposeData(t.dataId);
  }
  readSync(t) {
    const e = this.texData.get(t), { values: s, dtype: o, complexTensorInfos: r, slice: i, shape: a, isPacked: l } = e;
    if (i != null) {
      let d;
      l ? d = new bo(a, Ho) : d = new vs(a, Ho);
      const p = this.runWebGLProgram(d, [{ dataId: t, shape: a, dtype: o }], o), f = this.readSync(p.dataId);
      return this.disposeIntermediateTensorInfo(p), f;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (o === "string")
      return s;
    const c = this.activeTimers != null;
    let u;
    c && (u = Ve());
    let h;
    if (o === "complex64") {
      const d = this.readSync(r.real.dataId), p = this.readSync(r.imag.dataId);
      h = $s(d, p);
    } else
      h = this.getValuesFromTexture(t);
    return c && (this.downloadWaitMs += Ve() - u), this.convertAndCacheOnCPU(t, h);
  }
  async read(t) {
    if (this.pendingRead.has(t)) {
      const f = this.pendingRead.get(t);
      return new Promise((g) => f.push(g));
    }
    const e = this.texData.get(t), { values: s, shape: o, slice: r, dtype: i, complexTensorInfos: a, isPacked: l } = e;
    if (r != null) {
      let f;
      l ? f = new bo(o, Ho) : f = new vs(o, Ho);
      const g = this.runWebGLProgram(f, [{ dataId: t, shape: o, dtype: i }], i), m = this.read(g.dataId);
      return this.disposeIntermediateTensorInfo(g), m;
    }
    if (s != null)
      return this.convertAndCacheOnCPU(t);
    if (B().getBool("DEBUG") && !B().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && B().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let c = null, u;
    if (i !== "complex64" && B().get("WEBGL_BUFFER_SUPPORTED")) {
      u = this.decode(t);
      const f = this.texData.get(u.dataId);
      c = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Xa(o));
    }
    this.pendingRead.set(t, []), i !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let h;
    if (i === "complex64") {
      const f = await Promise.all([
        this.read(a.real.dataId),
        this.read(a.imag.dataId)
      ]), g = f[0], m = f[1];
      h = $s(g, m);
    } else if (c == null)
      h = this.getValuesFromTexture(t);
    else {
      const f = H(o);
      h = this.gpgpu.downloadFloat32MatrixFromBuffer(c, f);
    }
    if (u != null && this.disposeIntermediateTensorInfo(u), c != null) {
      const f = this.gpgpu.gl;
      xt(f, () => f.deleteBuffer(c));
    }
    const d = this.convertAndCacheOnCPU(t, h), p = this.pendingRead.get(t);
    return this.pendingRead.delete(t), p.forEach((f) => f(d)), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t) && le().removeDataId(t, this), this.pendingDeletes--), d;
  }
  /**
   * Read tensor to a new texture that is densely packed for ease of use.
   * @param dataId The source tensor.
   * @param options
   *     customTexShape: Optional. If set, will use the user defined texture
   *     shape to create the texture.
   */
  readToGPU(t, e = {}) {
    const s = this.texData.get(t), { values: o, shape: r, slice: i, dtype: a, isPacked: l, texture: c } = s;
    if (a === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (i != null) {
      let p;
      l ? p = new bo(r, Ho) : p = new vs(r, Ho);
      const f = this.runWebGLProgram(p, [{ dataId: t, shape: r, dtype: a }], a), g = this.readToGPU(f, e);
      return this.disposeIntermediateTensorInfo(f), g;
    }
    if (c == null)
      throw o != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    const u = this.decode(t, e.customTexShape), h = le().makeTensorFromTensorInfo(u), d = this.texData.get(u.dataId);
    return Object.assign({ tensorRef: h }, d.texture);
  }
  bufferSync(t) {
    const e = this.readSync(t.dataId);
    if (t.dtype === "string")
      try {
        const s = e.map((o) => Ss(o));
        return Nt(t.shape, t.dtype, s);
      } catch {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return Nt(t.shape, t.dtype, e);
  }
  checkNumericalProblems(t) {
    if (t != null)
      for (let e = 0; e < t.length; e++) {
        const s = t[e];
        if (!Nz(s))
          throw B().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${s} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${s} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(t) {
    const { shape: e, dtype: s, isPacked: o } = this.texData.get(t), r = H(e);
    if (B().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      const d = this.decode(t), p = this.texData.get(d.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(p.texture.texture, ...Xa(e)).subarray(0, r);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    const i = B().getBool("WEBGL_PACK") && o === !0, a = i ? Lu(e) : e, l = i ? new ZV(a) : new AV(a), c = this.runWebGLProgram(l, [{ shape: a, dtype: s, dataId: t }], "float32"), u = this.texData.get(c.dataId), h = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture, u.texShape[0], u.texShape[1]).subarray(0, r);
    return this.disposeIntermediateTensorInfo(c), h;
  }
  timerAvailable() {
    return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t) {
    const e = this.activeTimers, s = [];
    let o = !1;
    this.programTimersStack == null ? (this.programTimersStack = s, o = !0) : this.activeTimers.push(s), this.activeTimers = s, t();
    const r = vo(this.activeTimers.map((l) => l.query)).filter((l) => l != null), i = vo(this.activeTimers.map((l) => l.name)).filter((l) => l != null);
    this.activeTimers = e, o && (this.programTimersStack = null);
    const a = {
      uploadWaitMs: this.uploadWaitMs,
      downloadWaitMs: this.downloadWaitMs,
      kernelMs: null,
      wallMs: null
      // will be filled by the engine
    };
    return (async () => {
      if (B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        const l = await Promise.all(r);
        a.kernelMs = Kg(l), a.getExtraProfileInfo = () => l.map((c, u) => ({ name: i[u], ms: c })).map((c) => `${c.name}: ${c.ms}`).join(", ");
      } else
        a.kernelMs = {
          error: "WebGL query timers are not supported in this environment."
        };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, a;
    })();
  }
  memory() {
    return {
      unreliable: !1,
      numBytesInGPU: this.numBytesInGPU,
      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,
      numBytesInGPUFree: this.textureManager.numBytesFree
    };
  }
  startTimer() {
    return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: Ve(), endMs: null };
  }
  endTimer(t) {
    return B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = Ve(), t);
  }
  async getQueryTime(t) {
    if (B().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(t);
    const e = t;
    return e.endMs - e.startMs;
  }
  /**
   * Decrease the RefCount on the dataId and dispose the memory if the dataId
   * has 0 refCount. If there are pending read on the data, the disposal would
   * added to the pending delete queue. Return true if the dataId is removed
   * from backend or the backend does not contain the dataId, false if the
   * dataId is not removed. Memory may or may not be released even when dataId
   * is removed, which also depends on dataRefCount, see `releaseGPU`.
   * @param dataId
   * @oaram force Optional, remove the data regardless of refCount
   */
  disposeData(t, e = !1) {
    if (this.pendingDisposal.has(t))
      return !1;
    if (!this.texData.has(t))
      return !0;
    if (e ? this.texData.get(t).refCount = 0 : this.texData.get(t).refCount--, !e && this.texData.get(t).refCount > 0)
      return !1;
    if (this.pendingRead.has(t))
      return this.pendingDisposal.add(t), this.pendingDeletes++, !1;
    this.releaseGPUData(t);
    const { complexTensorInfos: s } = this.texData.get(t);
    return s != null && (this.disposeData(s.real.dataId, e), this.disposeData(s.imag.dataId, e)), this.texData.delete(t), !0;
  }
  releaseGPUData(t) {
    const { texture: e, dtype: s, texShape: o, usage: r, isPacked: i, slice: a } = this.texData.get(t), l = a && a.origDataId || t, c = this.dataRefCount.get(l);
    c > 1 ? this.dataRefCount.set(l, c - 1) : (this.dataRefCount.delete(l), e != null && (this.numBytesInGPU -= this.computeBytes(o, s), this.textureManager.releaseTexture(e, o, r, i)));
    const u = this.texData.get(t);
    u.texture = null, u.texShape = null, u.isPacked = !1, u.slice = null;
  }
  getTexture(t) {
    return this.uploadToGPU(t), this.texData.get(t).texture.texture;
  }
  /**
   * Returns internal information for the specific data bucket. Used in unit
   * tests.
   */
  getDataInfo(t) {
    return this.texData.get(t);
  }
  /*
  Tests whether all the inputs to an op are small and on the CPU. This heuristic
  determines when it would be faster to execute a kernel on the CPU. WebGL
  kernels opt into running this check and forwarding when appropriate.
  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more
  sustainable strategy for optimizing backend execution of ops.
   */
  shouldExecuteOnCPU(t, e = wO) {
    return B().getBool("WEBGL_CPU_FORWARD") && t.every((s) => this.texData.get(s.dataId).texture == null && H(s.shape) < e);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t) {
    wn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    const e = t.dataSync();
    return gO(t.shape, e);
  }
  packedUnaryOp(t, e, s) {
    const o = new bo(t.shape, e), r = this.compileAndRun(o, [t], s);
    return le().makeTensorFromTensorInfo(r);
  }
  // TODO(msoulanille) remove this once the backend has been modularized
  // a copy is needed here to break a circular dependency.
  // Also remove the op from unary_op.
  abs(t) {
    if (this.shouldExecuteOnCPU([t]) && t.dtype !== "complex64") {
      const o = W1(this.texData.get(t.dataId).values);
      return this.makeOutput(t.shape, t.dtype, o);
    }
    if (B().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(t, bg, t.dtype);
    const e = new vs(t.shape, bg), s = this.compileAndRun(e, [t]);
    return le().makeTensorFromTensorInfo(s);
  }
  makeTensorInfo(t, e, s) {
    let o;
    if (e === "string" && s != null && s.length > 0 && br(s[0])) {
      const r = s.map((i) => An(i));
      o = this.write(r, t, e);
    } else
      o = this.write(s, t, e);
    return this.texData.get(o).usage = null, { dataId: o, shape: t, dtype: e };
  }
  makeOutput(t, e, s) {
    return le().makeTensorFromTensorInfo(this.makeTensorInfo(t, e, s), this);
  }
  unpackTensor(t) {
    const e = new mO(t.shape);
    return this.runWebGLProgram(e, [t], t.dtype);
  }
  packTensor(t) {
    const e = new qX(t.shape), s = !0;
    return this.runWebGLProgram(e, [t], t.dtype, null, s);
  }
  packedReshape(t, e) {
    const s = [
      fr(t.shape),
      ...mr(t.shape)
    ], o = {
      dtype: t.dtype,
      shape: s,
      dataId: t.dataId
    }, r = [
      fr(e),
      ...mr(e)
    ], i = new F1(r, s), a = !0, l = [s], c = this.runWebGLProgram(i, [o], t.dtype, l, a);
    return { dataId: c.dataId, shape: e, dtype: c.dtype };
  }
  decode(t, e) {
    const s = this.texData.get(t), { isPacked: o, shape: r, dtype: i } = s;
    if (e != null) {
      const d = H(r), p = e[0] * e[1] * 4;
      S(d <= p, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    const a = Lu(r);
    let l;
    o ? l = new OV(a) : l = new XV(a);
    const c = !0, u = [e ?? Xa(a)], h = this.runWebGLProgram(l, [{ shape: a, dtype: i, dataId: t }], i, u, c, e);
    return { dtype: i, shape: r, dataId: h.dataId };
  }
  runWebGLProgram(t, e, s, o, r = !1, i) {
    const a = this.makeTensorInfo(t.outputShape, s), l = this.texData.get(a.dataId);
    if (t.packedOutput && (l.isPacked = !0), t.outPackingScheme === ri.DENSE) {
      const b = i ?? Xa(t.outputShape);
      l.texShape = b.map((x) => x * 2);
    }
    if (t.outTexUsage != null && (l.usage = t.outTexUsage), H(a.shape) === 0)
      return l.values = he(a.dtype, 0), a;
    const c = [], u = e.map((b) => {
      if (b.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let x = this.texData.get(b.dataId);
      if (x.texture == null) {
        if (!t.packedInputs && H(b.shape) <= B().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return {
            shape: b.shape,
            texData: null,
            isUniform: !0,
            uniformValues: x.values
          };
        t.packedInputs && (x.isPacked = !0, x.shape = b.shape);
      }
      if (this.uploadToGPU(b.dataId), !!x.isPacked != !!t.packedInputs)
        b = x.isPacked ? this.unpackTensor(b) : this.packTensor(b), c.push(b), x = this.texData.get(b.dataId);
      else if (x.isPacked && !$l(x.shape, b.shape)) {
        const w = b, y = b.shape;
        b.shape = x.shape, b = this.packedReshape(b, y), c.push(b), x = this.texData.get(b.dataId), w.shape = y;
      }
      return { shape: b.shape, texData: x, isUniform: !1 };
    });
    this.uploadToGPU(a.dataId);
    const h = { shape: a.shape, texData: l, isUniform: !1 }, d = PV(t, u, h), p = this.getAndSaveBinary(d, () => zV(this.gpgpu, t, u, h)), f = this.activeTimers != null;
    let g;
    f && (g = this.startTimer()), B().get("ENGINE_COMPILE_ONLY") || VV(this.gpgpu, p, u, h, o), c.forEach((b) => this.disposeIntermediateTensorInfo(b)), f && (g = this.endTimer(g), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(g) }));
    const m = B().get("WEBGL_FLUSH_THRESHOLD");
    if (m > 0) {
      const b = Ve();
      b - this.lastGlFlushTime > m && (this.gpgpu.gl.flush(), this.lastGlFlushTime = b);
    }
    if (!B().getBool("WEBGL_LAZILY_UNPACK") && l.isPacked && r === !1) {
      const b = this.unpackTensor(a);
      return this.disposeIntermediateTensorInfo(a), b;
    }
    return a;
  }
  compileAndRun(t, e, s, o, r = !1) {
    return s = s || e[0].dtype, this.runWebGLProgram(t, e, s, o, r);
  }
  getAndSaveBinary(t, e) {
    return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (B().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((e) => {
      this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram), delete this.binaryCache[e];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement < "u" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = X(() => {
      if (!B().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        const t = B().getBool("DEBUG");
        B().set("DEBUG", !1);
        const e = this.abs($t(1e-8)).dataSync()[0];
        if (B().set("DEBUG", t), e > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  /** Returns the smallest representable number.  */
  epsilon() {
    return this.floatPrecision() === 32 ? bO : xO;
  }
  uploadToGPU(t) {
    const e = this.texData.get(t), { shape: s, dtype: o, values: r, texture: i, usage: a, isPacked: l } = e;
    if (i != null)
      return;
    const c = this.activeTimers != null;
    let u;
    c && (u = Ve());
    let h = e.texShape;
    if (h == null && (h = Bz(s, l), e.texShape = h), r != null) {
      const d = Lu(s);
      let p, f = h[1], g = h[0];
      const m = r instanceof Uint8Array || r instanceof Uint8ClampedArray;
      (l || !m) && ([f, g] = Rr(h[0], h[1])), l ? p = new BV(d, m) : p = new KV(d, m);
      const b = m ? [g, f] : h, x = this.makeTensorInfo(b, o), w = this.texData.get(x.dataId);
      m ? w.usage = Cn.PIXELS : w.usage = Cn.UPLOAD, w.texShape = b, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId), f, g, r);
      const y = [[g, f]], I = !0, v = this.runWebGLProgram(p, [x], o, y, I), T = this.texData.get(v.dataId);
      e.texShape = T.texShape, e.isPacked = T.isPacked, e.usage = T.usage, B().get("ENGINE_COMPILE_ONLY") ? this.disposeData(v.dataId) : (e.texture = T.texture, e.values = null, this.texData.delete(v.dataId)), this.disposeIntermediateTensorInfo(x), c && (this.uploadWaitMs += Ve() - u);
    } else {
      const d = this.acquireTexture(h, a, o, l);
      e.texture = d;
    }
  }
  convertAndCacheOnCPU(t, e) {
    const s = this.texData.get(t), { dtype: o } = s;
    return this.releaseGPUData(t), e != null && (s.values = vO(e, o)), s.values;
  }
  acquireTexture(t, e, s, o) {
    if (this.numBytesInGPU += this.computeBytes(t, s), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      const r = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = !0, console.warn(`High memory usage in GPU: ${r} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t, e, o);
  }
  computeBytes(t, e) {
    return t[0] * t[1] * tl(e);
  }
  checkCompileCompletion() {
    for (const [, t] of Object.entries(this.binaryCache))
      this.checkCompletion_(t);
  }
  async checkCompileCompletionAsync() {
    const t = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (const [, e] of Object.entries(this.binaryCache))
        t.push(this.checkCompletionAsync_(e));
      return Promise.all(t);
    } else {
      for (const [, e] of Object.entries(this.binaryCache)) {
        const s = new Promise((o) => {
          try {
            this.checkCompletion_(e), o(!0);
          } catch (r) {
            throw r;
          }
        });
        t.push(s);
      }
      return Promise.all(t);
    }
  }
  async checkCompletionAsync_(t) {
    return this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t) : (await Qc(), this.checkCompletionAsync_(t));
  }
  checkCompletion_(t) {
    if (this.gpgpu.gl.getProgramParameter(t.webGLProgram, this.gpgpu.gl.LINK_STATUS) === !1)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)), this.gpgpu.gl.getShaderParameter(t.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === !1 ? (y1(t.source, this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return !0;
  }
  getUniformLocations() {
    for (const [, t] of Object.entries(this.binaryCache)) {
      const { uniformLocations: e, customUniformLocations: s, infLoc: o, nanLoc: r, inShapesLocations: i, inTexShapesLocations: a, outShapeLocation: l, outShapeStridesLocation: c, outTexShapeLocation: u } = S1(this.gpgpu, t.program, t.webGLProgram);
      t.uniformLocations = e, t.customUniformLocations = s, t.infLoc = o, t.nanLoc = r, t.inShapesLocations = i, t.inTexShapesLocations = a, t.outShapeLocation = l, t.outShapeStridesLocation = c, t.outTexShapeLocation = u;
    }
  }
}
gu.nextDataId = 0;
function vO(n, t) {
  if (t === "float32" || t === "complex64")
    return n;
  if (t === "int32" || t === "bool") {
    const e = t === "int32" ? new Int32Array(n.length) : new Uint8Array(n.length);
    for (let s = 0; s < e.length; ++s)
      e[s] = Math.round(n[s]);
    return e;
  } else
    throw new Error(`Unknown dtype ${t}`);
}
/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Bd() && Db(
  "webgl",
  () => new gu(),
  2
  /* priority */
);
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const nm = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
class gr {
  constructor(t, e, s) {
    this.variableNames = ["A", "B"], this.outputShape = Rt(e, s), this.enableShapeUniforms = qe(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $a = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
class Ra {
  constructor(t, e, s, o = !1) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Rt(e, s);
    const r = this.outputShape.length;
    this.enableShapeUniforms = qe(r);
    let i = "";
    if (o)
      if (r === 0 || H(this.outputShape) === 1)
        i = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (i = `
          ${se(r)} coords = getOutputCoords();
        `, r === 1)
        this.enableShapeUniforms ? i += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : i += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        const l = Ue("coords", r);
        this.enableShapeUniforms ? i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= outShape[${r} - 2];
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= outShape[${r} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : i += `
            bool nextRowOutOfBounds =
              (${l[r - 2]} + 1) >= ${this.outputShape[r - 2]};
            bool nextColOutOfBounds =
              (${l[r - 1]} + 1) >= ${this.outputShape[r - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${i}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gn(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  return e.incRef(s.dataId), { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
const SO = {
  kernelName: Ri,
  backendName: "webgl",
  kernelFunc: gn
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ro(n) {
  const { inputs: t, backend: e } = n, { real: s, imag: o } = t, r = e.makeTensorInfo(s.shape, "complex64"), i = e.texData.get(r.dataId), a = gn({ inputs: { x: s }, backend: e }), l = gn({ inputs: { x: o }, backend: e });
  return i.complexTensorInfos = { real: a, imag: l }, r;
}
const kO = {
  kernelName: nd,
  backendName: "webgl",
  kernelFunc: ro
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z1 = "return (a < 0.) ? b * a : a;", V1 = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function TO(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { alpha: r } = s, i = e.makeTensorInfo([], "float32", ws(r, "float32")), a = B().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ra(V1, o.shape, i.shape) : new gr(z1, o.shape, i.shape), l = e.runWebGLProgram(a, [o, i], "float32");
  return e.disposeIntermediateTensorInfo(i), l;
}
const NO = {
  kernelName: oc,
  backendName: "webgl",
  kernelFunc: TO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const P1 = "return (a < 0.) ? b * a : a;", X1 = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function $O(n) {
  const { inputs: t, backend: e } = n, { x: s, alpha: o } = t, r = B().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ra(X1, s.shape, o.shape) : new gr(P1, s.shape, o.shape);
  return e.runWebGLProgram(r, [s, o], "float32");
}
const RO = {
  kernelName: vc,
  backendName: "webgl",
  kernelFunc: $O
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mr = "if (isnan(x)) return x;";
function Xt({ opSnippet: n, packedOpSnippet: t, cpuKernelImpl: e, dtype: s }) {
  return ({ inputs: o, backend: r }) => {
    const { x: i } = o, a = r, l = s || i.dtype;
    if (a.shouldExecuteOnCPU([i]) && e != null) {
      const h = a.texData.get(i.dataId), d = e(h.values, l);
      return a.makeTensorInfo(i.shape, l, d);
    }
    const c = B().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t != null;
    let u;
    return c ? u = new bo(i.shape, t) : u = new vs(i.shape, n), a.runWebGLProgram(u, [i], l);
  };
}
function Ae({ opSnippet: n, packedOpSnippet: t, checkOutOfBounds: e = !1, supportsComplex: s = !1, cpuKernelImpl: o, dtype: r }) {
  return ({ inputs: i, backend: a }) => {
    const { a: l, b: c } = i, u = a;
    if (s && l.dtype === "complex64") {
      const f = u.texData.get(l.dataId), g = u.texData.get(c.dataId), [m, b] = [
        [f.complexTensorInfos.real, g.complexTensorInfos.real],
        [f.complexTensorInfos.imag, g.complexTensorInfos.imag]
      ].map((w) => {
        const [y, I] = w, v = {
          dataId: y.dataId,
          dtype: y.dtype,
          shape: l.shape
        }, T = {
          dataId: I.dataId,
          dtype: I.dtype,
          shape: c.shape
        }, k = new gr(n, l.shape, c.shape);
        return u.runWebGLProgram(k, [v, T], nn(y.dtype, I.dtype));
      }), x = ro({ inputs: { real: m, imag: b }, backend: u });
      return u.disposeIntermediateTensorInfo(m), u.disposeIntermediateTensorInfo(b), x;
    }
    const h = r || nn(l.dtype, c.dtype);
    if ((l.dtype === "string" || c.dtype === "string" || u.shouldExecuteOnCPU([l, c])) && o != null) {
      const f = u.texData.get(l.dataId).values, g = u.texData.get(c.dataId).values, m = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        Rs(f)
      ) : f, b = l.dtype === "string" ? (
        // tslint:disable-next-line: no-any
        Rs(g)
      ) : g, [x, w] = o(l.shape, c.shape, m, b, h), y = u.makeTensorInfo(w, h), I = u.texData.get(y.dataId);
      return I.values = x, y;
    }
    const d = B().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t != null;
    let p;
    return d ? p = new Ra(t, l.shape, c.shape, e) : p = new gr(n, l.shape, c.shape), u.runWebGLProgram(p, [l, c], h);
  };
}
function ii(n, t = !1) {
  if (n === "linear")
    return t ? uO : rO;
  if (n === "relu")
    return t ? dO : aO;
  if (n === "elu")
    return t ? hO : iO;
  if (n === "relu6")
    return t ? pO : lO;
  if (n === "prelu")
    return t ? X1 : P1;
  if (n === "leakyrelu")
    return t ? V1 : z1;
  if (n === "sigmoid")
    return t ? fO : cO;
  throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`);
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class O1 {
  constructor(t, e, s, o = !1, r = !1, i = !1, a = null, l = !1, c = !1) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = s, this.enableShapeUniforms = qe(this.outputShape.length);
    const u = o ? t[1] : t[2], h = Math.ceil(u / 2), d = o ? "i * 2, rc.y" : "rc.y, i * 2", p = r ? "rc.z, i * 2" : "i * 2, rc.z", f = o ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], g = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"];
    let m = "", b = "";
    a && (l ? m = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${a}
        }` : c ? m = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${a}
        }` : m = `vec4 activation(vec4 x) {
          ${a}
        }`, b = "result = activation(result);");
    const x = i ? "result += getBiasAtOutCoords();" : "";
    i && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), c && this.variableNames.push("leakyreluAlpha");
    let w = "rc.x", y = "rc.x";
    t[0] < e[0] ? w = `int(min(float(rc.x), ${t[0] - 1}.))` : e[0] < t[0] && (y = `int(min(float(rc.x), ${e[0] - 1}.))`), this.userCode = `
      ${m}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${h}; i++) {
          int batchA = ${w};
          int batchB = ${y};
          vec4 a = getMatrixA(batchA, ${d});
          vec4 b = getMatrixB(batchB, ${p});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${g[0]});
          result += (${f[1]} * ${g[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${x}

        ${b}

        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xg = {
  REAL: "return areal * breal - aimag * bimag;",
  IMAG: "return areal * bimag + aimag * breal;"
};
class yg {
  constructor(t, e, s) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = Rt(e, s), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const wg = "return a * b;";
function sm(n) {
  const { inputs: t, backend: e } = n, { a: s, b: o } = t, r = nn(s.dtype, o.dtype);
  if (s.dtype === "complex64") {
    const a = e.texData.get(s.dataId), l = e.texData.get(o.dataId), c = new yg(xg.REAL, s.shape, o.shape), u = new yg(xg.IMAG, s.shape, o.shape), h = [
      {
        dataId: a.complexTensorInfos.real.dataId,
        dtype: a.complexTensorInfos.real.dtype,
        shape: s.shape
      },
      {
        dataId: a.complexTensorInfos.imag.dataId,
        dtype: a.complexTensorInfos.imag.dtype,
        shape: s.shape
      },
      {
        dataId: l.complexTensorInfos.real.dataId,
        dtype: l.complexTensorInfos.real.dtype,
        shape: o.shape
      },
      {
        dataId: l.complexTensorInfos.imag.dataId,
        dtype: l.complexTensorInfos.imag.dtype,
        shape: o.shape
      }
    ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = ro({ inputs: { real: d, imag: p }, backend: e });
    return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
  }
  if (e.shouldExecuteOnCPU([s, o])) {
    const a = e.texData.get(s.dataId), l = e.texData.get(o.dataId), [c, u] = GX(s.shape, o.shape, a.values, l.values, r), h = e.makeTensorInfo(u, r), d = e.texData.get(h.dataId);
    return d.values = c, h;
  }
  let i;
  return B().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? i = new Ra(wg, s.shape, o.shape) : i = new gr(wg, s.shape, o.shape), e.runWebGLProgram(i, [s, o], r);
}
const GO = {
  kernelName: Vi,
  backendName: "webgl",
  kernelFunc: sm
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LO(n, t, e) {
  const s = [
    fr(n.shape),
    ...mr(n.shape)
  ], o = {
    dtype: n.dtype,
    shape: s,
    dataId: n.dataId
  }, r = [
    fr(t),
    ...mr(t)
  ], i = new F1(r, s), a = !0, l = [s], c = e.runWebGLProgram(i, [o], n.dtype, l, a);
  return { dataId: c.dataId, shape: t, dtype: c.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dt(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { shape: r } = s, i = e, a = H(o.shape), l = Bh(r, a), c = H(l);
  S(a === c, () => `The new shape (${l}) has ${c} elements and the old shape (${o.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`);
  const u = i.texData.get(o.dataId);
  return u.isPacked && !$l(o.shape, l) && !(u.texture !== null && $l(u.shape, l)) ? LO(o, l, i) : (i.incRef(o.dataId), { dataId: o.dataId, shape: l, dtype: o.dtype });
}
const EO = {
  kernelName: kc,
  backendName: "webgl",
  kernelFunc: dt
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Ig {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
    this.outputShape = [o, i];
    const a = Math.floor(s / 4) * 4, l = s % 4;
    let c = "sumValue += dot(values, ones);";
    if (e != null) {
      const h = 1 / e;
      c = `sumValue += dot(values * ${So(h) ? h.toPrecision(2) : h}, ones);`;
    }
    let u = "";
    r % s > 0 && (u = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        float sumValue = 0.0;

        for (int i = 0; i < ${a}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${c}
        }

        int inIdx = inOffset + ${a};
        if (${l === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${c}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${c}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${c}
        }
        setOutput(sumValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class WO {
  constructor(t, e) {
    this.variableNames = ["x"];
    const { windowSize: s, batchSize: o, inSize: r, outSize: i } = t;
    this.outputShape = [o, i];
    let a = "0.0", l = "";
    e === "prod" ? a = "1.0" : e === "min" ? (a = "1.0 / 1e-20", l = "min") : e === "max" && (a = "-1.0 / 1e-20", l = "max");
    let c = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "sum" ? c = "sumValue" : e === "prod" ? c = "prodValue" : e === "all" ? c = "allValue" : e === "any" && (c = "anyValue");
    const u = Math.floor(s / 4) * 4, h = s % 4;
    let d = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${l}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${l}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, p = "vec4";
    e === "all" ? (a = "1.0", d = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, p = "bvec4") : e === "any" && (a = "0.0", d = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, p = "bvec4");
    let f = "";
    r % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${a};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${s};

        vec4 minMaxValue = vec4(${a});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 2}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${d}
        } else if (${h === 3}) {
          ${p} values = ${p}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MO(n) {
  const t = [];
  for (; t.length === 0 || t[t.length - 1].outSize !== 1; ) {
    const e = t.length ? t[t.length - 1].outSize : n[1], s = Jc(e);
    t.push({
      inSize: e,
      windowSize: s,
      outSize: Math.ceil(e / s)
    });
  }
  return t;
}
function Zo(n, t, e, s) {
  const o = MO(n.shape);
  let r = n;
  for (let i = 0; i < o.length; i++) {
    const { inSize: a, windowSize: l, outSize: c } = o[i];
    let u, h;
    e === "mean" ? u = i === 0 ? new Ig({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, a) : new Ig({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }) : u = new WO({ windowSize: l, inSize: a, batchSize: n.shape[0], outSize: c }, e), h = r, r = s.runWebGLProgram(u, [r], t), h.dataId !== n.dataId && s.disposeIntermediateTensorInfo(h);
  }
  return r;
}
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DO {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[e[i]];
    this.outputShape = s, this.rank = s.length;
    const o = se(this.rank), r = FO(e);
    this.userCode = `
    void main() {
      ${o} resRC = getOutputCoords();
      setOutput(getA(${r}));
    }
    `;
  }
}
function FO(n) {
  const t = n.length;
  if (t > 6)
    throw Error(`Transpose for rank ${t} is not yet supported`);
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], s = new Array(t);
  for (let o = 0; o < n.length; o++)
    s[n[o]] = e[o];
  return s.join();
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class zO {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0;
    const s = new Array(t.length);
    for (let u = 0; u < s.length; u++)
      s[u] = t[e[u]];
    if (this.outputShape = s, this.rank = s.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    const o = se(this.rank), r = D1("rc", this.rank), i = new Array(this.rank);
    for (let u = 0; u < e.length; u++)
      i[e[u]] = r[u];
    const a = `vec2(${i.slice(-2).join()})`, l = `++${r[this.rank - 1]} < ${s[this.rank - 1]}`, c = `getChannel(getA(${i.join()}), ${a})`;
    this.userCode = `
    void main() {
      ${o} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${c};
      if(${l}) {
        result[1] = ${c};
      }
      --${r[this.rank - 1]};
      if(++${r[this.rank - 2]} < ${s[this.rank - 2]}) {
        result[2] = ${c};
        if(${l}) {
          result[3] = ${c};
        }
      }
      setOutput(result);
    }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bu(n, t, e) {
  const s = B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new zO(n.shape, t) : new DO(n.shape, t);
  return e.runWebGLProgram(s, [n], n.dtype);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VO(n, t, e, s) {
  const o = t, r = n.shape.length, i = Dt(o, n.shape);
  let a = i;
  const l = me(a, r), c = l != null;
  let u = n;
  c && (u = bu(n, l, s), a = Ie(a.length, r)), Oe("sum", a, r);
  const [h, d] = Ge(u.shape, a);
  let p = h;
  e && (p = we(h, i));
  const f = H(d), m = H(n.shape) / f, b = dt({ inputs: { x: u }, attrs: { shape: [m, f] }, backend: s }), x = Zd(n.dtype), w = Zo(b, x, "sum", s), y = dt({ inputs: { x: w }, attrs: { shape: p }, backend: s });
  return s.disposeIntermediateTensorInfo(b), s.disposeIntermediateTensorInfo(w), c && s.disposeIntermediateTensorInfo(u), y;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xu(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s;
  return VO(o, r, i, e);
}
const PO = {
  kernelName: Lc,
  backendName: "webgl",
  kernelFunc: xu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function je(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { perm: r } = s, i = e, a = o.shape.length, l = new Array(a);
  for (let u = 0; u < l.length; u++)
    l[u] = o.shape[r[u]];
  let c;
  if (i.shouldExecuteOnCPU([o])) {
    const h = i.texData.get(o.dataId).values, d = em(h, o.shape, o.dtype, r, l);
    c = i.makeTensorInfo(l, o.dtype);
    const p = i.texData.get(c.dataId);
    p.values = d;
  } else
    c = bu(o, r, i);
  return c;
}
const XO = {
  kernelName: Jo,
  backendName: "webgl",
  kernelFunc: je
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const A1 = 1e3;
function Gl({ a: n, b: t, transposeA: e, transposeB: s, backend: o, bias: r = null, preluActivationWeights: i = null, leakyreluAlpha: a = 0, activation: l = null }) {
  const c = n.shape.length, u = t.shape.length, h = e ? n.shape[c - 2] : n.shape[c - 1], d = s ? t.shape[u - 1] : t.shape[u - 2], p = e ? n.shape[c - 1] : n.shape[c - 2], f = s ? t.shape[u - 2] : t.shape[u - 1], g = n.shape.slice(0, -2), m = t.shape.slice(0, -2), b = H(g), x = H(m), y = Rt(n.shape.slice(0, -2), t.shape.slice(0, -2)).concat([p, f]);
  S(h === d, () => `Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);
  const I = e ? [b, h, p] : [b, p, h], v = s ? [x, f, d] : [x, d, f], T = dt({ inputs: { x: n }, backend: o, attrs: { shape: I } }), k = dt({ inputs: { x: t }, backend: o, attrs: { shape: v } }), $ = [T, k], G = Math.max(b, x), z = e ? T.shape[1] : T.shape[2], A = r != null, Z = i != null, _ = l === "leakyrelu", K = l != null ? ii(l, !0) : null, U = A || Z || _ || K != null;
  let q;
  if ((p === 1 || f === 1) && z > A1 && U === !1) {
    let tt = T, nt = k;
    e && (tt = je({ inputs: { x: T }, backend: o, attrs: { perm: [0, 2, 1] } }), $.push(tt)), s && (nt = je({ inputs: { x: k }, backend: o, attrs: { perm: [0, 2, 1] } }), $.push(nt));
    const st = f !== 1, at = f === 1;
    let rt = tt;
    st && (rt = dt({
      inputs: { x: tt },
      backend: o,
      attrs: { shape: [G, z, 1] }
    }), $.push(rt));
    const ct = f === 1 ? 2 : 1;
    let lt = nt;
    at && (lt = dt({
      inputs: { x: nt },
      backend: o,
      attrs: { shape: [G, 1, z] }
    }), $.push(lt));
    const pt = sm({ inputs: { a: rt, b: lt }, backend: o });
    q = xu({ inputs: { x: pt }, backend: o, attrs: { axis: ct, keepDims: !0 } }), $.push(pt);
  } else {
    const tt = nn(n.dtype, t.dtype), nt = new O1(I, v, [G, p, f], e, s, A, K, Z, _), st = [T, k];
    if (r != null && st.push(r), Z && st.push(i), _) {
      const at = o.makeTensorInfo([], "float32", ws(a, "float32"));
      st.push(at), $.push(at);
    }
    q = o.runWebGLProgram(nt, st, tt);
  }
  const j = dt({ inputs: { x: q }, backend: o, attrs: { shape: y } });
  $.push(q);
  for (const tt of $)
    o.disposeIntermediateTensorInfo(tt);
  return j;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function OO(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r, bias: i, preluActivationWeights: a } = t, { transposeA: l, transposeB: c, activation: u, leakyreluAlpha: h } = s;
  return Gl({
    a: o,
    b: r,
    transposeA: l,
    transposeB: c,
    backend: e,
    bias: i,
    preluActivationWeights: a,
    leakyreluAlpha: h,
    activation: u
  });
}
const AO = {
  kernelName: sl,
  backendName: "webgl",
  kernelFunc: OO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Cg = "return abs(x);";
function ZO(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s]) && s.dtype !== "complex64") {
    const r = e.texData.get(s.dataId), i = W1(r.values);
    return e.makeTensorInfo(s.shape, s.dtype, i);
  }
  let o;
  return B().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new bo(s.shape, Cg) : o = new vs(s.shape, Cg), e.runWebGLProgram(o, [s], s.dtype);
}
const KO = {
  kernelName: Vl,
  backendName: "webgl",
  kernelFunc: ZO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BO = jn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`, HO = Xt({ opSnippet: BO }), _O = {
  kernelName: ci,
  backendName: "webgl",
  kernelFunc: HO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UO = jn + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`, YO = Xt({ opSnippet: UO }), jO = {
  kernelName: ui,
  backendName: "webgl",
  kernelFunc: YO
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vg = "return a + b;", QO = Ae({
  opSnippet: vg,
  packedOpSnippet: vg,
  supportsComplex: !0,
  cpuKernelImpl: uX
}), JO = {
  kernelName: yr,
  backendName: "webgl",
  kernelFunc: QO
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qO {
  constructor(t, e) {
    this.outputShape = [], this.outputShape = t, this.variableNames = e.map((r, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((r) => {
      s.push(`float v${r} = get${r}AtOutCoords();`);
    });
    const o = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        float result = ${o};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tA {
  constructor(t, e) {
    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map((r, i) => `T${i}`);
    const s = [];
    this.variableNames.forEach((r) => {
      s.push(`vec4 v${r} = get${r}AtOutCoords();`);
    });
    const o = this.variableNames.map((r) => `v${r}`).join(" + ");
    this.userCode = `
      void main() {
        ${s.join(`
        `)}

        vec4 result = ${o};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ja(n) {
  const { inputs: t, backend: e } = n, s = t;
  if (s.length === 1)
    return gn({ inputs: { x: s[0] }, backend: e });
  if (s.length > B().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    const l = Math.floor(s.length / 2), c = Ja({ inputs: s.slice(0, l), backend: e }), u = Ja({ inputs: s.slice(l), backend: e });
    return Ja({ inputs: [c, u], backend: e });
  }
  const o = s.map((l) => l.dtype).reduce((l, c) => nn(l, c)), r = s.map((l) => l.shape), a = B().getBool("WEBGL_PACK") ? new tA(s[0].shape, r) : new qO(s[0].shape, r);
  return e.runWebGLProgram(a, s, o);
}
const eA = {
  kernelName: jh,
  backendName: "webgl",
  kernelFunc: Ja
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Dt(r, o.shape);
  let c = l;
  const u = me(c, a);
  let h = o;
  u != null && (h = je({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = Ie(c.length, a)), Oe("all", c, a);
  const [d, p] = Ge(h.shape, c), f = H(p), g = dt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), m = Zo(g, g.dtype, "all", e);
  let b;
  if (i) {
    const x = we(d, l);
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: x } });
  } else
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(m), u != null && e.disposeIntermediateTensorInfo(h), b;
}
const sA = {
  kernelName: Qh,
  backendName: "webgl",
  kernelFunc: nA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Dt(r, o.shape);
  let c = l;
  const u = me(c, a);
  let h = o;
  u != null && (h = je({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = Ie(c.length, a)), Oe("any", c, a);
  const [d, p] = Ge(h.shape, c), f = H(p), g = dt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), m = Zo(g, g.dtype, "any", e);
  let b;
  if (i) {
    const x = we(d, l);
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: x } });
  } else
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(m), u != null && e.disposeIntermediateTensorInfo(h), b;
}
const rA = {
  kernelName: Jh,
  backendName: "webgl",
  kernelFunc: oA
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class iA {
  constructor(t, e, s) {
    this.variableNames = ["A"];
    const { windowSize: o, batchSize: r, outSize: i } = t;
    s || this.variableNames.push("bestIndicesA"), this.outputShape = [r, i];
    const a = e === "max" ? ">" : "<", l = s ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${o}; i++) {
          int inIdx = ${l};
          float candidate = getA(batch, inIdx);
          if (candidate ${a} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class aA {
  constructor(t, e, s, o) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, S(t.length > 2, () => `Packed arg${s.charAt(0).toUpperCase() + s.slice(1)} supports only inputs with rank above 2.`);
    const r = t[t.length - 1], i = Math.ceil(r / e);
    this.outputShape = t.slice(0, -1), i > 1 && this.outputShape.push(i), o || this.variableNames.push("bestIndicesA");
    const a = this.outputShape, l = a.length, c = se(l), u = Ue("coords", l);
    let h, d;
    if (i === 1) {
      d = l + 1;
      const k = se(d);
      h = `
        ${k} sourceLocR = ${k}(${u.join()}, 0);
        ++${u[l - 1]};
        ${k} sourceLocG = ${k}(${u.join()}, 0);
        ++${u[l - 2]};
        ${k} sourceLocA = ${k}(${u.join()}, 0);
        --${u[l - 1]};
        ${k} sourceLocB = ${k}(${u.join()}, 0);
        --${u[l - 2]};`;
    } else
      d = l, h = `
        ${c} sourceLocR = coords;
        ++${u[l - 1]};
        ${c} sourceLocG = coords;
        ++${u[l - 2]};
        ${c} sourceLocA = coords;
        --${u[l - 1]};
        ${c} sourceLocB = coords;
        --${u[l - 2]};`;
    const p = ["x", "y", "z", "w", "u", "v"].slice(0, d), f = "." + p[d - 1], g = p.map((k) => "int " + k), m = Ue("sourceLocR", d - 1).concat("inIdx.r"), b = Ue("sourceLocG", d - 1).concat("inIdx.g"), x = Ue("sourceLocB", d - 1).concat("inIdx.b"), w = Ue("sourceLocA", d - 1).concat("inIdx.a"), y = s === "max" ? "greaterThan" : "lessThan", I = o ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${w.join()})));`, v = `vec4(
            getAChannel(${m.join()}),
            hasNextCol ? getAChannel(${b.join()}) : 0.,
            hasNextRow ? getAChannel(${x.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`, T = o ? "" : `
      float getBestIndicesAChannel(${g.join()}) {
        return getChannel(getBestIndicesA(${p.join()}),
                                          vec2(${p.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${g.join()}) {
        return getChannel(getA(${p.join()}),
                               vec2(${p.slice(-2).join()}));
      }
      ${T}
      void main() {
        ${c} coords = getOutputCoords();
        bool hasNextCol = ${u[l - 1]} < ${a[l - 1] - 1};
        bool hasNextRow = ${u[l - 2]} < ${a[l - 2] - 1};
        ${h}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${v};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${I}
          vec4 candidate = ${v};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Z1(n, t, e, s = null) {
  let o = t.shape[0], r = t.shape[1];
  s != null && (o = s.shape[0], r = s.shape[1]);
  const i = Jc(r), a = { windowSize: i, inSize: r, batchSize: o, outSize: Math.ceil(r / i) }, l = new iA(a, e, s == null), c = [t];
  s != null && c.push(s);
  const u = n.runWebGLProgram(l, c, "int32");
  if (u.shape[1] === 1)
    return u;
  const h = Z1(n, t, e, u);
  return n.disposeIntermediateTensorInfo(u), h;
}
function K1(n, t, e, s = null) {
  const o = s != null ? s.shape : t.shape, r = o[o.length - 1], i = Jc(r), a = new aA(o, i, e, s == null), l = s == null ? [t] : [t, s], c = n.runWebGLProgram(a, l, "int32");
  if (c.shape.length === t.shape.length) {
    const u = K1(n, t, e, c);
    return n.disposeIntermediateTensorInfo(c), u;
  }
  return c;
}
function B1(n, t, e, s) {
  const o = [e];
  if (Oe("arg" + s.charAt(0).toUpperCase() + s.slice(1), o, t.shape.length), !B().getBool("WEBGL_PACK_REDUCE") || t.shape.length <= 2) {
    const r = [], i = n.texData.get(t.dataId), a = i !== null && i.isPacked;
    let l = t;
    a && (l = n.unpackTensor(t), r.push(l));
    const [c, u] = Ge(l.shape, o), h = H(u), d = dt({ inputs: { x: l }, backend: n, attrs: { shape: [-1, h] } });
    r.push(d);
    const p = Z1(n, d, s);
    r.push(p);
    const f = dt({ inputs: { x: p }, backend: n, attrs: { shape: c } });
    return r.forEach((g) => n.disposeIntermediateTensorInfo(g)), f;
  }
  return K1(n, t, s);
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  let i = Dt(r, o.shape);
  const a = me(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = je({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = Ie(i.length, l.shape.length)), Oe("argMax", [i[0]], l.shape.length);
  const u = B1(e, l, i[0], "max");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const cA = {
  kernelName: Pl,
  backendName: "webgl",
  kernelFunc: lA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function uA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r } = s;
  let i = Dt(r, o.shape);
  const a = me(i, o.shape.length);
  let l = o;
  const c = [];
  a != null && (l = je({ inputs: { x: o }, backend: e, attrs: { perm: a } }), c.push(l), i = Ie(i.length, l.shape.length)), Oe("argMin", [i[0]], l.shape.length);
  const u = B1(e, l, i[0], "min");
  return c.forEach((h) => e.disposeIntermediateTensorInfo(h)), u;
}
const hA = {
  kernelName: Xl,
  backendName: "webgl",
  kernelFunc: uA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dA = jn + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`, pA = Xt({ opSnippet: dA }), fA = {
  kernelName: hi,
  backendName: "webgl",
  kernelFunc: pA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const mA = jn + "return log(x + sqrt(x * x + 1.0));", gA = Xt({ opSnippet: mA }), bA = {
  kernelName: di,
  backendName: "webgl",
  kernelFunc: gA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const xA = jn + `
  return atan(x);
`, yA = Xt({ opSnippet: xA }), wA = {
  kernelName: pi,
  backendName: "webgl",
  kernelFunc: yA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const IA = nm + `
  return atan(a, b);
`, CA = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + $a + `
  return result;
`, vA = Ae({ opSnippet: IA, packedOpSnippet: CA }), SA = {
  kernelName: mi,
  backendName: "webgl",
  kernelFunc: vA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kA = jn + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`, TA = Xt({ opSnippet: kA }), NA = {
  kernelName: fi,
  backendName: "webgl",
  kernelFunc: TA
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class ai {
  constructor(t, e, s, o = !1, r = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideHeight, l = t.strideWidth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterHeight, d = t.effectiveFilterWidth, p = t.padInfo.top, f = t.padInfo.left;
    this.outputShape = t.outShape;
    const g = e === "avg", m = `((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`, b = `(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;
    let x = "0.0";
    if (g || (x = "-1.0 / 1e-20"), s) {
      const k = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${a}, ${l});
        const ivec2 pads = ivec2(${p}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${c}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${k} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${o ? r ? m : b : `wR * ${d} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const w = "max";
    let y = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (y = "avgValue / count");
    const I = Math.floor(i / 4) * 4, v = i % 4, T = `
      if (${g}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${w}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${a}, ${l});
      const ivec2 pads = ivec2(${p}, ${f});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${c}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${I}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${T}
          }

          int xC = xCCorner + ${I};
          if (${v === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${T}
          } else if (${v === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${T}
          }
        }
        setOutput(${y});
      }
    `;
  }
}
class om {
  constructor(t, e, s, o = !1, r = !1) {
    if (this.variableNames = ["x"], e === "avg" && s)
      throw new Error("Cannot compute positions for average pool.");
    const i = t.filterWidth, a = t.strideDepth, l = t.strideHeight, c = t.strideWidth, u = t.dilationDepth, h = t.dilationHeight, d = t.dilationWidth, p = t.effectiveFilterDepth, f = t.effectiveFilterHeight, g = t.effectiveFilterWidth, m = t.padInfo.front, b = t.padInfo.top, x = t.padInfo.left;
    this.outputShape = t.outShape;
    const w = e === "avg";
    let y = "0.0";
    if (w || (y = "-1.0 / 1e-20"), s) {
      const G = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${a}, ${l}, ${c});
        const ivec3 pads = ivec3(${m}, ${b}, ${x});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${p};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${g};
                  wC += ${d}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${G} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${o ? r ? `(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch` : `wD * ${f} * ${g} +
                      wR * ${g} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    const I = "max";
    let v = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (v = "avgValue / count");
    const T = Math.floor(i / 4) * 4, k = i % 4, $ = `
      if (${w}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${I}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${a}, ${l}, ${c});
      const ivec3 pads = ivec3(${m}, ${b}, ${x});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${p};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${T}; wC += 4) {
              int xC = xCCorner + wC * ${d};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                getValue(batch, xD, xR, xC + 3 * ${d}, ch)
              );

              ${$}
            }

            int xC = xCCorner + ${T};
            if (${k === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${$}
            } else if (${k === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                initializationValue,
                initializationValue
              );

              ${$}
            } else if (${k === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${d}, ch),
                getValue(batch, xD, xR, xC + 2 * ${d}, ch),
                initializationValue
              );

              ${$}
            }
          }
          setOutput(${v});
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $A(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  Ta(o, "avgPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  S(Ke(i, c), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Un(o.shape, r, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && At(u.inShape, u.outShape))
    return gn({ inputs: { x: o }, backend: e });
  const h = new ai(u, "avg", !1);
  return e.runWebGLProgram(h, [o], "float32");
}
const RA = {
  kernelName: Ol,
  backendName: "webgl",
  kernelFunc: $A
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dimRoundingMode: l, dataFormat: c } = s, u = [1, 1, 1], h = Es(o.shape, r, i, u, a, l, c), d = new om(h, "avg", !1);
  return e.runWebGLProgram(d, [o], "float32");
}
const LA = {
  kernelName: Al,
  backendName: "webgl",
  kernelFunc: GA
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class EA {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterHeight, c = t.effectiveFilterWidth, u = l - 1 - t.padInfo.top, h = c - 1 - t.padInfo.left, d = 1 / (e * s);
    this.userCode = `
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${d});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${l};
            wR += ${i}) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${c};
            wC+= ${a}) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class WA {
  constructor(t) {
    this.variableNames = ["dy"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, o = t.filterWidth, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.effectiveFilterDepth, d = t.effectiveFilterHeight, p = t.effectiveFilterWidth, f = h - 1 - t.padInfo.front, g = d - 1 - t.padInfo.top, m = p - 1 - t.padInfo.left, b = 1 / (e * s * o);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${g}, ${m});
      const float avgMultiplier = float(${b});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${l}) {
          float dyD = float(dyDCorner + wD) / ${r}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${d};
              wR += ${c}) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function MA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = Es(i.shape, a, l, h, c, u), p = new WA(d);
  return e.runWebGLProgram(p, [o], i.dtype);
}
const DA = {
  kernelName: td,
  backendName: "webgl",
  kernelFunc: MA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r;
  Ta([o, r], "avgPoolGrad");
  const { filterSize: a, strides: l, pad: c } = s, u = Un(i.shape, a, l, 1, c), h = new EA(u);
  return e.runWebGLProgram(h, [o], i.dtype);
}
const zA = {
  kernelName: qh,
  backendName: "webgl",
  kernelFunc: FA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { a: o, b: r } = t, { transposeA: i, transposeB: a } = s;
  return Gl({ a: o, b: r, transposeA: i, transposeB: a, backend: e });
}
const PA = {
  kernelName: Zl,
  backendName: "webgl",
  kernelFunc: VA
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class XA {
  constructor(t, e, s, o, r, i) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], Rt(t, e), Rt(t, s);
    let a = "0.0";
    o != null && (Rt(t, o), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "1.0";
    r != null && (Rt(t, r), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${a};
        float scale = ${l};
        float inv = scale * inversesqrt(variance + float(${i}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class OA {
  constructor(t, e, s, o, r, i) {
    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = ["x", "mean", "variance"], Rt(t, e), Rt(t, s);
    let a = "vec4(0.0)";
    o != null && (Rt(t, o), this.variableNames.push("offset"), a = "getOffsetAtOutCoords()");
    let l = "vec4(1.0)";
    r != null && (Rt(t, r), this.variableNames.push("scale"), l = "getScaleAtOutCoords()"), this.outputShape = t, this.userCode = `
      void main() {
        vec4 offset = ${a};
        vec4 scale = ${l};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${i}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AA = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s, mean: o, variance: r, offset: i, scale: a } = n;
  S(o.shape.length === r.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), S(i == null || o.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), S(a == null || o.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: l } = e;
  l == null && (l = 1e-3);
  const c = [s, o, r];
  let u = null;
  i != null && (u = i.shape, c.push(i));
  let h = null;
  a != null && (h = a.shape, c.push(a));
  const d = B().getBool("WEBGL_PACK_NORMALIZATION") ? new OA(s.shape, o.shape, r.shape, u, h, l) : new XA(s.shape, o.shape, r.shape, u, h, l);
  return t.runWebGLProgram(d, c, c[0].dtype);
}, ZA = {
  kernelName: ec,
  backendName: "webgl",
  kernelFunc: AA
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class KA {
  constructor(t) {
    this.variableNames = ["source"], this.outputShape = t, this.rank = t.length;
    const e = se(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const s = BA(this.rank);
    let o;
    const r = t.map((i, a) => `sourceLoc.${Ph[a]} = start[${a}] + coords.${Ph[a]};`);
    o = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${r.join(`
`)}
      `, this.userCode = `
      void main() {
        ${o}
        setOutput(getSource(${s}));
      }
    `;
  }
}
const Ph = ["x", "y", "z", "w", "u", "v"];
function BA(n) {
  if (n === 1)
    return "sourceLoc";
  if (n <= 6)
    return Ph.slice(0, n).map((t) => "sourceLoc." + t).join(",");
  throw Error(`Slicing for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HA {
  constructor(t) {
    this.variableNames = ["source"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    const e = se(this.rank), s = Ue("coords", this.rank), o = Ue("sourceLoc", this.rank), r = this.rank === 1 ? "sourceLoc" : `vec2(${o.slice(-2).join()})`, i = `getChannel(getSource(${o.join()}), ${r})`, a = `
      result.x = ${i};
      if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
        ++${o[this.rank - 1]};
        result.y = ${i};
        --${o[this.rank - 1]};
      }
    `, l = this.rank === 1 ? "" : `
      --${s[this.rank - 1]};
      if (++${s[this.rank - 2]} < ${t[this.rank - 2]}) {
        ++${o[this.rank - 2]};
        result.z = ${i};
        if (++${s[this.rank - 1]} < ${t[this.rank - 1]}) {
          ++${o[this.rank - 1]};
          result.w = ${i};
        }
      }
    `, c = this.rank <= 4 ? `sourceLoc = coords +
            ${e}(${t.map((u, h) => `start[${h}]`).join()});` : t.map((u, h) => `${o[h]} = ${s[h]} + start[${h}];`).join(`
`);
    this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${c}
        vec4 result = vec4(0.);
        ${a}
        ${l}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _A(n, t, e, s) {
  const o = s.texData.get(n.dataId), r = s.makeTensorInfo(e, n.dtype), i = s.texData.get(r.dataId);
  Object.assign(i, o), i.refCount = 1, i.shape = e, i.dtype = n.dtype;
  let a = Oc(t, gt(n.shape));
  o.slice && (a += o.slice.flatOffset), i.slice = {
    flatOffset: a,
    // Point to the original dataId, which is used to do ref counting.
    origDataId: o.slice && o.slice.origDataId || n.dataId
  };
  const l = s.dataRefCount.get(i.slice.origDataId) || 1;
  return s.dataRefCount.set(i.slice.origDataId, l + 1), r;
}
function Dr(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, size: i } = s, [a, l] = Ac(o, r, i);
  if (Jd(o, a, l), H(l) === 0)
    return e.makeTensorInfo(l, o.dtype, []);
  if (e.shouldExecuteOnCPU([o]) || o.dtype === "string") {
    const h = e.texData.get(o.dataId), d = XX(h.values, a, l, o.shape, o.dtype);
    return e.makeTensorInfo(l, o.dtype, d);
  }
  const { isPacked: c } = e.texData.get(o.dataId), u = Xc(o.shape, a, l);
  if (c || !u) {
    const h = B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new HA(l) : new KA(l), d = [a];
    return e.runWebGLProgram(h, [o], o.dtype, d);
  }
  return e.uploadToGPU(o.dataId), _A(o, a, l, e);
}
const UA = {
  kernelName: Gc,
  backendName: "webgl",
  kernelFunc: Dr
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const YA = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, crops: i } = s;
  S(o.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  const a = r.reduce((x, w) => x * w), l = da(o.shape, r, a), c = pa(l.length, r.length), u = fa(o.shape, r, a), h = Hp(i, r.length), d = _p(u, i, r.length), p = [], f = dt({ inputs: { x: o }, backend: e, attrs: { shape: l } }), g = je({ inputs: { x: f }, backend: e, attrs: { perm: c } }), m = dt({
    inputs: { x: g },
    backend: e,
    attrs: { shape: u }
  }), b = Dr({
    inputs: { x: m },
    backend: e,
    attrs: { begin: h, size: d }
  });
  return p.push(f), p.push(g), p.push(m), p.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
}, jA = {
  kernelName: Kl,
  backendName: "webgl",
  kernelFunc: YA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function QA(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i } = s, a = e.readSync(o.dataId), l = e.readSync(r.dataId), c = E1(a, l, r.dtype, r.shape, i);
  return e.makeTensorInfo([i], r.dtype, c);
}
const JA = {
  kernelName: ed,
  backendName: "webgl",
  kernelFunc: QA
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function qA(n) {
  const { inputs: t, backend: e } = n, { s0: s, s1: o } = t, r = e.readSync(s.dataId), i = e.readSync(o.dataId), a = Rt(Array.from(r), Array.from(i));
  return e.makeTensorInfo([a.length], "int32", Int32Array.from(a));
}
const tZ = {
  kernelName: Jg,
  backendName: "webgl",
  kernelFunc: qA
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eZ = "return float(a != b);", H1 = Ae({ opSnippet: eZ, cpuKernelImpl: EX, dtype: "bool" }), nZ = {
  kernelName: xc,
  backendName: "webgl",
  kernelFunc: H1
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ga(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.texData.get(s.dataId);
  return gn({ inputs: { x: o.complexTensorInfos.real }, backend: e });
}
const sZ = {
  kernelName: Sd,
  backendName: "webgl",
  kernelFunc: Ga
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const oZ = "return float(int(x));";
function rZ(n, t) {
  const e = new vs(n.shape, oZ), s = t.runWebGLProgram(e, [n], "int32");
  return { dataId: s.dataId, shape: s.shape, dtype: s.dtype };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Xh(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dtype: r } = s;
  if (r === "complex64") {
    if (o.dtype === "complex64")
      return gn({ inputs: { x: o }, backend: e });
    const i = Me(o.shape), a = Xh({ inputs: { x: o }, backend: e, attrs: { dtype: "float32" } }), l = ro({ inputs: { real: a, imag: i }, backend: e });
    return i.dispose(), e.disposeIntermediateTensorInfo(a), l;
  }
  if (o.dtype === "complex64") {
    const i = Ga({ inputs: { input: o }, backend: e }), a = Xh({ inputs: { x: i }, backend: e, attrs: { dtype: r } });
    return e.disposeIntermediateTensorInfo(i), a;
  }
  if (!Hh(o.dtype, r)) {
    const i = gn({ inputs: { x: o }, backend: e });
    return { dataId: i.dataId, shape: i.shape, dtype: r };
  }
  if (e.shouldExecuteOnCPU([o])) {
    const i = e.texData.get(o.dataId).values, [a, l, c] = dX(i, o.shape, o.dtype, r);
    return e.makeTensorInfo(a, l, c);
  }
  if (r === "int32")
    return rZ(o, e);
  if (r === "bool") {
    const i = e.makeTensorInfo([], "bool", he("bool", 1)), l = H1({ inputs: { a: o, b: i }, backend: e });
    return e.disposeIntermediateTensorInfo(i), l;
  }
  throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${r}`);
}
const iZ = {
  kernelName: gi,
  backendName: "webgl",
  kernelFunc: Xh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Sg = "return ceil(x);", aZ = Xt({ opSnippet: Sg, packedOpSnippet: Sg, cpuKernelImpl: pX }), lZ = {
  kernelName: bi,
  backendName: "webgl",
  kernelFunc: aZ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cZ {
  constructor(t) {
    this.variableNames = ["A"], this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class uZ {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "minVal", type: "float" },
      { name: "maxVal", type: "float" }
    ], this.outputShape = t, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { clipValueMin: r, clipValueMax: i } = s;
  let a;
  B().getBool("WEBGL_PACK_CLIP") ? a = new uZ(o.shape) : a = new cZ(o.shape);
  const l = [[r], [i]];
  return e.runWebGLProgram(a, [o], o.dtype, l);
}
const dZ = {
  kernelName: xi,
  backendName: "webgl",
  kernelFunc: hZ
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class pZ {
  constructor(t) {
    this.variableNames = ["real", "imag"], this.outputShape = t, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function kg(n, t) {
  return {
    dataId: t.dataId,
    dtype: t.dtype,
    shape: n.shape
  };
}
function fZ(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = e.texData.get(s.dataId), r = new pZ(s.shape), i = [
    kg(s, o.complexTensorInfos.real),
    kg(s, o.complexTensorInfos.imag)
  ];
  return e.runWebGLProgram(r, i, i[0].dtype);
}
const mZ = {
  kernelName: Bl,
  backendName: "webgl",
  kernelFunc: fZ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class gZ {
  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().
  constructor(t) {
    this.outputShape = [], this.outputShape = ms(
      t,
      1
      /* axis */
    ), this.variableNames = t.map((i, a) => `T${a}`);
    const e = new Array(t.length - 1);
    e[0] = t[0][1];
    for (let i = 1; i < e.length; i++)
      e[i] = e[i - 1] + t[i][1];
    const s = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
    for (let i = 1; i < e.length; i++) {
      const a = e[i - 1];
      s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${a}));`);
    }
    const o = e.length, r = e[e.length - 1];
    s.push(`else setOutput(getT${o}(yR, yC-${r}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${s.join(`
        `)}
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class bZ {
  constructor(t, e) {
    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = ms(t, e);
    const s = this.outputShape, o = s.length, r = se(o), i = Ue("coords", o), a = ["x", "y", "z", "w", "u", "v"].slice(0, o);
    this.variableNames = t.map((g, m) => `T${m}`);
    const l = new Array(t.length - 1);
    l[0] = t[0][e];
    for (let g = 1; g < l.length; g++)
      l[g] = l[g - 1] + t[g][e];
    const c = a[e], u = a.slice(-2), h = a.join();
    let d = `if (${c} < ${l[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;
    for (let g = 1; g < l.length; g++) {
      const m = l[g - 1];
      d += `
        if (${c} < ${l[g]}  && ${c} >= ${l[g - 1]}) {
          return getChannel(
            getT${g}(${Ba(a, c, m)}),
            vec2(${Ba(u, c, m)}));
        }`;
    }
    const p = l.length, f = l[l.length - 1];
    d += `
        return getChannel(
          getT${p}(${Ba(a, c, f)}),
          vec2(${Ba(u, c, f)}));`, this.userCode = `
      float getValue(${a.map((g) => "int " + g)}) {
        ${d}
      }

      void main() {
        ${r} coords = getOutputCoords();
        vec4 result = vec4(getValue(${i}), 0., 0., 0.);

        ${i[o - 1]} = ${i[o - 1]} + 1;
        if (${i[o - 1]} < ${s[o - 1]}) {
          result.g = getValue(${i});
        }

        ${i[o - 2]} = ${i[o - 2]} + 1;
        if (${i[o - 2]} < ${s[o - 2]}) {
          result.a = getValue(${i});
        }

        ${i[o - 1]} = ${i[o - 1]} - 1;
        if (${i[o - 2]} < ${s[o - 2]} &&
            ${i[o - 1]} < ${s[o - 1]}) {
          result.b = getValue(${i});
        }
        setOutput(result);
      }
    `;
  }
}
function Ba(n, t, e) {
  const s = n.indexOf(t);
  return n.map((r, i) => i === s ? `${r} - ${e}` : r).join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function yu(n) {
  const { inputs: t, backend: e } = n, { input: s } = t, o = e.texData.get(s.dataId);
  return gn({ inputs: { x: o.complexTensorInfos.imag }, backend: e });
}
const xZ = {
  kernelName: gd,
  backendName: "webgl",
  kernelFunc: yu
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ur(n, t, e) {
  const s = n[0].dtype;
  if (s === "complex64") {
    const h = n.map((m) => Ga({ inputs: { input: m }, backend: e })), d = n.map((m) => yu({ inputs: { input: m }, backend: e })), p = Ur(h, t, e), f = Ur(d, t, e), g = ro({ inputs: { real: p, imag: f }, backend: e });
    return h.forEach((m) => e.disposeIntermediateTensorInfo(m)), d.forEach((m) => e.disposeIntermediateTensorInfo(m)), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), g;
  }
  let o = e.shouldExecuteOnCPU(n);
  if (s === "string" && (o = !0), o) {
    const h = n.map((x) => {
      const y = [-1, H(x.shape.slice(t))];
      return dt({ inputs: { x }, backend: e, attrs: { shape: y } });
    }), d = h.map((x) => ({ vals: e.readSync(x.dataId), shape: x.shape })), p = ms(
      h.map((x) => x.shape),
      1
      /* axis */
    ), f = h[0].shape[0] === 1, g = fX(d, p, s, f), m = ms(n.map((x) => x.shape), t), b = e.makeTensorInfo(m, s, g);
    return h.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
  }
  const r = B().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (n.length > r) {
    const h = [];
    for (let p = 0; p < n.length; p += r) {
      const f = n.slice(p, p + r);
      h.push(Ur(f, t, e));
    }
    const d = Ur(h, t, e);
    for (const p of h)
      e.disposeIntermediateTensorInfo(p);
    return d;
  }
  if (B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && n[0].shape.length > 1) {
    const h = new bZ(n.map((d) => d.shape), t);
    return e.runWebGLProgram(h, n, s);
  }
  const { tensors2D: i, outShape: a } = yZ(n, t, e), l = new gZ(i.map((h) => h.shape)), c = e.runWebGLProgram(l, i, s);
  i.forEach((h) => e.disposeIntermediateTensorInfo(h));
  const u = dt({ inputs: { x: c }, attrs: { shape: a }, backend: e });
  return e.disposeIntermediateTensorInfo(c), u;
}
function yZ(n, t, e) {
  const s = ms(n.map((r) => r.shape), t);
  return { tensors2D: n.map((r) => dt({
    inputs: { x: r },
    attrs: { shape: [-1, H(r.shape.slice(t))] },
    backend: e
  })), outShape: s };
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _1(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s, r = Dt(o, t[0].shape)[0], i = t.map((c) => c.shape);
  Pp(i, r);
  const a = ms(t.map((c) => c.shape), r);
  if (H(a) === 0)
    return e.makeTensorInfo(a, t[0].dtype, []);
  const l = t.filter((c) => H(c.shape) > 0);
  return l.length === 1 ? gn({ inputs: { x: l[0] }, backend: e }) : Ur(l, r, e);
}
const wZ = {
  kernelName: Hl,
  backendName: "webgl",
  kernelFunc: _1
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class U1 {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const i = t.padInfo.top, a = t.padInfo.left, l = t.strideHeight, c = t.strideWidth, u = t.dilationHeight, h = t.dilationWidth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, g = t.inChannels % 4, m = t.dataFormat === "channelsLast", b = m ? 1 : 2, x = m ? 2 : 3, w = m ? 3 : 1;
    let y = "", I = "";
    s && (o ? y = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? y = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : y = `
          float activation(float x) {
            ${s}
          }
        `, I = "result = activation(result);");
    const v = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${y}

      const ivec2 strides = ivec2(${l}, ${c});
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${w}];

        ivec2 xRCCorner =
            ivec2(coords[${b}], coords[${x}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${d}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${p}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${g === 1}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${g === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${g === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${v}
        ${I}
        setOutput(result);
      }
    `;
  }
}
class IZ {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const e = t.padInfo.front, s = t.padInfo.top, o = t.padInfo.left, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = t.dilationDepth, c = t.dilationHeight, u = t.dilationWidth, h = t.filterDepth, d = t.filterHeight, p = t.filterWidth, f = Math.floor(t.inChannels / 4) * 4, g = t.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${r}, ${i}, ${a});
      const ivec3 pads = ivec3(${e}, ${s}, ${o});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${l};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${d}; wR++) {
            int xR = xRCorner + wR * ${c};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${g === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${g === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${g === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Y1 {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = qe(this.outputShape.length);
    const i = t.padInfo.left, a = t.strideWidth, l = t.dilationWidth, c = t.filterHeight, u = t.filterWidth, h = u;
    let d = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let m = 0; m < u; m++)
      d += `
           vec4 xTexelC${m * 2};
           int xTexelC${m * 2}Ready;
           vec4 xTexelC${m * 2 + 1};
           int xTexelC${m * 2 + 1}Ready;
           vec4 xC${m};`;
    d += `
     for (int r = 0; r < ${c}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;
    for (let m = 0; m < u; m++)
      d += `
           xTexelC${m * 2} = vec4(0.0);
           xTexelC${m * 2}Ready = 0;
           xTexelC${m * 2 + 1} = vec4(0.0);
           xTexelC${m * 2 + 1}Ready = 0;
           xC${m} = vec4(0.0);`;
    d += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let m = 0; m < (h + 1) / 2; m++) {
      const b = m * 2;
      if (d += `
           xC = xCCorner + ${b * l};
           `, a === 1) {
        if (b < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }
               `, l === 1 && b > 0 ? d += `
                 xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                 ` : d += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                   } else {
                     xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                   }
                   `) : d += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xC${b} = xTexelC${b};
                 `, b + 1 < u)) {
          const x = i % 2 === 0 ? Ml(l) : l;
          l % 2 === 0 && i % 2 === 1 || l % 2 !== 0 && i % 2 !== 1 ? (d += `
                   xCOffset = xC + imod(pads[1], 2) + ${x};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                     xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${b + 1}.zw = vec2(0.0);
                     }
                     xTexelC${b + 1}Ready = 1;
                   }
                   `, l > 1 ? d += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                     } else {
                      xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                     }
                     ` : d += `
                     xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                     `) : x === 1 ? d += `
                     xC${b + 1} = xTexelC${b};
                     ` : d += `
                     xCOffset = xC + ${x};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                       xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${b + 1}.zw = vec2(0.0);
                       }
                       xTexelC${b + 1}Ready = 1;
                     }

                     xC${b + 1} = xTexelC${b + 1};
                     `;
        }
      } else
        b < u && (i % 2 === 1 ? (d += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.0);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
               `, b + 1 < u && (d += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                 `)) : (d += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                   xTexelC${b} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${b}.zw = vec2(0.0);
                   }
                   xTexelC${b}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                   xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${b + 1}.zw = vec2(0.);
                   }
                   xTexelC${b + 1}Ready = 1;
                 }

                 xC${b} = vec4(
                   xTexelC${b}.xy, xTexelC${b + 1}.xy);
               `, b + 1 < u && (d += `
                   xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                 `)));
      b < u && (d += `
             wTexel = getW(r, ${b}, d1, d2);
             dotProd += xC${b}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${b}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, b + 1 < u && (d += `
               wTexel = getW(r, ${b + 1}, d1, d2);
               dotProd += xC${b + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${b + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    d += `
     }
   `, d += `
     }
   `, d += `
     }
   `;
    let p = "", f = "";
    s && (o ? p = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${s}
         }` : r ? p = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${s}
         }` : p = `vec4 activation(vec4 x) {
           ${s}
         }`, f = "result = activation(result);");
    const g = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${d}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${g}
         ${f}
         setOutput(result);
       }
     `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CZ {
  constructor(t, e) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "inputShape", type: "ivec4" },
      { name: "pad", type: "ivec2" },
      { name: "stride", type: "ivec2" },
      { name: "dilation", type: "ivec2" },
      { name: "inChannels", type: "int" },
      { name: "itemsPerBlockRow", type: "int" },
      { name: "outWidth", type: "int" }
    ], this.outputShape = t, this.enableShapeUniforms = qe(this.outputShape.length);
    const { dataFormat: s } = e, o = Je(), r = s === "channelsLast", i = r ? 1 : 2, a = r ? 2 : 3, l = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;
    let c = "";
    for (let u = 0; u <= 1; u++)
      for (let h = 0; h <= 1; h++)
        c += `
          blockIndex = rc.z + ${h};
          pos = rc.y + ${u};

          ${l}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${i}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${a}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${r}) {
                  innerDims = vec2(d1, ch);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${u * 2 + h}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${c}

        ${o.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Ll(n, t) {
  const e = n.length;
  return e >= 3 ? t ? [
    ...n.slice(0, -3),
    n[e - 3] * n[e - 2],
    n[e - 1]
    /* channel */
  ] : [
    ...n.slice(0, -3),
    n[e - 3],
    n[e - 2] * n[e - 1]
    /* height * width */
  ] : !t && e === 1 && n[0] > 1 ? [n[0], 1] : null;
}
function j1({ x: n, filter: t, convInfo: e, backend: s, bias: o = null, preluActivationWeights: r = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const l = n.shape, c = s.texData.get(n.dataId), u = e.inChannels, h = l[0] * l[1] * l[2], d = e.outChannels, p = e.dataFormat === "channelsLast", f = !1, g = !1;
  let m;
  const b = [];
  if (r != null) {
    const y = Ll(r.shape, p);
    y != null && (r = dt({
      inputs: { x: r },
      backend: s,
      attrs: { shape: y }
    }), b.push(r));
  }
  if (o != null) {
    const y = Ll(o.shape, p);
    y != null && (o = dt({ inputs: { x: o }, backend: s, attrs: { shape: y } }), b.push(o));
  }
  if (!((h === 1 || d === 1) && u > A1) && c.isPacked && p && c.texture != null && l[2] % 2 !== 0 && At(c.shape.slice(-3), l.slice(-3))) {
    const y = l[0] * l[1] * (l[2] + 1), I = {
      dataId: n.dataId,
      shape: [1, y, e.inChannels],
      dtype: n.dtype
    }, v = c.shape;
    c.shape = c.shape.slice(), c.shape[c.shape.length - 2]++, S($l(c.shape, I.shape), () => `packed reshape ${c.shape} to ${I.shape} isn't free`);
    const T = dt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    });
    b.push(T);
    const k = Gl({
      a: I,
      b: T,
      backend: s,
      transposeA: f,
      transposeB: g,
      bias: o,
      activation: a,
      preluActivationWeights: r,
      leakyreluAlpha: i
    }), $ = s.texData.get(k.dataId);
    S($.isPacked, () => "batchMatMul result is expected to be packed"), c.shape = v, $.shape = e.outShape, m = gn({ inputs: { x: k }, backend: s }), m.shape = e.outShape, b.push(k);
  } else {
    const y = e.outHeight * e.outWidth, I = dt({
      inputs: { x: n },
      backend: s,
      attrs: {
        shape: p ? [e.batchSize, y, e.inChannels] : [e.batchSize, e.inChannels, y]
      }
    }), v = dt({
      inputs: { x: t },
      backend: s,
      attrs: { shape: [1, e.inChannels, e.outChannels] }
    }), T = Gl({
      a: p ? I : v,
      b: p ? v : I,
      transposeA: !p,
      transposeB: g,
      backend: s,
      bias: o,
      activation: a,
      preluActivationWeights: r,
      leakyreluAlpha: i
    });
    m = dt({ inputs: { x: T }, backend: s, attrs: { shape: e.outShape } }), b.push(I), b.push(v), b.push(T);
  }
  for (const y of b)
    s.disposeIntermediateTensorInfo(y);
  return m;
}
function Q1({ x: n, filter: t, convInfo: e, backend: s, bias: o = null, preluActivationWeights: r = null, leakyreluAlpha: i = 0, activation: a = null }) {
  const { filterWidth: l, filterHeight: c, inChannels: u, outWidth: h, outHeight: d, dataFormat: p } = e, f = p === "channelsLast", g = l * c * u, m = d * h, b = [e.batchSize, g, m], x = !0, w = !1, y = [];
  if (r != null) {
    const j = Ll(r.shape, f);
    j != null && (r = dt({
      inputs: { x: r },
      backend: s,
      attrs: { shape: j }
    }), y.push(r));
  }
  if (o != null) {
    const j = Ll(o.shape, f);
    j != null && (o = dt({ inputs: { x: o }, backend: s, attrs: { shape: j } }), y.push(o));
  }
  const I = dt({
    inputs: { x: t },
    backend: s,
    attrs: { shape: [1, g, H(t.shape) / g] }
  });
  y.push(I);
  const v = new CZ(b, e), T = [
    n.shape,
    [e.padInfo.top, e.padInfo.left],
    [e.strideHeight, e.strideWidth],
    [e.dilationHeight, e.dilationWidth],
    [e.inChannels],
    [e.filterWidth * e.inChannels],
    [e.outWidth]
  ], k = s.runWebGLProgram(v, [n], "float32", T), $ = dt({ inputs: { x: k }, backend: s, attrs: { shape: b } });
  y.push(k), y.push($);
  const G = o != null, z = r != null, A = a === "leakyrelu", Z = a ? ii(a, !0) : null, _ = new O1(f ? $.shape : I.shape, f ? I.shape : $.shape, f ? [e.batchSize, m, e.outChannels] : [e.batchSize, e.outChannels, m], x, w, G, Z, z, A), K = f ? [$, I] : [I, $];
  if (o && K.push(o), z && K.push(r), A) {
    const j = s.makeTensorInfo([], "float32", ws(i, "float32"));
    K.push(j), y.push(j);
  }
  const U = s.runWebGLProgram(_, K, "float32"), q = dt({ inputs: { x: U }, backend: s, attrs: { shape: e.outShape } });
  y.push(U);
  for (const j of y)
    s.disposeIntermediateTensorInfo(j);
  return q;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function vZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dataFormat: l, dilations: c, dimRoundingMode: u } = s, h = Ws(l), d = Xe(o.shape, r.shape, i, c, a, u, !1, h);
  let p;
  if (d.filterHeight === 1 && d.filterWidth === 1 && d.dilationHeight === 1 && d.dilationWidth === 1 && d.strideHeight === 1 && d.strideWidth === 1 && (d.padInfo.type === "SAME" || d.padInfo.type === "VALID"))
    p = j1({ x: o, filter: r, convInfo: d, backend: e });
  else if (d.strideWidth <= 2 && h === "channelsLast" && B().getBool("WEBGL_EXP_CONV")) {
    const g = new Y1(d), m = [
      [d.padInfo.top, d.padInfo.left],
      [d.strideHeight, d.strideWidth],
      [d.dilationHeight, d.dilationWidth],
      [d.inHeight, d.inWidth]
    ];
    p = e.runWebGLProgram(g, [o, r], "float32", m);
  } else if (B().getBool("WEBGL_CONV_IM2COL"))
    p = Q1({ x: o, filter: r, convInfo: d, backend: e });
  else {
    const g = new U1(d);
    p = e.runWebGLProgram(g, [o, r], "float32");
  }
  const f = dt({ inputs: { x: p }, backend: e, attrs: { shape: d.outShape } });
  return e.disposeIntermediateTensorInfo(p), f;
}
const SZ = {
  kernelName: _l,
  backendName: "webgl",
  kernelFunc: vZ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class kZ {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.padInfo.top, r = t.padInfo.left, i = t.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              if (${i}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class TZ {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = t.dataFormat === "channelsLast", a = e - 1 - t.padInfo.top, l = s - 1 - t.padInfo.left, c = i ? 1 : 2, u = i ? 2 : 3, h = i ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${h}];

        ivec2 dyCorner = ivec2(coords[${c}], coords[${u}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${i}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class NZ {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideDepth, s = t.strideHeight, o = t.strideWidth, r = t.padInfo.front, i = t.padInfo.top, a = t.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${r};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${s} - ${i};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${o} - ${a};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class $Z {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterDepth, s = t.filterHeight, o = t.filterWidth, r = t.strideDepth, i = t.strideHeight, a = t.strideWidth, l = e - 1 - t.padInfo.front, c = s - 1 - t.padInfo.top, u = o - 1 - t.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${c}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${r}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${s}; wR++) {
            float dyR = float(dyRCorner + wR) / ${i}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${s} - 1 - wR;

            for (int wC = 0; wC < ${o}; wC++) {
              float dyC = float(dyCCorner + wC) / ${a}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${o} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function RZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, dataFormat: l, dimRoundingMode: c, filterShape: u } = s, h = Ws(l), d = Xe(o.shape, u, i, 1, a, c, !1, h), p = new kZ(d);
  return e.runWebGLProgram(p, [o, r], "float32");
}
const GZ = {
  kernelName: sd,
  backendName: "webgl",
  kernelFunc: RZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function LZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { inputShape: i, strides: a, pad: l, dataFormat: c, dimRoundingMode: u } = s, h = Ws(c), d = Xe(i, r.shape, a, 1, l, u, !1, h), p = new TZ(d);
  return e.runWebGLProgram(p, [o, r], "float32");
}
const EZ = {
  kernelName: Ul,
  backendName: "webgl",
  kernelFunc: LZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function WZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s, c = Js(o.shape, r.shape, i, l, a), u = new IZ(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const MZ = {
  kernelName: Yl,
  backendName: "webgl",
  kernelFunc: WZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function DZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, pad: a, filterShape: l } = s, c = Js(o.shape, l, i, 1, a), u = new NZ(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const FZ = {
  kernelName: od,
  backendName: "webgl",
  kernelFunc: DZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function zZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { pad: i, strides: a, inputShape: l } = s, c = Js(l, r.shape, a, 1, i), u = new $Z(c);
  return e.runWebGLProgram(u, [o, r], "float32");
}
const VZ = {
  kernelName: rd,
  backendName: "webgl",
  kernelFunc: zZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const PZ = Mr + `
  return cos(x);
`, XZ = Xt({ opSnippet: PZ }), OZ = {
  kernelName: yi,
  backendName: "webgl",
  kernelFunc: XZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AZ = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`, ZZ = Xt({ opSnippet: AZ }), KZ = {
  kernelName: wi,
  backendName: "webgl",
  kernelFunc: ZZ
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class BZ {
  constructor(t, e, s, o, r) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    const [i, a, l, c] = t, [u] = e, [h, d] = s;
    this.outputShape = [u, h, d, c];
    const p = o === "bilinear" ? 1 : 0, [f, g] = [`${a - 1}.0`, `${l - 1}.0`], [m, b, x] = h > 1 ? [
      `${(a - 1) / (h - 1)}`,
      "(y2-y1) * height_ratio",
      `y1*${f} + float(y)*(height_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (y1+y2) * ${f}`
    ], [w, y, I] = d > 1 ? [
      `${(l - 1) / (d - 1)}`,
      "(x2-x1) * width_ratio",
      `x1*${g} + float(x)*(width_scale)`
    ] : [
      "0.0",
      "0.0",
      `0.5 * (x1+x2) * ${g}`
    ];
    this.userCode = `
      const float height_ratio = float(${m});
      const float width_ratio = float(${w});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${i}) {
          return;
        }

        float height_scale = ${b};
        float width_scale = ${y};

        float in_y = ${x};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${r}));
          return;
        }
        float in_x = ${I};
        if( in_x < 0.0 || in_x > ${g} ) {
          setOutput(float(${r}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${p} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const HZ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, boxes: r, boxInd: i } = t, { cropSize: a, method: l, extrapolationValue: c } = s, u = new BZ(o.shape, r.shape, a, l, c);
  return e.runWebGLProgram(u, [o, r, i], "float32");
}, _Z = {
  kernelName: ad,
  backendName: "webgl",
  kernelFunc: HZ
};
var li;
(function(n) {
  n.Prod = "*", n.Sum = "+";
})(li || (li = {}));
class Tg {
  constructor(t, e, s, o) {
    this.op = t, this.outputShape = e, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    const r = this.outputShape.length, i = this.op === li.Prod ? "1.0" : "0.0", a = s ? i : `getX(${Ng(r, "coords", this.op)})`, l = this.outputShape[this.outputShape.length - 1];
    let c = "", u = "";
    s ? (c = o ? `end != ${l - 1}` : "end != 0", u = o ? "end + 1" : "end - 1") : (c = o ? `end + pow2 < ${l}` : "end >= pow2", u = o ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${se(r)} coords = getOutputCoords();
        int end = ${$g(r, "coords", this.op)};
        float val = ${a};
        int pow2 = int(pow(2.0, index));
        if (${c}) {
          int idx = ${u};
          ${$g(r, "coords", this.op)} = idx;
          val ${this.op}= getX(${Ng(r, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
}
function Ng(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.x, ${t}.y`;
  if (n === 3)
    return `${t}.x, ${t}.y, ${t}.z`;
  if (n === 4)
    return `${t}.x, ${t}.y, ${t}.z, ${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
function $g(n, t, e) {
  if (n === 1)
    return `${t}`;
  if (n === 2)
    return `${t}.y`;
  if (n === 3)
    return `${t}.z`;
  if (n === 4)
    return `${t}.w`;
  throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`);
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J1(n, t, e, s, o, r) {
  const i = t.shape.length, a = me([s], i);
  let l = t;
  a != null && (l = je({ inputs: { x: t }, backend: e, attrs: { perm: a } }));
  const c = Ie(1, i)[0];
  if (c !== i - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length - 1} but got axis=${s}`);
  const u = l.shape[c];
  let h = gn({ inputs: { x: l }, backend: e });
  for (let d = 0; d <= Math.ceil(Math.log2(u)) - 1; d++) {
    const p = new Tg(n, l.shape, !1, r), f = [[d]], g = h;
    h = e.runWebGLProgram(p, [h], h.dtype, f), e.disposeIntermediateTensorInfo(g);
  }
  if (o) {
    const d = new Tg(n, l.shape, o, r), p = h;
    h = e.runWebGLProgram(d, [h], h.dtype), e.disposeIntermediateTensorInfo(p);
  }
  if (a != null) {
    const d = qs(a), p = je({ inputs: { x: h }, backend: e, attrs: { perm: d } });
    return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(l), p;
  }
  return h;
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function UZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  return J1(li.Prod, o, e, r, i, a);
}
const YZ = {
  kernelName: id,
  backendName: "webgl",
  kernelFunc: UZ
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function jZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, exclusive: i, reverse: a } = s;
  return J1(li.Sum, o, e, r, i, a);
}
const QZ = {
  kernelName: jl,
  backendName: "webgl",
  kernelFunc: jZ
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JZ(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, weights: r } = t, { size: i, binaryOutput: a } = s;
  if (o.shape.length === 1) {
    const l = e.readSync(o.dataId), c = e.readSync(r.dataId), u = E1(l, c, r.dtype, r.shape, i);
    return e.makeTensorInfo([i], r.dtype, u);
  } else if (o.shape.length === 2) {
    const l = e.bufferSync(o), c = e.bufferSync(r), u = hX(l, c, i, a);
    return e.makeTensorInfo(u.shape, r.dtype, u.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${o.shape.length}.`);
}
const qZ = {
  kernelName: qg,
  backendName: "webgl",
  kernelFunc: JZ
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tK {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = s, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function eK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockSize: r, dataFormat: i } = s, a = o.shape[0], l = i === "NHWC" ? o.shape[1] : o.shape[2], c = i === "NHWC" ? o.shape[2] : o.shape[3], u = i === "NHWC" ? o.shape[3] : o.shape[1], h = l * r, d = c * r, p = u / (r * r), f = i === "NHWC" ? [a, h, d, p] : [a, p, h, d], g = new tK(f, r, i);
  return e.runWebGLProgram(g, [o], o.dtype);
}
const nK = {
  kernelName: ld,
  backendName: "webgl",
  kernelFunc: eK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q1 {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = qe(this.outputShape.length);
    const i = t.filterHeight, a = t.filterWidth, l = t.outChannels / t.inChannels;
    let c = "", u = "";
    s && (o ? c = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? c = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : c = `
          float activation(float x) {
            ${s}
          }
        `, u = "result = activation(result);");
    const h = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${c}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${l};
        int q = d2 - d1 * ${l};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${i}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${a}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${h}
        ${u}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class tw {
  constructor(t, e = !1, s = null, o = !1, r = !1) {
    this.variableNames = ["x", "W"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [
      { name: "pads", type: "ivec2" },
      { name: "strides", type: "ivec2" },
      { name: "dilations", type: "ivec2" },
      { name: "inDims", type: "ivec2" }
    ], this.outputShape = t.outShape, this.enableShapeUniforms = qe(this.outputShape.length);
    const i = t.outChannels / t.inChannels, a = t.padInfo.left, l = t.strideWidth, c = t.dilationWidth, u = t.filterHeight, h = t.filterWidth, d = h;
    let p = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let b = 0; b < h; b++)
      p += `
          vec4 xTexelC${b * 2};
          int xTexelC${b * 2}Ready;
          vec4 xTexelC${b * 2 + 1};
          int xTexelC${b * 2 + 1}Ready;
          vec4 xC${b};`;
    p += `
    for (int r = 0; r < ${u}; r++) {
      `;
    for (let b = 0; b < h; b++)
      p += `
          xTexelC${b * 2} = vec4(0.0);
          xTexelC${b * 2}Ready = 0;
          xTexelC${b * 2 + 1} = vec4(0.0);
          xTexelC${b * 2 + 1}Ready = 0;
          xC${b} = vec4(0.0);`;
    p += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let b = 0; b < (d + 1) / 2; b++) {
      const x = b * 2;
      if (p += `
          xC = xCCorner + ${x * c};
          `, l === 1) {
        if (x < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }
              `, c === 1 && x > 0 ? p += `
                xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                ` : p += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                  } else {
                    xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                  }
                  `) : p += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xC${x} = xTexelC${x};
                `, x + 1 < h)) {
          const w = a % 2 === 0 ? Ml(c) : c;
          c % 2 === 0 && a % 2 === 1 || c % 2 !== 0 && a % 2 !== 1 ? (p += `
                  xCOffset = xC + imod(pads[1], 2) + ${w};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                    xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${x + 1}.zw = vec2(0.0);
                    }
                    xTexelC${x + 1}Ready = 1;
                  }
                  `, c > 1 ? p += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${x + 1} = vec4(previous.zw, xTexelC${x + 1}.xy);
                    } else {
                     xC${x + 1} = vec4(0.0, 0.0, xTexelC${x + 1}.xy);
                    }
                    ` : p += `
                    xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                    `) : w === 1 ? p += `
                    xC${x + 1} = xTexelC${x};
                    ` : p += `
                    xCOffset = xC + ${w};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                      xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${x + 1}.zw = vec2(0.0);
                      }
                      xTexelC${x + 1}Ready = 1;
                    }

                    xC${x + 1} = xTexelC${x + 1};
                    `;
        }
      } else
        x < h && (a % 2 === 1 ? (p += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.0);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
              `, x + 1 < h && (p += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                `)) : (p += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                  xTexelC${x} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${x}.zw = vec2(0.0);
                  }
                  xTexelC${x}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                  xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${x + 1}.zw = vec2(0.);
                  }
                  xTexelC${x + 1}Ready = 1;
                }

                xC${x} = vec4(
                  xTexelC${x}.xy, xTexelC${x + 1}.xy);
              `, x + 1 < h && (p += `
                  xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                `)));
      x < h && (p += `
            wTexel = getW(r, ${x}, d1, q);
            dotProd += xC${x} * vec4(wTexel.xz, wTexel.xz);
          `, x + 1 < h && (p += `
              wTexel = getW(r, ${x + 1}, d1, q);
              dotProd += xC${x + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    p += `
    }
  `, p += `
      }
    `;
    let f = "", g = "";
    s && (o ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${s}
        }` : r ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${s}
        }` : f = `vec4 activation(vec4 x) {
          ${s}
        }`, g = "result = activation(result);");
    const m = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), o && this.variableNames.push("preluActivationWeights"), r && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${i};
        int q = d2 - d1 * ${i};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${m}
        ${g}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l, dimRoundingMode: c } = s;
  let u = l;
  u == null && (u = [1, 1]), S(Ke(i, u), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`);
  const h = Xe(
    o.shape,
    r.shape,
    i,
    u,
    a,
    c,
    !0
    /* depthwise */
  );
  let d;
  B().getBool("WEBGL_PACK_DEPTHWISECONV") && h.strideWidth <= 2 && h.outChannels / h.inChannels === 1 ? d = new tw(h) : d = new q1(h);
  const p = [
    [h.padInfo.top, h.padInfo.left],
    [h.strideHeight, h.strideWidth],
    [h.dilationHeight, h.dilationWidth],
    [h.inHeight, h.inWidth]
  ];
  return e.runWebGLProgram(d, [o, r], "float32", p);
}
const oK = {
  kernelName: Ql,
  backendName: "webgl",
  kernelFunc: sK
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rK {
  constructor(t) {
    this.variableNames = ["x", "dy"], this.outputShape = t.filterShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.padInfo.top, r = t.padInfo.left, i = t.outChannels / t.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${i} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${o};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${s} - ${r};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class iK {
  constructor(t) {
    this.variableNames = ["dy", "W"], this.outputShape = t.inShape;
    const e = t.filterHeight, s = t.filterWidth, o = t.strideHeight, r = t.strideWidth, i = e - 1 - t.padInfo.top, a = s - 1 - t.padInfo.left, l = t.outChannels / t.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${a});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${o}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${r}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${s} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${l}; dm++) {
              int d2 = d1 * ${l} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, dy: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, filterShape: u } = s, h = Xe(
    o.shape,
    u,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), d = new rK(h);
  return e.runWebGLProgram(d, [o, r], "float32");
}
const lK = {
  kernelName: cd,
  backendName: "webgl",
  kernelFunc: aK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function cK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, filter: r } = t, { strides: i, dilations: a, pad: l, dimRoundingMode: c, inputShape: u } = s, h = Xe(
    u,
    r.shape,
    i,
    a,
    l,
    c,
    !0
    /* depthwise */
  ), d = new iK(h);
  return e.runWebGLProgram(d, [o, r], "float32");
}
const uK = {
  kernelName: ud,
  backendName: "webgl",
  kernelFunc: cK
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hK {
  constructor(t) {
    this.variableNames = ["X"], this.outputShape = [t, t], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dK(n) {
  const { inputs: t, backend: e } = n, { x: s } = t, o = [...s.shape, ...s.shape], r = H(s.shape), i = dt({ inputs: { x: s }, backend: e, attrs: { shape: [r] } }), a = new hK(r), l = e.runWebGLProgram(a, [i], i.dtype), c = dt({ inputs: { x: l }, backend: e, attrs: { shape: o } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(l), c;
}
const pK = {
  kernelName: tb,
  backendName: "webgl",
  kernelFunc: dK
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class fK {
  constructor(t) {
    this.variableNames = ["x", "W"], this.outputShape = t.outShape;
    const { inHeight: e, inWidth: s, padInfo: o, strideHeight: r, strideWidth: i, filterHeight: a, filterWidth: l, dilationHeight: c, dilationWidth: u } = t, { top: h, left: d } = o;
    this.userCode = `
      const ivec2 strides = ivec2(${r}, ${i});
      const ivec2 pads = ivec2(${h}, ${d});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${a}; h++) {
          int hIn = hBeg + h * ${c};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${l}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${s}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function mK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r } = t, { strides: i, pad: a, dilations: l } = s, c = aa(o.shape, r.shape, i, a, "NHWC", l);
  let u;
  const h = new fK(c);
  u = e.runWebGLProgram(h, [o, r], "float32");
  const d = dt({ inputs: { x: u }, backend: e, attrs: { shape: c.outShape } });
  return e.disposeIntermediateTensorInfo(u), d;
}
const gK = {
  kernelName: Jl,
  backendName: "webgl",
  kernelFunc: mK
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function bK(n) {
  const { inputs: t, backend: e, attrs: s } = n, { equation: o } = s, r = t, { allDims: i, summedDims: a, idDims: l } = ef(o, r.length);
  sf(i.length, l, r);
  const { path: c, steps: u } = of(a, l), h = u.length;
  let d = null, p = i.length;
  const f = [];
  for (let g = 0; g < h; ++g) {
    for (const m of u[g]) {
      const { permutationIndices: b, expandDims: x } = nf(p, l[m]);
      let w;
      rf(b) ? w = r[m] : (w = je({ inputs: { x: r[m] }, backend: e, attrs: { perm: b } }), f.push(w));
      const y = w.shape.slice();
      for (let I = 0; I < x.length; ++I)
        y.splice(x[I], 0, 1);
      At(w.shape, y) || (w = dt({ inputs: { x: w }, backend: e, attrs: { shape: y } }), f.push(w)), d === null ? d = w : (d = sm({ inputs: { a: w, b: d }, backend: e }), f.push(d));
    }
    g < h - 1 && (c[g] >= 0 && (d = xu({
      inputs: { x: d },
      backend: e,
      attrs: {
        axis: c[g] - (i.length - p),
        keepDims: !1
      }
    }), f.push(d)), p--);
  }
  for (const g of f)
    g !== d && e.disposeIntermediateTensorInfo(g);
  return d;
}
const xK = {
  kernelName: eb,
  backendName: "webgl",
  kernelFunc: bK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const yK = "return (x >= 0.0) ? x : (exp(x) - 1.0);", wK = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`, IK = Xt({ opSnippet: yK, packedOpSnippet: wK }), CK = {
  kernelName: Ci,
  backendName: "webgl",
  kernelFunc: IK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const vK = "return (b >= 1.0) ? a : a * (b + 1.0);", SK = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`, kK = (n) => {
  const { inputs: t, backend: e } = n, { dy: s, y: o } = t, r = B().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new Ra(SK, s.shape, o.shape) : new gr(vK, s.shape, o.shape);
  return e.runWebGLProgram(r, [s, o], s.dtype);
}, TK = {
  kernelName: hd,
  backendName: "webgl",
  kernelFunc: kK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const NK = `
  return vec4(equal(a, b));
`, $K = "return float(a == b);", RK = Ae({
  opSnippet: $K,
  packedOpSnippet: NK,
  dtype: "bool",
  cpuKernelImpl: mX
}), GK = {
  kernelName: ql,
  backendName: "webgl",
  kernelFunc: RK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LK = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${Up};
  float a1 = ${Yp};
  float a2 = ${jp};
  float a3 = ${Qp};
  float a4 = ${Jp};
  float a5 = ${qp};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`, EK = Xt({ opSnippet: LK }), WK = {
  kernelName: vi,
  backendName: "webgl",
  kernelFunc: EK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MK = Mr + `
  return exp(x);
`, DK = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, ew = Xt({
  opSnippet: MK,
  packedOpSnippet: DK,
  cpuKernelImpl: gX,
  dtype: "float32"
}), FK = {
  kernelName: Si,
  backendName: "webgl",
  kernelFunc: ew
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function Oh(n) {
  const { inputs: t, attrs: e, backend: s } = n, { dim: o } = e, { input: r } = t, i = r.shape.length, a = r.shape.slice();
  let l = o;
  return o < 0 && (S(-(i + 1) <= o, () => `Axis must be in the interval [${-(i + 1)}, ${i}]`), l = i + o + 1), a.splice(l, 0, 1), dt({ inputs: { x: r }, backend: s, attrs: { shape: a } });
}
const zK = {
  kernelName: tc,
  backendName: "webgl",
  kernelFunc: Oh
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Rg = "return exp(x) - 1.0;", VK = Xt({ opSnippet: Rg, packedOpSnippet: Rg, cpuKernelImpl: bX }), PK = {
  kernelName: ki,
  backendName: "webgl",
  kernelFunc: VK
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Gg {
  constructor(t, e, s) {
    this.variableNames = ["real", "imag"];
    const o = e[1];
    this.outputShape = e;
    const r = s ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, i = s ? `${o}.0` : "1.0";
    let a;
    if (t === "real")
      a = "return real * expR - imag * expI;";
    else if (t === "imag")
      a = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);
    this.userCode = `
      const float exponentMultiplier = ${r};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${a}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${o});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${o}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nw(n, t, e) {
  const s = e.texData.get(n.dataId), o = H(n.shape), r = n.shape[n.shape.length - 1], i = o / r, a = dt({ inputs: { x: n }, backend: e, attrs: { shape: [i, r] } }), l = a.shape, c = new Gg("real", l, t), u = new Gg("imag", l, t), h = [
    {
      dataId: s.complexTensorInfos.real.dataId,
      dtype: s.complexTensorInfos.real.dtype,
      shape: l
    },
    {
      dataId: s.complexTensorInfos.imag.dataId,
      dtype: s.complexTensorInfos.imag.dtype,
      shape: l
    }
  ], d = e.runWebGLProgram(c, h, "float32"), p = e.runWebGLProgram(u, h, "float32"), f = ro({ inputs: { real: d, imag: p }, backend: e });
  e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p);
  const g = dt({ inputs: { x: f }, backend: e, attrs: { shape: n.shape } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(f), g;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XK(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return nw(s, !1, e);
}
const OK = {
  kernelName: dd,
  backendName: "webgl",
  kernelFunc: XK
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AK {
  constructor(t, e) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = t, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function La(n) {
  const { backend: t, attrs: e } = n, { shape: s, value: o } = e;
  let { dtype: r } = e;
  if (r = r || xr(o), r === "string") {
    const i = Ot(r, H(s));
    return i.fill(o), t.makeTensorInfo(s, r, i);
  } else {
    const i = new AK(s, o), a = [[o]];
    return t.runWebGLProgram(i, [], r, a);
  }
}
const ZK = {
  kernelName: pd,
  backendName: "webgl",
  kernelFunc: La
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class KK {
  constructor(t) {
    this.variableNames = ["Image"], this.outputShape = [];
    const e = t[2];
    this.outputShape = t, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BK = {
  kernelName: fd,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, backend: t }) => {
    const { image: e } = n, s = t, o = new KK(e.shape);
    return s.runWebGLProgram(o, [e], e.dtype);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Lg = "return floor(x);", HK = Xt({ opSnippet: Lg, packedOpSnippet: Lg, cpuKernelImpl: xX }), _K = {
  kernelName: Ti,
  backendName: "webgl",
  kernelFunc: HK
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UK = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`, YK = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`, jK = Ae({ opSnippet: UK, packedOpSnippet: YK, dtype: "int32" }), QK = {
  kernelName: Ni,
  backendName: "webgl",
  kernelFunc: jK
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class JK {
  constructor(t) {
    this.variableNames = ["A"];
    const e = Je(), [s, o] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}.0, ${s}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class qK {
  constructor(t) {
    this.variableNames = ["A"], this.packedInputs = !1, this.packedOutput = !0;
    const e = Je(), [s, o] = t;
    this.outputShape = t, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${o}.0, ${s}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const tB = {
  kernelName: Ju,
  backendName: "webgl",
  kernelFunc: eB
};
let _o, Du = B().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function eB(n) {
  const { inputs: t, backend: e, attrs: s } = n;
  let { pixels: o } = t;
  const { numChannels: r } = s, i = typeof HTMLVideoElement < "u" && o instanceof HTMLVideoElement, a = typeof HTMLImageElement < "u" && o instanceof HTMLImageElement, [l, c] = i ? [
    o.videoWidth,
    o.videoHeight
  ] : [o.width, o.height], u = [c, l], h = [c, l, r];
  if (a || i) {
    const g = B().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (_o == null || g !== Du) && (Du = g, _o = document.createElement("canvas").getContext("2d", { willReadFrequently: Du })), _o.canvas.width = l, _o.canvas.height = c, _o.drawImage(o, 0, 0, l, c), o = _o.canvas;
  }
  const d = e.makeTensorInfo(u, "int32");
  e.texData.get(d.dataId).usage = Cn.PIXELS, e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId), o);
  const p = B().getBool("WEBGL_PACK") ? new qK(h) : new JK(h), f = e.runWebGLProgram(p, [d], "int32");
  return e.disposeData(d.dataId), f;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dataFormat: u, dilations: h, dimRoundingMode: d, activation: p, leakyreluAlpha: f } = s, g = Ws(u), m = Xe(o.shape, r.shape, l, h, c, d, !1, g);
  let b;
  const x = [], w = i != null, y = a != null, I = p === "leakyrelu", v = () => {
    const k = [o, r], $ = (G, z) => {
      if (z === "NCHW" && G.shape.length === 1 && G.shape[0] !== 1) {
        const A = dt({
          inputs: { x: G },
          backend: e,
          attrs: { shape: [G.shape[0], 1, 1] }
        });
        return x.push(A), A;
      }
      return G;
    };
    if (w && k.push($(i, u)), y && k.push($(a, u)), I) {
      const G = e.makeTensorInfo([], "float32", ws(f, "float32"));
      k.push(G), x.push(G);
    }
    return k;
  };
  if (m.filterHeight === 1 && m.filterWidth === 1 && m.dilationHeight === 1 && m.dilationWidth === 1 && m.strideHeight === 1 && m.strideWidth === 1 && (m.padInfo.type === "SAME" || m.padInfo.type === "VALID"))
    b = j1({
      x: o,
      filter: r,
      convInfo: m,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else if (m.strideWidth <= 2 && g === "channelsLast" && B().getBool("WEBGL_EXP_CONV")) {
    const k = p ? ii(p, !0) : null, $ = new Y1(m, w, k, y, I), G = [
      [m.padInfo.top, m.padInfo.left],
      [m.strideHeight, m.strideWidth],
      [m.dilationHeight, m.dilationWidth],
      [m.inHeight, m.inWidth]
    ], z = v();
    b = e.runWebGLProgram($, z, "float32", G);
  } else if (B().getBool("WEBGL_CONV_IM2COL"))
    b = Q1({
      x: o,
      filter: r,
      convInfo: m,
      backend: e,
      bias: i,
      activation: p,
      preluActivationWeights: a,
      leakyreluAlpha: f
    });
  else {
    const k = p ? ii(p, !1) : null, $ = new U1(m, w, k, y, I), G = v();
    b = e.runWebGLProgram($, G, "float32");
  }
  const T = dt({ inputs: { x: b }, backend: e, attrs: { shape: m.outShape } });
  return x.push(b), x.forEach((k) => e.disposeIntermediateTensorInfo(k)), T;
}
const sB = {
  kernelName: ol,
  backendName: "webgl",
  kernelFunc: nB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function oB(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, filter: r, bias: i, preluActivationWeights: a } = t, { strides: l, pad: c, dilations: u, dimRoundingMode: h, activation: d, leakyreluAlpha: p } = s, f = [];
  let g = u;
  g == null && (g = [1, 1]), S(Ke(l, g), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);
  const m = Xe(
    o.shape,
    r.shape,
    l,
    g,
    c,
    h,
    !0
    /* depthwise */
  ), b = B().getBool("WEBGL_PACK_DEPTHWISECONV") && m.strideWidth <= 2 && m.outChannels / m.inChannels === 1, x = d ? ii(d, b) : null, w = [o, r], y = i != null, I = a != null, v = d === "leakyrelu";
  if (y && w.push(i), I && w.push(a), v) {
    const G = e.makeTensorInfo([], "float32", ws(p, "float32"));
    w.push(G), f.push(G);
  }
  let T;
  b ? T = new tw(m, y, x, I, v) : T = new q1(m, y, x, I, v);
  const k = [
    [m.padInfo.top, m.padInfo.left],
    [m.strideHeight, m.strideWidth],
    [m.dilationHeight, m.dilationWidth],
    [m.inHeight, m.inWidth]
  ], $ = e.runWebGLProgram(T, w, "float32", k);
  return f.forEach((G) => e.disposeIntermediateTensorInfo(G)), $;
}
const rB = {
  kernelName: hb,
  backendName: "webgl",
  kernelFunc: oB
};
class iB {
  constructor(t, e, s, o) {
    this.sliceDim = t, this.strides = e, this.paramsShape = o, this.variableNames = ["x", "indices"], this.outputShape = s;
    const r = se(s.length);
    let i = `
    int index;`;
    for (let a = 0; a < this.sliceDim; a++)
      i += `
          index = round(getIndices(coords[0], ${a}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[a]};
          flattenIndex += index * ${this.strides[a]};`;
    this.userCode = `
         void main() {
          ${r} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${i}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aB(n) {
  const { inputs: t, backend: e } = n, { params: s, indices: o } = t, r = o.shape, i = r[r.length - 1], a = H(s.shape), [l, c, u, h] = Pc(s, o), d = dt({ inputs: { x: o }, backend: e, attrs: { shape: [c, i] } }), p = dt({
    inputs: { x: s },
    backend: e,
    attrs: { shape: [H(s.shape) / u, u] }
  });
  if (e.shouldExecuteOnCPU([s, o]) || s.dtype === "string") {
    const b = e.readSync(o.dataId), x = e.bufferSync(s), w = yX(b, x, s.dtype, c, i, u, h, s.shape, a);
    return e.makeTensorInfo(l, s.dtype, w.values);
  }
  const f = new iB(i, h, [c, u], s.shape), g = e.runWebGLProgram(f, [p, d], p.dtype), m = dt({ inputs: { x: g }, backend: e, attrs: { shape: l } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(g), m;
}
const lB = {
  kernelName: nb,
  backendName: "webgl",
  kernelFunc: aB
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cB {
  constructor(t, e) {
    this.variableNames = ["A", "indices"], this.outputShape = e, this.rank = e.length;
    const s = se(this.rank), o = uB(t);
    this.userCode = `
      void main() {
        ${s} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${o}));
      }
    `;
  }
}
function uB(n, t) {
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [];
  for (let o = 0; o < n.length; o++)
    o === 2 ? s.push("index") : s.push(`${e[o]}`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function sw(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, indices: r } = t, { axis: i, batchDims: a } = s, l = Dt(i, o.shape)[0];
  if (B().get("DEBUG")) {
    const x = e.readSync(r.dataId), w = o.shape[l];
    for (let y = 0; y < x.length; ++y) {
      const I = x[y];
      S(I <= w - 1 && I >= 0, () => `GatherV2: the index value ${I} is not in [0, ${w - 1}]`);
    }
  }
  const c = yf(o, r, l, a), u = H(r.shape), h = [], d = dt({
    inputs: { x: o },
    backend: e,
    attrs: {
      shape: [
        c.batchSize,
        c.outerSize,
        c.dimSize,
        c.sliceSize
      ]
    }
  }), p = dt({
    inputs: { x: r },
    backend: e,
    attrs: { shape: [c.batchSize, u / c.batchSize] }
  });
  h.push(d), h.push(p);
  const f = [
    c.batchSize,
    c.outerSize,
    u / c.batchSize,
    c.sliceSize
  ];
  if (e.shouldExecuteOnCPU([o, r]) || o.dtype === "string") {
    const x = e.bufferSync(p), w = e.bufferSync(d), y = wX(w, x, f);
    return h.forEach((I) => e.disposeIntermediateTensorInfo(I)), e.makeTensorInfo(c.outputShape, y.dtype, y.values);
  }
  const g = new cB(d.shape, f), m = e.runWebGLProgram(g, [d, p], d.dtype);
  h.push(m);
  const b = dt({ inputs: { x: m }, backend: e, attrs: { shape: c.outputShape } });
  return h.forEach((x) => e.disposeIntermediateTensorInfo(x)), b;
}
const hB = {
  kernelName: nc,
  backendName: "webgl",
  kernelFunc: sw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const dB = "return float(a > b);", pB = `
  return vec4(greaterThan(a, b));
`, fB = Ae({
  opSnippet: dB,
  packedOpSnippet: pB,
  cpuKernelImpl: IX,
  dtype: "bool"
}), mB = {
  kernelName: sc,
  backendName: "webgl",
  kernelFunc: fB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const gB = "return float(a >= b);", bB = `
  return vec4(greaterThanEqual(a, b));
`, xB = Ae({
  opSnippet: gB,
  packedOpSnippet: bB,
  dtype: "bool",
  cpuKernelImpl: CX
}), yB = {
  kernelName: $i,
  backendName: "webgl",
  kernelFunc: xB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wB(n) {
  const { inputs: t, backend: e } = n, { input: s } = t;
  return nw(s, !0, e);
}
const IB = {
  kernelName: md,
  backendName: "webgl",
  kernelFunc: wB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CB = "return float(!isnan(x) && !isinf(x));", vB = Xt({ opSnippet: CB, dtype: "bool" }), SB = {
  kernelName: Gi,
  backendName: "webgl",
  kernelFunc: vB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kB = "return float(isinf(x));", TB = Xt({ opSnippet: kB, dtype: "bool" }), NB = {
  kernelName: Li,
  backendName: "webgl",
  kernelFunc: TB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $B = "return float(isnan(x));", RB = Xt({ opSnippet: $B, dtype: "bool" }), GB = {
  kernelName: Ei,
  backendName: "webgl",
  kernelFunc: RB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LB = "return float(a < b);", EB = `
  return vec4(lessThan(a, b));
`, WB = Ae({
  opSnippet: LB,
  packedOpSnippet: EB,
  cpuKernelImpl: vX,
  dtype: "bool"
}), MB = {
  kernelName: rc,
  backendName: "webgl",
  kernelFunc: WB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const DB = "return float(a <= b);", FB = `
  return vec4(lessThanEqual(a, b));
`, zB = Ae({
  opSnippet: DB,
  packedOpSnippet: FB,
  cpuKernelImpl: SX,
  dtype: "bool"
}), VB = {
  kernelName: ic,
  backendName: "webgl",
  kernelFunc: zB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function PB(n) {
  const { backend: t, attrs: e } = n, { start: s, stop: o, num: r } = e, i = kX(s, o, r);
  return t.makeTensorInfo([i.length], "float32", i);
}
const XB = {
  kernelName: sb,
  backendName: "webgl",
  kernelFunc: PB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OB = Mr + `
  return x < 0.0 ? 0./0. : log(x);
`, AB = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`, ZB = Xt({ opSnippet: OB, packedOpSnippet: AB, cpuKernelImpl: TX }), KB = {
  kernelName: Wi,
  backendName: "webgl",
  kernelFunc: ZB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BB = Mr + `
  return log(1.0 + x);
`, HB = Xt({ opSnippet: BB }), _B = {
  kernelName: Mi,
  backendName: "webgl",
  kernelFunc: HB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const UB = "return float(a >= 1.0 && b >= 1.0);", YB = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`, jB = Ae({
  opSnippet: UB,
  packedOpSnippet: YB,
  dtype: "bool"
}), QB = {
  kernelName: ac,
  backendName: "webgl",
  kernelFunc: jB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const JB = "return float(!(x >= 1.0));", qB = Xt({ opSnippet: JB }), tH = {
  kernelName: lc,
  backendName: "webgl",
  kernelFunc: qB
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const eH = "return float(a >= 1.0 || b >= 1.0);", nH = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`, sH = Ae({ opSnippet: eH, packedOpSnippet: nH, dtype: "bool" }), oH = {
  kernelName: cc,
  backendName: "webgl",
  kernelFunc: sH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class rH {
  constructor(t, e, s, o, r) {
    this.variableNames = ["x"], this.outputShape = [];
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${o}) * sum`;
    r === 0.5 ? l = `inversesqrt(${c})` : r === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${i}; j <= ${i}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${a}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${l};
        setOutput(val);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class iH {
  constructor(t, e, s, o, r) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
    const i = e, a = t[3] - 1;
    this.outputShape = t;
    let l;
    const c = `float(${s}) + float(${o}) * sum`;
    r === 0.5 ? l = `inversesqrt(${c})` : r === 1 ? l = `1.0/(${c})` : l = `exp(log(${c}) * float(-${r}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${i};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${i}; j <= ${i}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${l};
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const aH = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { depthRadius: r, bias: i, alpha: a, beta: l } = s, c = B().getBool("WEBGL_PACK_NORMALIZATION") ? new iH(o.shape, r, i, a, l) : new rH(o.shape, r, i, a, l);
  return e.runWebGLProgram(c, [o], o.dtype);
}, lH = {
  kernelName: uc,
  backendName: "webgl",
  kernelFunc: aH
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class cH {
  constructor(t, e, s, o, r) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = s, this.alpha = o, this.beta = r, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${o}) * norm + float(${s});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${o})
                * float(${r})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${r});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uH = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, y: r, dy: i } = t, { depthRadius: a, bias: l, alpha: c, beta: u } = s, h = new cH(o.shape, a, l, c, u);
  return e.runWebGLProgram(h, [o, r, i], o.dtype);
}, hH = {
  kernelName: bd,
  backendName: "webgl",
  kernelFunc: uH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dH(n, t, e, s) {
  const o = H(t), i = H(n.shape) / o, a = dt({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }), l = Zo(a, n.dtype, "max", s), c = dt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ow(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reductionIndices: r, keepDims: i } = s, a = o.shape.length, l = Dt(r, o.shape);
  let c = l;
  const u = me(c, a), h = u != null, d = e.shouldExecuteOnCPU([o]);
  let p = o;
  if (h) {
    if (d) {
      const w = e.texData.get(p.dataId).values, y = new Array(a);
      for (let T = 0; T < y.length; T++)
        y[T] = o.shape[u[T]];
      const I = em(w, o.shape, o.dtype, u, y);
      p = e.makeTensorInfo(y, o.dtype);
      const v = e.texData.get(p.dataId);
      v.values = I;
    } else
      p = bu(o, u, e);
    c = Ie(c.length, a);
  }
  Oe("max", c, a);
  const [f, g] = Ge(p.shape, c);
  let m = f;
  i && (m = we(f, l));
  let b;
  if (d) {
    const w = e.texData.get(p.dataId).values, y = NX(w, H(g), m, o.dtype);
    b = e.makeTensorInfo(m, o.dtype);
    const I = e.texData.get(b.dataId);
    I.values = y;
  } else
    b = dH(p, g, m, e);
  return h && e.disposeIntermediateTensorInfo(p), b;
}
const pH = {
  kernelName: hc,
  backendName: "webgl",
  kernelFunc: ow
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const fH = nm + `
  return max(a, b);
`, mH = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + $a + `
  return result;
`, gH = Ae({
  opSnippet: fH,
  packedOpSnippet: mH,
  cpuKernelImpl: $X
}), bH = {
  kernelName: Di,
  backendName: "webgl",
  kernelFunc: gH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t;
  Ta(o, "maxPool");
  const { filterSize: r, strides: i, pad: a, dimRoundingMode: l } = s, c = 1;
  S(Ke(i, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`);
  const u = Un(o.shape, r, i, c, a, l);
  if (u.filterWidth === 1 && u.filterHeight === 1 && At(u.inShape, u.outShape))
    return gn({ inputs: { x: o }, backend: e });
  const h = new ai(u, "max", !1);
  return e.runWebGLProgram(h, [o], o.dtype);
}
const yH = {
  kernelName: dc,
  backendName: "webgl",
  kernelFunc: xH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { filterSize: r, strides: i, pad: a, dataFormat: l, dimRoundingMode: c } = s, u = [1, 1, 1], h = Es(o.shape, r, i, u, a, c, l), d = new om(h, "max", !1);
  return e.runWebGLProgram(d, [o], o.dtype);
}
const IH = {
  kernelName: pc,
  backendName: "webgl",
  kernelFunc: wH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class CH {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideHeight, s = t.strideWidth, o = t.dilationHeight, r = t.effectiveFilterHeight, i = t.effectiveFilterWidth, a = r - 1 - t.padInfo.top, l = i - 1 - t.padInfo.left, c = r * i - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${l});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${r};
          wR += ${o}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${i}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${c} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${i} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
class vH {
  constructor(t) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t.inShape;
    const e = t.strideDepth, s = t.strideHeight, o = t.strideWidth, r = t.dilationDepth, i = t.dilationHeight, a = t.dilationWidth, l = t.effectiveFilterDepth, c = t.effectiveFilterHeight, u = t.effectiveFilterWidth, h = l - 1 - t.padInfo.front, d = c - 1 - t.padInfo.top, p = u - 1 - t.padInfo.left, f = l * c * u - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${h}, ${d}, ${p});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
           wD += ${r}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${c};
              wR += ${i}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${a}) {
              float dyC = float(dyCCorner + wC) / ${o}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${c} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function SH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r } = t, i = r, { filterSize: a, strides: l, pad: c, dimRoundingMode: u } = s, h = [1, 1, 1], d = Es(i.shape, a, l, h, c, u), p = new om(
    d,
    "max",
    !0
    /* get positions */
  ), f = e.runWebGLProgram(p, [i], i.dtype), g = new vH(d), m = e.runWebGLProgram(g, [o, f], i.dtype);
  return e.disposeIntermediateTensorInfo(f), m;
}
const kH = {
  kernelName: yd,
  backendName: "webgl",
  kernelFunc: SH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function TH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { dy: o, input: r, output: i } = t, a = r;
  Ta([r, i], "maxPoolGrad");
  const { filterSize: l, strides: c, pad: u, dimRoundingMode: h } = s, d = Un(a.shape, l, c, 1, u, h), p = !0, f = new ai(d, "max", p), g = e.runWebGLProgram(f, [a], a.dtype), m = new CH(d), b = e.runWebGLProgram(m, [o, g], a.dtype);
  return e.disposeIntermediateTensorInfo(g), b;
}
const NH = {
  kernelName: xd,
  backendName: "webgl",
  kernelFunc: TH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function $H(n, t, e, s) {
  let o = new ai(e, "max", !1);
  const r = s.runWebGLProgram(o, [n], "float32");
  o = new ai(e, "max", !0, !0, t);
  const i = s.runWebGLProgram(o, [n], "float32");
  return [r, i];
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const RH = {
  kernelName: ob,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { filterSize: o, strides: r, pad: i, includeBatchInIndex: a } = t, l = e;
    S(s.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);
    const c = [1, 1];
    S(Ke(r, c), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${c}'`);
    const u = Un(s.shape, o, r, c, i), [h, d] = $H(s, a, u, l);
    return [h, d];
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function GH(n, t, e, s) {
  const o = H(t), i = H(n.shape) / o, a = dt({ inputs: { x: n }, attrs: { shape: [i, o] }, backend: s }), l = Zo(a, "float32", "mean", s), c = dt({ inputs: { x: l }, attrs: { shape: e }, backend: s });
  return s.disposeIntermediateTensorInfo(a), s.disposeIntermediateTensorInfo(l), c;
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const LH = {
  kernelName: fc,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { x: s } = n, { keepDims: o, axis: r } = t, i = e, a = s.shape.length, l = Dt(r, s.shape);
    let c = l;
    const u = me(c, a), h = u != null, d = i.shouldExecuteOnCPU([s]), p = [];
    let f = s;
    if (h) {
      if (d) {
        const y = i.texData.get(f.dataId).values, I = new Array(a);
        for (let k = 0; k < I.length; k++)
          I[k] = s.shape[u[k]];
        const v = em(y, s.shape, s.dtype, u, I);
        f = i.makeTensorInfo(I, s.dtype);
        const T = i.texData.get(f.dataId);
        T.values = v;
      } else
        f = bu(s, u, i);
      p.push(f), c = Ie(c.length, a);
    }
    Oe("sum", c, a);
    const [g, m] = Ge(f.shape, c);
    let b = g;
    o && (b = we(g, l));
    const x = GH(f, m, b, i);
    for (const w of p)
      i.disposeIntermediateTensorInfo(w);
    return x;
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function EH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = Dt(r, o.shape);
  let c = l;
  const u = me(c, a);
  let h = o;
  u != null && (h = je({ inputs: { x: o }, backend: e, attrs: { perm: u } }), c = Ie(c.length, o.shape.length)), Oe("min", c, a);
  const [d, p] = Ge(h.shape, c), f = H(p), g = dt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, f] } }), m = Zo(g, g.dtype, "min", e);
  let b;
  if (i) {
    const x = we(d, l);
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: x } });
  } else
    b = dt({ inputs: { x: m }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(m), u != null && e.disposeIntermediateTensorInfo(h), b;
}
const WH = {
  kernelName: mc,
  backendName: "webgl",
  kernelFunc: EH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const MH = nm + `
  return min(a, b);
`, DH = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + $a + `
  return result;
`, FH = Ae({
  opSnippet: MH,
  packedOpSnippet: DH,
  cpuKernelImpl: RX
}), zH = {
  kernelName: Fi,
  backendName: "webgl",
  kernelFunc: FH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class VH {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = e.map(
      (u, h) => u[0] + t[h] + u[1]
      /* afterPad */
    );
    const o = t.length, r = se(o), i = e.map((u) => u[0]).join(","), a = e.map((u, h) => u[0] + t[h]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o), c = s === "reflect" ? 0 : 1;
    if (o === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${c};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${c};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        for (int i = 0; i < ${o}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${c};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};
          }
        }
        ${r} coords = outC - start;
        setOutput(getX(${l}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class PH {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map(
      (f, g) => f[0] + t[g] + f[1]
      /* afterPad */
    );
    const o = t.length, r = se(o), i = e.map((f) => f[0]).join(","), a = e.map((f, g) => f[0] + t[g]).join(","), l = Ue("rc", o), c = Ue("source", o), u = `${l[o - 1]} < ${this.outputShape[o - 1]}`, h = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = s === "reflect" ? 0 : 1;
    let p = "";
    if (o === 1) {
      const f = `
        ${r} source = rc;
        if (source < start) {
          source = start * 2 - source - ${d};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${d};
        }
        source -= start;
      `;
      p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    } else {
      const f = `
        ${r} source = rc;
        ${r} lt = ${r}(lessThan(source, start));
        ${r} gte = ${r}(greaterThanEqual(source, end));
        ${r} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${d}) +
                gte * ((end - 1) * 2 - source + ${d});
        source -= start;
      `;
      p = `
        ${r} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${c.join()}), ${h});
        ${l[o - 1]} += 1;
        if(${u}) {
          ${f}
          result[1] = getChannel(getX(${c.join()}), ${h});
        }
        rc = outputLoc;
        ${l[o - 2]} += 1;
        if(${l[o - 2]} < ${this.outputShape[o - 2]}) {
          ${f}
          result[2] = getChannel(getX(${c.join()}), ${h});
          ${l[o - 1]} += 1;
          if(${u}) {
            ${f}
            result[3] = getChannel(getX(${c.join()}), ${h});
          }
        }
      `;
    }
    this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${p}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const XH = ({ inputs: n, backend: t, attrs: e }) => {
  const { x: s } = n, { paddings: o, mode: r } = e, i = B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new PH(s.shape, o, r) : new VH(s.shape, o, r);
  return t.runWebGLProgram(i, [s], s.dtype);
}, OH = {
  kernelName: gc,
  backendName: "webgl",
  kernelFunc: XH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const AH = `if (b == 0.0) return NAN;
  return mod(a, b);`, ZH = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + $a + `
  return result;
`, KH = Ae({
  opSnippet: AH,
  packedOpSnippet: ZH
}), BH = {
  kernelName: zi,
  backendName: "webgl",
  kernelFunc: KH
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class HH {
  constructor(t, e, s) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [t, s], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const _H = `
if (a == b) {
  return 1.0;
};
return a / b;`, UH = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`, rw = Ae({ opSnippet: _H, packedOpSnippet: UH, checkOutOfBounds: !0 }), YH = {
  kernelName: Ii,
  backendName: "webgl",
  kernelFunc: rw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Eg = "return a - b;", iw = Ae({
  opSnippet: Eg,
  packedOpSnippet: Eg,
  supportsComplex: !0,
  cpuKernelImpl: UX
}), jH = {
  kernelName: qi,
  backendName: "webgl",
  kernelFunc: iw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function aw(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { dim: r } = s, i = Dt([r], o.shape), a = ow({
    inputs: { x: o },
    backend: e,
    attrs: { reductionIndices: i, keepDims: !1 }
  }), l = we(a.shape, i), c = dt({ inputs: { x: a }, backend: e, attrs: { shape: l } }), u = iw({ inputs: { a: o, b: c }, backend: e }), h = ew({ inputs: { x: u }, backend: e }), d = xu({ inputs: { x: h }, backend: e, attrs: { axis: i, keepDims: !1 } }), p = dt({ inputs: { x: d }, backend: e, attrs: { shape: l } }), f = rw({ inputs: { a: h, b: p }, backend: e });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(p), f;
}
const QH = {
  kernelName: Mc,
  backendName: "webgl",
  kernelFunc: aw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function JH(n) {
  const { inputs: t, backend: e, attrs: s } = n, { logits: o } = t, { numSamples: r, seed: i, normalized: a } = s, l = a ? o : aw({ inputs: { logits: o }, backend: e, attrs: { dim: o.shape.length - 1 } }), c = l.shape[0], u = l.shape[1], h = new HH(c, u, r), d = [[i]], p = e.runWebGLProgram(h, [l], "int32", d);
  return a || e.disposeIntermediateTensorInfo(l), p;
}
const qH = {
  kernelName: rb,
  backendName: "webgl",
  kernelFunc: JH
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const t9 = jn + `
  return -x;
`, e9 = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function n9(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (e.shouldExecuteOnCPU([s])) {
    const r = e.texData.get(s.dataId), [i, a] = LX(r.values, s.shape, s.dtype);
    return e.makeTensorInfo(a, s.dtype, i);
  }
  let o;
  return B().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? o = new bo(s.shape, e9) : o = new vs(s.shape, t9), e.runWebGLProgram(o, [s], s.dtype);
}
const s9 = {
  kernelName: bc,
  backendName: "webgl",
  kernelFunc: n9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const o9 = Rp;
function r9(n) {
  wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l } = s, c = e.readSync(o.dataId), u = e.readSync(r.dataId), { selectedIndices: h } = o9(c, u, i, a, l);
  return e.makeTensorInfo([h.length], "int32", new Int32Array(h));
}
const i9 = {
  kernelName: wd,
  backendName: "webgl",
  kernelFunc: r9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const a9 = Gp;
function l9(n) {
  wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, padToMaxOutputSize: c } = s, u = e.readSync(o.dataId), h = e.readSync(r.dataId), { selectedIndices: d, validOutputs: p } = a9(u, h, i, a, l, c);
  return [
    e.makeTensorInfo([d.length], "int32", new Int32Array(d)),
    e.makeTensorInfo([], "int32", new Int32Array([p]))
  ];
}
const c9 = {
  kernelName: Id,
  backendName: "webgl",
  kernelFunc: l9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u9 = Lp;
function h9(n) {
  wn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  const { inputs: t, backend: e, attrs: s } = n, { boxes: o, scores: r } = t, { maxOutputSize: i, iouThreshold: a, scoreThreshold: l, softNmsSigma: c } = s, u = e.readSync(o.dataId), h = e.readSync(r.dataId), d = i, p = a, f = l, g = c, { selectedIndices: m, selectedScores: b } = u9(u, h, d, p, f, g);
  return [
    e.makeTensorInfo([m.length], "int32", new Int32Array(m)),
    e.makeTensorInfo([b.length], "float32", new Float32Array(b))
  ];
}
const d9 = {
  kernelName: Cd,
  backendName: "webgl",
  kernelFunc: h9
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class p9 {
  constructor(t, e, s, o) {
    this.variableNames = ["indices"], this.outputShape = [t, e], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${o}), float(${s}),
                      float(index == coords.y)));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f9 = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o } = t, { dtype: r, depth: i, onValue: a, offValue: l } = s, c = H(o.shape), u = new p9(c, i, a, l), h = dt({ inputs: { x: o }, backend: e, attrs: { shape: [c] } }), d = e.runWebGLProgram(u, [h], r);
  e.disposeIntermediateTensorInfo(h);
  const p = [...o.shape, i], f = dt({ inputs: { x: d }, backend: e, attrs: { shape: p } });
  return e.disposeIntermediateTensorInfo(d), f;
}, m9 = {
  kernelName: wc,
  backendName: "webgl",
  kernelFunc: f9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function El(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "complex64") {
    const o = Ga({ inputs: { input: s }, backend: e }), r = El({ inputs: { x: o }, backend: e }), i = yu({ inputs: { input: s }, backend: e }), a = El({ inputs: { x: i }, backend: e }), l = ro({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return La({
      attrs: {
        shape: s.shape,
        dtype: s.dtype,
        value: s.dtype === "string" ? "" : 0
      },
      backend: e
    });
}
const g9 = {
  kernelName: zc,
  backendName: "webgl",
  kernelFunc: El
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function lw(n) {
  const { inputs: t, backend: e } = n, { x: s } = t;
  if (s.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (s.dtype === "complex64") {
    const o = Ga({ inputs: { input: s }, backend: e }), r = lw({ inputs: { x: o }, backend: e }), i = yu({ inputs: { input: s }, backend: e }), a = El({ inputs: { x: i }, backend: e }), l = ro({ inputs: { real: r, imag: a }, backend: e });
    return e.disposeIntermediateTensorInfo(o), e.disposeIntermediateTensorInfo(r), e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(a), l;
  } else
    return La({ attrs: { shape: s.shape, dtype: s.dtype, value: 1 }, backend: e });
}
const b9 = {
  kernelName: yc,
  backendName: "webgl",
  kernelFunc: lw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function x9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { axis: o } = s;
  if (t.length === 1)
    return Oh({ inputs: { input: t[0] }, backend: e, attrs: { dim: o } });
  const r = t[0].shape, i = t[0].dtype;
  t.forEach((u) => {
    Qe(r, u.shape, "All tensors passed to stack must have matching shapes"), S(i === u.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  const a = [], l = t.map((u) => {
    const h = Oh({ inputs: { input: u }, backend: e, attrs: { dim: o } });
    return a.push(h), h;
  }), c = _1({ inputs: l, backend: e, attrs: { axis: o } });
  return a.forEach((u) => e.disposeIntermediateTensorInfo(u)), c;
}
const y9 = {
  kernelName: Ic,
  backendName: "webgl",
  kernelFunc: x9
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class w9 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map(
      (c, u) => c[0] + t[u] + c[1]
      /* afterPad */
    );
    const o = t.length, r = se(o), i = e.map((c) => c[0]).join(","), a = e.map((c, u) => c[0] + t[u]).join(","), l = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, o);
    if (o === 1) {
      this.userCode = `
        int start = ${i};
        int end = ${a};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${r} start = ${r}(${i});
      ${r} end = ${r}(${a});

      void main() {
        ${r} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${r} coords = outC - start;
          setOutput(getX(${l}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class I9 {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map(
      (g, m) => g[0] + t[m] + g[1]
      /* afterPad */
    );
    const o = t.length, r = se(o), i = e.map((g) => g[0]).join(","), a = e.map((g, m) => g[0] + t[m]).join(","), l = Ue("rc", o), c = Ue("source", o), u = `${l[o - 1]} < ${this.outputShape[o - 1]}`, h = o === 1 ? "source" : `vec2(${c.slice(-2).join()})`, d = [
      `${r} rc = outputLoc;`,
      `${l[o - 1]} += 1;
       if(${u}) {
      `,
      o === 1 ? "" : `}
       rc = outputLoc;
       ${l[o - 2]} += 1;
       if(${l[o - 2]} < ${this.outputShape[o - 2]}) {`,
      o === 1 ? "" : `  ${l[o - 1]} += 1;
         if(${u}) {`
    ], p = o === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";
    let f = "";
    for (let g = 0, m = o === 1 ? 2 : 4; g < m; g++)
      f += `
        ${d[g]}
        if (${p}) {
          result[${g}] = float(value);
        } else {
          ${r} source = rc - start;
          result[${g}] = getChannel(getX(${c.join()}), ${h});
        }
      `;
    f += o === 1 ? "} " : "}}", this.userCode = `
      const ${r} start = ${r}(${i});
      const ${r} end = ${r}(${a});

      void main() {
        ${r} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const cw = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { paddings: r, constantValue: i } = s;
  if (H(o.shape) === 0) {
    const c = r.map(
      (u, h) => u[0] + o.shape[h] + u[1]
      /* afterPad */
    );
    return La({
      backend: e,
      attrs: { shape: c, value: i, dtype: o.dtype }
    });
  }
  const a = B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new I9(o.shape, r, i) : new w9(o.shape, r, i), l = [[i]];
  return e.runWebGLProgram(a, [o], o.dtype, l);
}, C9 = {
  kernelName: Cc,
  backendName: "webgl",
  kernelFunc: cw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const v9 = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`, S9 = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + $a + `
  return result;
`, k9 = Ae({ opSnippet: v9, packedOpSnippet: S9 }), T9 = {
  kernelName: Pi,
  backendName: "webgl",
  kernelFunc: k9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function N9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { axis: r, keepDims: i } = s, a = o.shape.length, l = [], c = Dt(r, o.shape);
  let u = c;
  const h = me(u, a);
  let d = o;
  h != null && (d = je({ inputs: { x: o }, backend: e, attrs: { perm: h } }), u = Ie(u.length, a), l.push(d)), Oe("prod", u, a);
  let p;
  if (e.shouldExecuteOnCPU([d])) {
    const f = e.texData.get(d.dataId).values, { outVals: g, outShape: m, outDtype: b } = WX(d.shape, d.dtype, f, u);
    p = e.makeTensorInfo(m, b, g);
  } else {
    const [f, g] = Ge(d.shape, u), m = H(g), b = dt({ inputs: { x: d }, backend: e, attrs: { shape: [-1, m] } }), x = Zd(o.dtype), w = Zo(b, x, "prod", e);
    p = dt({ inputs: { x: w }, backend: e, attrs: { shape: f } }), l.push(b), l.push(w);
  }
  if (i) {
    l.push(p);
    const f = we(p.shape, c);
    p = dt({ inputs: { x: p }, backend: e, attrs: { shape: f } });
  }
  return l.forEach((f) => e.disposeIntermediateTensorInfo(f)), p;
}
const $9 = {
  kernelName: Sc,
  backendName: "webgl",
  kernelFunc: N9
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function R9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { paramsNestedSplits: o, paramsDenseValues: r, indices: i } = t, { outputRaggedRank: a } = s, l = o.map((b) => e.readSync(b.dataId)), c = o.map((b) => b.shape), u = e.readSync(r.dataId), h = e.readSync(i.dataId), [d, p, f] = MX(l, c, u, r.shape, r.dtype, h, i.shape, a), g = d.map((b) => e.makeTensorInfo([b.length], "int32", b)), m = e.makeTensorInfo(f, r.dtype, p);
  return g.concat([m]);
}
const G9 = {
  kernelName: ib,
  backendName: "webgl",
  kernelFunc: R9
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function L9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { shape: o, values: r, defaultValue: i, rowPartitionTensors: a } = t, { rowPartitionTypes: l } = s, c = e.readSync(o.dataId), u = e.readSync(r.dataId), h = e.readSync(i.dataId), d = a.map((m) => e.readSync(m.dataId)), p = a.map((m) => m.shape), [f, g] = DX(c, o.shape, u, r.shape, r.dtype, h, i.shape, d, p, l);
  return e.makeTensorInfo(f, r.dtype, g);
}
const E9 = {
  kernelName: ab,
  backendName: "webgl",
  kernelFunc: L9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const uw = (n) => {
  const { backend: t, attrs: e } = n, { start: s, stop: o, step: r, dtype: i } = e, a = FX(s, o, r, i);
  return t.makeTensorInfo([a.length], i, a);
}, W9 = {
  kernelName: vd,
  backendName: "webgl",
  kernelFunc: uw
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const M9 = "return 1.0 / x;", D9 = Xt({ opSnippet: M9 }), F9 = {
  kernelName: Xi,
  backendName: "webgl",
  kernelFunc: D9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const z9 = jn + `
  return (x < 0.0) ? 0.0 : x;
`, V9 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, P9 = Xt({ opSnippet: z9, packedOpSnippet: V9 }), X9 = {
  kernelName: Oi,
  backendName: "webgl",
  kernelFunc: P9
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const O9 = jn + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`, A9 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, Z9 = Xt({ opSnippet: O9, packedOpSnippet: A9 }), K9 = {
  kernelName: Ai,
  backendName: "webgl",
  kernelFunc: Z9
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class B9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], h = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ];
    let d;
    r ? d = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class H9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], h = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ];
    let d;
    r ? d = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function _9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s, [l, c] = a, u = B().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new H9(o.shape, l, c, r, i) : new B9(o.shape, l, c, r, i);
  return e.runWebGLProgram(u, [o], "float32");
}
const U9 = {
  kernelName: Nc,
  backendName: "webgl",
  kernelFunc: _9
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Y9 {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, o, r] = e, [, i, a] = t, l = [
      s && i > 1 ? o - 1 : o,
      s && a > 1 ? r - 1 : r
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, g = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${o - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${r - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j9(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s, a = new Y9(r.shape, o.shape, i);
  return e.runWebGLProgram(a, [r], r.dtype);
}
const Q9 = {
  kernelName: Td,
  backendName: "webgl",
  kernelFunc: j9
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class J9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], h = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ], d = o ? "0.5" : "0.0";
    let p;
    r ? p = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : p = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0] / h[0]},
          ${u[1] / h[1]});
      const vec2 inputShapeRC = vec2(${a}.0, ${l}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class q9 {
  constructor(t, e, s, o, r) {
    this.variableNames = ["A"], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
    const [i, a, l, c] = t;
    this.outputShape = [i, e, s, c];
    const u = [
      o && e > 1 ? a - 1 : a,
      o && s > 1 ? l - 1 : l
    ], h = [
      o && e > 1 ? e - 1 : e,
      o && s > 1 ? s - 1 : s
    ], d = o ? "0.5" : "0.0";
    let p;
    r ? p = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : p = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0] / h[0]},
          ${u[1] / h[1]},
          ${u[1] / h[1]});
      const vec3 inputShapeRC = vec3(${a}.0, ${l}.0,
                                     ${l}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${p};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${c - 1};
        bool hasNextRow = coords.z < ${s - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function t_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o } = t, { alignCorners: r, halfPixelCenters: i, size: a } = s, [l, c] = a, u = B().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new q9(o.shape, l, c, r, i) : new J9(o.shape, l, c, r, i);
  return e.runWebGLProgram(u, [o], o.dtype);
}
const e_ = {
  kernelName: Tc,
  backendName: "webgl",
  kernelFunc: t_
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class n_ {
  constructor(t, e, s) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    const [, o, r] = e, [, i, a] = t, l = [
      s && i > 1 ? o - 1 : o,
      s && a > 1 ? r - 1 : r
    ], c = [
      s && i > 1 ? i - 1 : i,
      s && a > 1 ? a - 1 : a
    ], u = l[0] / c[0], h = l[1] / c[1], d = 1 / u, p = 1 / h, f = Math.ceil(d) * 2 + 2, g = Math.ceil(p) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${d});
        const float invWidthScale = float(${p});

        const int winHeight = int(${f});
        const int winWidth = int(${g});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${i}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${a}) {
              continue;
            }

            float sourceFracRow =
              float(${l[0]}) *
                (float(dyR) / float(${c[0]}));

            float sourceFracCol =
                float(${l[1]}) *
                  (float(dyC) / float(${c[1]}));

            int sourceNearestRow = int(min(
                float(int(${o}) - 1),
                ${s} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${r}) - 1),
                ${s} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function s_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { images: o, dy: r } = t, { alignCorners: i } = s, a = new n_(r.shape, o.shape, i);
  return e.runWebGLProgram(a, [r], r.dtype);
}
const o_ = {
  kernelName: kd,
  backendName: "webgl",
  kernelFunc: s_
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class r_ {
  constructor(t, e) {
    this.variableNames = ["x"];
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    if (this.outputShape = t, s === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;
      return;
    }
    const o = (a) => e.indexOf(a) !== -1 && t[a] !== 1 ? `${t[a]} - coords[${a}] - 1` : `coords[${a}]`, r = t.map((a, l) => o(l)).join(","), i = se(s);
    this.userCode = `
      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${r}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class i_ {
  constructor(t, e) {
    this.variableNames = ["x"], this.packedInputs = !0, this.packedOutput = !0;
    const s = t.length;
    if (s > 4)
      throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);
    this.outputShape = t;
    const o = Ue("rc", s), r = `${o[s - 1]} + 1 < ${this.outputShape[s - 1]}`, i = `${o[s - 2]} + 1 < ${this.outputShape[s - 2]}`, a = se(s);
    s === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${r}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${a} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${l(o.slice())};
          if(${r}){
            result.g = ${c(o.slice())};
          }
          if(${i}) {
            result.b = ${u(o.slice())};
            if(${r}) {
              result.a = ${h(o.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function l(f) {
      return d(f);
    }
    function c(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", d(f);
    }
    function u(f) {
      return f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function h(f) {
      return f[s - 1] = "(" + f[s - 1] + " + 1)", f[s - 2] = "(" + f[s - 2] + " + 1)", d(f);
    }
    function d(f) {
      const g = t.map((x, w) => p(w, f)), m = g.join(","), b = g.slice(-2).join(",");
      return `getChannel(getX(${m}), vec2(${b}))`;
    }
    function p(f, g) {
      return e.indexOf(f) !== -1 && t[f] !== 1 ? `${t[f]} - ${g[f]} - 1` : `${g[f]}`;
    }
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function a_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { dims: r } = s, i = o.shape.length, a = Dt(r, o.shape);
  if (i === 0)
    return gn({ inputs: { x: o }, backend: e });
  const l = B().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new i_(o.shape, a) : new r_(o.shape, a);
  return e.runWebGLProgram(l, [o], o.dtype);
}
const l_ = {
  kernelName: $c,
  backendName: "webgl",
  kernelFunc: a_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class c_ {
  constructor(t, e) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    const s = t[1], o = t[2];
    this.outputShape = t;
    let r = "";
    typeof e == "number" ? r = `float outputValue = ${e.toFixed(2)};` : r = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${r}
          if(coordX >= 0 && coordX < ${o} && coordY >= 0 && coordY < ${s}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const u_ = {
  kernelName: Pd,
  backendName: "webgl",
  kernelFunc: ({ inputs: n, attrs: t, backend: e }) => {
    const { image: s } = n, { radians: o, fillValue: r, center: i } = t, a = e, l = new c_(s.shape, r), [c, u] = Bp(i, s.shape[1], s.shape[2]), h = [[c, u, Math.sin(o), Math.cos(o)]];
    return a.runWebGLProgram(l, [s], s.dtype, h);
  }
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const h_ = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`, d_ = Xt({ opSnippet: h_ }), p_ = {
  kernelName: Zi,
  backendName: "webgl",
  kernelFunc: d_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const f_ = "return inversesqrt(x);", m_ = Xt({ opSnippet: f_, cpuKernelImpl: zX }), g_ = {
  kernelName: Ki,
  backendName: "webgl",
  kernelFunc: m_
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class hw {
  constructor(t, e, s, o, r, i, a = !0) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = i;
    const l = se(r.length), c = se(i.length);
    let u = "";
    s === 1 ? u = "i" : s === 2 && (u = "i, j");
    const h = `getIndices(${u})`;
    let d = "";
    o === 1 ? d = "i" : o === 2 && (d = "i, coords[1]");
    const p = `getUpdates(${d})`, f = e > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${l} strides = ${l}(${r});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${p};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function b_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { indices: o, updates: r } = t, { shape: i } = s, { sliceRank: a, numUpdates: l, sliceSize: c, strides: u, outputSize: h } = wr(r, o, i), d = [h / c, c];
  if (h === 0)
    return e.makeTensorInfo(i, o.dtype);
  const p = dt({ inputs: { x: o }, backend: e, attrs: { shape: [l, a] } }), f = dt({ inputs: { x: r }, backend: e, attrs: { shape: [l, c] } }), g = e.makeTensorInfo([], "float32", new Float32Array([0])), m = new hw(l, a, p.shape.length, f.shape.length, u, d), b = e.runWebGLProgram(m, [f, p, g], f.dtype), x = dt({ inputs: { x: b }, backend: e, attrs: { shape: i } });
  return e.disposeIntermediateTensorInfo(p), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(g), x;
}
const x_ = {
  kernelName: lb,
  backendName: "webgl",
  kernelFunc: b_
};
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class y_ {
  constructor(t, e, s, o) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [t, s];
    const r = "while (left < right) {", i = `for (int i = 0; i < ${Math.ceil(Math.log2(e + 1))}; ++i) { if (left >= right) break;`, a = B().getNumber("WEBGL_VERSION") === 2 ? r : i, l = o === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${a}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${l} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function w_(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sortedSequence: o, values: r } = t, { side: i } = s, a = new y_(o.shape[0], o.shape[1], r.shape[1], i), l = [[o.shape[1]]];
  return e.runWebGLProgram(a, [o, r], "int32", l);
}
const I_ = {
  kernelName: cb,
  backendName: "webgl",
  kernelFunc: w_
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class C_ {
  constructor(t, e, s) {
    this.variableNames = ["c", "a", "b"], this.outputShape = e;
    let o, r;
    if (s > 4)
      throw Error(`Where for rank ${s} is not yet supported`);
    if (s === 1)
      r = "resRC", o = "resRC";
    else {
      const a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], l = [], c = [];
      for (let u = 0; u < e.length; u++)
        c.push(`${a[u]}`), u < t && l.push(`${a[u]}`);
      o = l.join(), r = c.join();
    }
    const i = se(s);
    this.userCode = `
      void main() {
        ${i} resRC = getOutputCoords();
        float cVal = getC(${o});
        if (cVal >= 1.0) {
          setOutput(getA(${r}));
        } else {
          setOutput(getB(${r}));
        }
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function v_(n) {
  const { inputs: t, backend: e } = n, { condition: s, t: o, e: r } = t, i = new C_(s.shape.length, o.shape, o.shape.length);
  return e.runWebGLProgram(i, [s, o, r], nn(o.dtype, r.dtype));
}
const S_ = {
  kernelName: Rc,
  backendName: "webgl",
  kernelFunc: v_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const k_ = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${qc};
  float scale = ${tu};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`, T_ = Xt({ opSnippet: k_ }), N_ = {
  kernelName: Bi,
  backendName: "webgl",
  kernelFunc: T_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const $_ = Mr + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`, R_ = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`, G_ = Xt({
  opSnippet: $_,
  packedOpSnippet: R_,
  cpuKernelImpl: PX
}), L_ = {
  kernelName: Yi,
  backendName: "webgl",
  kernelFunc: G_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const E_ = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`, W_ = Xt({ opSnippet: E_ }), M_ = {
  kernelName: Ui,
  backendName: "webgl",
  kernelFunc: W_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const D_ = Mr + `
  return sin(x);
`, F_ = Xt({ opSnippet: D_ }), z_ = {
  kernelName: Hi,
  backendName: "webgl",
  kernelFunc: F_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const V_ = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`, P_ = Xt({ opSnippet: V_ }), X_ = {
  kernelName: _i,
  backendName: "webgl",
  kernelFunc: P_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const O_ = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`, A_ = Xt({ opSnippet: O_ }), Z_ = {
  kernelName: ji,
  backendName: "webgl",
  kernelFunc: A_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const K_ = (n) => {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { blockShape: r, paddings: i } = s;
  S(o.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  const a = r.reduce((b, x) => b * x), l = [[0, 0]];
  l.push(...i);
  for (let b = 1 + r.length; b < o.shape.length; ++b)
    l.push([0, 0]);
  const c = [], u = cw({
    inputs: { x: o },
    backend: e,
    attrs: { paddings: l, constantValue: 0 }
  }), h = da(u.shape, r, a, !1), d = pa(h.length, r.length, !1), p = fa(u.shape, r, a, !1), f = dt({ inputs: { x: u }, backend: e, attrs: { shape: h } }), g = je({
    inputs: { x: f },
    backend: e,
    attrs: { perm: d }
  }), m = dt({ inputs: { x: g }, backend: e, attrs: { shape: p } });
  return c.push(u), c.push(f), c.push(g), c.forEach((b) => e.disposeIntermediateTensorInfo(b)), m;
}, B_ = {
  kernelName: Ec,
  backendName: "webgl",
  kernelFunc: K_
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function H_(n) {
  const { inputs: t, backend: e } = n, { indices: s, values: o, denseShape: r, defaultValue: i } = t;
  if (r.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${r.shape}`);
  if (s.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${o.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${i.shape}`);
  const a = e.readSync(s.dataId), l = e.readSync(o.dataId), c = e.readSync(r.dataId), u = e.readSync(i.dataId)[0], [h, d, p, f, g] = OX(a, s.shape, s.dtype, l, o.dtype, c, u);
  return [
    e.makeTensorInfo(d, s.dtype, h),
    e.makeTensorInfo([d[0]], o.dtype, p),
    e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((m) => Number(m)))),
    e.makeTensorInfo([g.length], s.dtype, new Int32Array(g))
  ];
}
const __ = {
  kernelName: Nd,
  backendName: "webgl",
  kernelFunc: H_
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function U_(n) {
  const { inputs: t, backend: e } = n, { inputIndices: s, inputShape: o, newShape: r } = t;
  if (s.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);
  if (o.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${r.shape}`);
  const i = Array.from(e.readSync(o.dataId)), a = e.readSync(s.dataId), l = Array.from(e.readSync(r.dataId)), [c, u, h] = AX(a, s.shape, s.dtype, i, l);
  return [
    e.makeTensorInfo(u, s.dtype, c),
    e.makeTensorInfo([h.length], r.dtype, new Int32Array(h))
  ];
}
const Y_ = {
  kernelName: $d,
  backendName: "webgl",
  kernelFunc: U_
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function j_(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${r.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(o.dataId), l = e.readSync(r.dataId), [c, u] = M1(i, s.shape, s.dtype, a, l, !0);
  return e.makeTensorInfo(u, s.dtype, c);
}
const Q_ = {
  kernelName: Rd,
  backendName: "webgl",
  kernelFunc: j_
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function J_(n) {
  const { inputs: t, backend: e } = n, { data: s, indices: o, segmentIds: r } = t;
  if (s.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (o.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${o.shape}`);
  if (r.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${r.shape}`);
  const i = e.readSync(s.dataId), a = e.readSync(o.dataId), l = e.readSync(r.dataId), [c, u] = M1(i, s.shape, s.dtype, a, l);
  return e.makeTensorInfo(u, s.dtype, c);
}
const q_ = {
  kernelName: Gd,
  backendName: "webgl",
  kernelFunc: J_
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function tU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { sparseIndices: o, sparseValues: r, defaultValue: i } = t, { outputShape: a } = s, { sliceRank: l, numUpdates: c, sliceSize: u, strides: h, outputSize: d } = wr(r, o, a), p = !1;
  if (r.dtype === "string") {
    const b = e.bufferSync(o), x = e.bufferSync(r), w = Ss(e.readSync(i.dataId)[0]), y = VX(b, x, a, d, u, c, l, h, w, p);
    return e.makeTensorInfo(a, y.dtype, y.values);
  }
  const f = new hw(c, l, o.shape.length, r.shape.length, h, [d, 1], p), g = e.runWebGLProgram(f, [r, o, i], r.dtype), m = dt({ inputs: { x: g }, backend: e, attrs: { shape: a } });
  return e.disposeIntermediateTensorInfo(g), m;
}
const eU = {
  kernelName: ub,
  backendName: "webgl",
  kernelFunc: tU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function nU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { numOrSizeSplits: r, axis: i } = s, a = Dt(i, o.shape)[0], l = af(o, r, a), c = o.shape.length, u = new Array(c).fill(0), h = o.shape.slice();
  return l.map((d) => {
    const p = [...h];
    p[a] = d;
    const f = Dr({ inputs: { x: o }, backend: e, attrs: { begin: u, size: p } });
    return u[a] += d, f;
  });
}
const sU = {
  kernelName: Wc,
  backendName: "webgl",
  kernelFunc: nU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Wg = "return sqrt(x);", oU = Xt({ opSnippet: Wg, packedOpSnippet: Wg, cpuKernelImpl: ZX }), rU = {
  kernelName: Qi,
  backendName: "webgl",
  kernelFunc: oU
};
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const iU = "return x * x;", aU = Xt({ opSnippet: iU }), lU = {
  kernelName: Ld,
  backendName: "webgl",
  kernelFunc: aU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Mg = "return (a - b) * (a - b);", cU = Ae({ opSnippet: Mg, packedOpSnippet: Mg }), uU = {
  kernelName: Ji,
  backendName: "webgl",
  kernelFunc: cU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function hU({ inputs: n, attrs: t, backend: e }) {
  const { x: s } = n, o = jn + `
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `, r = new vs(s.shape, o);
  return e.runWebGLProgram(r, [s], s.dtype);
}
const dU = {
  kernelName: sa,
  backendName: "webgl",
  kernelFunc: hU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class pU {
  constructor(t, e, s) {
    this.variableNames = ["x"], this.outputShape = s;
    const o = s.length, r = se(s.length), i = se(s.length);
    let a = "";
    if (o === 1)
      a = "coords * strides + begin";
    else {
      let l = 0;
      a = s.map((c, u) => (l++, s.length === 1 ? `coords * strides[${u}] + begin[${u}]` : `coords[${l - 1}] * strides[${u}] + begin[${u}]`)).join(",");
    }
    this.userCode = `
      ${r} begin = ${r}(${t});
      ${r} strides = ${r}(${e});

      void main() {
        ${i} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function fU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { begin: r, end: i, strides: a, beginMask: l, endMask: c, ellipsisMask: u, newAxisMask: h, shrinkAxisMask: d } = s, { finalShapeSparse: p, finalShape: f, isIdentity: g, sliceDim0: m, isSimpleSlice: b, begin: x, end: w, strides: y } = tp(o.shape, r, i, a, l, c, u, h, d);
  let I;
  if (g)
    I = dt({ inputs: { x: o }, backend: e, attrs: { shape: f } });
  else if (m || b) {
    S(o.shape.length >= 1, () => `Input must have rank at least 1, got: ${o.shape.length}`);
    const T = qd(x, w, y), k = Dr({ inputs: { x: o }, backend: e, attrs: { begin: x, size: T } });
    I = dt({ inputs: { x: k }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(k);
  } else if (e.shouldExecuteOnCPU([o])) {
    const k = e.readSync(o.dataId), $ = Nt(o.shape, o.dtype, k), G = KX(p, $, y, x);
    I = e.makeTensorInfo(f, o.dtype, G.values);
  } else {
    const k = new pU(x, y, p);
    I = e.runWebGLProgram(k, [o], o.dtype);
  }
  const v = dt({ inputs: { x: I }, backend: e, attrs: { shape: f } });
  return e.disposeIntermediateTensorInfo(I), v;
}
const mU = {
  kernelName: Ed,
  backendName: "webgl",
  kernelFunc: fU
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function gU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { separator: o, nGramWidths: r, leftPad: i, rightPad: a, padWidth: l, preserveShortSequences: c } = s, { data: u, dataSplits: h } = t, d = e.readSync(u.dataId), p = e.readSync(h.dataId), [f, g] = BX(d, p, o, r, i, a, l, c);
  return [
    e.makeTensorInfo([f.length], "string", f),
    e.makeTensorInfo(h.shape, "int32", g)
  ];
}
const bU = {
  kernelName: Wd,
  backendName: "webgl",
  kernelFunc: gU
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function xU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { skipEmpty: o } = s, { input: r, delimiter: i } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (r.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${r.shape}`);
  if (i.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);
  const a = e.readSync(r.dataId), l = e.readSync(i.dataId)[0], [c, u, h] = HX(a, l, o), d = u.length;
  return [
    e.makeTensorInfo([d, 2], "int32", c),
    e.makeTensorInfo([d], "string", u),
    e.makeTensorInfo([2], "int32", new Int32Array(h))
  ];
}
const yU = {
  kernelName: Md,
  backendName: "webgl",
  kernelFunc: xU
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function wU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { numBuckets: o } = s, { input: r } = t;
  if (r.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (o <= 0)
    throw new Error("Number of buckets must be at least 1");
  const i = e.readSync(r.dataId), a = _X(i, o);
  return e.makeTensorInfo(r.shape, "int32", a);
}
const IU = {
  kernelName: Dd,
  backendName: "webgl",
  kernelFunc: wU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const CU = "return tan(x);", vU = Xt({ opSnippet: CU }), SU = {
  kernelName: ta,
  backendName: "webgl",
  kernelFunc: vU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kU = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`, TU = Xt({ opSnippet: kU }), NU = {
  kernelName: ea,
  backendName: "webgl",
  kernelFunc: TU
};
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class $U {
  constructor(t, e) {
    this.variableNames = ["A"];
    const s = new Array(t.length);
    for (let i = 0; i < s.length; i++)
      s[i] = t[i] * e[i];
    this.outputShape = s, this.rank = s.length;
    const o = se(this.rank), r = RU(t);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        setOutput(getA(${r}));
      }
    `;
  }
}
function RU(n) {
  const t = n.length;
  if (t > 5)
    throw Error(`Tile for rank ${t} is not yet supported`);
  if (t === 1)
    return `imod(resRC, ${n[0]})`;
  const e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], s = [];
  for (let o = 0; o < n.length; o++)
    s.push(`imod(${e[o]}, ${n[o]})`);
  return s.join();
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function dw(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { reps: r } = s;
  if (o.dtype === "string" || o.shape.length > 5) {
    const l = e.readSync(o.dataId), c = o.dtype === "string" ? l.map((d) => Ss(d)) : l, u = Nt(o.shape, o.dtype, c), h = YX(u, r);
    return e.makeTensorInfo(h.shape, h.dtype, h.values);
  }
  const i = new $U(o.shape, r);
  return e.runWebGLProgram(i, [o], o.dtype);
}
const GU = {
  kernelName: na,
  backendName: "webgl",
  kernelFunc: dw
};
class LU {
  /**
   * @param shape desired output shape (can be larger than input shape, output
   *                                    will be padded with -Infinity)
   */
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "negativeInf", type: "float" },
      { name: "dir", type: "int" },
      { name: "inc", type: "int" }
    ], this.outputShape = t, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
}
class EU {
  /**
   * @param shape desired output shape (must be half of the input size)
   */
  constructor(t) {
    this.variableNames = ["x", "indices"], this.customUniforms = [
      { name: "n", type: "int" },
      { name: "firstPass", type: "int" },
      { name: "k", type: "int" }
    ], this.outputShape = t, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function co(n, t) {
  t !== null && n.disposeIntermediateTensorInfo(t);
}
function Dg(n) {
  let t = 1;
  for (; t < n; )
    t *= 2;
  return t;
}
function WU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o } = t, { k: r, sorted: i } = s, a = B().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), l = B().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), c = o.shape, u = c[c.length - 1];
  if (e.shouldExecuteOnCPU([o]) || u < a || r > l) {
    const G = e.readSync(o.dataId), [z, A] = jX(G, c, o.dtype, r, i);
    return [
      e.makeTensorInfo(z.shape, z.dtype, z.values),
      e.makeTensorInfo(A.shape, A.dtype, A.values)
    ];
  }
  if (r === 0)
    return c[c.length - 1] = 0, [
      e.makeTensorInfo(c, o.dtype, []),
      e.makeTensorInfo(c, "int32", [])
    ];
  if (u === 1)
    return [
      o,
      La({ attrs: { shape: c, dtype: "int32", value: 0 }, backend: e })
    ];
  const h = e.texData.get(o.dataId), d = h !== null && h.isPacked, p = d ? e.unpackTensor(o) : o, g = H(c) / u, m = dt({ inputs: { x: p }, attrs: { shape: [g, u] }, backend: e });
  d && co(e, p);
  const b = Dg(r), x = Dg(u);
  let w = null;
  const y = () => w === null ? [m, m] : [m, w], I = (G, z, A) => {
    const Z = y(), _ = new LU(A), U = [[u], [w === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [G], [z]], q = w;
    w = e.runWebGLProgram(_, Z, "int32", U), co(e, q);
  };
  for (let G = 1; G < b; G *= 2) {
    const z = G * 2;
    for (let A = G; A >= 1; A /= 2)
      I(z, A, [g, x]);
  }
  for (let G = x; G > b; G /= 2) {
    const z = y(), A = new EU([g, G / 2]), _ = [[u], [w === null ? 1 : 0], [b]], K = w;
    w = e.runWebGLProgram(A, z, "int32", _), co(e, K);
    const U = b / 2, q = U * 2;
    for (let j = U; j >= 1; j /= 2)
      I(q, j, w.shape);
  }
  let v = w;
  w = Dr({ inputs: { x: w }, backend: e, attrs: { begin: 0, size: [g, r] } }), co(e, v);
  let T = sw({ inputs: { x: m, indices: w }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  co(e, m);
  const k = c.slice(0, -1);
  k.push(r), v = w, w = dt({ inputs: { x: w }, attrs: { shape: k }, backend: e }), co(e, v);
  const $ = T;
  return T = dt({ inputs: { x: T }, attrs: { shape: k }, backend: e }), co(e, $), [T, w];
}
const MU = {
  kernelName: Fd,
  backendName: "webgl",
  kernelFunc: WU
};
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class DU {
  constructor(t, e, s, o, r, i) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = i;
    const a = s === "nearest" ? 1 : 2;
    let l;
    switch (o) {
      case "constant":
        l = 1;
        break;
      case "reflect":
        l = 2;
        break;
      case "wrap":
        l = 3;
        break;
      case "nearest":
        l = 4;
        break;
      default:
        l = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${l} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${l} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${r});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${r});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${a} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function FU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { image: o, transforms: r } = t, { interpolation: i, fillMode: a, fillValue: l, outputShape: c } = s, [u, h, d, p] = o.shape, [f, g] = c ?? [h, d], m = [
    u,
    f,
    g,
    p
  ], b = new DU(h, d, i, a, l, m);
  return e.runWebGLProgram(b, [o, r], "float32");
}
const zU = {
  kernelName: zd,
  backendName: "webgl",
  kernelFunc: FU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function VU(n) {
  const { inputs: t, attrs: e, backend: s } = n, { axis: o } = e, { x: r } = t;
  Ta(r, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  const i = s.readSync(r.dataId), { outputValues: a, outputShape: l, indices: c } = QX(i, o, r.shape, r.dtype);
  return [
    s.makeTensorInfo(l, r.dtype, a),
    s.makeTensorInfo([c.length], "int32", c)
  ];
}
const PU = {
  kernelName: Vd,
  backendName: "webgl",
  kernelFunc: VU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function XU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { value: o } = t;
  let { axis: r } = s;
  r < 0 && (r += o.shape.length);
  const i = o, a = i.shape.length, l = o.shape[r], c = new Array(a - 1);
  let u = 0;
  for (let g = 0; g < a; g++)
    g !== r && (c[u++] = i.shape[g]);
  const h = [], d = new Array(a).fill(0), p = i.shape.slice();
  p[r] = 1;
  const f = new Array(l);
  for (let g = 0; g < f.length; g++) {
    d[r] = g;
    const m = Dr({ inputs: { x: i }, backend: e, attrs: { begin: d, size: p } }), b = dt({ inputs: { x: m }, backend: e, attrs: { shape: c } });
    f[g] = b, h.push(m);
  }
  return h.forEach((g) => e.disposeIntermediateTensorInfo(g)), f;
}
const OU = {
  kernelName: Dc,
  backendName: "webgl",
  kernelFunc: XU
};
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class AU {
  constructor(t, e) {
    this.variableNames = ["x", "segmentIds"];
    const s = t.windowSize, o = t.batchSize, r = t.inSize, i = t.numSegments, a = i * Math.ceil(r / s);
    this.outputShape = [o, a];
    const l = "0.0", c = "sumValue", u = Math.floor(s / 4) * 4, h = s % 4, d = `
        sumValue += dot(values, segFilter);
    `;
    let p = "";
    r % s > 0 && (p = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return initializationValue;
        }
      `);
    let f = "";
    r % s > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${r}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${l};

      float getValue(int batch, int inIdx) {
        ${p}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${i})) * float(${s}));
        int currentSeg = int(mod(float(outIdx), float(${i})));

        float sumValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${d}
        }

        int inIdx = inOffset + ${u};
        if (${h === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${d}
        } else if (${h === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${d}
        } else if (${h === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${d}
        }
        setOutput(${c});
      }
    `;
  }
}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function ZU(n) {
  const { inputs: t, backend: e, attrs: s } = n, { x: o, segmentIds: r } = t, { numSegments: i } = s, a = o.shape.length, l = [];
  let c = 0;
  const u = me([c], a);
  let h = o;
  u != null && (h = je({ inputs: { x: o }, backend: e, attrs: { perm: u } }), l.push(h), c = Ie(1, a)[0]);
  const d = E0(h.shape, c, i), p = H([h.shape[c]]), f = dt({ inputs: { x: h }, backend: e, attrs: { shape: [-1, p] } });
  l.push(f);
  const g = Zd(o.dtype), m = (y, I, v, T, k) => {
    const $ = y.shape[0], G = y.shape[1], z = L0(G, k), A = { windowSize: z, inSize: G, batchSize: $, numSegments: k }, Z = new AU(A, I), _ = e.compileAndRun(Z, [y, v], T);
    if (l.push(_), _.shape[1] === k)
      return _;
    const K = uw({
      backend: e,
      attrs: { start: 0, stop: k, step: 1, dtype: "float32" }
    }), U = dw({
      inputs: { x: K },
      backend: e,
      attrs: { reps: [G / z] }
    });
    return l.push(K), l.push(U), m(_, I, U, T, k);
  }, b = m(f, "unsortedSegmentSum", r, g, i), x = dt({ inputs: { x: b }, backend: e, attrs: { shape: d } });
  let w = x;
  if (u != null) {
    l.push(x);
    const y = qs(u);
    w = je({ inputs: { x: w }, backend: e, attrs: { perm: y } });
  }
  return l.forEach((y) => e.disposeIntermediateTensorInfo(y)), w;
}
const KU = {
  kernelName: Fc,
  backendName: "webgl",
  kernelFunc: ZU
};
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const BU = [
  AO,
  KO,
  _O,
  jO,
  JO,
  eA,
  sA,
  rA,
  cA,
  hA,
  fA,
  bA,
  wA,
  SA,
  NA,
  RA,
  LA,
  DA,
  zA,
  PA,
  ZA,
  jA,
  JA,
  tZ,
  iZ,
  lZ,
  dZ,
  kO,
  mZ,
  wZ,
  SZ,
  GZ,
  EZ,
  MZ,
  FZ,
  VZ,
  OZ,
  KZ,
  _Z,
  YZ,
  QZ,
  qZ,
  nK,
  oK,
  lK,
  uK,
  pK,
  gK,
  xK,
  CK,
  TK,
  GK,
  WK,
  FK,
  zK,
  PK,
  OK,
  ZK,
  BK,
  _K,
  QK,
  tB,
  sB,
  rB,
  lB,
  hB,
  mB,
  yB,
  SO,
  IB,
  xZ,
  SB,
  NB,
  GB,
  NO,
  MB,
  VB,
  XB,
  KB,
  _B,
  QB,
  tH,
  oH,
  lH,
  hH,
  pH,
  bH,
  yH,
  IH,
  kH,
  NH,
  RH,
  LH,
  WH,
  zH,
  OH,
  BH,
  qH,
  GO,
  s9,
  i9,
  c9,
  d9,
  nZ,
  m9,
  b9,
  y9,
  C9,
  T9,
  RO,
  $9,
  G9,
  E9,
  W9,
  sZ,
  YH,
  F9,
  X9,
  K9,
  EO,
  U9,
  Q9,
  e_,
  o_,
  l_,
  u_,
  p_,
  g_,
  x_,
  I_,
  S_,
  N_,
  L_,
  M_,
  z_,
  X_,
  UA,
  QH,
  Z_,
  B_,
  __,
  Y_,
  Q_,
  q_,
  eU,
  sU,
  rU,
  lU,
  uU,
  dU,
  mU,
  bU,
  yU,
  IU,
  jH,
  PO,
  SU,
  NU,
  GU,
  MU,
  zU,
  XO,
  PU,
  OU,
  KU,
  g9
];
for (const n of BU)
  bn(n);
const pw = "", Fg = typeof window < "u" && window.Blob && new Blob([atob(pw)], { type: "text/javascript;charset=utf-8" });
function HU() {
  const n = Fg && (window.URL || window.webkitURL).createObjectURL(Fg);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + pw);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
const _U = (n, t) => [
  [
    n[0][0] * t[0][0] + n[0][2] * t[2][0],
    n[0][0] * t[0][1] + n[0][2] * t[2][1],
    n[0][0] * t[0][2] + n[0][2] * t[2][2],
    n[0][0] * t[0][3] + n[0][2] * t[2][3]
  ],
  [
    n[1][1] * t[1][0] + n[1][2] * t[2][0],
    n[1][1] * t[1][1] + n[1][2] * t[2][1],
    n[1][1] * t[1][2] + n[1][2] * t[2][2],
    n[1][1] * t[1][3] + n[1][2] * t[2][3]
  ],
  [
    t[2][0],
    t[2][1],
    t[2][2],
    t[2][3]
  ]
], UU = (n, t, e, s) => {
  const o = n[0][0] * t + n[0][1] * e + n[0][3], r = n[1][0] * t + n[1][1] * e + n[1][3], i = n[2][0] * t + n[2][1] * e + n[2][3];
  return { x: o, y: r, z: i };
}, YU = (n, t, e, s) => {
  const { x: o, y: r, z: i } = UU(n, t, e);
  return { x: o / i, y: r / i };
}, jU = 6, QU = 1, JU = 10, qU = 1, t5 = 0.8, e5 = 1, cs = 1e3;
class n5 {
  constructor(t, e, s, o, r, i = !1) {
    this.markerDimensions = t, this.trackingDataList = e, this.projectionTransform = s, this.debugMode = i, this.trackingKeyframeList = [];
    for (let l = 0; l < e.length; l++)
      this.trackingKeyframeList.push(e[l][e5]);
    let a = 0;
    for (let l = 0; l < this.trackingKeyframeList.length; l++)
      a = Math.max(a, this.trackingKeyframeList[l].points.length);
    this.featurePointsListT = [], this.imagePixelsListT = [], this.imagePropertiesListT = [];
    for (let l = 0; l < this.trackingKeyframeList.length; l++) {
      const { featurePoints: c, imagePixels: u, imageProperties: h } = this._prebuild(this.trackingKeyframeList[l], a);
      this.featurePointsListT[l] = c, this.imagePixelsListT[l] = u, this.imagePropertiesListT[l] = h;
    }
    this.kernelCaches = {};
  }
  dummyRun(t) {
    let e = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]];
    for (let s = 0; s < this.featurePointsListT.length; s++)
      this.track(t, e, s);
  }
  track(t, e, s) {
    let o = {};
    const r = _U(this.projectionTransform, e), i = this._buildAdjustedModelViewTransform(r);
    this.markerDimensions[s][0], this.markerDimensions[s][1], this.trackingKeyframeList[s].width, this.trackingKeyframeList[s].height;
    const a = this.featurePointsListT[s], l = this.imagePixelsListT[s], c = this.imagePropertiesListT[s], u = this._computeProjection(i, t, s), { matchingPointsT: h, simT: d } = this._computeMatching(a, l, c, u), p = h.arraySync(), f = d.arraySync(), g = this.trackingKeyframeList[s], m = [], b = [], x = [];
    for (let w = 0; w < p.length; w++)
      if (f[w] > t5 && w < g.points.length) {
        x.push(w);
        const y = YU(r, p[w][0], p[w][1]);
        b.push(y), m.push({ x: g.points[w].x / g.scale, y: g.points[w].y / g.scale, z: 0 });
      }
    return this.debugMode && (o = {
      projectedImage: u.arraySync(),
      matchingPoints: h.arraySync(),
      goodTrack: x,
      trackedPoints: b
    }), i.dispose(), u.dispose(), h.dispose(), d.dispose(), { worldCoords: m, screenCoords: b, debugExtra: o };
  }
  _computeMatching(t, e, s, o) {
    const r = jU, i = r * 2 + 1, l = JU * QU, c = qU, u = l * 2 + 1, h = o.shape[0], d = o.shape[1], p = t.shape[0];
    if (!this.kernelCaches.computeMatching) {
      const f = {
        variableNames: ["features", "markerPixels", "markerProperties", "targetPixels"],
        outputShape: [p, u * u],
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    int featureIndex = coords[0];
	    int searchOffsetIndex = coords[1];

	    int markerWidth = int(getMarkerProperties(0));
	    int markerHeight = int(getMarkerProperties(1));
	    float markerScale = getMarkerProperties(2);

	    int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	    int searchOffsetY = searchOffsetIndex / ${u} * ${c};

	    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);
	    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);

	    int sx = sCenterX + searchOffsetX - ${l};
	    int sy = sCenterY + searchOffsetY - ${l};

	    if (sx < ${r} || sx >= (${d} - ${r}) || sy < ${r} || sy >= (${h} - ${r})) {
	      setOutput(-2.);
	    } 
	    else {
	      float sumPoint = 0.;
	      float sumPointSquare = 0.;
	      float sumTemplate = 0.;
	      float sumTemplateSquare = 0.;
	      float sumPointTemplate = 0.;

	      for (int templateOffsetY = 0; templateOffsetY < ${i}; templateOffsetY++) {
		for (int templateOffsetX = 0; templateOffsetX < ${i}; templateOffsetX++) {
		  int fx2 = sCenterX + templateOffsetX - ${r};
		  int fy2 = sCenterY + templateOffsetY - ${r};

		  int sx2 = sx + templateOffsetX - ${r};
		  int sy2 = sy + templateOffsetY - ${r};

		  int markerPixelIndex = fy2 * markerWidth + fx2;
		  float markerPixel = getMarkerPixels(markerPixelIndex);
		  float targetPixel = getTargetPixels(sy2, sx2);

		  sumTemplate += markerPixel;
		  sumTemplateSquare += markerPixel * markerPixel;
		  sumPoint += targetPixel;
		  sumPointSquare += targetPixel * targetPixel;
		  sumPointTemplate += targetPixel * markerPixel;
		}
	      }

	      // Normalized cross-correlation
	      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)
	      float count = float(${i} * ${i});
	      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);
	      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);

	      if (pointVariance < 0.0000001) {
		setOutput(-3.);
	      } else if (templateVariance < 0.0000001) {
		//setOutput(sumTemplate);
		setOutput(-4.);
	      } else {
		sumPointTemplate -= sumPoint / count * sumTemplate;
		float sim = sumPointTemplate / pointVariance / templateVariance;  
		setOutput(sim);
	      }
	    }
	  }
	`
      }, g = {
        variableNames: ["featurePoints", "markerProperties", "maxIndex"],
        outputShape: [p, 2],
        // [x, y]
        userCode: `
	  void main() {
	    ivec2 coords = getOutputCoords();

	    float markerScale = getMarkerProperties(2);

	    int featureIndex = coords[0];

	    int maxIndex = int(getMaxIndex(featureIndex));
	    int searchLocationIndex = maxIndex / ${u * u};
	    int searchOffsetIndex = imod(maxIndex, ${u * u});

	    if (coords[1] == 0) {
	      int searchOffsetX = imod(searchOffsetIndex, ${u}) * ${c};
	      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - ${l}) / markerScale);
	    }
	    else if (coords[1] == 1) {
	      int searchOffsetY = searchOffsetIndex / ${u} * ${c};
	      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - ${l}) / markerScale);
	    }
	  }
	`
      }, m = {
        variableNames: ["sims", "maxIndex"],
        outputShape: [p],
        userCode: `
	  void main() {
	    int featureIndex = getOutputCoords();
	    int maxIndex = int(getMaxIndex(featureIndex));
	    setOutput(getSims(featureIndex, maxIndex));
	  }
	`
      };
      this.kernelCaches.computeMatching = [f, g, m];
    }
    return X(() => {
      const f = this.kernelCaches.computeMatching, g = this._compileAndRun(f[0], [t, e, s, o]), m = g.argMax(1), b = this._compileAndRun(f[1], [t, s, m]), x = this._compileAndRun(f[2], [g, m]);
      return { matchingPointsT: b, simT: x };
    });
  }
  _computeProjection(t, e, s) {
    const o = this.trackingKeyframeList[s].width, r = this.trackingKeyframeList[s].height, i = this.trackingKeyframeList[s].scale, a = o + "-" + r + "-" + i;
    if (this.kernelCaches.computeProjection || (this.kernelCaches.computeProjection = {}), !this.kernelCaches.computeProjection[a]) {
      const l = {
        variableNames: ["M", "pixel"],
        outputShape: [r, o],
        userCode: `
	  void main() {
	      ivec2 coords = getOutputCoords();

	      float m00 = getM(0, 0) * ${cs}.;
	      float m01 = getM(0, 1) * ${cs}.;
	      float m03 = getM(0, 3) * ${cs}.;
	      float m10 = getM(1, 0) * ${cs}.;
	      float m11 = getM(1, 1) * ${cs}.;
	      float m13 = getM(1, 3) * ${cs}.;
	      float m20 = getM(2, 0) * ${cs}.;
	      float m21 = getM(2, 1) * ${cs}.;
	      float m23 = getM(2, 3) * ${cs}.;

	      float y = float(coords[0]) / float(${i});
	      float x = float(coords[1]) / float(${i});
	      float uz = (x * m20) + (y * m21) + m23;
	      float oneOverUz = 1. / uz;

	      float ux = (x * m00) + (y * m01) + m03;
	      float uy = (x * m10) + (y * m11) + m13;

	      ux = floor(ux * oneOverUz + 0.5);
	      uy = floor(uy * oneOverUz + 0.5);
	      setOutput(getPixel(int(uy), int(ux)));
	    }
	`
      };
      this.kernelCaches.computeProjection[a] = l;
    }
    return X(() => {
      const l = this.kernelCaches.computeProjection[a];
      return this._compileAndRun(l, [t, e]);
    });
  }
  _buildAdjustedModelViewTransform(t) {
    return X(() => {
      let e = [];
      for (let o = 0; o < t.length; o++) {
        e.push([]);
        for (let r = 0; r < t[o].length; r++)
          e[o].push(t[o][r] / cs);
      }
      return _e(e, [3, 4]);
    });
  }
  _prebuild(t, e) {
    return X(() => {
      const s = t.scale, o = [];
      for (let l = 0; l < e; l++)
        l < t.points.length ? o.push([t.points[l].x / s, t.points[l].y / s]) : o.push([-1, -1]);
      const r = _e(t.data, [t.width * t.height]), i = _e([t.width, t.height, t.scale], [3]);
      return {
        featurePoints: _e(o, [o.length, 2], "float32"),
        imagePixels: r,
        imageProperties: i
      };
    });
  }
  _compileAndRun(t, e) {
    const s = Vs().compileAndRun(t, e);
    return le().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
}
const Ha = [
  // ring 5
  {
    sigma: 0.55,
    points: [
      [-1, 0],
      [-0.5, -0.866025],
      [0.5, -0.866025],
      [1, -0],
      [0.5, 0.866025],
      [-0.5, 0.866025]
    ]
  },
  // ring 4
  {
    sigma: 0.475,
    points: [
      [0, 0.930969],
      [-0.806243, 0.465485],
      [-0.806243, -0.465485],
      [-0, -0.930969],
      [0.806243, -0.465485],
      [0.806243, 0.465485]
    ]
  },
  // ring 3
  {
    sigma: 0.4,
    points: [
      [0.847306, -0],
      [0.423653, 0.733789],
      [-0.423653, 0.733789],
      [-0.847306, 0],
      [-0.423653, -0.733789],
      [0.423653, -0.733789]
    ]
  },
  // ring 2
  {
    sigma: 0.325,
    points: [
      [-0, -0.741094],
      [0.641806, -0.370547],
      [0.641806, 0.370547],
      [0, 0.741094],
      [-0.641806, 0.370547],
      [-0.641806, -0.370547]
    ]
  },
  // ring 1
  {
    sigma: 0.25,
    points: [
      [-0.595502, 0],
      [-0.297751, -0.51572],
      [0.297751, -0.51572],
      [0.595502, -0],
      [0.297751, 0.51572],
      [-0.297751, 0.51572]
    ]
  },
  // ring 0
  {
    sigma: 0.175,
    points: [
      [0, 0.362783],
      [-0.314179, 0.181391],
      [-0.314179, -0.181391],
      [-0, -0.362783],
      [0.314179, -0.181391],
      [0.314179, 0.181391]
    ]
  },
  // center
  {
    sigma: 0.1,
    points: [
      [0, 0]
    ]
  }
], Do = [];
for (let n = 0; n < Ha.length; n++) {
  const t = Ha[n].sigma;
  for (let e = 0; e < Ha[n].points.length; e++) {
    const s = Ha[n].points[e];
    Do.push([t, s[0], s[1]]);
  }
}
const Fu = {};
function s5(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!Fu.hasOwnProperty(s)) {
    const o = {
      variableNames: ["p"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0], coords[1]-2);
          sum += getP(coords[0], coords[1]-1) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0], coords[1]+1) * 4.;
          sum += getP(coords[0], coords[1]+2);
          setOutput(sum);
        }
      `
    }, r = {
      variableNames: ["p"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();

          float sum = getP(coords[0]-2, coords[1]);
          sum += getP(coords[0]-1, coords[1]) * 4.;
          sum += getP(coords[0], coords[1]) * 6.;
          sum += getP(coords[0]+1, coords[1]) * 4.;
          sum += getP(coords[0]+2, coords[1]);
          sum /= 256.;
          setOutput(sum);
        }
      `
    };
    Fu[s] = [o, r];
  }
  return Fu[s];
}
const o5 = (n) => {
  const t = n.inputs.image, e = n.backend, [s, o] = s5(t), r = e.runWebGLProgram(s, [t], t.dtype), i = e.runWebGLProgram(o, [r], t.dtype);
  return e.disposeIntermediateTensorInfo(r), i;
}, r5 = {
  //: KernelConfig
  kernelName: "BinomialFilter",
  backendName: "webgl",
  kernelFunc: o5
  // as {} as KernelFunc,
}, _a = 7, zg = 3, i5 = zg * zg, zu = 4, a5 = (zu + 1) * (zu + 1) / zu, Vu = {};
function l5(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!Vu.hasOwnProperty(s)) {
    const o = {
      variableNames: ["image0", "image1", "image2"],
      outputShape: [e, t],
      userCode: `
        void main() {
          ivec2 coords = getOutputCoords();
    
          int y = coords[0];
          int x = coords[1];
    
          float value = getImage1(y, x);
    
          // Step 1: find local maxima/minima
          if (value * value < ${i5}.) {
            setOutput(0.);
            return;
          }
          if (y < ${_a} || y > ${e - 1 - _a}) {
            setOutput(0.);
            return;
          }
          if (x < ${_a} || x > ${t - 1 - _a}) {
            setOutput(0.);
            return;
          }
    
          bool isMax = true;
          bool isMin = true;
          for (int dy = -1; dy <= 1; dy++) {
            for (int dx = -1; dx <= 1; dx++) {
              float value0 = getImage0(y+dy, x+dx);
              float value1 = getImage1(y+dy, x+dx);
              float value2 = getImage2(y+dy, x+dx);
    
        if (value < value0 || value < value1 || value < value2) {
          isMax = false;
        }
        if (value > value0 || value > value1 || value > value2) {
          isMin = false;
        }
            }
          }
    
          if (!isMax && !isMin) {
            setOutput(0.);
            return;
          }
    
          // compute edge score and reject based on threshold
          float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);
          float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);
          float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));
    
          float det = (dxx * dyy) - (dxy * dxy);
    
          if (abs(det) < 0.0001) { // determinant undefined. no solution
            setOutput(0.);
            return;
          }
    
          float edgeScore = (dxx + dyy) * (dxx + dyy) / det;
    
          if (abs(edgeScore) >= ${a5} ) {
            setOutput(0.);
            return;
          }
          setOutput(getImage1(y,x));
        }
      `
    };
    Vu[s] = o;
  }
  return Vu[s];
}
const c5 = (n) => {
  let { image0: t, image1: e, image2: s } = n.inputs;
  const o = n.backend, r = l5(e);
  return t = le().runKernel("DownsampleBilinear", { image: t }), s = le().runKernel("UpsampleBilinear", { image: s, targetImage: e }), o.runWebGLProgram(r, [t, e, s], e.dtype);
}, u5 = {
  //: KernelConfig
  kernelName: "BuildExtremas",
  backendName: "webgl",
  kernelFunc: c5
  // as {} as KernelFunc,
}, Vr = 36, Pu = {};
function h5(n) {
  const t = n.shape[0];
  if (!Pu.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0]],
      userCode: `
            void main() {
                int featureIndex = getOutputCoords();

                int maxIndex = 0;
                for (int i = 1; i < ${Vr}; i++) {
                    if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {
                        maxIndex = i;
                    }
                }

                int prev = imod(maxIndex - 1 + ${Vr}, ${Vr});
                int next = imod(maxIndex + 1, ${Vr});

                /**
                 * Fit a quatratic to 3 points. The system of equations is:
                 *
                 * y0 = A*x0^2 + B*x0 + C
                 * y1 = A*x1^2 + B*x1 + C
                 * y2 = A*x2^2 + B*x2 + C
                 *
                 * This system of equations is solved for A,B,C.
                 */
                float p10 = float(maxIndex - 1);
                float p11 = getHistogram(featureIndex, prev); 
                float p20 = float(maxIndex);
                float p21 = getHistogram(featureIndex, maxIndex); 
                float p30 = float(maxIndex + 1);
                float p31 = getHistogram(featureIndex, next); 

                float d1 = (p30-p20)*(p30-p10);
                float d2 = (p10-p20)*(p30-p10);
                float d3 = p10-p20;

                // If any of the denominators are zero then, just use maxIndex.
                    float fbin = float(maxIndex);
                if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {
                float a = p10*p10;
                float b = p20*p20;

                // Solve for the coefficients A,B,C
                float A = ((p31-p21)/d1)-((p11-p21)/d2);
                float B = ((p11-p21)+(A*(b-a)))/d3;
                float C = p11-(A*a)-(B*p10);
                fbin = -B / (2. * A);
                }

                float an = 2.0 *${Math.PI} * (fbin + 0.5) / ${Vr}. - ${Math.PI};
                setOutput(an);
            }
            `
    };
    Pu[t] = e;
  }
  return Pu[t];
}
const d5 = (n) => {
  const { histograms: t } = n.inputs, e = n.backend, s = h5(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, p5 = {
  //: KernelConfig
  kernelName: "ComputeExtremaAngles",
  backendName: "webgl",
  kernelFunc: d5
  // as {} as KernelFunc,
}, Vg = 7, Xu = {};
function f5(n, t) {
  const e = `${n}|${t.shape[0]}`;
  if (!Xu.hasOwnProperty(e)) {
    const s = [];
    for (let i = 1; i < n; i++)
      s.push("image" + i);
    let o = "float getPixel(int octave, int y, int x) {";
    for (let i = 1; i < n; i++)
      o += `
  if (octave == ${i}) {
	return getImage${i}(y, x);
  }
`;
    o += "}";
    const r = {
      variableNames: [...s, "extrema", "angles", "freakPoints"],
      outputShape: [t.shape[0], Do.length],
      userCode: `
  ${o}
  void main() {
	ivec2 coords = getOutputCoords();
	int featureIndex = coords[0];
	int freakIndex = coords[1];

	float freakSigma = getFreakPoints(freakIndex, 0);
	float freakX = getFreakPoints(freakIndex, 1);
	float freakY = getFreakPoints(freakIndex, 2);

	int octave = int(getExtrema(featureIndex, 1));
	float inputY = getExtrema(featureIndex, 2);
	float inputX = getExtrema(featureIndex, 3);
	float inputAngle = getAngles(featureIndex);
	float cos = ${Vg}. * cos(inputAngle);
	float sin = ${Vg}. * sin(inputAngle);

	float yp = inputY + freakX * sin + freakY * cos;
	float xp = inputX + freakX * cos + freakY * -sin;

	int x0 = int(floor(xp));
	int x1 = x0 + 1;
	int y0 = int(floor(yp));
	int y1 = y0 + 1;

	float f1 = getPixel(octave, y0, x0);
	float f2 = getPixel(octave, y0, x1);
	float f3 = getPixel(octave, y1, x0);
	float f4 = getPixel(octave, y1, x1);

	float x1f = float(x1);
	float y1f = float(y1);
	float x0f = float(x0);
	float y0f = float(y0);

	// ratio for interpolation between four neighbouring points
	float value = (x1f - xp) * (y1f - yp) * f1
		+ (xp - x0f) * (y1f - yp) * f2
		+ (x1f - xp) * (yp - y0f) * f3
		+ (xp - x0f) * (yp - y0f) * f4;

	setOutput(value);
  }
`
    };
    Xu[e] = r;
  }
  return Xu[e];
}
const m5 = (n) => {
  const { gaussianImagesT: t, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: o, pyramidImagesLength: r } = n.inputs, i = n.backend, a = f5(r, e);
  return i.runWebGLProgram(a, [...t, e, s, o], "float32");
}, g5 = {
  //: KernelConfig
  kernelName: "ComputeExtremaFreak",
  backendName: "webgl",
  kernelFunc: m5
  // as {} as KernelFunc,
}, fw = (Do.length - 1) * Do.length / 2, b5 = Math.ceil(fw / 8), Ou = {};
function x5(n) {
  const t = `${n.shape[0]}`;
  if (!Ou.hasOwnProperty(t)) {
    const e = {
      variableNames: ["freak", "p"],
      outputShape: [n.shape[0], b5],
      userCode: `
  void main() {
    ivec2 coords = getOutputCoords();
    int featureIndex = coords[0];
    int descIndex = coords[1] * 8;

    int sum = 0;
    for (int i = 0; i < 8; i++) {
      if (descIndex + i >= ${fw}) {
        continue;
      }

      int p1 = int(getP(descIndex + i, 0));
      int p2 = int(getP(descIndex + i, 1));

      float v1 = getFreak(featureIndex, p1);
      float v2 = getFreak(featureIndex, p2);

      if (v1 < v2 + 0.01) {
        sum += int(pow(2.0, float(7 - i)));
      }
    }
    setOutput(float(sum));
  }
`
    };
    Ou[t] = e;
  }
  return Ou[t];
}
const y5 = (n) => {
  const { extremaFreaks: t, positionT: e } = n.inputs, { backend: s } = n, o = x5(t);
  return s.runWebGLProgram(o, [t, e], "int32");
}, w5 = {
  //: KernelConfig
  kernelName: "ComputeFreakDescriptors",
  backendName: "webgl",
  kernelFunc: y5
  // as {} as KernelFunc,
}, Au = {};
function I5(n, t) {
  const e = `${n}|${t}`;
  if (!Au.hasOwnProperty(e)) {
    const s = [];
    let o = "float getPixel(int octave, int y, int x) {";
    for (let r = 1; r < n; r++)
      s.push("image" + r), o += `
				if (octave == ${r}) {
					return getImage${r}(y, x);
				}
			`;
    o += "}", Au[e] = {
      variableNames: [...s, "extrema"],
      outputShape: [t, 3, 3],
      // 3x3 pixels around the extrema
      userCode: `
			${o}
		
			void main() {
				ivec3 coords = getOutputCoords();
				int featureIndex = coords[0];
				float score = getExtrema(featureIndex, 0);
				if (score == 0.0) {
					return;
				}
		
				int dy = coords[1]-1;
				int dx = coords[2]-1;
				int octave = int(getExtrema(featureIndex, 1));
				int y = int(getExtrema(featureIndex, 2));
				int x = int(getExtrema(featureIndex, 3));
				setOutput(getPixel(octave, y+dy, x+dx));
			}
			`
    };
  }
  return Au[e];
}
const C5 = (n) => {
  const { prunedExtremasList: t, dogPyramidImagesT: e } = n.inputs, s = n.backend, o = I5(e.length, t.length), r = _e(t, [t.length, t[0].length], "int32");
  return s.runWebGLProgram(o, [...e.slice(1), r], e[0].dtype);
}, v5 = {
  //: KernelConfig
  kernelName: "ComputeLocalization",
  backendName: "webgl",
  kernelFunc: C5
  // as {} as KernelFunc,
}, S5 = 0.159154943091895, Uo = 36, Zu = {};
function k5(n, t, e) {
  const s = `${e}|${n.shape[0]}|${t.shape[0]}`;
  if (!Zu.hasOwnProperty(s)) {
    const o = [];
    for (let l = 1; l < e; l++)
      o.push("image" + l);
    let r = "float getPixel(int octave, int y, int x) {";
    for (let l = 1; l < e; l++)
      r += `
            if (octave == ${l}) {
                return getImage${l}(y, x);
            }
            `;
    r += "}";
    const i = {
      variableNames: [...o, "extrema", "radial"],
      outputShape: [n.shape[0], t.shape[0], 2],
      // last dimension: [fbin, magnitude]
      userCode: `
                ${r}

                void main() {
                    ivec3 coords = getOutputCoords();
                    int featureIndex = coords[0];
                    int radialIndex = coords[1];
                    int propertyIndex = coords[2];

                    int radialY = int(getRadial(radialIndex, 0));
                    int radialX = int(getRadial(radialIndex, 1));
                    float radialW = getRadial(radialIndex, 2);

                    int octave = int(getExtrema(featureIndex, 1));
                    int y = int(getExtrema(featureIndex, 2));
                    int x = int(getExtrema(featureIndex, 3));

                    int xp = x + radialX;
                    int yp = y + radialY;

                    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);
                    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);

                    if (propertyIndex == 0) {
                    // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0
                    
                    float angle = atan(dy, dx) + ${Math.PI};
                    float fbin = angle * ${Uo}. * ${S5};
                    setOutput(fbin);
                    return;
                    }

                    if (propertyIndex == 1) {
                        float mag = sqrt(dx * dx + dy * dy);
                        float magnitude = radialW * mag;
                        setOutput(magnitude);
                        return;
                    }
                }

                `
    }, a = {
      variableNames: ["fbinMag"],
      outputShape: [n.shape[0], Uo],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int featureIndex = coords[0];
                int binIndex = coords[1];

                float sum = 0.;
                for (int i = 0; i < ${t.shape[0]}; i++) {
                    float fbin = getFbinMag(featureIndex, i, 0);
                    int bin = int(floor(fbin - 0.5));
                    int b1 = imod(bin + ${Uo}, ${Uo});
                    int b2 = imod(bin + 1 + ${Uo}, ${Uo});

                    if (b1 == binIndex || b2 == binIndex) {
                        float magnitude = getFbinMag(featureIndex, i, 1);
                        float w2 = fbin - float(bin) - 0.5;
                        float w1 = w2 * -1. + 1.;

                        if (b1 == binIndex) {
                            sum += w1 * magnitude;
                        }
                        if (b2 == binIndex) {
                            sum += w2 * magnitude;
                        }
                    }
                }
                setOutput(sum);
            }
            `
    };
    Zu[s] = [i, a];
  }
  return Zu[s];
}
const T5 = (n) => {
  const { gaussianImagesT: t, prunedExtremasT: e, radialPropertiesT: s, pyramidImagesLength: o } = n.inputs, r = n.backend, [i, a] = k5(e, s, o), l = r.runWebGLProgram(i, [...t, e, s], s.dtype), c = r.runWebGLProgram(a, [l], s.dtype);
  return r.disposeIntermediateTensorInfo(l), c;
}, N5 = {
  kernelName: "ComputeOrientationHistograms",
  backendName: "webgl",
  kernelFunc: T5
  // as {} as KernelFunc,
}, Ku = {};
function $5(n) {
  const t = n.shape[1], e = n.shape[0], s = "w" + t + "h" + e;
  if (!Ku.hasOwnProperty(s)) {
    const o = {
      variableNames: ["p"],
      outputShape: [Math.floor(e / 2), Math.floor(t / 2)],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();
                int y = coords[0] * 2;
                int x = coords[1] * 2;
        
                float sum = getP(y, x) * 0.25;
                sum += getP(y+1,x) * 0.25; 
                sum += getP(y, x+1) * 0.25; 
                sum += getP(y+1,x+1) * 0.25;
                setOutput(sum);
            }
            `
    };
    Ku[s] = o;
  }
  return Ku[s];
}
const R5 = (n) => {
  const t = n.inputs.image, e = n.backend, s = $5(t);
  return e.runWebGLProgram(s, [t], t.dtype);
}, G5 = {
  //: KernelConfig
  kernelName: "DownsampleBilinear",
  backendName: "webgl",
  kernelFunc: R5
  // as {} as KernelFunc,
}, L5 = (n) => {
  const { extremasResultT: t } = n.inputs, e = n.backend, s = t.shape[0], o = t.shape[1], r = {
    variableNames: ["extrema"],
    outputShape: [Math.floor(s / 2), Math.floor(o / 2)],
    userCode: `
		  void main() {
			ivec2 coords = getOutputCoords();
			int y = coords[0] * 2;
			int x = coords[1] * 2;
  
			float location = 0.0;
			float values = getExtrema(y, x);
  
			if (getExtrema(y+1, x) != 0.0) {
			  location = 1.0;
		  values = getExtrema(y+1, x);
			}
			else if (getExtrema(y, x+1) != 0.0) {
			  location = 2.0;
		  values = getExtrema(y, x+1);
			}
			else if (getExtrema(y+1, x+1) != 0.0) {
			  location = 3.0;
		  values = getExtrema(y+1, x+1);
			}
  
			if (values < 0.0) {
			  setOutput(location * -1000.0 + values);
			} else {
			  setOutput(location * 1000.0 + values);
			}
		  }
		`
  };
  return e.runWebGLProgram(r, [t], t.dtype);
}, E5 = {
  //: KernelConfig
  kernelName: "ExtremaReduction",
  backendName: "webgl",
  kernelFunc: L5
  // as {} as KernelFunc,
}, Ua = 36, W5 = 5, Bu = {};
function M5(n) {
  const t = `h${n.shape[0]}`;
  if (!Bu.hasOwnProperty(t)) {
    const e = {
      variableNames: ["histogram"],
      outputShape: [n.shape[0], Ua],
      userCode: `
            void main() {
                ivec2 coords = getOutputCoords();

                int featureIndex = coords[0];
                int binIndex = coords[1];

                int prevBin = imod(binIndex - 1 + ${Ua}, ${Ua});
                int nextBin = imod(binIndex + 1, ${Ua});
                float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);

                setOutput(result);
            }
            `
    };
    Bu[t] = e;
  }
  return Bu[t];
}
const D5 = (n) => {
  let { histograms: t } = n.inputs;
  const e = n.backend, s = M5(t);
  for (let o = 0; o < W5; o++) {
    const r = t;
    t = e.runWebGLProgram(s, [t], t.dtype), o > 0 && e.disposeIntermediateTensorInfo(r);
  }
  return t;
}, F5 = {
  //: KernelConfig
  kernelName: "SmoothHistograms",
  backendName: "webgl",
  kernelFunc: D5
  // as {} as KernelFunc,
}, Hu = {};
function z5(n, t) {
  const e = t.shape[1], s = t.shape[0], o = "w" + e + "h" + s;
  if (!Hu.hasOwnProperty(o)) {
    const r = {
      variableNames: ["p"],
      outputShape: [s, e],
      userCode: `
              void main() {
                ivec2 coords = getOutputCoords();
                int j = coords[0];
                int i = coords[1];
        
                float sj = 0.5 * float(j) - 0.25; 
                float si = 0.5 * float(i) - 0.25;
        
                float sj0 = floor(sj);
                float sj1 = ceil(sj);
                float si0 = floor(si);
                float si1 = ceil(si);
        
                int sj0I = int(sj0);
                int sj1I = int(sj1);
                int si0I = int(si0);
                int si1I = int(si1);
        
                float sum = 0.0;
                sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
                sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
                sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
                sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
                setOutput(sum);
              }
            `
    };
    Hu[o] = r;
  }
  return Hu[o];
}
const V5 = (n) => {
  const { image: t, targetImage: e } = n.inputs, s = n.backend, o = z5(t, e);
  return s.runWebGLProgram(o, [t], t.dtype);
}, P5 = {
  //: KernelConfig
  kernelName: "UpsampleBilinear",
  backendName: "webgl",
  kernelFunc: V5
  // as {} as KernelFunc,
};
bn(r5);
bn(u5);
bn(p5);
bn(g5);
bn(w5);
bn(v5);
bn(N5);
bn(G5);
bn(E5);
bn(F5);
bn(P5);
const Pg = 8, X5 = 5, Pr = 10, O5 = 5, _u = 3, A5 = 1.5;
(Do.length - 1) * Do.length / 2;
class mw {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let o = 0;
    for (; t >= Pg && e >= Pg && (t /= 2, e /= 2, o++, o !== X5); )
      ;
    this.numOctaves = o, this.tensorCaches = {}, this.kernelCaches = {};
  }
  // used in compiler
  detectImageData(t) {
    const e = new Uint8ClampedArray(4 * t.length);
    for (let o = 0; o < t.length; o++)
      e[4 * o] = t[o], e[4 * o + 1] = t[o], e[4 * o + 2] = t[o], e[4 * o + 3] = 255;
    const s = new ImageData(e, this.width, this.height);
    return this.detect(s);
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} inputImageT 
   * @returns 
   */
  detect(t) {
    let e = null;
    const s = [];
    for (let b = 0; b < this.numOctaves; b++) {
      let x, w;
      b === 0 ? x = this._applyFilter(t) : x = this._downsampleBilinear(s[b - 1][s[b - 1].length - 1]), w = this._applyFilter(x), s.push([x, w]);
    }
    const o = [];
    for (let b = 0; b < this.numOctaves; b++) {
      let x = this._differenceImageBinomial(s[b][0], s[b][1]);
      o.push(x);
    }
    const r = [];
    for (let b = 1; b < this.numOctaves - 1; b++) {
      const x = this._buildExtremas(o[b - 1], o[b], o[b + 1]);
      r.push(x);
    }
    const i = this._applyPrune(r), a = this._computeLocalization(i, o), l = this._computeOrientationHistograms(a, s), c = this._smoothHistograms(l), u = this._computeExtremaAngles(c), h = this._computeExtremaFreak(s, a, u), d = this._computeFreakDescriptors(h), p = a.arraySync(), f = u.arraySync(), g = d.arraySync();
    this.debugMode && (e = {
      pyramidImages: s.map((b) => b.map((x) => x.arraySync())),
      dogPyramidImages: o.map((b) => b ? b.arraySync() : null),
      extremasResults: r.map((b) => b.arraySync()),
      extremaAngles: u.arraySync(),
      prunedExtremas: i,
      localizedExtremas: a.arraySync()
    }), s.forEach((b) => b.forEach((x) => x.dispose())), o.forEach((b) => b && b.dispose()), r.forEach((b) => b.dispose()), a.dispose(), l.dispose(), c.dispose(), u.dispose(), h.dispose(), d.dispose();
    const m = [];
    for (let b = 0; b < p.length; b++) {
      if (p[b][0] == 0)
        continue;
      const x = [];
      for (let $ = 0; $ < g[b].length; $ += 4) {
        const G = g[b][$], z = g[b][$ + 1], A = g[b][$ + 2], Z = g[b][$ + 3];
        let _ = G * 16777216 + z * 65536 + A * 256 + Z;
        x.push(_);
      }
      const w = p[b][1], y = p[b][2], v = p[b][3] * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, T = y * Math.pow(2, w) + Math.pow(2, w - 1) - 0.5, k = Math.pow(2, w);
      m.push({
        maxima: p[b][0] > 0,
        x: v,
        y: T,
        scale: k,
        angle: f[b],
        descriptors: x
      });
    }
    return { featurePoints: m, debugExtra: e };
  }
  _computeFreakDescriptors(t) {
    if (!this.tensorCaches.computeFreakDescriptors) {
      const s = [], o = [];
      for (let a = 0; a < t.shape[1]; a++)
        for (let l = a + 1; l < t.shape[1]; l++)
          s.push(a), o.push(l);
      const r = _e(s, [s.length]).cast("int32"), i = _e(o, [o.length]).cast("int32");
      this.tensorCaches.computeFreakDescriptors = {
        positionT: vn(Ns([r, i], 1))
      };
    }
    const { positionT: e } = this.tensorCaches.computeFreakDescriptors;
    return X(() => le().runKernel("ComputeFreakDescriptors", { extremaFreaks: t, positionT: e }));
  }
  _computeExtremaFreak(t, e, s) {
    this.tensorCaches._computeExtremaFreak || X(() => {
      const i = _e(Do);
      this.tensorCaches._computeExtremaFreak = {
        freakPointsT: vn(i)
      };
    });
    const { freakPointsT: o } = this.tensorCaches._computeExtremaFreak, r = [];
    for (let i = 1; i < t.length; i++)
      r.push(t[i][1]);
    return X(() => le().runKernel("ComputeExtremaFreak", { gaussianImagesT: r, prunedExtremas: e, prunedExtremasAngles: s, freakPointsT: o, pyramidImagesLength: t.length }));
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} histograms 
   * @returns 
   */
  _computeExtremaAngles(t) {
    return X(() => le().runKernel("ComputeExtremaAngles", { histograms: t }));
  }
  // TODO: maybe can try just using average momentum, instead of histogram method. histogram might be overcomplicated
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} prunedExtremasT 
   * @param {tf.Tensor<tf.Rank>[]} pyramidImagesT 
   * @returns 
   */
  _computeOrientationHistograms(t, e) {
    const s = [];
    for (let r = 1; r < e.length; r++)
      s.push(e[r][1]);
    this.tensorCaches.orientationHistograms || X(() => {
      const r = -1 / (2 * _u * _u), i = _u * A5, a = Math.ceil(i), l = [];
      for (let c = -a; c <= a; c++)
        for (let u = -a; u <= a; u++) {
          const h = u * u + c * c;
          if (h <= i * i) {
            const d = h * r;
            let p = (720 + d * (720 + d * (360 + d * (120 + d * (30 + d * (6 + d)))))) * 0.0013888888;
            l.push([c, u, p]);
          }
        }
      this.tensorCaches.orientationHistograms = {
        radialPropertiesT: vn(_e(l, [l.length, 3]))
      };
    });
    const { radialPropertiesT: o } = this.tensorCaches.orientationHistograms;
    return X(() => le().runKernel("ComputeOrientationHistograms", { gaussianImagesT: s, prunedExtremasT: t, radialPropertiesT: o, pyramidImagesLength: e.length }));
  }
  // The histogram is smoothed with a Gaussian, with sigma = 1
  _smoothHistograms(t) {
    return X(() => le().runKernel("SmoothHistograms", { histograms: t }));
  }
  /**
   * 
   * @param {number[][]} prunedExtremasList 
   * @param {tf.Tensor<tf.Rank>[]} dogPyramidImagesT 
   * @returns 
   */
  _computeLocalization(t, e) {
    return X(() => {
      const o = le().runKernel("ComputeLocalization", { prunedExtremasList: t, dogPyramidImagesT: e }).arraySync(), r = [];
      for (let a = 0; a < o.length; a++) {
        r.push([]);
        for (let l = 0; l < o[a].length; l++)
          r[a].push([]);
      }
      const i = [];
      for (let a = 0; a < t.length; a++)
        i[a] = [
          t[a][0],
          t[a][1],
          t[a][2],
          t[a][3]
        ];
      for (let a = 0; a < i.length; a++) {
        if (i[a][0] === 0)
          continue;
        const l = o[a], c = 0.5 * (l[1][2] - l[1][0]), u = 0.5 * (l[2][1] - l[0][1]), h = l[1][2] + l[1][0] - 2 * l[1][1], d = l[2][1] + l[0][1] - 2 * l[1][1], p = 0.25 * (l[0][0] + l[2][2] - l[0][2] - l[2][0]), f = h * d - p * p, g = (d * -c + -p * -u) / f, m = (-p * -c + h * -u) / f, b = i[a][2] + m, x = i[a][3] + g;
        Math.abs(f) < 1e-4 || (i[a][2] = b, i[a][3] = x);
      }
      return _e(i, [i.length, i[0].length], "float32");
    });
  }
  // faster to do it in CPU
  // if we do in gpu, we probably need to use tf.topk(), which seems to be run in CPU anyway (no gpu operation for that)
  //  TODO: research adapative maximum supression method
  /**
   * 
   * @param {tf.Tensor<tf.Rank>[]} extremasResultsT 
   * @returns 
   */
  _applyPrune(t) {
    const e = Pr * Pr, s = O5, o = [], r = [];
    for (let a = 0; a < e; a++) {
      r.push([]), o.push([]);
      for (let l = 0; l < s; l++)
        r[a].push([0, 0, 0, 0]), o[a].push(0);
    }
    X(() => {
      for (let a = 0; a < t.length; a++) {
        const l = le().runKernel("ExtremaReduction", { extremasResultT: t[a] }), c = a + 1, u = l.arraySync(), h = l.shape[0], d = l.shape[1], p = d * 2 / Pr, f = h * 2 / Pr;
        for (let g = 0; g < h; g++)
          for (let m = 0; m < d; m++) {
            const b = u[g][m];
            if (b == 0)
              continue;
            const x = b % 1e3, w = Math.floor(Math.abs(b) / 1e3), y = m * 2 + (w === 2 || w === 3 ? 1 : 0), I = g * 2 + (w === 1 || w === 3 ? 1 : 0), v = Math.floor(y / p), k = Math.floor(I / f) * Pr + v, $ = Math.abs(x);
            let G = s;
            for (; G >= 1 && $ > o[k][G - 1]; )
              G -= 1;
            if (G < s) {
              for (let z = s - 1; z >= G + 1; z--)
                o[k][z] = o[k][z - 1], r[k][z][0] = r[k][z - 1][0], r[k][z][1] = r[k][z - 1][1], r[k][z][2] = r[k][z - 1][2], r[k][z][3] = r[k][z - 1][3];
              o[k][G] = $, r[k][G][0] = x, r[k][G][1] = c, r[k][G][2] = I, r[k][G][3] = y;
            }
          }
      }
    });
    const i = [];
    for (let a = 0; a < e; a++)
      for (let l = 0; l < s; l++)
        i.push(r[a][l]);
    return i;
  }
  _buildExtremas(t, e, s) {
    return X(() => le().runKernel("BuildExtremas", { image0: t, image1: e, image2: s }));
  }
  /**
   * 
   * @param {tf.Tensor<tf.Rank>} image1 
   * @param {tf.Tensor<tf.Rank>} image2 
   * @returns 
   */
  _differenceImageBinomial(t, e) {
    return X(() => t.sub(e));
  }
  // 4th order binomail filter [1,4,6,4,1] X [1,4,6,4,1]
  _applyFilter(t) {
    return X(() => le().runKernel("BinomialFilter", { image: t }));
  }
  /* _upsampleBilinear(image, targetImage) {
  		const imageHeight = image.shape[0];
  		const imageWidth = image.shape[1];
  
  		const kernelKey = 'w' + imageWidth;
  		if (!this.kernelCaches.upsampleBilinear) {
  			this.kernelCaches.upsampleBilinear = {};
  		}
  
  		if (!this.kernelCaches.upsampleBilinear[kernelKey]) {
  			const kernel = {
  				variableNames: ['p'],
  				outputShape: [targetImage.shape[0], targetImage.shape[1]],
  				userCode: `
  	  void main() {
  		ivec2 coords = getOutputCoords();
  		int j = coords[0];
  		int i = coords[1];
  
  		float sj = 0.5 * float(j) - 0.25; 
  		float si = 0.5 * float(i) - 0.25;
  
  		float sj0 = floor(sj);
  		float sj1 = ceil(sj);
  		float si0 = floor(si);
  		float si1 = ceil(si);
  
  		int sj0I = int(sj0);
  		int sj1I = int(sj1);
  		int si0I = int(si0);
  		int si1I = int(si1);
  
  		float sum = 0.0;
  		sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);
  		sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);
  		sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);
  		sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);
  		setOutput(sum);
  	  }
  	`
  			};
  			this.kernelCaches.upsampleBilinear[kernelKey] = kernel;
  		}
  
  		return tf.tidy(() => {
  			const program = this.kernelCaches.upsampleBilinear[kernelKey];
  			return tf.engine().runKernel("UpsampleBilinear", { x: image, width: image.shape[1], height: image.shape[0] });//this._compileAndRun(program, [image]);
  		});
  	} */
  _downsampleBilinear(t) {
    return X(() => le().runKernel("DownsampleBilinear", { image: t }));
  }
  /**
   * 
   * @param {tf.MathBackendWebGL.GPGPUProgram} program 
   * @param {*} inputs 
   * @returns 
   */
  _compileAndRun(t, e) {
    const s = Vs().compileAndRun(t, e);
    return le().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const o = Vs().runWebGLProgram(t, e, s);
    return le().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
  }
}
class Z5 {
  constructor(t, e, s = !1) {
    this.debugMode = s, this.width = t, this.height = e;
    let o = Math.min(t, e) / 2, r = Math.pow(2, Math.round(Math.log(o) / Math.log(2)));
    this.cropSize = r, this.detector = new mw(r, r, s), this.kernelCaches = {}, this.lastRandomIndex = 4;
  }
  detect(t) {
    const e = Math.floor(this.height / 2 - this.cropSize / 2), s = Math.floor(this.width / 2 - this.cropSize / 2), o = this._detect(t, s, e);
    return this.debugMode && (o.debugExtra.crop = { startX: s, startY: e, cropSize: this.cropSize }), o;
  }
  detectMoving(t) {
    const e = this.lastRandomIndex % 3, s = Math.floor(this.lastRandomIndex / 3);
    let o = Math.floor(this.height / 2 - this.cropSize + s * this.cropSize / 2), r = Math.floor(this.width / 2 - this.cropSize + e * this.cropSize / 2);
    return r < 0 && (r = 0), o < 0 && (o = 0), r >= this.width - this.cropSize && (r = this.width - this.cropSize - 1), o >= this.height - this.cropSize && (o = this.height - this.cropSize - 1), this.lastRandomIndex = (this.lastRandomIndex + 1) % 9, this._detect(t, r, o);
  }
  _detect(t, e, s) {
    const o = t.slice([s, e], [this.cropSize, this.cropSize]), { featurePoints: r, debugExtra: i } = this.detector.detect(o);
    return r.forEach((a) => {
      a.x += e, a.y += s;
    }), this.debugMode && (i.projectedImage = o.arraySync()), o.dispose(), { featurePoints: r, debugExtra: i };
  }
}
const gw = ({ image: n, ratio: t }) => {
  const e = Math.round(n.width * t), s = Math.round(n.height * t), o = new Uint8Array(e * s);
  for (let r = 0; r < e; r++) {
    let i = Math.round(1 * r / t), a = Math.round(1 * (r + 1) / t) - 1;
    a >= n.width && (a = n.width - 1);
    for (let l = 0; l < s; l++) {
      let c = Math.round(1 * l / t), u = Math.round(1 * (l + 1) / t) - 1;
      u >= n.height && (u = n.height - 1);
      let h = 0, d = 0;
      for (let p = i; p <= a; p++)
        for (let f = c; f <= u; f++)
          h += 1 * n.data[f * n.width + p], d += 1;
      o[l * e + r] = Math.floor(h / d);
    }
  }
  return { data: o, width: e, height: s };
}, K5 = 100, B5 = (n) => {
  const t = K5 / Math.min(n.width, n.height), e = [];
  let s = t;
  for (; ; )
    if (e.push(s), s *= Math.pow(2, 1 / 3), s >= 0.95) {
      s = 1;
      break;
    }
  e.push(s), e.reverse();
  const o = [];
  for (let r = 0; r < e.length; r++)
    n.width * e[r], n.height * e[r], o.push(Object.assign(gw({ image: n, ratio: e[r] }), { scale: e[r] }));
  return o;
}, H5 = (n) => {
  const t = Math.min(n.width, n.height), e = [], s = [];
  e.push(256 / t), e.push(128 / t);
  for (let o = 0; o < e.length; o++)
    s.push(Object.assign(gw({ image: n, ratio: e[o] }), { scale: e[o] }));
  return s;
}, _5 = (n) => {
  const { v1: t, v2: e } = n;
  let s = 0;
  for (let o = 0; o < t.length; o++) {
    let r = (t[o] ^ e[o]) >>> 0;
    s += U5(r);
  }
  return s;
}, U5 = (n) => {
  var t = n - (n >> 1 & 1431655765);
  return t = (t >> 2 & 858993459) + (t & 858993459), t = (t >> 4) + t & 252645135, t = (t >> 8) + t & 16711935, t = (t >> 16) + t & 65535, t;
}, Y5 = 1234, j5 = () => ({
  seed: Y5,
  arrayShuffle(t) {
    const { arr: e, sampleSize: s } = t;
    for (let o = 0; o < s; o++) {
      this.seed = (214013 * this.seed + 2531011) % -2147483648;
      let r = this.seed >> 16 & 32767;
      r = r % e.length;
      let i = e[o];
      e[o] = e[r], e[r] = i;
    }
  },
  nextInt(t) {
    this.seed = (214013 * this.seed + 2531011) % -2147483648;
    let e = this.seed >> 16 & 32767;
    return e = e % t, e;
  }
}), Q5 = 16, J5 = 128, Ah = 8, q5 = (n) => {
  const { points: t, pointIndexes: e, randomizer: s } = n, o = [];
  for (let l = 0; l < e.length; l++)
    o.push(l);
  let r = Number.MAX_SAFE_INTEGER, i = -1;
  const a = [];
  for (let l = 0; l < J5; l++) {
    s.arrayShuffle({ arr: o, sampleSize: Ah });
    let c = 0;
    const u = [];
    for (let h = 0; h < e.length; h++) {
      let d = Number.MAX_SAFE_INTEGER;
      for (let p = 0; p < Ah; p++) {
        const f = e[o[p]], g = _5({ v1: t[e[h]].descriptors, v2: t[f].descriptors });
        g < d && (u[h] = o[p], d = g);
      }
      c += d;
    }
    a.push(u), c < r && (r = c, i = l);
  }
  return a[i];
}, Xg = ({ points: n }) => {
  const t = [];
  for (let o = 0; o < n.length; o++)
    t.push(o);
  const e = j5();
  return { rootNode: bw({ points: n, pointIndexes: t, centerPointIndex: null, randomizer: e }) };
}, bw = (n) => {
  const { points: t, pointIndexes: e, centerPointIndex: s, randomizer: o } = n;
  let r = !1;
  (e.length <= Ah || e.length <= Q5) && (r = !0);
  const i = {};
  if (!r) {
    const l = q5({ points: t, pointIndexes: e, randomizer: o });
    for (let c = 0; c < l.length; c++)
      i[e[l[c]]] === void 0 && (i[e[l[c]]] = []), i[e[l[c]]].push(e[c]);
  }
  Object.keys(i).length === 1 && (r = !0);
  const a = {
    centerPointIndex: s
  };
  if (r) {
    a.leaf = !0, a.pointIndexes = [];
    for (let l = 0; l < e.length; l++)
      a.pointIndexes.push(e[l]);
    return a;
  }
  return a.leaf = !1, a.children = [], Object.keys(i).forEach((l) => {
    a.children.push(bw({ points: t, pointIndexes: i[l], centerPointIndex: l, randomizer: o }));
  }), a;
};
var Wl = {}, t4 = {
  get exports() {
    return Wl;
  },
  set exports(n) {
    Wl = n;
  }
};
(function(n, t) {
  (function(e, s) {
    n.exports = s();
  })(Qs, function() {
    return function(e) {
      var s = {};
      function o(r) {
        if (s[r])
          return s[r].exports;
        var i = s[r] = { i: r, l: !1, exports: {} };
        return e[r].call(i.exports, i, i.exports, o), i.l = !0, i.exports;
      }
      return o.m = e, o.c = s, o.d = function(r, i, a) {
        o.o(r, i) || Object.defineProperty(r, i, { enumerable: !0, get: a });
      }, o.r = function(r) {
        typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(r, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(r, "__esModule", { value: !0 });
      }, o.t = function(r, i) {
        if (1 & i && (r = o(r)), 8 & i || 4 & i && typeof r == "object" && r && r.__esModule)
          return r;
        var a = /* @__PURE__ */ Object.create(null);
        if (o.r(a), Object.defineProperty(a, "default", { enumerable: !0, value: r }), 2 & i && typeof r != "string")
          for (var l in r)
            o.d(a, l, function(c) {
              return r[c];
            }.bind(null, l));
        return a;
      }, o.n = function(r) {
        var i = r && r.__esModule ? function() {
          return r.default;
        } : function() {
          return r;
        };
        return o.d(i, "a", i), i;
      }, o.o = function(r, i) {
        return Object.prototype.hasOwnProperty.call(r, i);
      }, o.p = "", o(o.s = 0);
    }([function(e, s, o) {
      o.r(s), o.d(s, "encode", function() {
        return _;
      }), o.d(s, "decode", function() {
        return kt;
      }), o.d(s, "decodeAsync", function() {
        return ae;
      }), o.d(s, "decodeArrayStream", function() {
        return de;
      }), o.d(s, "decodeStream", function() {
        return Qn;
      }), o.d(s, "Decoder", function() {
        return ft;
      }), o.d(s, "Encoder", function() {
        return A;
      }), o.d(s, "ExtensionCodec", function() {
        return $;
      }), o.d(s, "ExtData", function() {
        return g;
      }), o.d(s, "EXT_TIMESTAMP", function() {
        return x;
      }), o.d(s, "encodeDateToTimeSpec", function() {
        return y;
      }), o.d(s, "encodeTimeSpecToTimestamp", function() {
        return w;
      }), o.d(s, "decodeTimestampToTimeSpec", function() {
        return v;
      }), o.d(s, "encodeTimestampExtension", function() {
        return I;
      }), o.d(s, "decodeTimestampExtension", function() {
        return T;
      });
      var r = function(M, C) {
        var R = typeof Symbol == "function" && M[Symbol.iterator];
        if (!R)
          return M;
        var E, L, Q = R.call(M), O = [];
        try {
          for (; (C === void 0 || C-- > 0) && !(E = Q.next()).done; )
            O.push(E.value);
        } catch (it) {
          L = { error: it };
        } finally {
          try {
            E && !E.done && (R = Q.return) && R.call(Q);
          } finally {
            if (L)
              throw L.error;
          }
        }
        return O;
      }, i = function() {
        for (var M = [], C = 0; C < arguments.length; C++)
          M = M.concat(r(arguments[C]));
        return M;
      }, a = typeof process < "u" && typeof TextEncoder < "u" && typeof TextDecoder < "u";
      function l(M) {
        for (var C = M.length, R = 0, E = 0; E < C; ) {
          var L = M.charCodeAt(E++);
          if (4294967168 & L)
            if (!(4294965248 & L))
              R += 2;
            else {
              if (L >= 55296 && L <= 56319 && E < C) {
                var Q = M.charCodeAt(E);
                (64512 & Q) == 56320 && (++E, L = ((1023 & L) << 10) + (1023 & Q) + 65536);
              }
              R += 4294901760 & L ? 4 : 3;
            }
          else
            R++;
        }
        return R;
      }
      var c = a ? new TextEncoder() : void 0, u = typeof process < "u" ? 200 : 0, h = c != null && c.encodeInto ? function(M, C, R) {
        c.encodeInto(M, C.subarray(R));
      } : function(M, C, R) {
        C.set(c.encode(M), R);
      };
      function d(M, C, R) {
        for (var E = C, L = E + R, Q = [], O = ""; E < L; ) {
          var it = M[E++];
          if (!(128 & it))
            Q.push(it);
          else if ((224 & it) == 192) {
            var mt = 63 & M[E++];
            Q.push((31 & it) << 6 | mt);
          } else if ((240 & it) == 224) {
            mt = 63 & M[E++];
            var Ct = 63 & M[E++];
            Q.push((31 & it) << 12 | mt << 6 | Ct);
          } else if ((248 & it) == 240) {
            var Y = (7 & it) << 18 | (mt = 63 & M[E++]) << 12 | (Ct = 63 & M[E++]) << 6 | 63 & M[E++];
            Y > 65535 && (Y -= 65536, Q.push(Y >>> 10 & 1023 | 55296), Y = 56320 | 1023 & Y), Q.push(Y);
          } else
            Q.push(it);
          Q.length >= 4096 && (O += String.fromCharCode.apply(String, i(Q)), Q.length = 0);
        }
        return Q.length > 0 && (O += String.fromCharCode.apply(String, i(Q))), O;
      }
      var p = a ? new TextDecoder() : null, f = typeof process < "u" ? 200 : 0, g = function(M, C) {
        this.type = M, this.data = C;
      };
      function m(M, C, R) {
        var E = Math.floor(R / 4294967296), L = R;
        M.setUint32(C, E), M.setUint32(C + 4, L);
      }
      function b(M, C) {
        return 4294967296 * M.getInt32(C) + M.getUint32(C + 4);
      }
      var x = -1;
      function w(M) {
        var C = M.sec, R = M.nsec;
        if (C >= 0 && R >= 0 && C <= 17179869183) {
          if (R === 0 && C <= 4294967295) {
            var E = new Uint8Array(4);
            return (O = new DataView(E.buffer)).setUint32(0, C), E;
          }
          var L = C / 4294967296, Q = 4294967295 & C;
          return E = new Uint8Array(8), (O = new DataView(E.buffer)).setUint32(0, R << 2 | 3 & L), O.setUint32(4, Q), E;
        }
        var O;
        return E = new Uint8Array(12), (O = new DataView(E.buffer)).setUint32(0, R), m(O, 4, C), E;
      }
      function y(M) {
        var C = M.getTime(), R = Math.floor(C / 1e3), E = 1e6 * (C - 1e3 * R), L = Math.floor(E / 1e9);
        return { sec: R + L, nsec: E - 1e9 * L };
      }
      function I(M) {
        return M instanceof Date ? w(y(M)) : null;
      }
      function v(M) {
        var C = new DataView(M.buffer, M.byteOffset, M.byteLength);
        switch (M.byteLength) {
          case 4:
            return { sec: C.getUint32(0), nsec: 0 };
          case 8:
            var R = C.getUint32(0);
            return { sec: 4294967296 * (3 & R) + C.getUint32(4), nsec: R >>> 2 };
          case 12:
            return { sec: b(C, 4), nsec: C.getUint32(0) };
          default:
            throw new Error("Unrecognized data size for timestamp: " + M.length);
        }
      }
      function T(M) {
        var C = v(M);
        return new Date(1e3 * C.sec + C.nsec / 1e6);
      }
      var k = { type: x, encode: I, decode: T }, $ = function() {
        function M() {
          this.builtInEncoders = [], this.builtInDecoders = [], this.encoders = [], this.decoders = [], this.register(k);
        }
        return M.prototype.register = function(C) {
          var R = C.type, E = C.encode, L = C.decode;
          if (R >= 0)
            this.encoders[R] = E, this.decoders[R] = L;
          else {
            var Q = 1 + R;
            this.builtInEncoders[Q] = E, this.builtInDecoders[Q] = L;
          }
        }, M.prototype.tryToEncode = function(C, R) {
          for (var E = 0; E < this.builtInEncoders.length; E++)
            if ((L = this.builtInEncoders[E]) != null && (Q = L(C, R)) != null)
              return new g(-1 - E, Q);
          for (E = 0; E < this.encoders.length; E++) {
            var L, Q;
            if ((L = this.encoders[E]) != null && (Q = L(C, R)) != null)
              return new g(E, Q);
          }
          return C instanceof g ? C : null;
        }, M.prototype.decode = function(C, R, E) {
          var L = R < 0 ? this.builtInDecoders[-1 - R] : this.decoders[R];
          return L ? L(C, R, E) : new g(R, C);
        }, M.defaultCodec = new M(), M;
      }();
      function G(M) {
        return M instanceof Uint8Array ? M : ArrayBuffer.isView(M) ? new Uint8Array(M.buffer, M.byteOffset, M.byteLength) : M instanceof ArrayBuffer ? new Uint8Array(M) : Uint8Array.from(M);
      }
      var z = function(M) {
        var C = typeof Symbol == "function" && Symbol.iterator, R = C && M[C], E = 0;
        if (R)
          return R.call(M);
        if (M && typeof M.length == "number")
          return { next: function() {
            return M && E >= M.length && (M = void 0), { value: M && M[E++], done: !M };
          } };
        throw new TypeError(C ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }, A = function() {
        function M(C, R, E, L, Q, O, it) {
          C === void 0 && (C = $.defaultCodec), E === void 0 && (E = 100), L === void 0 && (L = 2048), Q === void 0 && (Q = !1), O === void 0 && (O = !1), it === void 0 && (it = !1), this.extensionCodec = C, this.context = R, this.maxDepth = E, this.initialBufferSize = L, this.sortKeys = Q, this.forceFloat32 = O, this.ignoreUndefined = it, this.pos = 0, this.view = new DataView(new ArrayBuffer(this.initialBufferSize)), this.bytes = new Uint8Array(this.view.buffer);
        }
        return M.prototype.encode = function(C, R) {
          if (R > this.maxDepth)
            throw new Error("Too deep objects in depth " + R);
          C == null ? this.encodeNil() : typeof C == "boolean" ? this.encodeBoolean(C) : typeof C == "number" ? this.encodeNumber(C) : typeof C == "string" ? this.encodeString(C) : this.encodeObject(C, R);
        }, M.prototype.getUint8Array = function() {
          return this.bytes.subarray(0, this.pos);
        }, M.prototype.ensureBufferSizeToWrite = function(C) {
          var R = this.pos + C;
          this.view.byteLength < R && this.resizeBuffer(2 * R);
        }, M.prototype.resizeBuffer = function(C) {
          var R = new ArrayBuffer(C), E = new Uint8Array(R), L = new DataView(R);
          E.set(this.bytes), this.view = L, this.bytes = E;
        }, M.prototype.encodeNil = function() {
          this.writeU8(192);
        }, M.prototype.encodeBoolean = function(C) {
          C === !1 ? this.writeU8(194) : this.writeU8(195);
        }, M.prototype.encodeNumber = function(C) {
          Number.isSafeInteger(C) ? C >= 0 ? C < 128 ? this.writeU8(C) : C < 256 ? (this.writeU8(204), this.writeU8(C)) : C < 65536 ? (this.writeU8(205), this.writeU16(C)) : C < 4294967296 ? (this.writeU8(206), this.writeU32(C)) : (this.writeU8(207), this.writeU64(C)) : C >= -32 ? this.writeU8(224 | C + 32) : C >= -128 ? (this.writeU8(208), this.writeI8(C)) : C >= -32768 ? (this.writeU8(209), this.writeI16(C)) : C >= -2147483648 ? (this.writeU8(210), this.writeI32(C)) : (this.writeU8(211), this.writeI64(C)) : this.forceFloat32 ? (this.writeU8(202), this.writeF32(C)) : (this.writeU8(203), this.writeF64(C));
        }, M.prototype.writeStringHeader = function(C) {
          if (C < 32)
            this.writeU8(160 + C);
          else if (C < 256)
            this.writeU8(217), this.writeU8(C);
          else if (C < 65536)
            this.writeU8(218), this.writeU16(C);
          else {
            if (!(C < 4294967296))
              throw new Error("Too long string: " + C + " bytes in UTF-8");
            this.writeU8(219), this.writeU32(C);
          }
        }, M.prototype.encodeString = function(C) {
          var R = C.length;
          if (a && R > u) {
            var E = l(C);
            this.ensureBufferSizeToWrite(5 + E), this.writeStringHeader(E), h(C, this.bytes, this.pos), this.pos += E;
          } else
            E = l(C), this.ensureBufferSizeToWrite(5 + E), this.writeStringHeader(E), function(L, Q, O) {
              for (var it = L.length, mt = O, Ct = 0; Ct < it; ) {
                var Y = L.charCodeAt(Ct++);
                if (4294967168 & Y) {
                  if (!(4294965248 & Y))
                    Q[mt++] = Y >> 6 & 31 | 192;
                  else {
                    if (Y >= 55296 && Y <= 56319 && Ct < it) {
                      var Tt = L.charCodeAt(Ct);
                      (64512 & Tt) == 56320 && (++Ct, Y = ((1023 & Y) << 10) + (1023 & Tt) + 65536);
                    }
                    4294901760 & Y ? (Q[mt++] = Y >> 18 & 7 | 240, Q[mt++] = Y >> 12 & 63 | 128, Q[mt++] = Y >> 6 & 63 | 128) : (Q[mt++] = Y >> 12 & 15 | 224, Q[mt++] = Y >> 6 & 63 | 128);
                  }
                  Q[mt++] = 63 & Y | 128;
                } else
                  Q[mt++] = Y;
              }
            }(C, this.bytes, this.pos), this.pos += E;
        }, M.prototype.encodeObject = function(C, R) {
          var E = this.extensionCodec.tryToEncode(C, this.context);
          if (E != null)
            this.encodeExtension(E);
          else if (Array.isArray(C))
            this.encodeArray(C, R);
          else if (ArrayBuffer.isView(C))
            this.encodeBinary(C);
          else {
            if (typeof C != "object")
              throw new Error("Unrecognized object: " + Object.prototype.toString.apply(C));
            this.encodeMap(C, R);
          }
        }, M.prototype.encodeBinary = function(C) {
          var R = C.byteLength;
          if (R < 256)
            this.writeU8(196), this.writeU8(R);
          else if (R < 65536)
            this.writeU8(197), this.writeU16(R);
          else {
            if (!(R < 4294967296))
              throw new Error("Too large binary: " + R);
            this.writeU8(198), this.writeU32(R);
          }
          var E = G(C);
          this.writeU8a(E);
        }, M.prototype.encodeArray = function(C, R) {
          var E, L, Q = C.length;
          if (Q < 16)
            this.writeU8(144 + Q);
          else if (Q < 65536)
            this.writeU8(220), this.writeU16(Q);
          else {
            if (!(Q < 4294967296))
              throw new Error("Too large array: " + Q);
            this.writeU8(221), this.writeU32(Q);
          }
          try {
            for (var O = z(C), it = O.next(); !it.done; it = O.next()) {
              var mt = it.value;
              this.encode(mt, R + 1);
            }
          } catch (Ct) {
            E = { error: Ct };
          } finally {
            try {
              it && !it.done && (L = O.return) && L.call(O);
            } finally {
              if (E)
                throw E.error;
            }
          }
        }, M.prototype.countWithoutUndefined = function(C, R) {
          var E, L, Q = 0;
          try {
            for (var O = z(R), it = O.next(); !it.done; it = O.next())
              C[it.value] !== void 0 && Q++;
          } catch (mt) {
            E = { error: mt };
          } finally {
            try {
              it && !it.done && (L = O.return) && L.call(O);
            } finally {
              if (E)
                throw E.error;
            }
          }
          return Q;
        }, M.prototype.encodeMap = function(C, R) {
          var E, L, Q = Object.keys(C);
          this.sortKeys && Q.sort();
          var O = this.ignoreUndefined ? this.countWithoutUndefined(C, Q) : Q.length;
          if (O < 16)
            this.writeU8(128 + O);
          else if (O < 65536)
            this.writeU8(222), this.writeU16(O);
          else {
            if (!(O < 4294967296))
              throw new Error("Too large map object: " + O);
            this.writeU8(223), this.writeU32(O);
          }
          try {
            for (var it = z(Q), mt = it.next(); !mt.done; mt = it.next()) {
              var Ct = mt.value, Y = C[Ct];
              this.ignoreUndefined && Y === void 0 || (this.encodeString(Ct), this.encode(Y, R + 1));
            }
          } catch (Tt) {
            E = { error: Tt };
          } finally {
            try {
              mt && !mt.done && (L = it.return) && L.call(it);
            } finally {
              if (E)
                throw E.error;
            }
          }
        }, M.prototype.encodeExtension = function(C) {
          var R = C.data.length;
          if (R === 1)
            this.writeU8(212);
          else if (R === 2)
            this.writeU8(213);
          else if (R === 4)
            this.writeU8(214);
          else if (R === 8)
            this.writeU8(215);
          else if (R === 16)
            this.writeU8(216);
          else if (R < 256)
            this.writeU8(199), this.writeU8(R);
          else if (R < 65536)
            this.writeU8(200), this.writeU16(R);
          else {
            if (!(R < 4294967296))
              throw new Error("Too large extension object: " + R);
            this.writeU8(201), this.writeU32(R);
          }
          this.writeI8(C.type), this.writeU8a(C.data);
        }, M.prototype.writeU8 = function(C) {
          this.ensureBufferSizeToWrite(1), this.view.setUint8(this.pos, C), this.pos++;
        }, M.prototype.writeU8a = function(C) {
          var R = C.length;
          this.ensureBufferSizeToWrite(R), this.bytes.set(C, this.pos), this.pos += R;
        }, M.prototype.writeI8 = function(C) {
          this.ensureBufferSizeToWrite(1), this.view.setInt8(this.pos, C), this.pos++;
        }, M.prototype.writeU16 = function(C) {
          this.ensureBufferSizeToWrite(2), this.view.setUint16(this.pos, C), this.pos += 2;
        }, M.prototype.writeI16 = function(C) {
          this.ensureBufferSizeToWrite(2), this.view.setInt16(this.pos, C), this.pos += 2;
        }, M.prototype.writeU32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setUint32(this.pos, C), this.pos += 4;
        }, M.prototype.writeI32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setInt32(this.pos, C), this.pos += 4;
        }, M.prototype.writeF32 = function(C) {
          this.ensureBufferSizeToWrite(4), this.view.setFloat32(this.pos, C), this.pos += 4;
        }, M.prototype.writeF64 = function(C) {
          this.ensureBufferSizeToWrite(8), this.view.setFloat64(this.pos, C), this.pos += 8;
        }, M.prototype.writeU64 = function(C) {
          this.ensureBufferSizeToWrite(8), function(R, E, L) {
            var Q = L / 4294967296, O = L;
            R.setUint32(E, Q), R.setUint32(E + 4, O);
          }(this.view, this.pos, C), this.pos += 8;
        }, M.prototype.writeI64 = function(C) {
          this.ensureBufferSizeToWrite(8), m(this.view, this.pos, C), this.pos += 8;
        }, M;
      }(), Z = {};
      function _(M, C) {
        C === void 0 && (C = Z);
        var R = new A(C.extensionCodec, C.context, C.maxDepth, C.initialBufferSize, C.sortKeys, C.forceFloat32, C.ignoreUndefined);
        return R.encode(M, 1), R.getUint8Array();
      }
      function K(M) {
        return (M < 0 ? "-" : "") + "0x" + Math.abs(M).toString(16).padStart(2, "0");
      }
      var U = function() {
        function M(C, R) {
          C === void 0 && (C = 16), R === void 0 && (R = 16), this.maxKeyLength = C, this.maxLengthPerKey = R, this.caches = [];
          for (var E = 0; E < this.maxKeyLength; E++)
            this.caches.push([]);
        }
        return M.prototype.canBeCached = function(C) {
          return C > 0 && C <= this.maxKeyLength;
        }, M.prototype.get = function(C, R, E) {
          var L = this.caches[E - 1], Q = L.length;
          t:
            for (var O = 0; O < Q; O++) {
              for (var it = L[O], mt = it.bytes, Ct = 0; Ct < E; Ct++)
                if (mt[Ct] !== C[R + Ct])
                  continue t;
              return it.value;
            }
          return null;
        }, M.prototype.store = function(C, R) {
          var E = this.caches[C.length - 1], L = { bytes: C, value: R };
          E.length >= this.maxLengthPerKey ? E[Math.random() * E.length | 0] = L : E.push(L);
        }, M.prototype.decode = function(C, R, E) {
          var L = this.get(C, R, E);
          if (L != null)
            return L;
          var Q = d(C, R, E), O = Uint8Array.prototype.slice.call(C, R, R + E);
          return this.store(O, Q), Q;
        }, M;
      }(), q = function(M, C, R, E) {
        return new (R || (R = Promise))(function(L, Q) {
          function O(Ct) {
            try {
              mt(E.next(Ct));
            } catch (Y) {
              Q(Y);
            }
          }
          function it(Ct) {
            try {
              mt(E.throw(Ct));
            } catch (Y) {
              Q(Y);
            }
          }
          function mt(Ct) {
            var Y;
            Ct.done ? L(Ct.value) : (Y = Ct.value, Y instanceof R ? Y : new R(function(Tt) {
              Tt(Y);
            })).then(O, it);
          }
          mt((E = E.apply(M, C || [])).next());
        });
      }, j = function(M, C) {
        var R, E, L, Q, O = { label: 0, sent: function() {
          if (1 & L[0])
            throw L[1];
          return L[1];
        }, trys: [], ops: [] };
        return Q = { next: it(0), throw: it(1), return: it(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function it(mt) {
          return function(Ct) {
            return function(Y) {
              if (R)
                throw new TypeError("Generator is already executing.");
              for (; O; )
                try {
                  if (R = 1, E && (L = 2 & Y[0] ? E.return : Y[0] ? E.throw || ((L = E.return) && L.call(E), 0) : E.next) && !(L = L.call(E, Y[1])).done)
                    return L;
                  switch (E = 0, L && (Y = [2 & Y[0], L.value]), Y[0]) {
                    case 0:
                    case 1:
                      L = Y;
                      break;
                    case 4:
                      return O.label++, { value: Y[1], done: !1 };
                    case 5:
                      O.label++, E = Y[1], Y = [0];
                      continue;
                    case 7:
                      Y = O.ops.pop(), O.trys.pop();
                      continue;
                    default:
                      if (L = O.trys, !((L = L.length > 0 && L[L.length - 1]) || Y[0] !== 6 && Y[0] !== 2)) {
                        O = 0;
                        continue;
                      }
                      if (Y[0] === 3 && (!L || Y[1] > L[0] && Y[1] < L[3])) {
                        O.label = Y[1];
                        break;
                      }
                      if (Y[0] === 6 && O.label < L[1]) {
                        O.label = L[1], L = Y;
                        break;
                      }
                      if (L && O.label < L[2]) {
                        O.label = L[2], O.ops.push(Y);
                        break;
                      }
                      L[2] && O.ops.pop(), O.trys.pop();
                      continue;
                  }
                  Y = C.call(M, O);
                } catch (Tt) {
                  Y = [6, Tt], E = 0;
                } finally {
                  R = L = 0;
                }
              if (5 & Y[0])
                throw Y[1];
              return { value: Y[0] ? Y[1] : void 0, done: !0 };
            }([mt, Ct]);
          };
        }
      }, tt = function(M) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var C, R = M[Symbol.asyncIterator];
        return R ? R.call(M) : (M = typeof __values == "function" ? __values(M) : M[Symbol.iterator](), C = {}, E("next"), E("throw"), E("return"), C[Symbol.asyncIterator] = function() {
          return this;
        }, C);
        function E(L) {
          C[L] = M[L] && function(Q) {
            return new Promise(function(O, it) {
              (function(mt, Ct, Y, Tt) {
                Promise.resolve(Tt).then(function(Ft) {
                  mt({ value: Ft, done: Y });
                }, Ct);
              })(O, it, (Q = M[L](Q)).done, Q.value);
            });
          };
        }
      }, nt = function(M) {
        return this instanceof nt ? (this.v = M, this) : new nt(M);
      }, st = function(M, C, R) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var E, L = R.apply(M, C || []), Q = [];
        return E = {}, O("next"), O("throw"), O("return"), E[Symbol.asyncIterator] = function() {
          return this;
        }, E;
        function O(Tt) {
          L[Tt] && (E[Tt] = function(Ft) {
            return new Promise(function(Le, ke) {
              Q.push([Tt, Ft, Le, ke]) > 1 || it(Tt, Ft);
            });
          });
        }
        function it(Tt, Ft) {
          try {
            (Le = L[Tt](Ft)).value instanceof nt ? Promise.resolve(Le.value.v).then(mt, Ct) : Y(Q[0][2], Le);
          } catch (ke) {
            Y(Q[0][3], ke);
          }
          var Le;
        }
        function mt(Tt) {
          it("next", Tt);
        }
        function Ct(Tt) {
          it("throw", Tt);
        }
        function Y(Tt, Ft) {
          Tt(Ft), Q.shift(), Q.length && it(Q[0][0], Q[0][1]);
        }
      }, at = new DataView(new ArrayBuffer(0)), rt = new Uint8Array(at.buffer), ct = function() {
        try {
          at.getInt8(0);
        } catch (M) {
          return M.constructor;
        }
        throw new Error("never reached");
      }(), lt = new ct("Insufficient data"), pt = new U(), ft = function() {
        function M(C, R, E, L, Q, O, it, mt) {
          C === void 0 && (C = $.defaultCodec), E === void 0 && (E = 4294967295), L === void 0 && (L = 4294967295), Q === void 0 && (Q = 4294967295), O === void 0 && (O = 4294967295), it === void 0 && (it = 4294967295), mt === void 0 && (mt = pt), this.extensionCodec = C, this.context = R, this.maxStrLength = E, this.maxBinLength = L, this.maxArrayLength = Q, this.maxMapLength = O, this.maxExtLength = it, this.cachedKeyDecoder = mt, this.totalPos = 0, this.pos = 0, this.view = at, this.bytes = rt, this.headByte = -1, this.stack = [];
        }
        return M.prototype.setBuffer = function(C) {
          this.bytes = G(C), this.view = function(R) {
            if (R instanceof ArrayBuffer)
              return new DataView(R);
            var E = G(R);
            return new DataView(E.buffer, E.byteOffset, E.byteLength);
          }(this.bytes), this.pos = 0;
        }, M.prototype.appendBuffer = function(C) {
          if (this.headByte !== -1 || this.hasRemaining()) {
            var R = this.bytes.subarray(this.pos), E = G(C), L = new Uint8Array(R.length + E.length);
            L.set(R), L.set(E, R.length), this.setBuffer(L);
          } else
            this.setBuffer(C);
        }, M.prototype.hasRemaining = function(C) {
          return C === void 0 && (C = 1), this.view.byteLength - this.pos >= C;
        }, M.prototype.createNoExtraBytesError = function(C) {
          var R = this.view, E = this.pos;
          return new RangeError("Extra " + (R.byteLength - E) + " byte(s) found at buffer[" + C + "]");
        }, M.prototype.decodeSingleSync = function() {
          var C = this.decodeSync();
          if (this.hasRemaining())
            throw this.createNoExtraBytesError(this.pos);
          return C;
        }, M.prototype.decodeSingleAsync = function(C) {
          var R, E, L, Q;
          return q(this, void 0, void 0, function() {
            var O, it, mt, Ct, Y, Tt, Ft, Le;
            return j(this, function(ke) {
              switch (ke.label) {
                case 0:
                  O = !1, ke.label = 1;
                case 1:
                  ke.trys.push([1, 6, 7, 12]), R = tt(C), ke.label = 2;
                case 2:
                  return [4, R.next()];
                case 3:
                  if ((E = ke.sent()).done)
                    return [3, 5];
                  if (mt = E.value, O)
                    throw this.createNoExtraBytesError(this.totalPos);
                  this.appendBuffer(mt);
                  try {
                    it = this.decodeSync(), O = !0;
                  } catch (Ea) {
                    if (!(Ea instanceof ct))
                      throw Ea;
                  }
                  this.totalPos += this.pos, ke.label = 4;
                case 4:
                  return [3, 2];
                case 5:
                  return [3, 12];
                case 6:
                  return Ct = ke.sent(), L = { error: Ct }, [3, 12];
                case 7:
                  return ke.trys.push([7, , 10, 11]), E && !E.done && (Q = R.return) ? [4, Q.call(R)] : [3, 9];
                case 8:
                  ke.sent(), ke.label = 9;
                case 9:
                  return [3, 11];
                case 10:
                  if (L)
                    throw L.error;
                  return [7];
                case 11:
                  return [7];
                case 12:
                  if (O) {
                    if (this.hasRemaining())
                      throw this.createNoExtraBytesError(this.totalPos);
                    return [2, it];
                  }
                  throw Tt = (Y = this).headByte, Ft = Y.pos, Le = Y.totalPos, new RangeError("Insufficient data in parcing " + K(Tt) + " at " + Le + " (" + Ft + " in the current buffer)");
              }
            });
          });
        }, M.prototype.decodeArrayStream = function(C) {
          return this.decodeMultiAsync(C, !0);
        }, M.prototype.decodeStream = function(C) {
          return this.decodeMultiAsync(C, !1);
        }, M.prototype.decodeMultiAsync = function(C, R) {
          return st(this, arguments, function() {
            var E, L, Q, O, it, mt, Ct, Y, Tt;
            return j(this, function(Ft) {
              switch (Ft.label) {
                case 0:
                  E = R, L = -1, Ft.label = 1;
                case 1:
                  Ft.trys.push([1, 13, 14, 19]), Q = tt(C), Ft.label = 2;
                case 2:
                  return [4, nt(Q.next())];
                case 3:
                  if ((O = Ft.sent()).done)
                    return [3, 12];
                  if (it = O.value, R && L === 0)
                    throw this.createNoExtraBytesError(this.totalPos);
                  this.appendBuffer(it), E && (L = this.readArraySize(), E = !1, this.complete()), Ft.label = 4;
                case 4:
                  Ft.trys.push([4, 9, , 10]), Ft.label = 5;
                case 5:
                  return [4, nt(this.decodeSync())];
                case 6:
                  return [4, Ft.sent()];
                case 7:
                  return Ft.sent(), --L == 0 ? [3, 8] : [3, 5];
                case 8:
                  return [3, 10];
                case 9:
                  if (!((mt = Ft.sent()) instanceof ct))
                    throw mt;
                  return [3, 10];
                case 10:
                  this.totalPos += this.pos, Ft.label = 11;
                case 11:
                  return [3, 2];
                case 12:
                  return [3, 19];
                case 13:
                  return Ct = Ft.sent(), Y = { error: Ct }, [3, 19];
                case 14:
                  return Ft.trys.push([14, , 17, 18]), O && !O.done && (Tt = Q.return) ? [4, nt(Tt.call(Q))] : [3, 16];
                case 15:
                  Ft.sent(), Ft.label = 16;
                case 16:
                  return [3, 18];
                case 17:
                  if (Y)
                    throw Y.error;
                  return [7];
                case 18:
                  return [7];
                case 19:
                  return [2];
              }
            });
          });
        }, M.prototype.decodeSync = function() {
          t:
            for (; ; ) {
              var C = this.readHeadByte(), R = void 0;
              if (C >= 224)
                R = C - 256;
              else if (C < 192)
                if (C < 128)
                  R = C;
                else if (C < 144) {
                  if ((L = C - 128) !== 0) {
                    this.pushMapState(L), this.complete();
                    continue t;
                  }
                  R = {};
                } else if (C < 160) {
                  if ((L = C - 144) !== 0) {
                    this.pushArrayState(L), this.complete();
                    continue t;
                  }
                  R = [];
                } else {
                  var E = C - 160;
                  R = this.decodeUtf8String(E, 0);
                }
              else if (C === 192)
                R = null;
              else if (C === 194)
                R = !1;
              else if (C === 195)
                R = !0;
              else if (C === 202)
                R = this.readF32();
              else if (C === 203)
                R = this.readF64();
              else if (C === 204)
                R = this.readU8();
              else if (C === 205)
                R = this.readU16();
              else if (C === 206)
                R = this.readU32();
              else if (C === 207)
                R = this.readU64();
              else if (C === 208)
                R = this.readI8();
              else if (C === 209)
                R = this.readI16();
              else if (C === 210)
                R = this.readI32();
              else if (C === 211)
                R = this.readI64();
              else if (C === 217)
                E = this.lookU8(), R = this.decodeUtf8String(E, 1);
              else if (C === 218)
                E = this.lookU16(), R = this.decodeUtf8String(E, 2);
              else if (C === 219)
                E = this.lookU32(), R = this.decodeUtf8String(E, 4);
              else if (C === 220) {
                if ((L = this.readU16()) !== 0) {
                  this.pushArrayState(L), this.complete();
                  continue t;
                }
                R = [];
              } else if (C === 221) {
                if ((L = this.readU32()) !== 0) {
                  this.pushArrayState(L), this.complete();
                  continue t;
                }
                R = [];
              } else if (C === 222) {
                if ((L = this.readU16()) !== 0) {
                  this.pushMapState(L), this.complete();
                  continue t;
                }
                R = {};
              } else if (C === 223) {
                if ((L = this.readU32()) !== 0) {
                  this.pushMapState(L), this.complete();
                  continue t;
                }
                R = {};
              } else if (C === 196) {
                var L = this.lookU8();
                R = this.decodeBinary(L, 1);
              } else if (C === 197)
                L = this.lookU16(), R = this.decodeBinary(L, 2);
              else if (C === 198)
                L = this.lookU32(), R = this.decodeBinary(L, 4);
              else if (C === 212)
                R = this.decodeExtension(1, 0);
              else if (C === 213)
                R = this.decodeExtension(2, 0);
              else if (C === 214)
                R = this.decodeExtension(4, 0);
              else if (C === 215)
                R = this.decodeExtension(8, 0);
              else if (C === 216)
                R = this.decodeExtension(16, 0);
              else if (C === 199)
                L = this.lookU8(), R = this.decodeExtension(L, 1);
              else if (C === 200)
                L = this.lookU16(), R = this.decodeExtension(L, 2);
              else {
                if (C !== 201)
                  throw new Error("Unrecognized type byte: " + K(C));
                L = this.lookU32(), R = this.decodeExtension(L, 4);
              }
              this.complete();
              for (var Q = this.stack; Q.length > 0; ) {
                var O = Q[Q.length - 1];
                if (O.type === 0) {
                  if (O.array[O.position] = R, O.position++, O.position !== O.size)
                    continue t;
                  Q.pop(), R = O.array;
                } else {
                  if (O.type === 1) {
                    if (it = void 0, (it = typeof R) != "string" && it !== "number")
                      throw new Error("The type of key must be string or number but " + typeof R);
                    O.key = R, O.type = 2;
                    continue t;
                  }
                  if (O.map[O.key] = R, O.readCount++, O.readCount !== O.size) {
                    O.key = null, O.type = 1;
                    continue t;
                  }
                  Q.pop(), R = O.map;
                }
              }
              return R;
            }
          var it;
        }, M.prototype.readHeadByte = function() {
          return this.headByte === -1 && (this.headByte = this.readU8()), this.headByte;
        }, M.prototype.complete = function() {
          this.headByte = -1;
        }, M.prototype.readArraySize = function() {
          var C = this.readHeadByte();
          switch (C) {
            case 220:
              return this.readU16();
            case 221:
              return this.readU32();
            default:
              if (C < 160)
                return C - 144;
              throw new Error("Unrecognized array type byte: " + K(C));
          }
        }, M.prototype.pushMapState = function(C) {
          if (C > this.maxMapLength)
            throw new Error("Max length exceeded: map length (" + C + ") > maxMapLengthLength (" + this.maxMapLength + ")");
          this.stack.push({ type: 1, size: C, key: null, readCount: 0, map: {} });
        }, M.prototype.pushArrayState = function(C) {
          if (C > this.maxArrayLength)
            throw new Error("Max length exceeded: array length (" + C + ") > maxArrayLength (" + this.maxArrayLength + ")");
          this.stack.push({ type: 0, size: C, array: new Array(C), position: 0 });
        }, M.prototype.decodeUtf8String = function(C, R) {
          var E;
          if (C > this.maxStrLength)
            throw new Error("Max length exceeded: UTF-8 byte length (" + C + ") > maxStrLength (" + this.maxStrLength + ")");
          if (this.bytes.byteLength < this.pos + R + C)
            throw lt;
          var L, Q = this.pos + R;
          return L = this.stateIsMapKey() && (!((E = this.cachedKeyDecoder) === null || E === void 0) && E.canBeCached(C)) ? this.cachedKeyDecoder.decode(this.bytes, Q, C) : a && C > f ? function(O, it, mt) {
            var Ct = O.subarray(it, it + mt);
            return p.decode(Ct);
          }(this.bytes, Q, C) : d(this.bytes, Q, C), this.pos += R + C, L;
        }, M.prototype.stateIsMapKey = function() {
          return this.stack.length > 0 && this.stack[this.stack.length - 1].type === 1;
        }, M.prototype.decodeBinary = function(C, R) {
          if (C > this.maxBinLength)
            throw new Error("Max length exceeded: bin length (" + C + ") > maxBinLength (" + this.maxBinLength + ")");
          if (!this.hasRemaining(C + R))
            throw lt;
          var E = this.pos + R, L = this.bytes.subarray(E, E + C);
          return this.pos += R + C, L;
        }, M.prototype.decodeExtension = function(C, R) {
          if (C > this.maxExtLength)
            throw new Error("Max length exceeded: ext length (" + C + ") > maxExtLength (" + this.maxExtLength + ")");
          var E = this.view.getInt8(this.pos + R), L = this.decodeBinary(C, R + 1);
          return this.extensionCodec.decode(L, E, this.context);
        }, M.prototype.lookU8 = function() {
          return this.view.getUint8(this.pos);
        }, M.prototype.lookU16 = function() {
          return this.view.getUint16(this.pos);
        }, M.prototype.lookU32 = function() {
          return this.view.getUint32(this.pos);
        }, M.prototype.readU8 = function() {
          var C = this.view.getUint8(this.pos);
          return this.pos++, C;
        }, M.prototype.readI8 = function() {
          var C = this.view.getInt8(this.pos);
          return this.pos++, C;
        }, M.prototype.readU16 = function() {
          var C = this.view.getUint16(this.pos);
          return this.pos += 2, C;
        }, M.prototype.readI16 = function() {
          var C = this.view.getInt16(this.pos);
          return this.pos += 2, C;
        }, M.prototype.readU32 = function() {
          var C = this.view.getUint32(this.pos);
          return this.pos += 4, C;
        }, M.prototype.readI32 = function() {
          var C = this.view.getInt32(this.pos);
          return this.pos += 4, C;
        }, M.prototype.readU64 = function() {
          var C, R, E = (C = this.view, R = this.pos, 4294967296 * C.getUint32(R) + C.getUint32(R + 4));
          return this.pos += 8, E;
        }, M.prototype.readI64 = function() {
          var C = b(this.view, this.pos);
          return this.pos += 8, C;
        }, M.prototype.readF32 = function() {
          var C = this.view.getFloat32(this.pos);
          return this.pos += 4, C;
        }, M.prototype.readF64 = function() {
          var C = this.view.getFloat64(this.pos);
          return this.pos += 8, C;
        }, M;
      }(), vt = {};
      function kt(M, C) {
        C === void 0 && (C = vt);
        var R = new ft(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength);
        return R.setBuffer(M), R.decodeSingleSync();
      }
      var Lt = function(M, C) {
        var R, E, L, Q, O = { label: 0, sent: function() {
          if (1 & L[0])
            throw L[1];
          return L[1];
        }, trys: [], ops: [] };
        return Q = { next: it(0), throw: it(1), return: it(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function it(mt) {
          return function(Ct) {
            return function(Y) {
              if (R)
                throw new TypeError("Generator is already executing.");
              for (; O; )
                try {
                  if (R = 1, E && (L = 2 & Y[0] ? E.return : Y[0] ? E.throw || ((L = E.return) && L.call(E), 0) : E.next) && !(L = L.call(E, Y[1])).done)
                    return L;
                  switch (E = 0, L && (Y = [2 & Y[0], L.value]), Y[0]) {
                    case 0:
                    case 1:
                      L = Y;
                      break;
                    case 4:
                      return O.label++, { value: Y[1], done: !1 };
                    case 5:
                      O.label++, E = Y[1], Y = [0];
                      continue;
                    case 7:
                      Y = O.ops.pop(), O.trys.pop();
                      continue;
                    default:
                      if (L = O.trys, !((L = L.length > 0 && L[L.length - 1]) || Y[0] !== 6 && Y[0] !== 2)) {
                        O = 0;
                        continue;
                      }
                      if (Y[0] === 3 && (!L || Y[1] > L[0] && Y[1] < L[3])) {
                        O.label = Y[1];
                        break;
                      }
                      if (Y[0] === 6 && O.label < L[1]) {
                        O.label = L[1], L = Y;
                        break;
                      }
                      if (L && O.label < L[2]) {
                        O.label = L[2], O.ops.push(Y);
                        break;
                      }
                      L[2] && O.ops.pop(), O.trys.pop();
                      continue;
                  }
                  Y = C.call(M, O);
                } catch (Tt) {
                  Y = [6, Tt], E = 0;
                } finally {
                  R = L = 0;
                }
              if (5 & Y[0])
                throw Y[1];
              return { value: Y[0] ? Y[1] : void 0, done: !0 };
            }([mt, Ct]);
          };
        }
      }, Gt = function(M) {
        return this instanceof Gt ? (this.v = M, this) : new Gt(M);
      }, Zt = function(M, C, R) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var E, L = R.apply(M, C || []), Q = [];
        return E = {}, O("next"), O("throw"), O("return"), E[Symbol.asyncIterator] = function() {
          return this;
        }, E;
        function O(Tt) {
          L[Tt] && (E[Tt] = function(Ft) {
            return new Promise(function(Le, ke) {
              Q.push([Tt, Ft, Le, ke]) > 1 || it(Tt, Ft);
            });
          });
        }
        function it(Tt, Ft) {
          try {
            (Le = L[Tt](Ft)).value instanceof Gt ? Promise.resolve(Le.value.v).then(mt, Ct) : Y(Q[0][2], Le);
          } catch (ke) {
            Y(Q[0][3], ke);
          }
          var Le;
        }
        function mt(Tt) {
          it("next", Tt);
        }
        function Ct(Tt) {
          it("throw", Tt);
        }
        function Y(Tt, Ft) {
          Tt(Ft), Q.shift(), Q.length && it(Q[0][0], Q[0][1]);
        }
      };
      function jt(M) {
        if (M == null)
          throw new Error("Assertion Failure: value must not be null nor undefined");
      }
      function Ht(M) {
        return M[Symbol.asyncIterator] != null ? M : function(C) {
          return Zt(this, arguments, function() {
            var R, E, L, Q;
            return Lt(this, function(O) {
              switch (O.label) {
                case 0:
                  R = C.getReader(), O.label = 1;
                case 1:
                  O.trys.push([1, , 9, 10]), O.label = 2;
                case 2:
                  return [4, Gt(R.read())];
                case 3:
                  return E = O.sent(), L = E.done, Q = E.value, L ? [4, Gt(void 0)] : [3, 5];
                case 4:
                  return [2, O.sent()];
                case 5:
                  return jt(Q), [4, Gt(Q)];
                case 6:
                  return [4, O.sent()];
                case 7:
                  return O.sent(), [3, 2];
                case 8:
                  return [3, 10];
                case 9:
                  return R.releaseLock(), [7];
                case 10:
                  return [2];
              }
            });
          });
        }(M);
      }
      var qt = function(M, C, R, E) {
        return new (R || (R = Promise))(function(L, Q) {
          function O(Ct) {
            try {
              mt(E.next(Ct));
            } catch (Y) {
              Q(Y);
            }
          }
          function it(Ct) {
            try {
              mt(E.throw(Ct));
            } catch (Y) {
              Q(Y);
            }
          }
          function mt(Ct) {
            var Y;
            Ct.done ? L(Ct.value) : (Y = Ct.value, Y instanceof R ? Y : new R(function(Tt) {
              Tt(Y);
            })).then(O, it);
          }
          mt((E = E.apply(M, C || [])).next());
        });
      }, Bt = function(M, C) {
        var R, E, L, Q, O = { label: 0, sent: function() {
          if (1 & L[0])
            throw L[1];
          return L[1];
        }, trys: [], ops: [] };
        return Q = { next: it(0), throw: it(1), return: it(2) }, typeof Symbol == "function" && (Q[Symbol.iterator] = function() {
          return this;
        }), Q;
        function it(mt) {
          return function(Ct) {
            return function(Y) {
              if (R)
                throw new TypeError("Generator is already executing.");
              for (; O; )
                try {
                  if (R = 1, E && (L = 2 & Y[0] ? E.return : Y[0] ? E.throw || ((L = E.return) && L.call(E), 0) : E.next) && !(L = L.call(E, Y[1])).done)
                    return L;
                  switch (E = 0, L && (Y = [2 & Y[0], L.value]), Y[0]) {
                    case 0:
                    case 1:
                      L = Y;
                      break;
                    case 4:
                      return O.label++, { value: Y[1], done: !1 };
                    case 5:
                      O.label++, E = Y[1], Y = [0];
                      continue;
                    case 7:
                      Y = O.ops.pop(), O.trys.pop();
                      continue;
                    default:
                      if (L = O.trys, !((L = L.length > 0 && L[L.length - 1]) || Y[0] !== 6 && Y[0] !== 2)) {
                        O = 0;
                        continue;
                      }
                      if (Y[0] === 3 && (!L || Y[1] > L[0] && Y[1] < L[3])) {
                        O.label = Y[1];
                        break;
                      }
                      if (Y[0] === 6 && O.label < L[1]) {
                        O.label = L[1], L = Y;
                        break;
                      }
                      if (L && O.label < L[2]) {
                        O.label = L[2], O.ops.push(Y);
                        break;
                      }
                      L[2] && O.ops.pop(), O.trys.pop();
                      continue;
                  }
                  Y = C.call(M, O);
                } catch (Tt) {
                  Y = [6, Tt], E = 0;
                } finally {
                  R = L = 0;
                }
              if (5 & Y[0])
                throw Y[1];
              return { value: Y[0] ? Y[1] : void 0, done: !0 };
            }([mt, Ct]);
          };
        }
      };
      function ae(M, C) {
        return C === void 0 && (C = vt), qt(this, void 0, void 0, function() {
          var R;
          return Bt(this, function(E) {
            return R = Ht(M), [2, new ft(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeSingleAsync(R)];
          });
        });
      }
      function de(M, C) {
        C === void 0 && (C = vt);
        var R = Ht(M);
        return new ft(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeArrayStream(R);
      }
      function Qn(M, C) {
        C === void 0 && (C = vt);
        var R = Ht(M);
        return new ft(C.extensionCodec, C.context, C.maxStrLength, C.maxBinLength, C.maxArrayLength, C.maxMapLength, C.maxExtLength).decodeStream(R);
      }
    }]);
  });
})(t4);
const Og = 2;
class e4 {
  constructor() {
    this.data = null;
  }
  // input html Images
  compileImageTargets(t, e) {
    return new Promise(async (s, o) => {
      const r = [];
      for (let c = 0; c < t.length; c++) {
        const u = t[c], d = this.createProcessCanvas(u).getContext("2d");
        d.drawImage(u, 0, 0, u.width, u.height);
        const p = d.getImageData(0, 0, u.width, u.height), f = new Uint8Array(u.width * u.height);
        for (let m = 0; m < f.length; m++) {
          const b = m * 4;
          f[m] = Math.floor((p.data[b] + p.data[b + 1] + p.data[b + 2]) / 3);
        }
        const g = { data: f, height: u.height, width: u.width };
        r.push(g);
      }
      const i = 50 / r.length;
      let a = 0;
      this.data = [];
      for (let c = 0; c < r.length; c++) {
        const u = r[c], h = B5(u), d = i / h.length, p = await n4(h, () => {
          a += d, e(a);
        });
        this.data.push({
          targetImage: u,
          imageList: h,
          matchingData: p
        });
      }
      for (let c = 0; c < r.length; c++) {
        const u = H5(r[c]);
        this.data[c].trackingImageList = u;
      }
      const l = await this.compileTrack({ progressCallback: e, targetImages: r, basePercent: 50 });
      for (let c = 0; c < r.length; c++)
        this.data[c].trackingData = l[c];
      s(this.data);
    });
  }
  // not exporting imageList because too large. rebuild this using targetImage
  exportData() {
    const t = [];
    for (let s = 0; s < this.data.length; s++)
      t.push({
        //targetImage: this.data[i].targetImage,
        targetImage: {
          width: this.data[s].targetImage.width,
          height: this.data[s].targetImage.height
        },
        trackingData: this.data[s].trackingData,
        matchingData: this.data[s].matchingData
      });
    return Wl.encode({
      v: Og,
      dataList: t
    });
  }
  importData(t) {
    const e = Wl.decode(new Uint8Array(t));
    if (!e.v || e.v !== Og)
      return console.error("Your compiled .mind might be outdated. Please recompile"), [];
    const { dataList: s } = e;
    this.data = [];
    for (let o = 0; o < s.length; o++)
      this.data.push({
        targetImage: s[o].targetImage,
        trackingData: s[o].trackingData,
        matchingData: s[o].matchingData
      });
    return this.data;
  }
  createProcessCanvas(t) {
    console.warn("missing createProcessCanvas implementation");
  }
  compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
    console.warn("missing compileTrack implementation");
  }
}
const n4 = async (n, t) => {
  const e = [];
  for (let s = 0; s < n.length; s++) {
    const o = n[s], r = new mw(o.width, o.height);
    await Qc(), X(() => {
      const i = _e(o.data, [o.data.length], "float32").reshape([o.height, o.width]), { featurePoints: a } = r.detect(i), l = a.filter((d) => d.maxima), c = a.filter((d) => !d.maxima), u = Xg({ points: l }), h = Xg({ points: c });
      e.push({
        maximaPoints: l,
        minimaPoints: c,
        maximaPointsCluster: u,
        minimaPointsCluster: h,
        width: o.width,
        height: o.height,
        scale: o.scale
      }), t(s);
    });
  }
  return e;
}, xw = "KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2NsYXNzIHp7Y29uc3RydWN0b3Iocyx0LG8pe3RoaXMuY3Vtc3VtPVtdO2ZvcihsZXQgZT0wO2U8bztlKyspe3RoaXMuY3Vtc3VtLnB1c2goW10pO2ZvcihsZXQgbj0wO248dDtuKyspdGhpcy5jdW1zdW1bZV0ucHVzaCgwKX10aGlzLmN1bXN1bVswXVswXT1zWzBdO2ZvcihsZXQgZT0xO2U8dDtlKyspdGhpcy5jdW1zdW1bMF1bZV09dGhpcy5jdW1zdW1bMF1bZS0xXStzW2VdO2ZvcihsZXQgZT0xO2U8bztlKyspdGhpcy5jdW1zdW1bZV1bMF09dGhpcy5jdW1zdW1bZS0xXVswXStzW2UqdF07Zm9yKGxldCBlPTE7ZTxvO2UrKylmb3IobGV0IG49MTtuPHQ7bisrKXRoaXMuY3Vtc3VtW2VdW25dPXNbZSp0K25dK3RoaXMuY3Vtc3VtW2UtMV1bbl0rdGhpcy5jdW1zdW1bZV1bbi0xXS10aGlzLmN1bXN1bVtlLTFdW24tMV19cXVlcnkocyx0LG8sZSl7bGV0IG49dGhpcy5jdW1zdW1bZV1bb107cmV0dXJuIHQ+MCYmKG4tPXRoaXMuY3Vtc3VtW3QtMV1bb10pLHM+MCYmKG4tPXRoaXMuY3Vtc3VtW2VdW3MtMV0pLHM+MCYmdD4wJiYobis9dGhpcy5jdW1zdW1bdC0xXVtzLTFdKSxufX1jb25zdCBDPTEwLGI9MixNPTYsRj01LEk9Ljk1LEw9LjksTz0uMixaPTgsTj0yNCoyLzMsVT1yPT57Y29uc3R7ZGF0YTpzLHdpZHRoOnQsaGVpZ2h0Om8sc2NhbGU6ZX09cixuPVt0Km9dO2ZvcihsZXQgaT0wO2k8bi5sZW5ndGg7aSsrKW5baV09ITE7Y29uc3QgYT1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWFbaV09LTEsYVt0KihvLTEpK2ldPS0xO2ZvcihsZXQgaT0wO2k8bztpKyspYVtpKnRdPS0xLGFbaSp0K3QtMV09LTE7Zm9yKGxldCBpPTE7aTx0LTE7aSsrKWZvcihsZXQgcD0xO3A8by0xO3ArKyl7bGV0IGY9aSt0KnAsaD0wLGM9MDtmb3IobGV0IHU9LTE7dTw9MTt1KyspaCs9c1tmK3QqdSsxXS1zW2YrdCp1LTFdLGMrPXNbZit0K3VdLXNbZi10K3VdO2gvPTMqMjU2LGMvPTMqMjU2LGFbZl09TWF0aC5zcXJ0KChoKmgrYypjKS8yKX1jb25zdCBnPW5ldyBVaW50MzJBcnJheSgxZTMpO2ZvcihsZXQgaT0wO2k8MWUzO2krKylnW2ldPTA7Y29uc3QgZD1bLTEsMSwtdCx0XTtmb3IobGV0IGk9MTtpPHQtMTtpKyspZm9yKGxldCBwPTE7cDxvLTE7cCsrKXtsZXQgZj1pK3QqcCxoPSEwO2ZvcihsZXQgYz0wO2M8ZC5sZW5ndGg7YysrKWlmKGFbZl08PWFbZitkW2NdXSl7aD0hMTticmVha31pZihoKXtsZXQgYz1NYXRoLmZsb29yKGFbZl0qMWUzKTtjPjk5OSYmKGM9OTk5KSxjPDAmJihjPTApLGdbY10rPTEsbltmXT0hMH19Y29uc3Qgdz0uMDIqdCpvO2xldCBqPTk5OSxFPTA7Zm9yKDtqPj0wJiYoRSs9Z1tqXSwhKEU+dykpOylqLS07Zm9yKGxldCBpPTA7aTxuLmxlbmd0aDtpKyspbltpXSYmYVtpXSoxZTM8aiYmKG5baV09ITEpO2NvbnN0IGw9W107Zm9yKGxldCBpPTA7aTxzLmxlbmd0aDtpKyspbFtpXT1zW2ldKnNbaV07Y29uc3QgUz1uZXcgeihzLHQsbyksRD1uZXcgeihsLHQsbyksaz1uZXcgRmxvYXQzMkFycmF5KHMubGVuZ3RoKTtmb3IobGV0IGk9MDtpPHQ7aSsrKWZvcihsZXQgcD0wO3A8bztwKyspe2NvbnN0IGY9cCp0K2k7aWYoIW5bZl0pe2tbZl09MTtjb250aW51ZX1jb25zdCBoPVAoe2ltYWdlOnIsY3g6aSxjeTpwLHNkVGhyZXNoOkYsaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KTtpZihoPT09bnVsbCl7a1tmXT0xO2NvbnRpbnVlfWxldCBjPS0xO2ZvcihsZXQgdT0tQzt1PD1DO3UrKyl7Zm9yKGxldCBtPS1DO208PUM7bSsrKXtpZihtKm0rdSp1PD1iKmIpY29udGludWU7Y29uc3QgeD1SKHtpbWFnZTpyLGN4OmkrbSxjeTpwK3UsdmxlbjpoLHR4OmksdHk6cCxpbWFnZURhdGFDdW1zdW06UyxpbWFnZURhdGFTcXJDdW1zdW06RH0pO2lmKHghPT1udWxsJiZ4PmMmJihjPXgsYz5JKSlicmVha31pZihjPkkpYnJlYWt9a1tmXT1jfXJldHVybiBWKHtpbWFnZTpyLGZlYXR1cmVNYXA6ayx0ZW1wbGF0ZVNpemU6TSxzZWFyY2hTaXplOmIsb2NjU2l6ZTpOLG1heFNpbVRocmVzaDpMLG1pblNpbVRocmVzaDpPLHNkVGhyZXNoOlosaW1hZ2VEYXRhQ3Vtc3VtOlMsaW1hZ2VEYXRhU3FyQ3Vtc3VtOkR9KX0sVj1yPT57bGV0e2ltYWdlOnMsZmVhdHVyZU1hcDp0LHRlbXBsYXRlU2l6ZTpvLHNlYXJjaFNpemU6ZSxvY2NTaXplOm4sbWF4U2ltVGhyZXNoOmEsbWluU2ltVGhyZXNoOmcsc2RUaHJlc2g6ZCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an09cjtjb25zdHtkYXRhOkUsd2lkdGg6bCxoZWlnaHQ6UyxzY2FsZTpEfT1zO249TWF0aC5mbG9vcihNYXRoLm1pbihzLndpZHRoLHMuaGVpZ2h0KS8xMCk7Y29uc3Qgaz0obyoyKzEpKjMsQT1NYXRoLmZsb29yKGwvayksaT1NYXRoLmZsb29yKFMvayk7bGV0IHA9TWF0aC5mbG9vcihsL24pKk1hdGguZmxvb3IoUy9uKStBKmk7Y29uc3QgZj1bXSxoPW5ldyBGbG9hdDMyQXJyYXkoRS5sZW5ndGgpO2ZvcihsZXQgdT0wO3U8aC5sZW5ndGg7dSsrKWhbdV09dFt1XTtsZXQgYz0wO2Zvcig7YzxwOyl7bGV0IHU9YSxtPS0xLHg9LTE7Zm9yKGxldCB5PTA7eTxTO3krKylmb3IobGV0IFQ9MDtUPGw7VCsrKWhbeSpsK1RdPHUmJih1PWhbeSpsK1RdLG09VCx4PXkpO2lmKG09PT0tMSlicmVhaztjb25zdCB2PVAoe2ltYWdlOnMsY3g6bSxjeTp4LHNkVGhyZXNoOjAsaW1hZ2VEYXRhQ3Vtc3VtOncsaW1hZ2VEYXRhU3FyQ3Vtc3VtOmp9KTtpZih2PT09bnVsbCl7aFt4KmwrbV09MTtjb250aW51ZX1pZih2LyhvKjIrMSk8ZCl7aFt4KmwrbV09MTtjb250aW51ZX1sZXQgcT0xLF89LTE7Zm9yKGxldCB5PS1lO3k8PWU7eSsrKXtmb3IobGV0IFQ9LWU7VDw9ZTtUKyspe2lmKFQqVCt5Knk+ZSplfHxUPT09MCYmeT09PTApY29udGludWU7Y29uc3QgSD1SKHtpbWFnZTpzLHZsZW46dixjeDptK1QsY3k6eCt5LHR4Om0sdHk6eCxpbWFnZURhdGFDdW1zdW06dyxpbWFnZURhdGFTcXJDdW1zdW06an0pO2lmKEghPT1udWxsJiYoSDxxJiYocT1ILHE8ZyYmcTx1KXx8SD5fJiYoXz1ILF8+Ljk5KSkpYnJlYWt9aWYocTxnJiZxPHV8fF8+Ljk5KWJyZWFrfWlmKHE8ZyYmcTx1fHxfPi45OSl7aFt4KmwrbV09MTtjb250aW51ZX1mLnB1c2goe3g6bSx5Onh9KSxjKz0xO2ZvcihsZXQgeT0tbjt5PD1uO3krKylmb3IobGV0IFQ9LW47VDw9bjtUKyspeCt5PDB8fHgreT49U3x8bStUPDB8fG0rVD49bHx8KGhbKHgreSkqbCsobStUKV09MSl9cmV0dXJuIGZ9LFA9KHtpbWFnZTpyLGN4OnMsY3k6dCxzZFRocmVzaDpvLGltYWdlRGF0YUN1bXN1bTplLGltYWdlRGF0YVNxckN1bXN1bTpufSk9PntpZihzLU08MHx8cytNPj1yLndpZHRofHx0LU08MHx8dCtNPj1yLmhlaWdodClyZXR1cm4gbnVsbDtjb25zdCBhPTIqTSsxLGc9YSphO2xldCBkPWUucXVlcnkocy1NLHQtTSxzK00sdCtNKTtkLz1nO2xldCB3PW4ucXVlcnkocy1NLHQtTSxzK00sdCtNKTtyZXR1cm4gdy09MipkKmUucXVlcnkocy1NLHQtTSxzK00sdCtNKSx3Kz1nKmQqZCx3L2c8bypvP251bGw6KHc9TWF0aC5zcXJ0KHcpLHcpfSxSPXI9Pntjb25zdHtpbWFnZTpzLGN4OnQsY3k6byx2bGVuOmUsdHg6bix0eTphLGltYWdlRGF0YUN1bXN1bTpnLGltYWdlRGF0YVNxckN1bXN1bTpkfT1yLHtkYXRhOncsd2lkdGg6aixoZWlnaHQ6RX09cyxsPU07aWYodC1sPDB8fHQrbD49anx8by1sPDB8fG8rbD49RSlyZXR1cm4gbnVsbDtjb25zdCBTPTIqbCsxO2xldCBEPWcucXVlcnkodC1sLG8tbCx0K2wsbytsKSxrPWQucXVlcnkodC1sLG8tbCx0K2wsbytsKSxBPTAsaT0oby1sKSpqKyh0LWwpLHA9KGEtbCkqaisobi1sKSxmPWotUztmb3IobGV0IG09MDttPFM7bSsrKXtmb3IobGV0IHg9MDt4PFM7eCsrKUErPXdbaV0qd1twXSxpKz0xLHArPTE7aSs9ZixwKz1mfWxldCBoPWcucXVlcnkobi1sLGEtbCxuK2wsYStsKTtoLz1TKlMsQS09aCpEO2xldCBjPWstRCpELyhTKlMpO3JldHVybiBjPT0wP251bGw6KGM9TWF0aC5zcXJ0KGMpLDEqQS8oZSpjKSl9LFc9KHIscyk9Pntjb25zdCB0PVtdO2ZvcihsZXQgbz0wO288ci5sZW5ndGg7bysrKXtjb25zdCBlPXJbb10sbj1VKGUpLGE9e2RhdGE6ZS5kYXRhLHNjYWxlOmUuc2NhbGUsd2lkdGg6ZS53aWR0aCxoZWlnaHQ6ZS5oZWlnaHQscG9pbnRzOm59O3QucHVzaChhKSxzKG8pfXJldHVybiB0fSxYPSh7aW1hZ2U6cixyYXRpbzpzfSk9Pntjb25zdCB0PU1hdGgucm91bmQoci53aWR0aCpzKSxvPU1hdGgucm91bmQoci5oZWlnaHQqcyksZT1uZXcgVWludDhBcnJheSh0Km8pO2ZvcihsZXQgbj0wO248dDtuKyspe2xldCBhPU1hdGgucm91bmQoMSpuL3MpLGc9TWF0aC5yb3VuZCgxKihuKzEpL3MpLTE7Zz49ci53aWR0aCYmKGc9ci53aWR0aC0xKTtmb3IobGV0IGQ9MDtkPG87ZCsrKXtsZXQgdz1NYXRoLnJvdW5kKDEqZC9zKSxqPU1hdGgucm91bmQoMSooZCsxKS9zKS0xO2o+PXIuaGVpZ2h0JiYoaj1yLmhlaWdodC0xKTtsZXQgRT0wLGw9MDtmb3IobGV0IFM9YTtTPD1nO1MrKylmb3IobGV0IEQ9dztEPD1qO0QrKylFKz0xKnIuZGF0YVtEKnIud2lkdGgrU10sbCs9MTtlW2QqdCtuXT1NYXRoLmZsb29yKEUvbCl9fXJldHVybntkYXRhOmUsd2lkdGg6dCxoZWlnaHQ6b319LFk9cj0+e2NvbnN0IHM9TWF0aC5taW4oci53aWR0aCxyLmhlaWdodCksdD1bXSxvPVtdO3QucHVzaCgyNTYvcyksdC5wdXNoKDEyOC9zKTtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKylvLnB1c2goT2JqZWN0LmFzc2lnbihYKHtpbWFnZTpyLHJhdGlvOnRbZV19KSx7c2NhbGU6dFtlXX0pKTtyZXR1cm4gb307b25tZXNzYWdlPXI9Pntjb25zdHtkYXRhOnN9PXI7aWYocy50eXBlPT09ImNvbXBpbGUiKXtjb25zdHt0YXJnZXRJbWFnZXM6dH09cyxvPTEwMC90Lmxlbmd0aDtsZXQgZT0wO2NvbnN0IG49W107Zm9yKGxldCBhPTA7YTx0Lmxlbmd0aDthKyspe2NvbnN0IGc9dFthXSxkPVkoZyksdz1vL2QubGVuZ3RoLGo9VyhkLEU9PntlKz13LHBvc3RNZXNzYWdlKHt0eXBlOiJwcm9ncmVzcyIscGVyY2VudDplfSl9KTtuLnB1c2goail9cG9zdE1lc3NhZ2Uoe3R5cGU6ImNvbXBpbGVEb25lIixsaXN0Om59KX19fSkoKTsK", Ag = typeof window < "u" && window.Blob && new Blob([atob(xw)], { type: "text/javascript;charset=utf-8" });
function s4() {
  const n = Ag && (window.URL || window.webkitURL).createObjectURL(Ag);
  try {
    return n ? new Worker(n) : new Worker("data:application/javascript;base64," + xw);
  } finally {
    n && (window.URL || window.webkitURL).revokeObjectURL(n);
  }
}
class o4 extends e4 {
  createProcessCanvas(t) {
    const e = document.createElement("canvas");
    return e.width = t.width, e.height = t.height, e;
  }
  compileTrack({ progressCallback: t, targetImages: e, basePercent: s }) {
    return new Promise((o, r) => {
      const i = new s4();
      i.onmessage = (a) => {
        a.data.type === "progress" ? t(s + a.data.percent * s / 100) : a.data.type === "compileDone" && o(a.data.list);
      }, i.postMessage({ type: "compile", targetImages: e });
    });
  }
}
class r4 {
  constructor(t, e) {
    this.width = t, this.height = e, this.texShape = [e, t];
    const s = document.createElement("canvas").getContext("2d");
    s.canvas.width = t, s.canvas.height = e, this.context = s, this.program = this.buildProgram(t, e);
    const o = Vs();
    this.tempPixelHandle = o.makeTensorInfo(this.texShape, "float32"), o.texData.get(this.tempPixelHandle.dataId).usage = 2;
  }
  // old method
  _loadInput(t) {
    return X(() => {
      let e = zb(t);
      return e = e.mean(2), e;
    });
  }
  // input is instance of HTMLVideoElement or HTMLImageElement
  loadInput(t) {
    this.context.drawImage(t, 0, 0, this.width, this.height);
    const e = Vs();
    return e.gpgpu.uploadPixelDataToTexture(e.getTexture(this.tempPixelHandle.dataId), this.context.canvas), this._compileAndRun(this.program, [this.tempPixelHandle]);
  }
  buildProgram(t, e) {
    const s = B().getNumber("WEBGL_VERSION") === 2 ? "texture" : "texture2D";
    return {
      variableNames: ["A"],
      outputShape: this.texShape,
      userCode: `
	void main() {
	  ivec2 coords = getOutputCoords();
	  int texR = coords[0];
	  int texC = coords[1];
	  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);

	  vec4 values = ${s}(A, uv);
	  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);
	}
      `
    };
  }
  _compileAndRun(t, e) {
    const s = Vs().compileAndRun(t, e);
    return le().makeTensorFromDataId(s.dataId, s.shape, s.dtype);
  }
  _runWebGLProgram(t, e, s) {
    const o = Vs().runWebGLProgram(t, e, s);
    return le().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
  }
}
const Uu = { memory: ll, nextFrame: Qc }, i4 = 1e-3, a4 = 1e3, l4 = 5, c4 = 5;
class gY {
  constructor({
    inputWidth: t,
    inputHeight: e,
    onUpdate: s = null,
    debugMode: o = !1,
    maxTrack: r = 1,
    warmupTolerance: i = null,
    missTolerance: a = null,
    filterMinCF: l = null,
    filterBeta: c = null
  }) {
    this.inputWidth = t, this.inputHeight = e, this.maxTrack = r, this.filterMinCF = l === null ? i4 : l, this.filterBeta = c === null ? a4 : c, this.warmupTolerance = i === null ? l4 : i, this.missTolerance = a === null ? c4 : a, this.cropDetector = new Z5(this.inputWidth, this.inputHeight, o), this.inputLoader = new r4(this.inputWidth, this.inputHeight), this.markerDimensions = null, this.onUpdate = s, this.debugMode = o, this.processingVideo = !1, this.interestedTargetIndex = -1, this.trackingStates = [];
    const u = 10, h = 1e5, d = 45 * Math.PI / 180, p = this.inputHeight / 2 / Math.tan(d / 2);
    this.projectionTransform = [
      [p, 0, this.inputWidth / 2],
      [0, p, this.inputHeight / 2],
      [0, 0, 1]
    ], this.projectionMatrix = this._glProjectionMatrix({
      projectionTransform: this.projectionTransform,
      width: this.inputWidth,
      height: this.inputHeight,
      near: u,
      far: h
    }), this.worker = new HU(), this.workerMatchDone = null, this.workerTrackDone = null, this.worker.onmessage = (f) => {
      f.data.type === "matchDone" && this.workerMatchDone !== null && this.workerMatchDone(f.data), f.data.type === "trackUpdateDone" && this.workerTrackDone !== null && this.workerTrackDone(f.data);
    };
  }
  showTFStats() {
    console.log(Uu.memory().numTensors), console.table(Uu.memory());
  }
  addImageTargets(t) {
    return new Promise(async (e, s) => {
      const r = await (await fetch(t)).arrayBuffer(), i = this.addImageTargetsFromBuffer(r);
      e(i);
    });
  }
  addImageTargetsFromBuffer(t) {
    const s = new o4().importData(t), o = [], r = [], i = [];
    for (let a = 0; a < s.length; a++)
      r.push(s[a].matchingData), o.push(s[a].trackingData), i.push([s[a].targetImage.width, s[a].targetImage.height]);
    return this.tracker = new n5(i, o, this.projectionTransform, this.inputWidth, this.inputHeight, this.debugMode), this.worker.postMessage({
      type: "setup",
      inputWidth: this.inputWidth,
      inputHeight: this.inputHeight,
      projectionTransform: this.projectionTransform,
      debugMode: this.debugMode,
      matchingDataList: r
    }), this.markerDimensions = i, { dimensions: i, matchingDataList: r, trackingDataList: o };
  }
  dispose() {
    this.stopProcessVideo(), this.worker.postMessage({
      type: "dispose"
    });
  }
  // warm up gpu - build kernels is slow
  dummyRun(t) {
    const e = this.inputLoader.loadInput(t);
    this.cropDetector.detect(e), this.tracker.dummyRun(e), e.dispose();
  }
  getProjectionMatrix() {
    return this.projectionMatrix;
  }
  getWorldMatrix(t, e) {
    return this._glModelViewMatrix(t, e);
  }
  async _detectAndMatch(t, e) {
    const { featurePoints: s } = this.cropDetector.detectMoving(t), { targetIndex: o, modelViewTransform: r } = await this._workerMatch(s, e);
    return { targetIndex: o, modelViewTransform: r };
  }
  async _trackAndUpdate(t, e, s) {
    const { worldCoords: o, screenCoords: r } = this.tracker.track(t, e, s);
    return o.length < 4 ? null : await this._workerTrackUpdate(e, { worldCoords: o, screenCoords: r });
  }
  processVideo(t) {
    if (this.processingVideo)
      return;
    this.processingVideo = !0, this.trackingStates = [];
    for (let s = 0; s < this.markerDimensions.length; s++)
      this.trackingStates.push({
        showing: !1,
        isTracking: !1,
        currentModelViewTransform: null,
        trackCount: 0,
        trackMiss: 0,
        filter: new ww({ minCutOff: this.filterMinCF, beta: this.filterBeta })
      });
    (async () => {
      for (; this.processingVideo; ) {
        const s = this.inputLoader.loadInput(t);
        if (this.trackingStates.reduce((r, i) => r + (i.isTracking ? 1 : 0), 0) < this.maxTrack) {
          const r = [];
          for (let l = 0; l < this.trackingStates.length; l++)
            this.trackingStates[l].isTracking !== !0 && (this.interestedTargetIndex !== -1 && this.interestedTargetIndex !== l || r.push(l));
          const { targetIndex: i, modelViewTransform: a } = await this._detectAndMatch(s, r);
          i !== -1 && (this.trackingStates[i].isTracking = !0, this.trackingStates[i].currentModelViewTransform = a);
        }
        for (let r = 0; r < this.trackingStates.length; r++) {
          const i = this.trackingStates[r];
          if (i.isTracking) {
            let a = await this._trackAndUpdate(s, i.currentModelViewTransform, r);
            a === null ? i.isTracking = !1 : i.currentModelViewTransform = a;
          }
          if (i.showing || i.isTracking && (i.trackMiss = 0, i.trackCount += 1, i.trackCount > this.warmupTolerance && (i.showing = !0, i.trackingMatrix = null, i.filter.reset())), i.showing && (i.isTracking ? i.trackMiss = 0 : (i.trackCount = 0, i.trackMiss += 1, i.trackMiss > this.missTolerance && (i.showing = !1, i.trackingMatrix = null, this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: r, worldMatrix: null })))), i.showing) {
            const a = this._glModelViewMatrix(i.currentModelViewTransform, r);
            i.trackingMatrix = i.filter.filter(Date.now(), a);
            const l = [];
            for (let c = 0; c < i.trackingMatrix.length; c++)
              l[c] = i.trackingMatrix[c];
            this.onUpdate && this.onUpdate({ type: "updateMatrix", targetIndex: r, worldMatrix: l });
          }
        }
        s.dispose(), this.onUpdate && this.onUpdate({ type: "processDone" }), await Uu.nextFrame();
      }
    })();
  }
  stopProcessVideo() {
    this.processingVideo = !1;
  }
  async detect(t) {
    const e = this.inputLoader.loadInput(t), { featurePoints: s, debugExtra: o } = await this.cropDetector.detect(e);
    return e.dispose(), { featurePoints: s, debugExtra: o };
  }
  async match(t, e) {
    const { modelViewTransform: s, debugExtra: o } = await this._workerMatch(t, [e]);
    return { modelViewTransform: s, debugExtra: o };
  }
  async track(t, e, s) {
    const o = this.inputLoader.loadInput(t), r = this.tracker.track(o, e, s);
    return o.dispose(), r;
  }
  async trackUpdate(t, e) {
    return e.worldCoords.length < 4 ? null : await this._workerTrackUpdate(t, e);
  }
  _workerMatch(t, e) {
    return new Promise(async (s, o) => {
      this.workerMatchDone = (r) => {
        s({ targetIndex: r.targetIndex, modelViewTransform: r.modelViewTransform, debugExtra: r.debugExtra });
      }, this.worker.postMessage({ type: "match", featurePoints: t, targetIndexes: e });
    });
  }
  _workerTrackUpdate(t, e) {
    return new Promise(async (s, o) => {
      this.workerTrackDone = (a) => {
        s(a.modelViewTransform);
      };
      const { worldCoords: r, screenCoords: i } = e;
      this.worker.postMessage({ type: "trackUpdate", modelViewTransform: t, worldCoords: r, screenCoords: i });
    });
  }
  _glModelViewMatrix(t, e) {
    const s = this.markerDimensions[e][1];
    return [
      t[0][0],
      -t[1][0],
      -t[2][0],
      0,
      -t[0][1],
      t[1][1],
      t[2][1],
      0,
      -t[0][2],
      t[1][2],
      t[2][2],
      0,
      t[0][1] * s + t[0][3],
      -(t[1][1] * s + t[1][3]),
      -(t[2][1] * s + t[2][3]),
      1
    ];
  }
  // build openGL projection matrix
  // ref: https://strawlab.org/2011/11/05/augmented-reality-with-OpenGL/
  _glProjectionMatrix({ projectionTransform: t, width: e, height: s, near: o, far: r }) {
    const i = [
      [2 * t[0][0] / e, 0, -(2 * t[0][2] / e - 1), 0],
      [0, 2 * t[1][1] / s, -(2 * t[1][2] / s - 1), 0],
      [0, 0, -(r + o) / (r - o), -2 * r * o / (r - o)],
      [0, 0, -1, 0]
    ], a = [];
    for (let l = 0; l < 4; l++)
      for (let c = 0; c < 4; c++)
        a.push(i[c][l]);
    return a;
  }
}
export {
  H as $,
  S as A,
  Mb as B,
  gY as C,
  ht as D,
  zt as E,
  Kt as F,
  W as G,
  ra as H,
  ge as I,
  At as J,
  Zn as K,
  vo as L,
  br as M,
  An as N,
  jh as O,
  Ze as P,
  ot as Q,
  Qt as R,
  D as S,
  Ir as T,
  sp as U,
  Jg as V,
  qg as W,
  tb as X,
  eb as Y,
  sb as Z,
  P as _,
  o4 as a,
  Tf as a$,
  cb as a0,
  ob as a1,
  _t as a2,
  eo as a3,
  Hd as a4,
  rb as a5,
  mp as a6,
  ib as a7,
  ab as a8,
  Q4 as a9,
  Xe as aA,
  xe as aB,
  Rt as aC,
  Go as aD,
  hb as aE,
  $o as aF,
  kp as aG,
  yk as aH,
  bk as aI,
  Tp as aJ,
  mk as aK,
  Cm as aL,
  Rp as aM,
  Gp as aN,
  Lp as aO,
  q0 as aP,
  tx as aQ,
  ex as aR,
  nx as aS,
  B0 as aT,
  kf as aU,
  H0 as aV,
  _0 as aW,
  U0 as aX,
  Y0 as aY,
  j0 as aZ,
  mn as a_,
  Nt as aa,
  CS as ab,
  Lo as ac,
  Fe as ad,
  Dl as ae,
  ia as af,
  y0 as ag,
  Qe as ah,
  ua as ai,
  cp as aj,
  oI as ak,
  $t as al,
  wt as am,
  St as an,
  ar as ao,
  Vb as ap,
  lb as aq,
  ub as ar,
  nb as as,
  he as at,
  _e as au,
  $p as av,
  ap as aw,
  Np as ax,
  Ke as ay,
  an as az,
  I4 as b,
  Zf as b$,
  Nf as b0,
  $f as b1,
  Rf as b2,
  Gf as b3,
  Lf as b4,
  Q0 as b5,
  nr as b6,
  si as b7,
  rY as b8,
  LR as b9,
  cy as bA,
  hy as bB,
  fy as bC,
  dy as bD,
  py as bE,
  uy as bF,
  my as bG,
  yy as bH,
  wy as bI,
  Iy as bJ,
  ky as bK,
  $y as bL,
  Ly as bM,
  Wy as bN,
  Fy as bO,
  My as bP,
  zy as bQ,
  Sy as bR,
  Ny as bS,
  Gy as bT,
  jx as bU,
  Of as bV,
  Qx as bW,
  uu as bX,
  Yx as bY,
  Xf as bZ,
  qx as b_,
  Wn as ba,
  wa as bb,
  Fx as bc,
  Wx as bd,
  Mx as be,
  Dx as bf,
  Vx as bg,
  zx as bh,
  lu as bi,
  Ca as bj,
  Xx as bk,
  va as bl,
  Ox as bm,
  Zx as bn,
  Kx as bo,
  Bx as bp,
  Hx as bq,
  sy as br,
  ey as bs,
  Kf as bt,
  ty as bu,
  ny as bv,
  oy as bw,
  ry as bx,
  iy as by,
  ly as bz,
  vb as c,
  jb as c$,
  so as c0,
  Af as c1,
  Xy as c2,
  Py as c3,
  gy as c4,
  by as c5,
  xy as c6,
  ay as c7,
  Oy as c8,
  Vt as c9,
  Ub as cA,
  fh as cB,
  Qr as cC,
  T2 as cD,
  $2 as cE,
  G2 as cF,
  E2 as cG,
  M2 as cH,
  F2 as cI,
  np as cJ,
  K2 as cK,
  Zc as cL,
  q2 as cM,
  eC as cN,
  sC as cO,
  op as cP,
  rC as cQ,
  er as cR,
  lC as cS,
  kn as cT,
  ko as cU,
  hC as cV,
  pC as cW,
  mC as cX,
  bC as cY,
  Yb as cZ,
  Ro as c_,
  cu as ca,
  ax as cb,
  tG as cc,
  eG as cd,
  lx as ce,
  ux as cf,
  qR as cg,
  sY as ch,
  ix as ci,
  Mf as cj,
  Df as ck,
  ou as cl,
  oY as cm,
  iu as cn,
  lY as co,
  cY as cp,
  ti as cq,
  Wt as cr,
  lo as cs,
  On as ct,
  yo as cu,
  qm as cv,
  uI as cw,
  Ee as cx,
  y2 as cy,
  I2 as cz,
  mI as d,
  _n as d$,
  vC as d0,
  TC as d1,
  ip as d2,
  Jb as d3,
  w0 as d4,
  gh as d5,
  qb as d6,
  EC as d7,
  DC as d8,
  XC as d9,
  s0 as dA,
  vr as dB,
  BT as dC,
  Iv as dD,
  Hn as dE,
  hp as dF,
  Nv as dG,
  o0 as dH,
  r0 as dI,
  bs as dJ,
  dp as dK,
  i0 as dL,
  Dv as dM,
  tY as dN,
  fs as dO,
  pp as dP,
  Vv as dQ,
  to as dR,
  ye as dS,
  bh as dT,
  Uc as dU,
  Zv as dV,
  Bv as dW,
  fp as dX,
  fe as dY,
  Bc as dZ,
  Jr as d_,
  AC as da,
  hk as db,
  Kc as dc,
  dk as dd,
  Kn as de,
  BC as df,
  tv as dg,
  Bn as dh,
  Mn as di,
  ov as dj,
  n0 as dk,
  Cp as dl,
  la as dm,
  Hc as dn,
  _b as dp,
  Tn as dq,
  Cr as dr,
  pl as ds,
  jd as dt,
  Ma as du,
  m0 as dv,
  dv as dw,
  fv as dx,
  gv as dy,
  up as dz,
  B as e,
  px as e$,
  tS as e0,
  bp as e1,
  OI as e2,
  sS as e3,
  Yc as e4,
  hl as e5,
  cl as e6,
  kS as e7,
  Ms as e8,
  a0 as e9,
  yt as eA,
  tk as eB,
  dn as eC,
  Qa as eD,
  e2 as eE,
  es as eF,
  nk as eG,
  b0 as eH,
  rk as eI,
  x0 as eJ,
  lr as eK,
  lk as eL,
  sn as eM,
  Me as eN,
  Pt as eO,
  vn as eP,
  X as eQ,
  zl as eR,
  Bf as eS,
  on as eT,
  zb as eU,
  cL as eV,
  _w as eW,
  QG as eX,
  En as eY,
  pY as eZ,
  fY as e_,
  vp as ea,
  l0 as eb,
  c0 as ec,
  u0 as ed,
  h0 as ee,
  MS as ef,
  q4 as eg,
  d0 as eh,
  p0 as ei,
  yp as ej,
  f0 as ek,
  wp as el,
  dl as em,
  Ip as en,
  ca as eo,
  gp as ep,
  eY as eq,
  J4 as er,
  Sn as es,
  Ye as et,
  ee as eu,
  g0 as ev,
  Ns as ew,
  ha as ex,
  JS as ey,
  nY as ez,
  Ud as f,
  fd as f$,
  Vl as f0,
  ci as f1,
  ui as f2,
  Wp as f3,
  Mp as f4,
  Dp as f5,
  Fp as f6,
  yr as f7,
  Qh as f8,
  Jh as f9,
  od as fA,
  rd as fB,
  yi as fC,
  wi as fD,
  ad as fE,
  id as fF,
  jl as fG,
  AR as fH,
  Zg as fI,
  ld as fJ,
  Ql as fK,
  cd as fL,
  ud as fM,
  Jl as fN,
  Qu as fO,
  ju as fP,
  jg as fQ,
  Ci as fR,
  hd as fS,
  Gw as fT,
  ql as fU,
  vi as fV,
  Si as fW,
  tc as fX,
  ki as fY,
  dd as fZ,
  pd as f_,
  Pl as fa,
  Xl as fb,
  hi as fc,
  di as fd,
  pi as fe,
  mi as ff,
  fi as fg,
  Ol as fh,
  Al as fi,
  td as fj,
  qh as fk,
  Zl as fl,
  Kl as fm,
  ed as fn,
  Fw as fo,
  PR as fp,
  gi as fq,
  bi as fr,
  xi as fs,
  nd as ft,
  Bl as fu,
  Hl as fv,
  _l as fw,
  sd as fx,
  Ul as fy,
  Yl as fz,
  bI as g,
  Ii as g$,
  Ti as g0,
  Ni as g1,
  Ju as g2,
  ec as g3,
  ol as g4,
  nc as g5,
  sc as g6,
  $i as g7,
  OR as g8,
  md as g9,
  Di as gA,
  fc as gB,
  mc as gC,
  Fi as gD,
  gc as gE,
  zi as gF,
  zp as gG,
  Vi as gH,
  bc as gI,
  wd as gJ,
  Id as gK,
  Cd as gL,
  xc as gM,
  wc as gN,
  yc as gO,
  no as gP,
  ao as gQ,
  Ic as gR,
  Cc as gS,
  p4 as gT,
  Pi as gU,
  vc as gV,
  Sc as gW,
  Vp as gX,
  vd as gY,
  fm as gZ,
  Sd as g_,
  Ri as ga,
  gd as gb,
  Ne as gc,
  Gi as gd,
  Li as ge,
  Ei as gf,
  Zh as gg,
  uc as gh,
  bd as gi,
  kR as gj,
  oc as gk,
  rc as gl,
  ic as gm,
  Wi as gn,
  Mi as go,
  zw as gp,
  ac as gq,
  lc as gr,
  cc as gs,
  h4 as gt,
  d4 as gu,
  hc as gv,
  dc as gw,
  pc as gx,
  yd as gy,
  xd as gz,
  UI as h,
  R4 as h$,
  Xi as h0,
  en as h1,
  Oi as h2,
  Ai as h3,
  kc as h4,
  Nc as h5,
  Td as h6,
  Tc as h7,
  kd as h8,
  $c as h9,
  Dd as hA,
  qi as hB,
  Lc as hC,
  ps as hD,
  ta as hE,
  ea as hF,
  na as hG,
  Fd as hH,
  zd as hI,
  Jo as hJ,
  Vd as hK,
  Dc as hL,
  Fc as hM,
  f4 as hN,
  il as hO,
  zc as hP,
  sl as hQ,
  Vs as hR,
  jT as hS,
  A4 as hT,
  Z4 as hU,
  b4 as hV,
  L4 as hW,
  w4 as hX,
  G4 as hY,
  Et as hZ,
  E4 as h_,
  Pd as ha,
  Zi as hb,
  Ki as hc,
  jc as hd,
  Rc as he,
  Bi as hf,
  Yi as hg,
  Ui as hh,
  Hi as hi,
  _i as hj,
  Gc as hk,
  Mc as hl,
  ji as hm,
  Ec as hn,
  Nd as ho,
  $d as hp,
  Rd as hq,
  Gd as hr,
  Wc as hs,
  Qi as ht,
  Ld as hu,
  Ji as hv,
  sa as hw,
  Ed as hx,
  Wd as hy,
  Md as hz,
  T4 as i,
  $4 as i0,
  le as i1,
  P4 as i2,
  X4 as i3,
  K4 as i4,
  z4 as i5,
  im as i6,
  qu as i7,
  th as i8,
  _4 as i9,
  Sv as iA,
  U4 as ia,
  ll as ib,
  Qc as ic,
  W4 as id,
  F4 as ie,
  Db as ig,
  Pw as ih,
  bn as ii,
  V4 as ij,
  B4 as ik,
  H4 as il,
  D4 as im,
  O4 as io,
  d2 as ip,
  Zd as iq,
  y4 as ir,
  M4 as is,
  Ko as it,
  g4 as iu,
  m4 as iv,
  nn as iw,
  x4 as ix,
  Y4 as iy,
  j4 as iz,
  Cb as j,
  bm as k,
  SI as l,
  gI as m,
  vI as n,
  xI as o,
  Wb as p,
  wm as q,
  S4 as r,
  ZI as s,
  N4 as t,
  v4 as u,
  C4 as v,
  k4 as w,
  KI as x,
  V as y,
  N as z
};
